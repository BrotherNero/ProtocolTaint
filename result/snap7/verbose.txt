image: /home/hao/share/protocol-test/protocols/snap7/examples/cpp/x86_64-linux/server
sec: 
sec: .interp
sec: .note.ABI-tag
sec: .note.gnu.build-id
sec: .gnu.hash
sec: .dynsym
sec: .dynstr
sec: .gnu.version
sec: .gnu.version_r
sec: .rela.dyn
sec: .rela.plt
sec: .init
function _init	_init
sec: .plt
function Cli_AsTMRead@plt	Cli_AsTMRead@plt
function Cli_AsDBGet@plt	Cli_AsDBGet@plt
function Par_Stop@plt	Par_Stop@plt
function Par_GetParam@plt	Par_GetParam@plt
function Par_GetStatus@plt	Par_GetStatus@plt
function Par_StartTo@plt	Par_StartTo@plt
function Cli_GetPgBlockInfo@plt	Cli_GetPgBlockInfo@plt
function Srv_EventText@plt	Srv_EventText@plt
function Cli_CheckAsCompletion@plt	Cli_CheckAsCompletion@plt
function Cli_AsCTWrite@plt	Cli_AsCTWrite@plt
function Cli_AsEBWrite@plt	Cli_AsEBWrite@plt
function Cli_PlcStop@plt	Cli_PlcStop@plt
function Par_GetTimes@plt	Par_GetTimes@plt
function Srv_SetParam@plt	Srv_SetParam@plt
function Cli_AsReadSZL@plt	Cli_AsReadSZL@plt
function Par_AsBSend@plt	Par_AsBSend@plt
function Par_BRecv@plt	Par_BRecv@plt
function Srv_Stop@plt	Srv_Stop@plt
function Cli_WriteMultiVars@plt	Cli_WriteMultiVars@plt
function Par_SetRecvCallback@plt	Par_SetRecvCallback@plt
function Srv_Create@plt	Srv_Create@plt
function Cli_TMRead@plt	Cli_TMRead@plt
function Cli_AsCTRead@plt	Cli_AsCTRead@plt
function Cli_ABRead@plt	Cli_ABRead@plt
function Cli_WriteArea@plt	Cli_WriteArea@plt
function Cli_ReadSZL@plt	Cli_ReadSZL@plt
function Cli_GetCpInfo@plt	Cli_GetCpInfo@plt
function Cli_Destroy@plt	Cli_Destroy@plt
function Cli_GetExecTime@plt	Cli_GetExecTime@plt
function Cli_AsFullUpload@plt	Cli_AsFullUpload@plt
function Cli_AsCopyRamToRom@plt	Cli_AsCopyRamToRom@plt
function Srv_SetCpuStatus@plt	Srv_SetCpuStatus@plt
function Cli_MBWrite@plt	Cli_MBWrite@plt
function Cli_ClearSessionPassword@plt	Cli_ClearSessionPassword@plt
function _ZSt19__throw_logic_errorPKc@plt	std::__throw_logic_error(char const*)@plt
function Cli_AsUpload@plt	Cli_AsUpload@plt
function Cli_Disconnect@plt	Cli_Disconnect@plt
function Cli_Delete@plt	Cli_Delete@plt
function Cli_ConnectTo@plt	Cli_ConnectTo@plt
function Cli_ReadArea@plt	Cli_ReadArea@plt
function Cli_AsDownload@plt	Cli_AsDownload@plt
function Cli_CTWrite@plt	Cli_CTWrite@plt
function memcpy@plt	memcpy@plt
function Par_Start@plt	Par_Start@plt
function Cli_Upload@plt	Cli_Upload@plt
function Cli_AsMBWrite@plt	Cli_AsMBWrite@plt
function Srv_GetParam@plt	Srv_GetParam@plt
function Srv_ErrorText@plt	Srv_ErrorText@plt
function Cli_AsABWrite@plt	Cli_AsABWrite@plt
function Cli_GetParam@plt	Cli_GetParam@plt
function Cli_ListBlocksOfType@plt	Cli_ListBlocksOfType@plt
function Cli_DBFill@plt	Cli_DBFill@plt
function Cli_ReadSZLList@plt	Cli_ReadSZLList@plt
function Cli_Create@plt	Cli_Create@plt
function Cli_Connect@plt	Cli_Connect@plt
function Par_CheckAsBSendCompletion@plt	Par_CheckAsBSendCompletion@plt
function _ZdlPv@plt	operator delete(void*)@plt
function Cli_SetPlcDateTime@plt	Cli_SetPlcDateTime@plt
function _Znwm@plt	operator new(unsigned long)@plt
function Cli_SetPlcSystemDateTime@plt	Cli_SetPlcSystemDateTime@plt
function Cli_SetAsCallback@plt	Cli_SetAsCallback@plt
function Par_BSend@plt	Par_BSend@plt
function Cli_ErrorText@plt	Cli_ErrorText@plt
function Cli_EBRead@plt	Cli_EBRead@plt
function __stack_chk_fail@plt	__stack_chk_fail@plt
function Cli_PlcHotStart@plt	Cli_PlcHotStart@plt
function Cli_AsCompress@plt	Cli_AsCompress@plt
function Srv_LockArea@plt	Srv_LockArea@plt
function Cli_AsDBWrite@plt	Cli_AsDBWrite@plt
function Cli_Compress@plt	Cli_Compress@plt
function Cli_AsTMWrite@plt	Cli_AsTMWrite@plt
function Cli_GetLastError@plt	Cli_GetLastError@plt
function _IO_getc@plt	_IO_getc@plt
function Cli_EBWrite@plt	Cli_EBWrite@plt
function Srv_SetEventsCallback@plt	Srv_SetEventsCallback@plt
function Cli_AsReadSZLList@plt	Cli_AsReadSZLList@plt
function Par_GetLastError@plt	Par_GetLastError@plt
function Srv_SetReadEventsCallback@plt	Srv_SetReadEventsCallback@plt
function Cli_GetAgBlockInfo@plt	Cli_GetAgBlockInfo@plt
function Srv_UnlockArea@plt	Srv_UnlockArea@plt
function Cli_Download@plt	Cli_Download@plt
function Cli_GetPduLength@plt	Cli_GetPduLength@plt
function Cli_GetOrderCode@plt	Cli_GetOrderCode@plt
function Cli_AsWriteArea@plt	Cli_AsWriteArea@plt
function Cli_GetPlcDateTime@plt	Cli_GetPlcDateTime@plt
function Cli_SetParam@plt	Cli_SetParam@plt
function Cli_AsDBRead@plt	Cli_AsDBRead@plt
function Cli_CTRead@plt	Cli_CTRead@plt
function Cli_AsListBlocksOfType@plt	Cli_AsListBlocksOfType@plt
function Srv_SetMask@plt	Srv_SetMask@plt
function Cli_DBWrite@plt	Cli_DBWrite@plt
function Srv_UnregisterArea@plt	Srv_UnregisterArea@plt
function Cli_CopyRamToRom@plt	Cli_CopyRamToRom@plt
function Cli_MBRead@plt	Cli_MBRead@plt
function Cli_PlcColdStart@plt	Cli_PlcColdStart@plt
function Par_ErrorText@plt	Par_ErrorText@plt
function puts@plt	puts@plt
function Par_CheckAsBRecvCompletion@plt	Par_CheckAsBRecvCompletion@plt
function Cli_SetSessionPassword@plt	Cli_SetSessionPassword@plt
function Srv_PickEvent@plt	Srv_PickEvent@plt
function Par_WaitAsBSendCompletion@plt	Par_WaitAsBSendCompletion@plt
function Srv_Destroy@plt	Srv_Destroy@plt
function Cli_DBRead@plt	Cli_DBRead@plt
function Cli_GetProtection@plt	Cli_GetProtection@plt
function Cli_GetConnected@plt	Cli_GetConnected@plt
function __gxx_personality_v0@plt	__gxx_personality_v0@plt
function Srv_Start@plt	Srv_Start@plt
function Cli_AsEBRead@plt	Cli_AsEBRead@plt
function Cli_TMWrite@plt	Cli_TMWrite@plt
function Cli_ABWrite@plt	Cli_ABWrite@plt
function Cli_AsMBRead@plt	Cli_AsMBRead@plt
function Cli_AsDBFill@plt	Cli_AsDBFill@plt
function Srv_RegisterArea@plt	Srv_RegisterArea@plt
function Cli_ListBlocks@plt	Cli_ListBlocks@plt
function Cli_GetPlcStatus@plt	Cli_GetPlcStatus@plt
function Srv_GetMask@plt	Srv_GetMask@plt
function Par_Create@plt	Par_Create@plt
function _Unwind_Resume@plt	_Unwind_Resume@plt
function Cli_DBGet@plt	Cli_DBGet@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt
function Cli_SetConnectionType@plt	Cli_SetConnectionType@plt
function Srv_SetRWAreaCallback@plt	Srv_SetRWAreaCallback@plt
function Cli_SetConnectionParams@plt	Cli_SetConnectionParams@plt
function Srv_GetStatus@plt	Srv_GetStatus@plt
function __libc_start_main@plt	__libc_start_main@plt
function Par_SetSendCallback@plt	Par_SetSendCallback@plt
function Par_SetParam@plt	Par_SetParam@plt
function Cli_AsABRead@plt	Cli_AsABRead@plt
function Cli_FullUpload@plt	Cli_FullUpload@plt
function Srv_ClearEvents@plt	Srv_ClearEvents@plt
function Par_Destroy@plt	Par_Destroy@plt
function Par_GetStats@plt	Par_GetStats@plt
function Cli_AsReadArea@plt	Cli_AsReadArea@plt
function Srv_StartTo@plt	Srv_StartTo@plt
function Cli_GetCpuInfo@plt	Cli_GetCpuInfo@plt
function Cli_ReadMultiVars@plt	Cli_ReadMultiVars@plt
function Cli_WaitAsCompletion@plt	Cli_WaitAsCompletion@plt
sec: .plt.got
sec: .text
function _start	_start
function deregister_tm_clones	deregister_tm_clones
function register_tm_clones	register_tm_clones
function __do_global_dtors_aux	__do_global_dtors_aux
function frame_dummy	frame_dummy
function _Z13EventCallBackPvP9TSrvEventi	EventCallBack(void*, TSrvEvent*, int)
function _Z17ReadEventCallBackPvP9TSrvEventi	ReadEventCallBack(void*, TSrvEvent*, int)
function main	main
function _ZN9TS7ClientC2Ev	TS7Client::TS7Client()
function _ZN9TS7ClientD1Ev	TS7Client::~TS7Client()
function _ZN9TS7Client7ConnectEv	TS7Client::Connect()
function _ZN9TS7Client9ConnectToEPKcii	TS7Client::ConnectTo(char const*, int, int)
function _ZN9TS7Client19SetConnectionParamsEPKctt	TS7Client::SetConnectionParams(char const*, unsigned short, unsigned short)
function _ZN9TS7Client17SetConnectionTypeEt	TS7Client::SetConnectionType(unsigned short)
function _ZN9TS7Client10DisconnectEv	TS7Client::Disconnect()
function _ZN9TS7Client8GetParamEiPv	TS7Client::GetParam(int, void*)
function _ZN9TS7Client8SetParamEiPv	TS7Client::SetParam(int, void*)
function _ZN9TS7Client8ReadAreaEiiiiiPv	TS7Client::ReadArea(int, int, int, int, int, void*)
function _ZN9TS7Client9WriteAreaEiiiiiPv	TS7Client::WriteArea(int, int, int, int, int, void*)
function _ZN9TS7Client13ReadMultiVarsEP11TS7DataItemi	TS7Client::ReadMultiVars(TS7DataItem*, int)
function _ZN9TS7Client14WriteMultiVarsEP11TS7DataItemi	TS7Client::WriteMultiVars(TS7DataItem*, int)
function _ZN9TS7Client6DBReadEiiiPv	TS7Client::DBRead(int, int, int, void*)
function _ZN9TS7Client7DBWriteEiiiPv	TS7Client::DBWrite(int, int, int, void*)
function _ZN9TS7Client6MBReadEiiPv	TS7Client::MBRead(int, int, void*)
function _ZN9TS7Client7MBWriteEiiPv	TS7Client::MBWrite(int, int, void*)
function _ZN9TS7Client6EBReadEiiPv	TS7Client::EBRead(int, int, void*)
function _ZN9TS7Client7EBWriteEiiPv	TS7Client::EBWrite(int, int, void*)
function _ZN9TS7Client6ABReadEiiPv	TS7Client::ABRead(int, int, void*)
function _ZN9TS7Client7ABWriteEiiPv	TS7Client::ABWrite(int, int, void*)
function _ZN9TS7Client6TMReadEiiPv	TS7Client::TMRead(int, int, void*)
function _ZN9TS7Client7TMWriteEiiPv	TS7Client::TMWrite(int, int, void*)
function _ZN9TS7Client6CTReadEiiPv	TS7Client::CTRead(int, int, void*)
function _ZN9TS7Client7CTWriteEiiPv	TS7Client::CTWrite(int, int, void*)
function _ZN9TS7Client10ListBlocksEP13TS7BlocksList	TS7Client::ListBlocks(TS7BlocksList*)
function _ZN9TS7Client14GetAgBlockInfoEiiP12TS7BlockInfo	TS7Client::GetAgBlockInfo(int, int, TS7BlockInfo*)
function _ZN9TS7Client14GetPgBlockInfoEPvP12TS7BlockInfoi	TS7Client::GetPgBlockInfo(void*, TS7BlockInfo*, int)
function _ZN9TS7Client16ListBlocksOfTypeEiPA8192_tPi	TS7Client::ListBlocksOfType(int, unsigned short (*) [8192], int*)
function _ZN9TS7Client6UploadEiiPvPi	TS7Client::Upload(int, int, void*, int*)
function _ZN9TS7Client10FullUploadEiiPvPi	TS7Client::FullUpload(int, int, void*, int*)
function _ZN9TS7Client8DownloadEiPvi	TS7Client::Download(int, void*, int)
function _ZN9TS7Client6DeleteEii	TS7Client::Delete(int, int)
function _ZN9TS7Client5DBGetEiPvPi	TS7Client::DBGet(int, void*, int*)
function _ZN9TS7Client6DBFillEii	TS7Client::DBFill(int, int)
function _ZN9TS7Client14GetPlcDateTimeEP2tm	TS7Client::GetPlcDateTime(tm*)
function _ZN9TS7Client14SetPlcDateTimeEP2tm	TS7Client::SetPlcDateTime(tm*)
function _ZN9TS7Client20SetPlcSystemDateTimeEv	TS7Client::SetPlcSystemDateTime()
function _ZN9TS7Client12GetOrderCodeEP12TS7OrderCode	TS7Client::GetOrderCode(TS7OrderCode*)
function _ZN9TS7Client10GetCpuInfoEP10TS7CpuInfo	TS7Client::GetCpuInfo(TS7CpuInfo*)
function _ZN9TS7Client9GetCpInfoEP9TS7CpInfo	TS7Client::GetCpInfo(TS7CpInfo*)
function _ZN9TS7Client7ReadSZLEiiP6TS7SZLPi	TS7Client::ReadSZL(int, int, TS7SZL*, int*)
function _ZN9TS7Client11ReadSZLListEP10TS7SZLListPi	TS7Client::ReadSZLList(TS7SZLList*, int*)
function _ZN9TS7Client11PlcHotStartEv	TS7Client::PlcHotStart()
function _ZN9TS7Client12PlcColdStartEv	TS7Client::PlcColdStart()
function _ZN9TS7Client7PlcStopEv	TS7Client::PlcStop()
function _ZN9TS7Client12CopyRamToRomEi	TS7Client::CopyRamToRom(int)
function _ZN9TS7Client8CompressEi	TS7Client::Compress(int)
function _ZN9TS7Client13GetProtectionEP13TS7Protection	TS7Client::GetProtection(TS7Protection*)
function _ZN9TS7Client18SetSessionPasswordEPc	TS7Client::SetSessionPassword(char*)
function _ZN9TS7Client20ClearSessionPasswordEv	TS7Client::ClearSessionPassword()
function _ZN9TS7Client8ExecTimeEv	TS7Client::ExecTime()
function _ZN9TS7Client9LastErrorEv	TS7Client::LastError()
function _ZN9TS7Client9PDULengthEv	TS7Client::PDULength()
function _ZN9TS7Client12PDURequestedEv	TS7Client::PDURequested()
function _ZN9TS7Client9PlcStatusEv	TS7Client::PlcStatus()
function _ZN9TS7Client9ConnectedEv	TS7Client::Connected()
function _ZN9TS7Client13SetAsCallbackEPFvPviiES0_	TS7Client::SetAsCallback(void (*)(void*, int, int), void*)
function _ZN9TS7Client17CheckAsCompletionEPi	TS7Client::CheckAsCompletion(int*)
function _ZN9TS7Client16WaitAsCompletionEj	TS7Client::WaitAsCompletion(unsigned int)
function _ZN9TS7Client10AsReadAreaEiiiiiPv	TS7Client::AsReadArea(int, int, int, int, int, void*)
function _ZN9TS7Client11AsWriteAreaEiiiiiPv	TS7Client::AsWriteArea(int, int, int, int, int, void*)
function _ZN9TS7Client18AsListBlocksOfTypeEiPA8192_tPi	TS7Client::AsListBlocksOfType(int, unsigned short (*) [8192], int*)
function _ZN9TS7Client9AsReadSZLEiiP6TS7SZLPi	TS7Client::AsReadSZL(int, int, TS7SZL*, int*)
function _ZN9TS7Client13AsReadSZLListEP10TS7SZLListPi	TS7Client::AsReadSZLList(TS7SZLList*, int*)
function _ZN9TS7Client8AsUploadEiiPvPi	TS7Client::AsUpload(int, int, void*, int*)
function _ZN9TS7Client12AsFullUploadEiiPvPi	TS7Client::AsFullUpload(int, int, void*, int*)
function _ZN9TS7Client10AsDownloadEiPvi	TS7Client::AsDownload(int, void*, int)
function _ZN9TS7Client14AsCopyRamToRomEi	TS7Client::AsCopyRamToRom(int)
function _ZN9TS7Client10AsCompressEi	TS7Client::AsCompress(int)
function _ZN9TS7Client8AsDBReadEiiiPv	TS7Client::AsDBRead(int, int, int, void*)
function _ZN9TS7Client9AsDBWriteEiiiPv	TS7Client::AsDBWrite(int, int, int, void*)
function _ZN9TS7Client8AsMBReadEiiPv	TS7Client::AsMBRead(int, int, void*)
function _ZN9TS7Client9AsMBWriteEiiPv	TS7Client::AsMBWrite(int, int, void*)
function _ZN9TS7Client8AsEBReadEiiPv	TS7Client::AsEBRead(int, int, void*)
function _ZN9TS7Client9AsEBWriteEiiPv	TS7Client::AsEBWrite(int, int, void*)
function _ZN9TS7Client8AsABReadEiiPv	TS7Client::AsABRead(int, int, void*)
function _ZN9TS7Client9AsABWriteEiiPv	TS7Client::AsABWrite(int, int, void*)
function _ZN9TS7Client8AsTMReadEiiPv	TS7Client::AsTMRead(int, int, void*)
function _ZN9TS7Client9AsTMWriteEiiPv	TS7Client::AsTMWrite(int, int, void*)
function _ZN9TS7Client8AsCTReadEiiPv	TS7Client::AsCTRead(int, int, void*)
function _ZN9TS7Client9AsCTWriteEiiPv	TS7Client::AsCTWrite(int, int, void*)
function _ZN9TS7Client7AsDBGetEiPvPi	TS7Client::AsDBGet(int, void*, int*)
function _ZN9TS7Client8AsDBFillEii	TS7Client::AsDBFill(int, int)
function _ZN9TS7ServerC2Ev	TS7Server::TS7Server()
function _ZN9TS7ServerD1Ev	TS7Server::~TS7Server()
function _ZN9TS7Server5StartEv	TS7Server::Start()
function _ZN9TS7Server7StartToEPKc	TS7Server::StartTo(char const*)
function _ZN9TS7Server4StopEv	TS7Server::Stop()
function _ZN9TS7Server8GetParamEiPv	TS7Server::GetParam(int, void*)
function _ZN9TS7Server8SetParamEiPv	TS7Server::SetParam(int, void*)
function _ZN9TS7Server17SetEventsCallbackEPFvPvP9TSrvEventiES0_	TS7Server::SetEventsCallback(void (*)(void*, TSrvEvent*, int), void*)
function _ZN9TS7Server21SetReadEventsCallbackEPFvPvP9TSrvEventiES0_	TS7Server::SetReadEventsCallback(void (*)(void*, TSrvEvent*, int), void*)
function _ZN9TS7Server17SetRWAreaCallbackEPFiPviiP6TS7TagS0_ES0_	TS7Server::SetRWAreaCallback(int (*)(void*, int, int, TS7Tag*, void*), void*)
function _ZN9TS7Server9PickEventEP9TSrvEvent	TS7Server::PickEvent(TSrvEvent*)
function _ZN9TS7Server11ClearEventsEv	TS7Server::ClearEvents()
function _ZN9TS7Server13GetEventsMaskEv	TS7Server::GetEventsMask()
function _ZN9TS7Server10GetLogMaskEv	TS7Server::GetLogMask()
function _ZN9TS7Server13SetEventsMaskEj	TS7Server::SetEventsMask(unsigned int)
function _ZN9TS7Server10SetLogMaskEj	TS7Server::SetLogMask(unsigned int)
function _ZN9TS7Server12RegisterAreaEitPvt	TS7Server::RegisterArea(int, unsigned short, void*, unsigned short)
function _ZN9TS7Server14UnregisterAreaEit	TS7Server::UnregisterArea(int, unsigned short)
function _ZN9TS7Server8LockAreaEit	TS7Server::LockArea(int, unsigned short)
function _ZN9TS7Server10UnlockAreaEit	TS7Server::UnlockArea(int, unsigned short)
function _ZN9TS7Server12ServerStatusEv	TS7Server::ServerStatus()
function _ZN9TS7Server12GetCpuStatusEv	TS7Server::GetCpuStatus()
function _ZN9TS7Server12ClientsCountEv	TS7Server::ClientsCount()
function _ZN9TS7Server12SetCpuStatusEi	TS7Server::SetCpuStatus(int)
function _ZN10TS7PartnerC1Eb	TS7Partner::TS7Partner(bool)
function _ZN10TS7PartnerD1Ev	TS7Partner::~TS7Partner()
function _ZN10TS7Partner8GetParamEiPv	TS7Partner::GetParam(int, void*)
function _ZN10TS7Partner8SetParamEiPv	TS7Partner::SetParam(int, void*)
function _ZN10TS7Partner5StartEv	TS7Partner::Start()
function _ZN10TS7Partner7StartToEPKcS1_ii	TS7Partner::StartTo(char const*, char const*, int, int)
function _ZN10TS7Partner4StopEv	TS7Partner::Stop()
function _ZN10TS7Partner5BSendEjPvi	TS7Partner::BSend(unsigned int, void*, int)
function _ZN10TS7Partner7AsBSendEjPvi	TS7Partner::AsBSend(unsigned int, void*, int)
function _ZN10TS7Partner22CheckAsBSendCompletionEPi	TS7Partner::CheckAsBSendCompletion(int*)
function _ZN10TS7Partner21WaitAsBSendCompletionEj	TS7Partner::WaitAsBSendCompletion(unsigned int)
function _ZN10TS7Partner15SetSendCallbackEPFvPviES0_	TS7Partner::SetSendCallback(void (*)(void*, int), void*)
function _ZN10TS7Partner5BRecvEPjPvPij	TS7Partner::BRecv(unsigned int*, void*, int*, unsigned int)
function _ZN10TS7Partner22CheckAsBRecvCompletionEPiPjPvS0_	TS7Partner::CheckAsBRecvCompletion(int*, unsigned int*, void*, int*)
function _ZN10TS7Partner15SetRecvCallbackEPFvPvijS0_iES0_	TS7Partner::SetRecvCallback(void (*)(void*, int, unsigned int, void*, int), void*)
function _ZN10TS7Partner6StatusEv	TS7Partner::Status()
function _ZN10TS7Partner9LastErrorEv	TS7Partner::LastError()
function _ZN10TS7Partner8GetTimesEPjS0_	TS7Partner::GetTimes(unsigned int*, unsigned int*)
function _ZN10TS7Partner8GetStatsEPjS0_S0_S0_	TS7Partner::GetStats(unsigned int*, unsigned int*, unsigned int*, unsigned int*)
function _ZN10TS7Partner6LinkedEv	TS7Partner::Linked()
function _Z12ParErrorTextB5cxx11i	_Z12ParErrorTextB5cxx11i
function _Z12SrvEventTextB5cxx11P9TSrvEvent	_Z12SrvEventTextB5cxx11P9TSrvEvent
function _Z12CliErrorTextB5cxx11i	_Z12CliErrorTextB5cxx11i
function _Z12SrvErrorTextB5cxx11i	_Z12SrvErrorTextB5cxx11i
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag	void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
function __libc_csu_init	__libc_csu_init
function __libc_csu_fini	__libc_csu_fini
sec: .fini
function _fini	_fini
sec: .rodata
sec: .eh_frame_hdr
sec: .eh_frame
sec: .gcc_except_table
sec: .init_array
sec: .fini_array
sec: .jcr
sec: .dynamic
sec: .got
sec: .got.plt
sec: .data
sec: .bss
sec: .comment
sec: .debug_aranges
sec: .debug_info
sec: .debug_abbrev
sec: .debug_line
sec: .debug_str
sec: .debug_loc
sec: .debug_ranges
sec: .shstrtab
sec: .symtab
sec: .strtab
image: /lib64/ld-linux-x86-64.so.2
image: [vdso]
image: /home/hao/share/protocol-test/libx.so
sec: 
sec: .note.gnu.build-id
sec: .gnu.hash
sec: .dynsym
sec: .dynstr
sec: .gnu.version
sec: .gnu.version_r
sec: .rela.dyn
sec: .rela.plt
sec: .init
function _init	_init
sec: .plt
function fprintf@plt	fprintf@plt
function dlsym@plt	dlsym@plt
sec: .plt.got
sec: .text
function deregister_tm_clones	deregister_tm_clones
function register_tm_clones	register_tm_clones
function __do_global_dtors_aux	__do_global_dtors_aux
function frame_dummy	frame_dummy
function memcpy	memcpy
function memmove	memmove
function read	read
function send	send
function recv	recv
function sendto	sendto
function recvfrom	recvfrom
function sendmsg	sendmsg
function recvmsg	recvmsg
sec: .fini
function _fini	_fini
sec: .rodata
sec: .eh_frame_hdr
sec: .eh_frame
sec: .init_array
sec: .fini_array
sec: .jcr
sec: .dynamic
sec: .got
sec: .got.plt
sec: .data
sec: .bss
sec: .comment
sec: .shstrtab
sec: .symtab
sec: .strtab
image: /usr/lib/libsnap7g.so
sec: 
sec: .note.gnu.build-id
sec: .gnu.hash
sec: .dynsym
sec: .dynstr
sec: .gnu.version
sec: .gnu.version_r
sec: .rela.dyn
sec: .rela.plt
sec: .init
function _init	_init
sec: .plt
function _ZN9TS7Worker22PerformFunctionControlEh@plt	TS7Worker::PerformFunctionControl(unsigned char)@plt
function _ZN11TSnapThread9TerminateEv@plt	TSnapThread::Terminate()@plt
function _ZN17TSnap7MicroClient14GetPgBlockInfoEPvP12TS7BlockInfoi@plt	TSnap7MicroClient::GetPgBlockInfo(void*, TS7BlockInfo*, int)@plt
function _ZN12TSnap7Server10DoReadAreaEiiiiiiPv@plt	TSnap7Server::DoReadArea(int, int, int, int, int, int, void*)@plt
function _ZN17TSnap7MicroClient7MBWriteEiiPv@plt	TSnap7MicroClient::MBWrite(int, int, void*)@plt
function _ZN17TSnap7MicroClient18SetSessionPasswordEPc@plt	TSnap7MicroClient::SetSessionPassword(char*)@plt
function pthread_setcancelstate@plt	pthread_setcancelstate@plt
function _ZN17TSnap7MicroClient9GetCpInfoEP9TS7CpInfo@plt	TSnap7MicroClient::GetCpInfo(TS7CpInfo*)@plt
function _ZN17TSnap7MicroClient10FullUploadEiiPvRi@plt	TSnap7MicroClient::FullUpload(int, int, void*, int&)@plt
function _ZN9TS7Worker20PerformFunctionWriteEv@plt	TS7Worker::PerformFunctionWrite()@plt
function _ZN12TSnap7Server10DisposeAllEv@plt	TSnap7Server::DisposeAll()@plt
function _ZSt20__throw_length_errorPKc@plt	std::__throw_length_error(char const*)@plt
function _ZN12TSnap7Client8AsDBReadEiiiPv@plt	TSnap7Client::AsDBRead(int, int, int, void*)@plt
function _ZN17TSnap7MicroClient10opDownloadEv@plt	TSnap7MicroClient::opDownload()@plt
function _Z11NumToStringB5cxx11iij@plt	_Z11NumToStringB5cxx11iij@plt
function _ZN17TSnap7MicroClient13opPlcHotStartEv@plt	TSnap7MicroClient::opPlcHotStart()@plt
function _ZN9TS7Worker9SZL_ID424Ev@plt	TS7Worker::SZL_ID424()@plt
function _ZN10TMsgSocketC1Ev@plt	TMsgSocket::TMsgSocket()@plt
function pthread_cond_destroy@plt	pthread_cond_destroy@plt
function _ZN17TSnap7MicroClient5DBGetEiPvRi@plt	TSnap7MicroClient::DBGet(int, void*, int&)@plt
function _ZN17TSnap7MicroClient15opReadMultiVarsEv@plt	TSnap7MicroClient::opReadMultiVars()@plt
function _Z17IpAddressToStringB5cxx11i@plt	_Z17IpAddressToStringB5cxx11i@plt
function _ZN17TSnap7MicroClient6EBReadEiiPv@plt	TSnap7MicroClient::EBRead(int, int, void*)@plt
function memset@plt	memset@plt
function _ZN10TMsgSocket6SetSinER11sockaddr_inPct@plt	TMsgSocket::SetSin(sockaddr_in&, char*, unsigned short)@plt
function _ZN9TS7Worker19PerformFunctionReadEv@plt	TS7Worker::PerformFunctionRead()@plt
function _ZN13TSnap7Partner11GetNextByteEv@plt	TSnap7Partner::GetNextByte()@plt
function shutdown@plt	shutdown@plt
function _ZN17TSnap7MicroClient12opListBlocksEv@plt	TSnap7MicroClient::opListBlocks()@plt
function _ZN9TS7Worker22PerformGroupProgrammerEv@plt	TS7Worker::PerformGroupProgrammer()@plt
function _ZN12TSnap7Client9AsReadSZLEiiP6TS7SZLRi@plt	TSnap7Client::AsReadSZL(int, int, TS7SZL*, int&)@plt
function _ZN9TS7Worker22PerformGroupCyclicDataEv@plt	TS7Worker::PerformGroupCyclicData()@plt
function _ZN10TMsgSocket10ForceCloseEv@plt	TMsgSocket::ForceClose()@plt
function _ZN12TSnap7Client13SetAsCallbackEPFvPviiES0_@plt	TSnap7Client::SetAsCallback(void (*)(void*, int, int), void*)@plt
function close@plt	close@plt
function _ZN9TS7Worker13PerformPDUAckERi@plt	TS7Worker::PerformPDUAck(int&)@plt
function ioctl@plt	ioctl@plt
function _ZN17TSnap7MicroClient10ListBlocksEP13TS7BlocksList@plt	TSnap7MicroClient::ListBlocks(TS7BlocksList*)@plt
function _ZN17TConnectionServer13RemovePartnerEP13TSnap7Partner@plt	TConnectionServer::RemovePartner(TSnap7Partner*)@plt
function _ZN17TSnap7MicroClient14GetPlcDateTimeER2tm@plt	TSnap7MicroClient::GetPlcDateTime(tm&)@plt
function _ZN17TSnap7MicroClient6DBReadEiiiPv@plt	TSnap7MicroClient::DBRead(int, int, int, void*)@plt
function _ZN17TSnap7MicroClient20ClearSessionPasswordEv@plt	TSnap7MicroClient::ClearSessionPassword()@plt
function _ZN9TS7Worker25BLK_NoResource_GetBlkInfoEP17TResDataBlockInfoR3TCB@plt	TS7Worker::BLK_NoResource_GetBlkInfo(TResDataBlockInfo*, TCB&)@plt
function _ZN17TSnap7MicroClient8opDBFillEv@plt	TSnap7MicroClient::opDBFill()@plt
function _ZN9TS7Worker9WriteAreaEP20TReqFunWriteDataItemP16TReqFunWriteItemR3TEv@plt	TS7Worker::WriteArea(TReqFunWriteDataItem*, TReqFunWriteItem*, TEv&)@plt
function _Z10ErrSrvTextB5cxx11i@plt	_Z10ErrSrvTextB5cxx11i@plt
function _ZN10TMsgSocket10SendPacketEPvi@plt	TMsgSocket::SendPacket(void*, int)@plt
function _ZN17TSnap7MicroClient10opReadAreaEv@plt	TSnap7MicroClient::opReadArea()@plt
function _Z15Msg_CloseSocketi@plt	Msg_CloseSocket(int)@plt
function _ZN16TRawSocketPingerD1Ev@plt	TRawSocketPinger::~TRawSocketPinger()@plt
function _ZN10TMsgSocketC2Ev@plt	TMsgSocket::TMsgSocket()@plt
function _ZN13TSnap7Partner8SetParamEiPv@plt	TSnap7Partner::SetParam(int, void*)@plt
function _ZN13TSnap7Partner5BRecvERjPvRij@plt	TSnap7Partner::BRecv(unsigned int&, void*, int&, unsigned int)@plt
function _ZN16TCustomMsgServer5StartEv@plt	TCustomMsgServer::Start()@plt
function _ZN16TCustomMsgServer17SetEventsCallBackEPFvPvP9TSrvEventiES0_@plt	TCustomMsgServer::SetEventsCallBack(void (*)(void*, TSrvEvent*, int), void*)@plt
function _ZN13TSnap7Partner9BlockRecvEv@plt	TSnap7Partner::BlockRecv()@plt
function _ZN7TPinger4PingEPci@plt	TPinger::Ping(char*, int)@plt
function _ZN17TSnap7MicroClient7DWordAtEPv@plt	TSnap7MicroClient::DWordAt(void*)@plt
function _Znam@plt	operator new[](unsigned long)@plt
function _ZN10TSnap7Peer11GetNextWordEv@plt	TSnap7Peer::GetNextWord()@plt
function pthread_cond_signal@plt	pthread_cond_signal@plt
function _ZN9TS7Worker26BLK_DoBlockInfo_GetBlkInfoEP7TS7AreaP17TResDataBlockInfoR3TCB@plt	TS7Worker::BLK_DoBlockInfo_GetBlkInfo(TS7Area*, TResDataBlockInfo*, TCB&)@plt
function _ZN16TCustomMsgServerD2Ev@plt	TCustomMsgServer::~TCustomMsgServer()@plt
function _ZdlPv@plt	operator delete(void*)@plt
function _ZN13TSnap7Partner21WaitAsBSendCompletionEj@plt	TSnap7Partner::WaitAsBSendCompletion(unsigned int)@plt
function select@plt	select@plt
function _ZN12TSnap7Client9AsDBWriteEiiiPv@plt	TSnap7Client::AsDBWrite(int, int, int, void*)@plt
function getpeername@plt	getpeername@plt
function _ZN17TSnap7MicroClientD1Ev@plt	TSnap7MicroClient::~TSnap7MicroClient()@plt
function _ZN7TPingerC1Ev@plt	TPinger::TPinger()@plt
function _ZN13TSnap7Partner7StartToEPKcS1_tt@plt	TSnap7Partner::StartTo(char const*, char const*, unsigned short, unsigned short)@plt
function _ZN17TSnap7MicroClient13ReadMultiVarsEP11TS7DataItemi@plt	TSnap7MicroClient::ReadMultiVars(TS7DataItem*, int)@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt
function _ZN17TSnap7MicroClient6DBFillEii@plt	TSnap7MicroClient::DBFill(int, int)@plt
function _ZN17TSnap7MicroClient12CopyRamToRomEi@plt	TSnap7MicroClient::CopyRamToRom(int)@plt
function _ZN10TMsgSocket11WaitingDataEv@plt	TMsgSocket::WaitingData()@plt
function _ZN12TSnap7Client13AsReadSZLListEP10TS7SZLListRi@plt	TSnap7Client::AsReadSZLList(TS7SZLList*, int&)@plt
function _ZN17TSnap7MicroClient6MBReadEiiPv@plt	TSnap7MicroClient::MBRead(int, int, void*)@plt
function _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt
function gettimeofday@plt	gettimeofday@plt
function _ZN17TSnap7MicroClient20SetPlcSystemDateTimeEv@plt	TSnap7MicroClient::SetPlcSystemDateTime()@plt
function _ZN10TSnap7PeerD2Ev@plt	TSnap7Peer::~TSnap7Peer()@plt
function _ZN12TSnap7Server6FindDBEt@plt	TSnap7Server::FindDB(unsigned short)@plt
function _ZN9TS7Worker23PerformFunctionDownloadEv@plt	TS7Worker::PerformFunctionDownload()@plt
function _ZN12TSnap7Server12RegisterAreaEitPvt@plt	TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short)@plt
function _ZN16TRawSocketPinger4PingEji@plt	TRawSocketPinger::Ping(unsigned int, int)@plt
function _ZN9TS7Worker7SZLDataEPvi@plt	TS7Worker::SZLData(void*, int)@plt
function _ZN13TSnap7Partner9ClearRecvEv@plt	TSnap7Partner::ClearRecv()@plt
function _ZN13TIsoTcpSocket17isoExchangeBufferEPvRi@plt	TIsoTcpSocket::isoExchangeBuffer(void*, int&)@plt
function _ZN9TS7Worker11WA_NotFoundER3TEv@plt	TS7Worker::WA_NotFound(TEv&)@plt
function _ZN9TSnapBase9SwapDWordEj@plt	TSnapBase::SwapDWord(unsigned int)@plt
function _Z10EvtSrvTextB5cxx11R9TSrvEvent@plt	_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt
function recv@plt	recv@plt
function _ZN15TServersManagerD1Ev@plt	TServersManager::~TServersManager()@plt
function _ZN9TS7Worker11CheckPDU_inEi@plt	TS7Worker::CheckPDU_in(int)@plt
function _ZN9TS7Worker16SZL_ID131_IDX003Ev@plt	TS7Worker::SZL_ID131_IDX003()@plt
function _ZN17TSnap7MicroClientC2Ev@plt	TSnap7MicroClient::TSnap7MicroClient()@plt
function _ZN12TSnap7Client8SetParamEiPv@plt	TSnap7Client::SetParam(int, void*)@plt
function _ZN14TMsgEventQueue4FullEv@plt	TMsgEventQueue::Full()@plt
function _ZN12TSnap7Server9IndexOfDBEt@plt	TSnap7Server::IndexOfDB(unsigned short)@plt
function _ZN17TConnectionServer4LockEv@plt	TConnectionServer::Lock()@plt
function _ZN14TMsgEventQueue5EmptyEv@plt	TMsgEventQueue::Empty()@plt
function _Z15RawSocketsCheckv@plt	RawSocketsCheck()@plt
function _ZN17TSnap7MicroClient11opGetCpInfoEv@plt	TSnap7MicroClient::opGetCpInfo()@plt
function _ZN17TSnap7MicroClient7PlcStopEv@plt	TSnap7MicroClient::PlcStop()@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt	void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt
function _ZN7TPingerD1Ev@plt	TPinger::~TPinger()@plt
function _ZN9TS7Worker11BLK_ListAllER3TCB@plt	TS7Worker::BLK_ListAll(TCB&)@plt
function _ZN13TIsoTcpSocket13isoDisconnectEb@plt	TIsoTcpSocket::isoDisconnect(bool)@plt
function pthread_cond_timedwait@plt	pthread_cond_timedwait@plt
function _ZN10TMsgSocket5PurgeEv@plt	TMsgSocket::Purge()@plt
function _ZN9TS7Worker13WA_OutOfRangeER3TEv@plt	TS7Worker::WA_OutOfRange(TEv&)@plt
function _ZN15TServersManager6UnlockEv@plt	TServersManager::Unlock()@plt
function __cxa_atexit@plt	__cxa_atexit@plt
function _ZN13TIsoTcpSocket15isoRecvFragmentEPviRiRb@plt	TIsoTcpSocket::isoRecvFragment(void*, int, int&, bool&)@plt
function _ZN17TSnap7MicroClient10CheckBlockEiiPvi@plt	TSnap7MicroClient::CheckBlock(int, int, void*, int)@plt
function _ZN10TMsgSocket18GetLastSocketErrorEv@plt	TMsgSocket::GetLastSocketError()@plt
function _ZN13TIsoTcpSocket10isoSendPDUEP11TIsoDataPDU@plt	TIsoTcpSocket::isoSendPDU(TIsoDataPDU*)@plt
function setsockopt@plt	setsockopt@plt
function _ZN17TSnap7MicroClient14opGetOrderCodeEv@plt	TSnap7MicroClient::opGetOrderCode()@plt
function _ZN9TS7Worker12DataSizeByteEi@plt	TS7Worker::DataSizeByte(int)@plt
function _ZN17TSnap7MicroClient10GetCpuInfoEP10TS7CpuInfo@plt	TSnap7MicroClient::GetCpuInfo(TS7CpuInfo*)@plt
function _ZN17TSnap7MicroClient13opSetPasswordEv@plt	TSnap7MicroClient::opSetPassword()@plt
function _ZN17TSnap7MicroClient14opCopyRamToRomEv@plt	TSnap7MicroClient::opCopyRamToRom()@plt
function pthread_mutex_init@plt	pthread_mutex_init@plt
function _ZN12TSnap7Client9AsEBWriteEiiPv@plt	TSnap7Client::AsEBWrite(int, int, void*)@plt
function _ZN9TS7Worker14RA_SizeOverPDUEP15TResFunReadItemR3TEv@plt	TS7Worker::RA_SizeOverPDU(TResFunReadItem*, TEv&)@plt
function _ZN12TSnap7Client12DoCompletionEv@plt	TSnap7Client::DoCompletion()@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt
function _ZN14TMsgEventQueue6InsertEPv@plt	TMsgEventQueue::Insert(void*)@plt
function _ZN13TIsoTcpSocket11ClrIsoErrorEv@plt	TIsoTcpSocket::ClrIsoError()@plt
function _Z9DeltaTimeRj@plt	DeltaTime(unsigned int&)@plt
function _ZN16TCustomMsgServer7StartToEPKct@plt	TCustomMsgServer::StartTo(char const*, unsigned short)@plt
function _ZN11TSnapThread12ThreadCreateEv@plt	TSnapThread::ThreadCreate()@plt
function _ZN12TSnap7Client14AsCopyRamToRomEi@plt	TSnap7Client::AsCopyRamToRom(int)@plt
function _ZN17TSnap7MicroClient9BCDtoByteEh@plt	TSnap7MicroClient::BCDtoByte(unsigned char)@plt
function _ZN14TMsgEventQueueC1Eii@plt	TMsgEventQueue::TMsgEventQueue(int, int)@plt
function _ZN17TSnap7MicroClient7DBWriteEiiiPv@plt	TSnap7MicroClient::DBWrite(int, int, int, void*)@plt
function _ZN10TMsgSocket12CreateSocketEv@plt	TMsgSocket::CreateSocket()@plt
function _ZN10TMsgSocket9SockCheckEi@plt	TMsgSocket::SockCheck(int)@plt
function _ZN9TS7Worker11RA_NotFoundEP15TResFunReadItemR3TEv@plt	TS7Worker::RA_NotFound(TResFunReadItem*, TEv&)@plt
function _ZN17TSnap7MicroClient7opDBGetEv@plt	TSnap7MicroClient::opDBGet()@plt
function _ZN16TCustomMsgServer11EventsFlushEv@plt	TCustomMsgServer::EventsFlush()@plt
function _ZN12TSnap7Client17CheckAsCompletionERi@plt	TSnap7Client::CheckAsCompletion(int&)@plt
function _ZN9TS7Worker15PerformSetClockEv@plt	TS7Worker::PerformSetClock()@plt
function _ZN17TSnap7MicroClient14WriteMultiVarsEP11TS7DataItemi@plt	TSnap7MicroClient::WriteMultiVars(TS7DataItem*, int)@plt
function _ZN9TS7Worker8ReadAreaEP15TResFunReadItemP15TReqFunReadItemRiR3TEv@plt	TS7Worker::ReadArea(TResFunReadItem*, TReqFunReadItem*, int&, TEv&)@plt
function _ZN12SocketsLayerC1Ev@plt	SocketsLayer::SocketsLayer()@plt
function _ZN10TMsgSocket4PingEPc@plt	TMsgSocket::Ping(char*)@plt
function _ZN17TSnap7MicroClient11PlcHotStartEv@plt	TSnap7MicroClient::PlcHotStart()@plt
function _ZN9TS7Worker17PerformPDURequestERi@plt	TS7Worker::PerformPDURequest(int&)@plt
function _ZN17TSnap7MicroClientD2Ev@plt	TSnap7MicroClient::~TSnap7MicroClient()@plt
function _ZN10TMsgSocket7ReceiveEPviRi@plt	TMsgSocket::Receive(void*, int, int&)@plt
function _ZN15TServersManager4LockEv@plt	TServersManager::Lock()@plt
function _ZN17TSnap7MicroClient12opGetCpuInfoEv@plt	TSnap7MicroClient::opGetCpuInfo()@plt
function _ZN17TSnap7MicroClient16opWriteMultiVarsEv@plt	TSnap7MicroClient::opWriteMultiVars()@plt
function _ZN16TCustomMsgServer6DeleteEi@plt	TCustomMsgServer::Delete(int)@plt
function _ZN13TSnap7Partner5BSendEjPvi@plt	TSnap7Partner::BSend(unsigned int, void*, int)@plt
function _ZN10TMsgSocketD2Ev@plt	TMsgSocket::~TMsgSocket()@plt
function _ZN13TSnap7Partner6StatusEv@plt	TSnap7Partner::Status()@plt
function _ZN10TMsgSocket6GetSinE11sockaddr_inPcRt@plt	TMsgSocket::GetSin(sockaddr_in, char*, unsigned short&)@plt
function pthread_create@plt	pthread_create@plt
function _ZN11TSnapThread4KillEv@plt	TSnapThread::Kill()@plt
function _ZN9TS7Worker17PerformPDUUsrDataERi@plt	TS7Worker::PerformPDUUsrData(int&)@plt
function _ZN17TSnap7MicroClient6CTReadEiiPv@plt	TSnap7MicroClient::CTRead(int, int, void*)@plt
function pthread_cond_init@plt	pthread_cond_init@plt
function _ZN13TSnap7PartnerC1Eb@plt	TSnap7Partner::TSnap7Partner(bool)@plt
function _ZN10TMsgSocket9SetSocketEi@plt	TMsgSocket::SetSocket(int)@plt
function _ZN16TRawSocketPingerC1Ev@plt	TRawSocketPinger::TRawSocketPinger()@plt
function _ZN12TSnap7Server8LockAreaEit@plt	TSnap7Server::LockArea(int, unsigned short)@plt
function listen@plt	listen@plt
function _ZN13TSnap7Partner15SetSendCallbackEPFvPviES0_@plt	TSnap7Partner::SetSendCallback(void (*)(void*, int), void*)@plt
function _ZN16TCustomMsgServer7KillAllEv@plt	TCustomMsgServer::KillAll()@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt
function _ZN17TSnap7MicroClient6DeleteEii@plt	TSnap7MicroClient::Delete(int, int)@plt
function _ZN17TSnap7MicroClient8opUploadEv@plt	TSnap7MicroClient::opUpload()@plt
function _ZN13TSnap7Partner24PerformFunctionNegotiateEv@plt	TSnap7Partner::PerformFunctionNegotiate()@plt
function _ZN17TSnap7MicroClient18opListBlocksOfTypeEv@plt	TSnap7MicroClient::opListBlocksOfType()@plt
function _ZN12TSnap7Server21SetReadEventsCallBackEPFvPvP9TSrvEventiES0_@plt	TSnap7Server::SetReadEventsCallBack(void (*)(void*, TSrvEvent*, int), void*)@plt
function _ZN17TSnap7MicroClient15opClearPasswordEv@plt	TSnap7MicroClient::opClearPassword()@plt
function _ZN17TSnap7MicroClient10DisconnectEv@plt	TSnap7MicroClient::Disconnect()@plt
function _ZN17TSnap7MicroClient13opGetDateTimeEv@plt	TSnap7MicroClient::opGetDateTime()@plt
function _ZN9TS7Worker14BLK_GetBlkInfoER3TCB@plt	TS7Worker::BLK_GetBlkInfo(TCB&)@plt
function _ZN18TMsgListenerThreadC1EP10TMsgSocketP16TCustomMsgServer@plt	TMsgListenerThread::TMsgListenerThread(TMsgSocket*, TCustomMsgServer*)@plt
function _ZN11TSnapThreadC2Ev@plt	TSnapThread::TSnapThread()@plt
function _ZN11TSnapThreadD1Ev@plt	TSnapThread::~TSnapThread()@plt
function _ZN12TSnap7Server15FindFirstFreeDBEv@plt	TSnap7Server::FindFirstFreeDB()@plt
function _ZN13TSnap7Partner9BlockSendEv@plt	TSnap7Partner::BlockSend()@plt
function _ZN17TSnap7MicroClient15SubBlockToBlockEi@plt	TSnap7MicroClient::SubBlockToBlock(int)@plt
function _ZN10TMsgSocket9GetRemoteEv@plt	TMsgSocket::GetRemote()@plt
function _ZN17TConnectionServer7StartToEPKc@plt	TConnectionServer::StartTo(char const*)@plt
function _ZN17TSnap7MicroClient19SetConnectionParamsEPKctt@plt	TSnap7MicroClient::SetConnectionParams(char const*, unsigned short, unsigned short)@plt
function _ZN17TSnap7MicroClient8ReadAreaEiiiiiPv@plt	TSnap7MicroClient::ReadArea(int, int, int, int, int, void*)@plt
function _ZN13TIsoTcpSocketD2Ev@plt	TIsoTcpSocket::~TIsoTcpSocket()@plt
function _ZN12TSnap7Client9AsMBWriteEiiPv@plt	TSnap7Client::AsMBWrite(int, int, void*)@plt
function _ZN13TIsoTcpSocket13isoRecvBufferEPvRi@plt	TIsoTcpSocket::isoRecvBuffer(void*, int&)@plt
function pthread_setcanceltype@plt	pthread_setcanceltype@plt
function _ZN13TIsoTcpSocket11SetIsoErrorEi@plt	TIsoTcpSocket::SetIsoError(int)@plt
function pthread_join@plt	pthread_join@plt
function _ZN9TS7Worker7GetAreaEht@plt	TS7Worker::GetArea(unsigned char, unsigned short)@plt
function _ZN12TSnap7Client9AsABWriteEiiPv@plt	TSnap7Client::AsABWrite(int, int, void*)@plt
function _Z11IntToStringB5cxx11i@plt	_Z11IntToStringB5cxx11i@plt
function _ZN10TMsgSocketD1Ev@plt	TMsgSocket::~TMsgSocket()@plt
function _ZN13TSnap7Partner8PickDataEv@plt	TSnap7Partner::PickData()@plt
function _ZN10TMsgSocket8GetLocalEv@plt	TMsgSocket::GetLocal()@plt
function _ZN16TMsgWorkerThreadC1EP10TMsgSocketP16TCustomMsgServer@plt	TMsgWorkerThread::TMsgWorkerThread(TMsgSocket*, TCustomMsgServer*)@plt
function _ZN17TConnectionServerC1Ev@plt	TConnectionServer::TConnectionServer()@plt
function _ZN12TSnap7Server14UnregisterAreaEit@plt	TSnap7Server::UnregisterArea(int, unsigned short)@plt
function _ZN17TSnap7MicroClient8SetParamEiPv@plt	TSnap7MicroClient::SetParam(int, void*)@plt
function pthread_exit@plt	pthread_exit@plt
function getsockopt@plt	getsockopt@plt
function _ZN12TSnap7Client10AsReadAreaEiiiiiPv@plt	TSnap7Client::AsReadArea(int, int, int, int, int, void*)@plt
function _ZN12TSnap7Client10AsDownloadEiPvi@plt	TSnap7Client::AsDownload(int, void*, int)@plt
function _ZN16TCustomMsgServerD1Ev@plt	TCustomMsgServer::~TCustomMsgServer()@plt
function getsockname@plt	getsockname@plt
function _ZN7TPinger7RawPingEji@plt	TPinger::RawPing(unsigned int, int)@plt
function _ZN10TMsgSocket16SetSocketOptionsEv@plt	TMsgSocket::SetSocketOptions()@plt
function _ZN17TSnap7MicroClient15opGetProtectionEv@plt	TSnap7MicroClient::opGetProtection()@plt
function _ZN17TConnectionServer6UnlockEv@plt	TConnectionServer::Unlock()@plt
function _ZN17TSnap7MicroClient8CompressEi@plt	TSnap7MicroClient::Compress(int)@plt
function _ZN17TSnap7MicroClient10opCompressEv@plt	TSnap7MicroClient::opCompress()@plt
function _ZN17TSnap7MicroClient12DataSizeByteEi@plt	TSnap7MicroClient::DataSizeByte(int)@plt
function connect@plt	connect@plt
function _ZN9TS7Worker22BLK_NoResource_ListBoTEP14TDataFunGetBotR3TCB@plt	TS7Worker::BLK_NoResource_ListBoT(TDataFunGetBot*, TCB&)@plt
function _ZN12TSnap7Server11DoReadEventEijttttt@plt	TSnap7Server::DoReadEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt
function _ZN17TSnap7MicroClient12GetPlcStatusERi@plt	TSnap7MicroClient::GetPlcStatus(int&)@plt
function _ZN12TSnap7Client13StartAsyncJobEv@plt	TSnap7Client::StartAsyncJob()@plt
function _ZN10TMsgSocket11PacketReadyEi@plt	TMsgSocket::PacketReady(int)@plt
function _ZN13TSnap7Partner22CheckAsBSendCompletionERi@plt	TSnap7Partner::CheckAsBSendCompletion(int&)@plt
function _ZN9TS7Worker19WA_DataSizeMismatchER3TEv@plt	TS7Worker::WA_DataSizeMismatch(TEv&)@plt
function _ZN9TS7Worker14SZLSystemStateEv@plt	TS7Worker::SZLSystemState()@plt
function _ZN13TIsoTcpSocket8CheckPDUEPvh@plt	TIsoTcpSocket::CheckPDU(void*, unsigned char)@plt
function _ZN17TSnap7MicroClient12GetOrderCodeEP12TS7OrderCode@plt	TSnap7MicroClient::GetOrderCode(TS7OrderCode*)@plt
function _ZN17TSnap7MicroClient13opReadSZLListEv@plt	TSnap7MicroClient::opReadSZLList()@plt
function _ZN12TSnap7Client12AsFullUploadEiiPvRi@plt	TSnap7Client::AsFullUpload(int, int, void*, int&)@plt
function __strcpy_chk@plt	__strcpy_chk@plt
function _ZN11TSnapThread4JoinEv@plt	TSnapThread::Join()@plt
function _ZN17TSnap7MicroClient9opPlcStopEv@plt	TSnap7MicroClient::opPlcStop()@plt
function _ZN12TSnap7ClientC1Ev@plt	TSnap7Client::TSnap7Client()@plt
function _ZN13TIsoTcpSocket7PDUSizeEPv@plt	TIsoTcpSocket::PDUSize(void*)@plt
function _ZN9TSnapBase8SwapWordEt@plt	TSnapBase::SwapWord(unsigned short)@plt
function _ZN12TSnap7Server10UnlockAreaEit@plt	TSnap7Server::UnlockArea(int, unsigned short)@plt
function _ZN15TServersManager13RemovePartnerEP17TConnectionServerP13TSnap7Partner@plt	TServersManager::RemovePartner(TConnectionServer*, TSnap7Partner*)@plt
function _ZN12TSnap7Client10OpenThreadEv@plt	TSnap7Client::OpenThread()@plt
function _ZN15TServersManager9AddServerEP17TConnectionServer@plt	TServersManager::AddServer(TConnectionServer*)@plt
function _ZN16TRawSocketPinger7CanReadEi@plt	TRawSocketPinger::CanRead(int)@plt
function _ZN17TSnap7MicroClient7TMWriteEiiPv@plt	TSnap7MicroClient::TMWrite(int, int, void*)@plt
function _ZN17TSnap7MicroClient8FillTimeEtPc@plt	TSnap7MicroClient::FillTime(unsigned short, char*)@plt
function _ZN12TSnap7Server10RegisterDBEtPvt@plt	TSnap7Server::RegisterDB(unsigned short, void*, unsigned short)@plt
function _ZN17TSnap7MicroClient8GetParamEiPv@plt	TSnap7MicroClient::GetParam(int, void*)@plt
function socket@plt	socket@plt
function _ZN10TMsgSocket9SckAcceptEv@plt	TMsgSocket::SckAccept()@plt
function inet_ntoa@plt	inet_ntoa@plt
function _ZN17TConnectionServer9FirstFreeEv@plt	TConnectionServer::FirstFree()@plt
function _ZN9TS7Worker26BLK_GetBlockNum_GetBlkInfoERiP17TReqDataBlockInfo@plt	TS7Worker::BLK_GetBlockNum_GetBlkInfo(int&, TReqDataBlockInfo*)@plt
function _ZN12TSnap7ServerC1Ev@plt	TSnap7Server::TSnap7Server()@plt
function _ZN16TCustomMsgServer9PickEventEPv@plt	TCustomMsgServer::PickEvent(void*)@plt
function _ZN12TSnap7Client9AsCTWriteEiiPv@plt	TSnap7Client::AsCTWrite(int, int, void*)@plt
function _ZN13TSnap7Partner22CheckAsBRecvCompletionERiRjPvS0_@plt	TSnap7Partner::CheckAsBRecvCompletion(int&, unsigned int&, void*, int&)@plt
function _ZN12TSnap7Client8AsABReadEiiPv@plt	TSnap7Client::AsABRead(int, int, void*)@plt
function _ZN17TConnectionServer4StopEv@plt	TConnectionServer::Stop()@plt
function _Z10SysGetTickv@plt	SysGetTick()@plt
function _ZN17TSnap7MicroClient6UploadEiiPvRi@plt	TSnap7MicroClient::Upload(int, int, void*, int&)@plt
function _ZN9TS7Worker24PerformFunctionNegotiateEv@plt	TS7Worker::PerformFunctionNegotiate()@plt
function _ZN17TSnap7MicroClient11opWriteAreaEv@plt	TSnap7MicroClient::opWriteArea()@plt
function __errno_location@plt	__errno_location@plt
function _ZN12TSnap7Server12UnregisterDBEt@plt	TSnap7Server::UnregisterDB(unsigned short)@plt
function _ZN17TSnap7MicroClient17SetConnectionTypeEt@plt	TSnap7MicroClient::SetConnectionType(unsigned short)@plt
function _Z24ServersManager_GetServerjRP17TConnectionServer@plt	ServersManager_GetServer(unsigned int, TConnectionServer*&)@plt
function _ZN12TSnap7Client8AsEBReadEiiPv@plt	TSnap7Client::AsEBRead(int, int, void*)@plt
function _Z8SysSleepj@plt	SysSleep(unsigned int)@plt
function _ZN9TS7Worker21PerformFunctionUploadEv@plt	TS7Worker::PerformFunctionUpload()@plt
function _ZN13TSnap7Partner7AsBSendEjPvi@plt	TSnap7Partner::AsBSend(unsigned int, void*, int)@plt
function _ZN17TSnap7MicroClient13opAgBlockInfoEv@plt	TSnap7MicroClient::opAgBlockInfo()@plt
function _ZN17TSnap7MicroClient9opReadSZLEv@plt	TSnap7MicroClient::opReadSZL()@plt
function _ZN9TS7Worker15PerformGroupSZLEv@plt	TS7Worker::PerformGroupSZL()@plt
function __stack_chk_fail@plt	__stack_chk_fail@plt
function _ZN12TSnap7Client11AsWriteAreaEiiiiiPv@plt	TSnap7Client::AsWriteArea(int, int, int, int, int, void*)@plt
function _ZN17TSnap7MicroClient14opGetPlcStatusEv@plt	TSnap7MicroClient::opGetPlcStatus()@plt
function _ZN13TIsoTcpWorker11ExecuteRecvEv@plt	TIsoTcpWorker::ExecuteRecv()@plt
function _ZN17TConnectionServer8IncomingEi@plt	TConnectionServer::Incoming(int)@plt
function _ZN9TS7Worker3BCDEt@plt	TS7Worker::BCD(unsigned short)@plt
function _ZN12TSnap7Server11DoWriteAreaEiiiiiiPv@plt	TSnap7Server::DoWriteArea(int, int, int, int, int, int, void*)@plt
function _Z28ServersManager_RemovePartnerP17TConnectionServerP13TSnap7Partner@plt	ServersManager_RemovePartner(TConnectionServer*, TSnap7Partner*)@plt
function _ZN13TSnap7Partner4StopEv@plt	TSnap7Partner::Stop()@plt
function _Z10ErrParTextB5cxx11i@plt	_Z10ErrParTextB5cxx11i@plt
function _ZN16TCustomMsgServer10UnlockListEv@plt	TCustomMsgServer::UnlockList()@plt
function send@plt	send@plt
function _ZN10TMsgSocket9GotSocketEv@plt	TMsgSocket::GotSocket()@plt
function _ZN17TConnectionServer15RegisterPartnerEP13TSnap7Partner@plt	TConnectionServer::RegisterPartner(TSnap7Partner*)@plt
function _ZN17TConnectionServerD1Ev@plt	TConnectionServer::~TConnectionServer()@plt
function strcpy@plt	strcpy@plt
function _ZN9TS7Worker11DoReadEventEjttttt@plt	TS7Worker::DoReadEvent(unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt
function _ZN17TSnap7MicroClient7CTWriteEiiPv@plt	TSnap7MicroClient::CTWrite(int, int, void*)@plt
function _ZN17TSnap7MicroClient7ReadSZLEiiP6TS7SZLRi@plt	TSnap7MicroClient::ReadSZL(int, int, TS7SZL*, int&)@plt
function pthread_cancel@plt	pthread_cancel@plt
function nanosleep@plt	nanosleep@plt
function _ZN17TSnap7MicroClient6ABReadEiiPv@plt	TSnap7MicroClient::ABRead(int, int, void*)@plt
function _ZN17TSnap7MicroClient12PlcColdStartEv@plt	TSnap7MicroClient::PlcColdStart()@plt
function _ZN10TSnap7Peer18NegotiatePDULengthEv@plt	TSnap7Peer::NegotiatePDULength()@plt
function _ZN10TMsgSocket7SckBindEv@plt	TMsgSocket::SckBind()@plt
function _ZSt19__throw_logic_errorPKc@plt	std::__throw_logic_error(char const*)@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag@plt	void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@plt
function _ZN12TSnap7ClientD1Ev@plt	TSnap7Client::~TSnap7Client()@plt
function _ZN10TMsgSocket10SckConnectEv@plt	TMsgSocket::SckConnect()@plt
function pthread_cond_wait@plt	pthread_cond_wait@plt
function _ZN9TS7Worker20PerformGroupSecurityEv@plt	TS7Worker::PerformGroupSecurity()@plt
function _ZN17TSnap7MicroClient14opPlcColdStartEv@plt	TSnap7MicroClient::opPlcColdStart()@plt
function _ZN12TSnap7Server11RegisterSysEiPvt@plt	TSnap7Server::RegisterSys(int, void*, unsigned short)@plt
function _ZN12TSnap7Client18AsListBlocksOfTypeEiPA8192_tRi@plt	TSnap7Client::AsListBlocksOfType(int, unsigned short (*) [8192], int&)@plt
function _ZN10TSnap7PeerD1Ev@plt	TSnap7Peer::~TSnap7Peer()@plt
function _ZN10TMsgSocket13SckDisconnectEv@plt	TMsgSocket::SckDisconnect()@plt
function _ZdaPv@plt	operator delete[](void*)@plt
function _ZN13TSnap7Partner11CloseWorkerEv@plt	TSnap7Partner::CloseWorker()@plt
function _ZN13TIsoTcpSocket7IsoPeekEPvR8TPDUKind@plt	TIsoTcpSocket::IsoPeek(void*, TPDUKind&)@plt
function _ZN17TSnap7MicroClient7ABWriteEiiPv@plt	TSnap7MicroClient::ABWrite(int, int, void*)@plt
function _ZN12TSnap7Client8AsCTReadEiiPv@plt	TSnap7Client::AsCTRead(int, int, void*)@plt
function _ZN10TMsgSocket9SckListenEv@plt	TMsgSocket::SckListen()@plt
function _ZN15TServersManager9GetServerEjRP17TConnectionServer@plt	TServersManager::GetServer(unsigned int, TConnectionServer*&)@plt
function _ZN12TSnap7Client9AsTMWriteEiiPv@plt	TSnap7Client::AsTMWrite(int, int, void*)@plt
function _ZN10TSnap7PeerC2Ev@plt	TSnap7Peer::TSnap7Peer()@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt
function _ZN17TSnap7MicroClient6TMReadEiiPv@plt	TSnap7MicroClient::TMRead(int, int, void*)@plt
function _ZN17TConnectionServer5StartEv@plt	TConnectionServer::Start()@plt
function _ZN9TSnapBaseC2Ev@plt	TSnapBase::TSnapBase()@plt
function _ZN9TS7Worker7DoEventEjttttt@plt	TS7Worker::DoEvent(unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt
function _ZN10TSnap7Peer11PeerConnectEv@plt	TSnap7Peer::PeerConnect()@plt
function _ZN12TSnap7ServerD1Ev@plt	TSnap7Server::~TSnap7Server()@plt
function _ZN12TSnap7Client8AsTMReadEiiPv@plt	TSnap7Client::AsTMRead(int, int, void*)@plt
function strncpy@plt	strncpy@plt
function _ZN11TSnapThread7WaitForEm@plt	TSnapThread::WaitFor(unsigned long)@plt
function _ZN17TSnap7MicroClient9WriteAreaEiiiiiPv@plt	TSnap7MicroClient::WriteArea(int, int, int, int, int, void*)@plt
function _ZN9TS7Worker15PerformGetClockEv@plt	TS7Worker::PerformGetClock()@plt
function _ZN12TSnap7Client8GetParamEiPv@plt	TSnap7Client::GetParam(int, void*)@plt
function _ZN10TMsgSocket7CanReadEi@plt	TMsgSocket::CanRead(int)@plt
function _ZN17TSnap7MicroClient8DownloadEiPvi@plt	TSnap7MicroClient::Download(int, void*, int)@plt
function pthread_attr_init@plt	pthread_attr_init@plt
function _ZN13TIsoTcpSocket20IsoConfirmConnectionEh@plt	TIsoTcpSocket::IsoConfirmConnection(unsigned char)@plt
function _ZN12TSnap7Client11CloseThreadEv@plt	TSnap7Client::CloseThread()@plt
function _ZN13TSnap7Partner8GetParamEiPv@plt	TSnap7Partner::GetParam(int, void*)@plt
function _ZN11TSnapThreadD2Ev@plt	TSnapThread::~TSnapThread()@plt
function __cxa_end_catch@plt	__cxa_end_catch@plt
function _ZN9TS7Worker15SZLNotAvailableEv@plt	TS7Worker::SZLNotAvailable()@plt
function _ZN12TSnap7Server8GetParamEiPv@plt	TSnap7Server::GetParam(int, void*)@plt
function _ZN13TIsoTcpSocket13isoSendBufferEPvi@plt	TIsoTcpSocket::isoSendBuffer(void*, int)@plt
function _ZN12TSnap7Server8SetParamEiPv@plt	TSnap7Server::SetParam(int, void*)@plt
function _ZN16TCustomMsgServerC2Ev@plt	TCustomMsgServer::TCustomMsgServer()@plt
function _ZN16TCustomMsgServer4StopEv@plt	TCustomMsgServer::Stop()@plt
function _ZN9TS7Worker23WA_InvalidTransportSizeER3TEv@plt	TS7Worker::WA_InvalidTransportSize(TEv&)@plt
function _ZN13TSnap7Partner10DisconnectEv@plt	TSnap7Partner::Disconnect()@plt
function _ZN17TSnap7MicroClient13opSetDateTimeEv@plt	TSnap7MicroClient::opSetDateTime()@plt
function _ZN10TSnap7Peer8ClrErrorEv@plt	TSnap7Peer::ClrError()@plt
function _ZN11TSnapThread5StartEv@plt	TSnapThread::Start()@plt
function __cxa_begin_catch@plt	__cxa_begin_catch@plt
function _ZN13TIsoTcpSocketD1Ev@plt	TIsoTcpSocket::~TIsoTcpSocket()@plt
function bind@plt	bind@plt
function _ZN12TSnap7Client7AsDBGetEiPvRi@plt	TSnap7Client::AsDBGet(int, void*, int&)@plt
function _ZN16TCustomMsgServer9FirstFreeEv@plt	TCustomMsgServer::FirstFree()@plt
function _Z12TimeToStringB5cxx11l@plt	_Z12TimeToStringB5cxx11l@plt
function _ZN13TIsoTcpSocketC2Ev@plt	TIsoTcpSocket::TIsoTcpSocket()@plt
function _ZN17TSnap7MicroClient14SetPlcDateTimeEP2tm@plt	TSnap7MicroClient::SetPlcDateTime(tm*)@plt
function _ZN17TSnap7MicroClient7ConnectEv@plt	TSnap7MicroClient::Connect()@plt
function _ZN10TMsgSocket13DestroySocketEv@plt	TMsgSocket::DestroySocket()@plt
function pthread_mutex_lock@plt	pthread_mutex_lock@plt
function _ZN13TSnap7Partner17ConnectionConfirmEv@plt	TSnap7Partner::ConnectionConfirm()@plt
function _ZN12TSnap7Client8AsDBFillEii@plt	TSnap7Client::AsDBFill(int, int)@plt
function _ZN9TS7Worker13RA_OutOfRangeEP15TResFunReadItemR3TEv@plt	TS7Worker::RA_OutOfRange(TResFunReadItem*, TEv&)@plt
function _ZN17TSnap7MicroClient16PerformOperationEv@plt	TSnap7MicroClient::PerformOperation()@plt
function _ZN14TMsgEventQueue5FlushEv@plt	TMsgEventQueue::Flush()@plt
function _ZN17TSnap7MicroClient14GetAgBlockInfoEiiP12TS7BlockInfo@plt	TSnap7MicroClient::GetAgBlockInfo(int, int, TS7BlockInfo*)@plt
function _ZN15TServersManagerC1Ev@plt	TServersManager::TServersManager()@plt
function localtime@plt	localtime@plt
function pthread_mutex_destroy@plt	pthread_mutex_destroy@plt
function _ZN13TIsoTcpSocket10isoRecvPDUEP11TIsoDataPDU@plt	TIsoTcpSocket::isoRecvPDU(TIsoDataPDU*)@plt
function _ZN17TConnectionServer11FindPartnerEj@plt	TConnectionServer::FindPartner(unsigned int)@plt
function _ZN16TRawSocketPinger14PacketChecksumEv@plt	TRawSocketPinger::PacketChecksum()@plt
function _ZN17TSnap7MicroClient11ReadSZLListEP10TS7SZLListRi@plt	TSnap7MicroClient::ReadSZLList(TS7SZLList*, int&)@plt
function _Znwm@plt	operator new(unsigned long)@plt
function _ZN15TServersManager12CreateServerEjRP17TConnectionServer@plt	TServersManager::CreateServer(unsigned int, TConnectionServer*&)@plt
function _ZN13TSnap7PartnerD1Ev@plt	TSnap7Partner::~TSnap7Partner()@plt
function _Unwind_Resume@plt	_Unwind_Resume@plt
function pthread_cond_broadcast@plt	pthread_cond_broadcast@plt
function _Z10ErrCliTextB5cxx11i@plt	_Z10ErrCliTextB5cxx11i@plt
function _ZN12TSnap7Server17SetRWAreaCallBackEPFiPviiP6TS7TagS0_ES0_@plt	TSnap7Server::SetRWAreaCallBack(int (*)(void*, int, int, TS7Tag*, void*), void*)@plt
function strftime@plt	strftime@plt
function _ZN9TS7WorkerC1Ev@plt	TS7Worker::TS7Worker()@plt
function _ZN13TSnap7Partner15SetRecvCallbackEPFvPvijS0_iES0_@plt	TSnap7Partner::SetRecvCallback(void (*)(void*, int, unsigned int, void*, int), void*)@plt
function _ZN10TMsgSocket8CanWriteEi@plt	TMsgSocket::CanWrite(int)@plt
function _ZN14TMsgEventQueue7ExtractEPv@plt	TMsgEventQueue::Extract(void*)@plt
function _ZN9TS7Worker8FillTimeEP7TS7Time@plt	TS7Worker::FillTime(TS7Time*)@plt
function accept@plt	accept@plt
function clock_gettime@plt	clock_gettime@plt
function _ZN10TMsgSocket10RecvPacketEPvi@plt	TMsgSocket::RecvPacket(void*, int)@plt
function _ZN17TSnap7MicroClient13GetProtectionEP13TS7Protection@plt	TSnap7MicroClient::GetProtection(TS7Protection*)@plt
function _ZN12TSnap7Client8AsMBReadEiiPv@plt	TSnap7Client::AsMBRead(int, int, void*)@plt
function _ZN17TSnap7MicroClient7EBWriteEiiPv@plt	TSnap7MicroClient::EBWrite(int, int, void*)@plt
function _ZN12TSnap7Server7StartToEPKc@plt	TSnap7Server::StartTo(char const*)@plt
function pthread_mutex_unlock@plt	pthread_mutex_unlock@plt
function _ZN16TRawSocketPinger10InitPacketEv@plt	TRawSocketPinger::InitPacket()@plt
function _ZN13TSnap7Partner13ConnectToPeerEv@plt	TSnap7Partner::ConnectToPeer()@plt
function memcpy@plt	memcpy@plt
function fcntl@plt	fcntl@plt
function _ZN14TMsgEventQueueD1Ev@plt	TMsgEventQueue::~TMsgEventQueue()@plt
function _ZN17TSnap7MicroClient9ConnectToEPKcii@plt	TSnap7MicroClient::ConnectTo(char const*, int, int)@plt
function _ZN17TSnap7MicroClient16ListBlocksOfTypeEiPA8192_tRi@plt	TSnap7MicroClient::ListBlocksOfType(int, unsigned short (*) [8192], int&)@plt
function _ZN16TCustomMsgServer8LockListEv@plt	TCustomMsgServer::LockList()@plt
function _ZN10TSnap7Peer14PeerDisconnectEv@plt	TSnap7Peer::PeerDisconnect()@plt
function _ZN10TMsgSocket11WaitForDataEii@plt	TMsgSocket::WaitForData(int, int)@plt
function _ZN12TSnap7Client8AsUploadEiiPvRi@plt	TSnap7Client::AsUpload(int, int, void*, int&)@plt
function _ZN12TSnap7Client16WaitAsCompletionEm@plt	TSnap7Client::WaitAsCompletion(unsigned long)@plt
function _ZN10TSnap7Peer8SetErrorEi@plt	TSnap7Peer::SetError(int)@plt
function _ZN9TS7Worker11BLK_ListBoTEhbR3TCB@plt	TS7Worker::BLK_ListBoT(unsigned char, bool, TCB&)@plt
function _ZN12TSnap7Server13UnregisterSysEi@plt	TSnap7Server::UnregisterSys(int)@plt
function _ZN17TSnap7MicroClient8CpuErrorEi@plt	TSnap7MicroClient::CpuError(int)@plt
function _ZN17TSnap7MicroClient9WordToBCDEt@plt	TSnap7MicroClient::WordToBCD(unsigned short)@plt
function __fdelt_chk@plt	__fdelt_chk@plt
function time@plt	time@plt
function _ZN9TS7Worker21PerformGroupBlockInfoEv@plt	TS7Worker::PerformGroupBlockInfo()@plt
function _ZN13TSnap7Partner5StartEv@plt	TSnap7Partner::Start()@plt
function inet_addr@plt	inet_addr@plt
function _ZN7TPinger4PingEji@plt	TPinger::Ping(unsigned int, int)@plt
function _ZN16TCustomMsgServer13StartListenerEv@plt	TCustomMsgServer::StartListener()@plt
function _ZN17TSnap7MicroClient8opDeleteEv@plt	TSnap7MicroClient::opDelete()@plt
function _Z15Msg_GetSockAddri@plt	Msg_GetSockAddr(int)@plt
function _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt
function _ZN13TIsoTcpSocket10isoConnectEv@plt	TIsoTcpSocket::isoConnect()@plt
function pthread_attr_setdetachstate@plt	pthread_attr_setdetachstate@plt
sec: .plt.got
sec: .text
function deregister_tm_clones	deregister_tm_clones
function register_tm_clones	register_tm_clones
function __do_global_dtors_aux	__do_global_dtors_aux
function frame_dummy	frame_dummy
function _ZN10TMsgSocket7ExecuteEv	TMsgSocket::Execute()
function _ZN12SocketsLayerD2Ev	SocketsLayer::~SocketsLayer()
function _ZN9TSnapBaseC2Ev	TSnapBase::TSnapBase()
function _ZN9TSnapBase8SwapWordEt	TSnapBase::SwapWord(unsigned short)
function _ZN9TSnapBase9SwapDWordEj	TSnapBase::SwapDWord(unsigned int)
function _Z15Msg_CloseSocketi	Msg_CloseSocket(int)
function _Z15Msg_GetSockAddri	Msg_GetSockAddr(int)
function _ZN10TMsgSocket6SetSinER11sockaddr_inPct	TMsgSocket::SetSin(sockaddr_in&, char*, unsigned short)
function _ZN10TMsgSocket6GetSinE11sockaddr_inPcRt	TMsgSocket::GetSin(sockaddr_in, char*, unsigned short&)
function _ZN10TMsgSocket8GetLocalEv	TMsgSocket::GetLocal()
function _ZN10TMsgSocket9GetRemoteEv	TMsgSocket::GetRemote()
function _ZN10TMsgSocket18GetLastSocketErrorEv	TMsgSocket::GetLastSocketError()
function _ZN10TMsgSocket9GotSocketEv	TMsgSocket::GotSocket()
function _ZN10TMsgSocket11WaitingDataEv	TMsgSocket::WaitingData()
function _ZN10TMsgSocket9SockCheckEi	TMsgSocket::SockCheck(int)
function _ZN10TMsgSocket16SetSocketOptionsEv	TMsgSocket::SetSocketOptions()
function _ZN10TMsgSocket9SetSocketEi	TMsgSocket::SetSocket(int)
function _ZN10TMsgSocket8CanWriteEi	TMsgSocket::CanWrite(int)
function _ZN10TMsgSocket7CanReadEi	TMsgSocket::CanRead(int)
function _ZN10TMsgSocket5PurgeEv	TMsgSocket::Purge()
function _ZN10TMsgSocket13DestroySocketEv	TMsgSocket::DestroySocket()
function _ZN10TMsgSocket12CreateSocketEv	TMsgSocket::CreateSocket()
function _ZN10TMsgSocket11WaitForDataEii	TMsgSocket::WaitForData(int, int)
function _ZN10TMsgSocket10SckConnectEv	TMsgSocket::SckConnect()
function _ZN10TMsgSocket13SckDisconnectEv	TMsgSocket::SckDisconnect()
function _ZN10TMsgSocket10ForceCloseEv	TMsgSocket::ForceClose()
function _ZN10TMsgSocket7SckBindEv	TMsgSocket::SckBind()
function _ZN10TMsgSocket9SckListenEv	TMsgSocket::SckListen()
function _ZN10TMsgSocket9SckAcceptEv	TMsgSocket::SckAccept()
function _ZN10TMsgSocket10SendPacketEPvi	TMsgSocket::SendPacket(void*, int)
function _ZN10TMsgSocket11PacketReadyEi	TMsgSocket::PacketReady(int)
function _ZN10TMsgSocket7ReceiveEPviRi	TMsgSocket::Receive(void*, int, int&)
function _ZN10TMsgSocket10RecvPacketEPvi	TMsgSocket::RecvPacket(void*, int)
function _ZN10TMsgSocket10PeekPacketEPvi	TMsgSocket::PeekPacket(void*, int)
function _ZN16TRawSocketPingerC2Ev	TRawSocketPinger::TRawSocketPinger()
function _ZN16TRawSocketPingerD1Ev	TRawSocketPinger::~TRawSocketPinger()
function _ZN16TRawSocketPinger14PacketChecksumEv	TRawSocketPinger::PacketChecksum()
function _ZN16TRawSocketPinger10InitPacketEv	TRawSocketPinger::InitPacket()
function _ZN16TRawSocketPinger7CanReadEi	TRawSocketPinger::CanRead(int)
function _ZN16TRawSocketPinger4PingEji	TRawSocketPinger::Ping(unsigned int, int)
function _ZN7TPingerC1Ev	TPinger::TPinger()
function _ZN10TMsgSocketC1Ev	TMsgSocket::TMsgSocket()
function _ZN7TPingerD1Ev	TPinger::~TPinger()
function _ZN10TMsgSocketD2Ev	TMsgSocket::~TMsgSocket()
function _ZN10TMsgSocketD0Ev	TMsgSocket::~TMsgSocket()
function _ZN7TPinger7RawPingEji	TPinger::RawPing(unsigned int, int)
function _ZN7TPinger4PingEji	TPinger::Ping(unsigned int, int)
function _ZN10TMsgSocket4PingE11sockaddr_in	TMsgSocket::Ping(sockaddr_in)
function _ZN7TPinger4PingEPci	TPinger::Ping(char*, int)
function _ZN10TMsgSocket4PingEPc	TMsgSocket::Ping(char*)
function _Z15RawSocketsCheckv	RawSocketsCheck()
function _ZN12SocketsLayerC2Ev	SocketsLayer::SocketsLayer()
function _GLOBAL__sub_I_snap_msgsock.cpp	_GLOBAL__sub_I_snap_msgsock.cpp
function _Z10SysGetTickv	SysGetTick()
function _Z8SysSleepj	SysSleep(unsigned int)
function _Z9DeltaTimeRj	DeltaTime(unsigned int&)
function _ZN16TCustomMsgServer9CanAcceptEi	TCustomMsgServer::CanAccept(int)
function _ZN18TMsgListenerThread7ExecuteEv	TMsgListenerThread::Execute()
function _ZN16TCustomMsgServer18CreateWorkerSocketEi	TCustomMsgServer::CreateWorkerSocket(int)
function _ZN14TMsgEventQueueD1Ev	TMsgEventQueue::~TMsgEventQueue()
function _ZN14TMsgEventQueue5FlushEv	TMsgEventQueue::Flush()
function _ZN14TMsgEventQueueC2Eii	TMsgEventQueue::TMsgEventQueue(int, int)
function _ZN14TMsgEventQueue5EmptyEv	TMsgEventQueue::Empty()
function _ZN14TMsgEventQueue7ExtractEPv	TMsgEventQueue::Extract(void*)
function _ZN14TMsgEventQueue4FullEv	TMsgEventQueue::Full()
function _ZN14TMsgEventQueue6InsertEPv	TMsgEventQueue::Insert(void*)
function _ZN16TCustomMsgServer7DoEventEijttttt	TCustomMsgServer::DoEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
function _ZN16TMsgWorkerThreadC1EP10TMsgSocketP16TCustomMsgServer	TMsgWorkerThread::TMsgWorkerThread(TMsgSocket*, TCustomMsgServer*)
function _ZN18TMsgListenerThreadC2EP10TMsgSocketP16TCustomMsgServer	TMsgListenerThread::TMsgListenerThread(TMsgSocket*, TCustomMsgServer*)
function _ZN16TCustomMsgServerC1Ev	TCustomMsgServer::TCustomMsgServer()
function _ZN16TCustomMsgServer8LockListEv	TCustomMsgServer::LockList()
function _ZN16TCustomMsgServer10UnlockListEv	TCustomMsgServer::UnlockList()
function _ZN16TCustomMsgServer9FirstFreeEv	TCustomMsgServer::FirstFree()
function _ZN16TCustomMsgServer8IncomingEi	TCustomMsgServer::Incoming(int)
function _ZN16TCustomMsgServer13StartListenerEv	TCustomMsgServer::StartListener()
function _ZN16TCustomMsgServer7KillAllEv	TCustomMsgServer::KillAll()
function _ZN16TCustomMsgServer12TerminateAllEv	TCustomMsgServer::TerminateAll()
function _ZN16TCustomMsgServer6DeleteEi	TCustomMsgServer::Delete(int)
function _ZN16TMsgWorkerThread7ExecuteEv	TMsgWorkerThread::Execute()
function _ZN16TCustomMsgServer5StartEv	TCustomMsgServer::Start()
function _ZN16TCustomMsgServer7StartToEPKct	TCustomMsgServer::StartTo(char const*, unsigned short)
function _ZN16TCustomMsgServer4StopEv	TCustomMsgServer::Stop()
function _ZN16TCustomMsgServerD1Ev	TCustomMsgServer::~TCustomMsgServer()
function _ZN16TCustomMsgServerD0Ev	TCustomMsgServer::~TCustomMsgServer()
function _ZN16TCustomMsgServer17SetEventsCallBackEPFvPvP9TSrvEventiES0_	TCustomMsgServer::SetEventsCallBack(void (*)(void*, TSrvEvent*, int), void*)
function _ZN16TCustomMsgServer9PickEventEPv	TCustomMsgServer::PickEvent(void*)
function _ZN16TCustomMsgServer10EventEmptyEv	TCustomMsgServer::EventEmpty()
function _ZN16TCustomMsgServer11EventsFlushEv	TCustomMsgServer::EventsFlush()
function _ZN13TEcoTcpWorker7ExecuteEv	TEcoTcpWorker::Execute()
function _ZN13TEcoTcpWorkerD2Ev	TEcoTcpWorker::~TEcoTcpWorker()
function _ZN13TEcoTcpWorkerD0Ev	TEcoTcpWorker::~TEcoTcpWorker()
function _ZN18TMsgListenerThreadD2Ev	TMsgListenerThread::~TMsgListenerThread()
function _ZN18TMsgListenerThreadD0Ev	TMsgListenerThread::~TMsgListenerThread()
function _ZN16TMsgWorkerThreadD2Ev	TMsgWorkerThread::~TMsgWorkerThread()
function _ZN16TMsgWorkerThreadD0Ev	TMsgWorkerThread::~TMsgWorkerThread()
function _Z10ThreadProcPv	ThreadProc(void*)
function _ZN11TSnapThreadC1Ev	TSnapThread::TSnapThread()
function _ZN11TSnapThread12ThreadCreateEv	TSnapThread::ThreadCreate()
function _ZN11TSnapThread5StartEv	TSnapThread::Start()
function _ZN11TSnapThread9TerminateEv	TSnapThread::Terminate()
function _ZN11TSnapThread4KillEv	TSnapThread::Kill()
function _ZN11TSnapThread4JoinEv	TSnapThread::Join()
function _ZN11TSnapThreadD1Ev	TSnapThread::~TSnapThread()
function _ZN11TSnapThreadD0Ev	TSnapThread::~TSnapThread()
function _ZN11TSnapThread7WaitForEm	TSnapThread::WaitFor(unsigned long)
function _ZN11TSnapThread7ExecuteEv	TSnapThread::Execute()
function _ZN12TSnap7ClientC1Ev	TSnap7Client::TSnap7Client()
function _ZN12TSnap7Client11CloseThreadEv	TSnap7Client::CloseThread()
function _ZN12TSnap7ClientD2Ev	TSnap7Client::~TSnap7Client()
function _ZN12TSnap7ClientD0Ev	TSnap7Client::~TSnap7Client()
function _ZN12TSnap7Client10OpenThreadEv	TSnap7Client::OpenThread()
function _ZN12TSnap7Client5ResetEb	TSnap7Client::Reset(bool)
function _ZN12TSnap7Client12DoCompletionEv	TSnap7Client::DoCompletion()
function _ZN13TClientThread7ExecuteEv	TClientThread::Execute()
function _ZN12TSnap7Client13SetAsCallbackEPFvPviiES0_	TSnap7Client::SetAsCallback(void (*)(void*, int, int), void*)
function _ZN12TSnap7Client8GetParamEiPv	TSnap7Client::GetParam(int, void*)
function _ZN12TSnap7Client8SetParamEiPv	TSnap7Client::SetParam(int, void*)
function _ZN12TSnap7Client17CheckAsCompletionERi	TSnap7Client::CheckAsCompletion(int&)
function _ZN12TSnap7Client13StartAsyncJobEv	TSnap7Client::StartAsyncJob()
function _ZN12TSnap7Client10AsReadAreaEiiiiiPv	TSnap7Client::AsReadArea(int, int, int, int, int, void*)
function _ZN12TSnap7Client8AsDBReadEiiiPv	TSnap7Client::AsDBRead(int, int, int, void*)
function _ZN12TSnap7Client8AsMBReadEiiPv	TSnap7Client::AsMBRead(int, int, void*)
function _ZN12TSnap7Client8AsEBReadEiiPv	TSnap7Client::AsEBRead(int, int, void*)
function _ZN12TSnap7Client8AsABReadEiiPv	TSnap7Client::AsABRead(int, int, void*)
function _ZN12TSnap7Client8AsTMReadEiiPv	TSnap7Client::AsTMRead(int, int, void*)
function _ZN12TSnap7Client8AsCTReadEiiPv	TSnap7Client::AsCTRead(int, int, void*)
function _ZN12TSnap7Client11AsWriteAreaEiiiiiPv	TSnap7Client::AsWriteArea(int, int, int, int, int, void*)
function _ZN12TSnap7Client9AsDBWriteEiiiPv	TSnap7Client::AsDBWrite(int, int, int, void*)
function _ZN12TSnap7Client9AsMBWriteEiiPv	TSnap7Client::AsMBWrite(int, int, void*)
function _ZN12TSnap7Client9AsEBWriteEiiPv	TSnap7Client::AsEBWrite(int, int, void*)
function _ZN12TSnap7Client9AsABWriteEiiPv	TSnap7Client::AsABWrite(int, int, void*)
function _ZN12TSnap7Client9AsTMWriteEiiPv	TSnap7Client::AsTMWrite(int, int, void*)
function _ZN12TSnap7Client9AsCTWriteEiiPv	TSnap7Client::AsCTWrite(int, int, void*)
function _ZN12TSnap7Client18AsListBlocksOfTypeEiPA8192_tRi	TSnap7Client::AsListBlocksOfType(int, unsigned short (*) [8192], int&)
function _ZN12TSnap7Client9AsReadSZLEiiP6TS7SZLRi	TSnap7Client::AsReadSZL(int, int, TS7SZL*, int&)
function _ZN12TSnap7Client13AsReadSZLListEP10TS7SZLListRi	TSnap7Client::AsReadSZLList(TS7SZLList*, int&)
function _ZN12TSnap7Client8AsUploadEiiPvRi	TSnap7Client::AsUpload(int, int, void*, int&)
function _ZN12TSnap7Client12AsFullUploadEiiPvRi	TSnap7Client::AsFullUpload(int, int, void*, int&)
function _ZN12TSnap7Client10AsDownloadEiPvi	TSnap7Client::AsDownload(int, void*, int)
function _ZN12TSnap7Client14AsCopyRamToRomEi	TSnap7Client::AsCopyRamToRom(int)
function _ZN12TSnap7Client10AsCompressEi	TSnap7Client::AsCompress(int)
function _ZN12TSnap7Client7AsDBGetEiPvRi	TSnap7Client::AsDBGet(int, void*, int&)
function _ZN12TSnap7Client8AsDBFillEii	TSnap7Client::AsDBFill(int, int)
function _ZN12TSnap7Client16WaitAsCompletionEm	TSnap7Client::WaitAsCompletion(unsigned long)
function _ZN13TClientThreadD2Ev	TClientThread::~TClientThread()
function _ZN13TClientThreadD0Ev	TClientThread::~TClientThread()
function _ZN13TIsoTcpSocket11IsoParsePDUE14TIsoControlPDU	TIsoTcpSocket::IsoParsePDU(TIsoControlPDU)
function _ZN13TIsoTcpSocket15FragmentSkippedEi	TIsoTcpSocket::FragmentSkipped(int)
function _ZN13TIsoTcpSocketD2Ev	TIsoTcpSocket::~TIsoTcpSocket()
function _ZN13TIsoTcpSocketD0Ev	TIsoTcpSocket::~TIsoTcpSocket()
function _ZN13TIsoTcpSocketC2Ev	TIsoTcpSocket::TIsoTcpSocket()
function _ZN13TIsoTcpSocket11SetIsoErrorEi	TIsoTcpSocket::SetIsoError(int)
function _ZN13TIsoTcpSocket11ClrIsoErrorEv	TIsoTcpSocket::ClrIsoError()
function _ZN13TIsoTcpSocket15BuildControlPDUEv	TIsoTcpSocket::BuildControlPDU()
function _ZN13TIsoTcpSocket7PDUSizeEPv	TIsoTcpSocket::PDUSize(void*)
function _ZN13TIsoTcpSocket8CheckPDUEPvh	TIsoTcpSocket::CheckPDU(void*, unsigned char)
function _ZN13TIsoTcpSocket20IsoConfirmConnectionEh	TIsoTcpSocket::IsoConfirmConnection(unsigned char)
function _ZN13TIsoTcpSocket10isoConnectEv	TIsoTcpSocket::isoConnect()
function _ZN13TIsoTcpSocket13isoSendBufferEPvi	TIsoTcpSocket::isoSendBuffer(void*, int)
function _ZN13TIsoTcpSocket11IsoPDUReadyEv	TIsoTcpSocket::IsoPDUReady()
function _ZN13TIsoTcpSocket13isoDisconnectEb	TIsoTcpSocket::isoDisconnect(bool)
function _ZN13TIsoTcpSocket10isoSendPDUEP11TIsoDataPDU	TIsoTcpSocket::isoSendPDU(TIsoDataPDU*)
function _ZN13TIsoTcpSocket15isoRecvFragmentEPviRiRb	TIsoTcpSocket::isoRecvFragment(void*, int, int&, bool&)
function _ZN13TIsoTcpSocket10isoRecvPDUEP11TIsoDataPDU	TIsoTcpSocket::isoRecvPDU(TIsoDataPDU*)
function _ZN13TIsoTcpSocket13isoRecvBufferEPvRi	TIsoTcpSocket::isoRecvBuffer(void*, int&)
function _ZN13TIsoTcpSocket17isoExchangeBufferEPvRi	TIsoTcpSocket::isoExchangeBuffer(void*, int&)
function _ZN13TIsoTcpSocket14isoExchangePDUEP11TIsoDataPDU	TIsoTcpSocket::isoExchangePDU(TIsoDataPDU*)
function _ZN13TIsoTcpSocket7IsoPeekEPvR8TPDUKind	TIsoTcpSocket::IsoPeek(void*, TPDUKind&)
function _ZN15TServersManagerC2Ev	TServersManager::TServersManager()
function _ZN15TServersManager4LockEv	TServersManager::Lock()
function _ZN15TServersManager6UnlockEv	TServersManager::Unlock()
function _ZN15TServersManager9AddServerEP17TConnectionServer	TServersManager::AddServer(TConnectionServer*)
function _ZN17TConnectionServerC1Ev	TConnectionServer::TConnectionServer()
function _ZN17TConnectionServer4LockEv	TConnectionServer::Lock()
function _ZN17TConnectionServer6UnlockEv	TConnectionServer::Unlock()
function _ZN17TConnectionServer5StartEv	TConnectionServer::Start()
function _ZN17TConnectionServer7StartToEPKc	TConnectionServer::StartTo(char const*)
function _ZN17TConnectionServer4StopEv	TConnectionServer::Stop()
function _ZN17TConnectionServerD1Ev	TConnectionServer::~TConnectionServer()
function _ZN15TServersManagerD2Ev	TServersManager::~TServersManager()
function _ZN15TServersManager12CreateServerEjRP17TConnectionServer	TServersManager::CreateServer(unsigned int, TConnectionServer*&)
function _ZN15TServersManager9GetServerEjRP17TConnectionServer	TServersManager::GetServer(unsigned int, TConnectionServer*&)
function _Z24ServersManager_GetServerjRP17TConnectionServer	ServersManager_GetServer(unsigned int, TConnectionServer*&)
function _ZN17TConnectionServer11FindPartnerEj	TConnectionServer::FindPartner(unsigned int)
function _ZN17TConnectionServer9FirstFreeEv	TConnectionServer::FirstFree()
function _ZN17TConnectionServer15RegisterPartnerEP13TSnap7Partner	TConnectionServer::RegisterPartner(TSnap7Partner*)
function _ZN17TConnectionServer13RemovePartnerEP13TSnap7Partner	TConnectionServer::RemovePartner(TSnap7Partner*)
function _ZN15TServersManager13RemovePartnerEP17TConnectionServerP13TSnap7Partner	TServersManager::RemovePartner(TConnectionServer*, TSnap7Partner*)
function _Z28ServersManager_RemovePartnerP17TConnectionServerP13TSnap7Partner	ServersManager_RemovePartner(TConnectionServer*, TSnap7Partner*)
function _ZN17TConnectionServer8IncomingEi	TConnectionServer::Incoming(int)
function _ZN19TConnListenerThread7ExecuteEv	TConnListenerThread::Execute()
function _ZN13TSnap7PartnerC2Eb	TSnap7Partner::TSnap7Partner(bool)
function _ZN13TSnap7Partner11GetNextByteEv	TSnap7Partner::GetNextByte()
function _ZN13TSnap7Partner5StartEv	TSnap7Partner::Start()
function _ZN13TSnap7Partner7StartToEPKcS1_tt	TSnap7Partner::StartTo(char const*, char const*, unsigned short, unsigned short)
function _ZN13TSnap7Partner10DisconnectEv	TSnap7Partner::Disconnect()
function _ZN13TSnap7Partner8GetParamEiPv	TSnap7Partner::GetParam(int, void*)
function _ZN13TSnap7Partner8SetParamEiPv	TSnap7Partner::SetParam(int, void*)
function _ZN13TSnap7Partner9ClearRecvEv	TSnap7Partner::ClearRecv()
function _ZN13TSnap7Partner13ConnectToPeerEv	TSnap7Partner::ConnectToPeer()
function _ZN14TPartnerThread7ExecuteEv	TPartnerThread::Execute()
function _ZN13TSnap7Partner24PerformFunctionNegotiateEv	TSnap7Partner::PerformFunctionNegotiate()
function _ZN13TSnap7Partner11CloseWorkerEv	TSnap7Partner::CloseWorker()
function _ZN13TSnap7Partner4StopEv	TSnap7Partner::Stop()
function _ZN13TSnap7PartnerD2Ev	TSnap7Partner::~TSnap7Partner()
function _ZN13TSnap7PartnerD0Ev	TSnap7Partner::~TSnap7Partner()
function _ZN13TSnap7Partner9BlockSendEv	TSnap7Partner::BlockSend()
function _ZN13TSnap7Partner8PickDataEv	TSnap7Partner::PickData()
function _ZN13TSnap7Partner9BlockRecvEv	TSnap7Partner::BlockRecv()
function _ZN13TSnap7Partner17ConnectionConfirmEv	TSnap7Partner::ConnectionConfirm()
function _ZN13TSnap7Partner7ExecuteEv	TSnap7Partner::Execute()
function _ZN13TSnap7Partner6StatusEv	TSnap7Partner::Status()
function _ZN13TSnap7Partner7AsBSendEjPvi	TSnap7Partner::AsBSend(unsigned int, void*, int)
function _ZN13TSnap7Partner22CheckAsBSendCompletionERi	TSnap7Partner::CheckAsBSendCompletion(int&)
function _ZN13TSnap7Partner21WaitAsBSendCompletionEj	TSnap7Partner::WaitAsBSendCompletion(unsigned int)
function _ZN13TSnap7Partner5BSendEjPvi	TSnap7Partner::BSend(unsigned int, void*, int)
function _ZN13TSnap7Partner15SetSendCallbackEPFvPviES0_	TSnap7Partner::SetSendCallback(void (*)(void*, int), void*)
function _ZN13TSnap7Partner5BRecvERjPvRij	TSnap7Partner::BRecv(unsigned int&, void*, int&, unsigned int)
function _ZN13TSnap7Partner22CheckAsBRecvCompletionERiRjPvS0_	TSnap7Partner::CheckAsBRecvCompletion(int&, unsigned int&, void*, int&)
function _ZN13TSnap7Partner15SetRecvCallbackEPFvPvijS0_iES0_	TSnap7Partner::SetRecvCallback(void (*)(void*, int, unsigned int, void*, int), void*)
function _ZN14TPartnerThreadD1Ev	TPartnerThread::~TPartnerThread()
function _ZN14TPartnerThreadD0Ev	TPartnerThread::~TPartnerThread()
function _ZN19TConnListenerThreadD2Ev	TConnListenerThread::~TConnListenerThread()
function _ZN19TConnListenerThreadD0Ev	TConnListenerThread::~TConnListenerThread()
function _ZN10TSnap7PeerD2Ev	TSnap7Peer::~TSnap7Peer()
function _ZN10TSnap7PeerD0Ev	TSnap7Peer::~TSnap7Peer()
function _ZN10TSnap7PeerC2Ev	TSnap7Peer::TSnap7Peer()
function _ZN10TSnap7Peer8ClrErrorEv	TSnap7Peer::ClrError()
function _ZN10TSnap7Peer8SetErrorEi	TSnap7Peer::SetError(int)
function _ZN10TSnap7Peer11GetNextWordEv	TSnap7Peer::GetNextWord()
function _ZN10TSnap7Peer18NegotiatePDULengthEv	TSnap7Peer::NegotiatePDULength()
function _ZN10TSnap7Peer14PeerDisconnectEv	TSnap7Peer::PeerDisconnect()
function _ZN10TSnap7Peer11PeerConnectEv	TSnap7Peer::PeerConnect()
function _ZN13TIsoTcpWorker17IsoPerformCommandERi	TIsoTcpWorker::IsoPerformCommand(int&)
function _ZN13TIsoTcpWorker11ExecuteSendEv	TIsoTcpWorker::ExecuteSend()
function _ZN13TIsoTcpWorker7ExecuteEv	TIsoTcpWorker::Execute()
function _ZN9TS7Worker15FragmentSkippedEi	TS7Worker::FragmentSkipped(int)
function _ZN13TIsoTcpWorker11ExecuteRecvEv	TIsoTcpWorker::ExecuteRecv()
function _ZN9TS7Worker11ExecuteRecvEv	TS7Worker::ExecuteRecv()
function _ZN9TS7WorkerC2Ev	TS7Worker::TS7Worker()
function _ZN12TSnap7Server18CreateWorkerSocketEi	TSnap7Server::CreateWorkerSocket(int)
function _ZN9TS7Worker11CheckPDU_inEi	TS7Worker::CheckPDU_in(int)
function _ZN9TS7Worker3BCDEt	TS7Worker::BCD(unsigned short)
function _ZN9TS7Worker8FillTimeEP7TS7Time	TS7Worker::FillTime(TS7Time*)
function _ZN9TS7Worker7DoEventEjttttt	TS7Worker::DoEvent(unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
function _ZN9TS7Worker13PerformPDUAckERi	TS7Worker::PerformPDUAck(int&)
function _ZN9TS7Worker12DataSizeByteEi	TS7Worker::DataSizeByte(int)
function _ZN9TS7Worker11RA_NotFoundEP15TResFunReadItemR3TEv	TS7Worker::RA_NotFound(TResFunReadItem*, TEv&)
function _ZN9TS7Worker13RA_OutOfRangeEP15TResFunReadItemR3TEv	TS7Worker::RA_OutOfRange(TResFunReadItem*, TEv&)
function _ZN9TS7Worker14RA_SizeOverPDUEP15TResFunReadItemR3TEv	TS7Worker::RA_SizeOverPDU(TResFunReadItem*, TEv&)
function _ZN9TS7Worker11WA_NotFoundER3TEv	TS7Worker::WA_NotFound(TEv&)
function _ZN9TS7Worker23WA_InvalidTransportSizeER3TEv	TS7Worker::WA_InvalidTransportSize(TEv&)
function _ZN9TS7Worker13WA_OutOfRangeER3TEv	TS7Worker::WA_OutOfRange(TEv&)
function _ZN9TS7Worker19WA_DataSizeMismatchER3TEv	TS7Worker::WA_DataSizeMismatch(TEv&)
function _ZN9TS7Worker24PerformFunctionNegotiateEv	TS7Worker::PerformFunctionNegotiate()
function _ZN9TS7Worker22PerformFunctionControlEh	TS7Worker::PerformFunctionControl(unsigned char)
function _ZN9TS7Worker21PerformFunctionUploadEv	TS7Worker::PerformFunctionUpload()
function _ZN9TS7Worker23PerformFunctionDownloadEv	TS7Worker::PerformFunctionDownload()
function _ZN9TS7Worker22PerformGroupProgrammerEv	TS7Worker::PerformGroupProgrammer()
function _ZN9TS7Worker22PerformGroupCyclicDataEv	TS7Worker::PerformGroupCyclicData()
function _ZN9TS7Worker11BLK_ListAllER3TCB	TS7Worker::BLK_ListAll(TCB&)
function _ZN9TS7Worker22BLK_NoResource_ListBoTEP14TDataFunGetBotR3TCB	TS7Worker::BLK_NoResource_ListBoT(TDataFunGetBot*, TCB&)
function _ZN9TS7Worker11BLK_ListBoTEhbR3TCB	TS7Worker::BLK_ListBoT(unsigned char, bool, TCB&)
function _ZN9TS7Worker25BLK_NoResource_GetBlkInfoEP17TResDataBlockInfoR3TCB	TS7Worker::BLK_NoResource_GetBlkInfo(TResDataBlockInfo*, TCB&)
function _ZN9TS7Worker26BLK_GetBlockNum_GetBlkInfoERiP17TReqDataBlockInfo	TS7Worker::BLK_GetBlockNum_GetBlkInfo(int&, TReqDataBlockInfo*)
function _ZN9TS7Worker26BLK_DoBlockInfo_GetBlkInfoEP7TS7AreaP17TResDataBlockInfoR3TCB	TS7Worker::BLK_DoBlockInfo_GetBlkInfo(TS7Area*, TResDataBlockInfo*, TCB&)
function _ZN9TS7Worker15SZLNotAvailableEv	TS7Worker::SZLNotAvailable()
function _ZN9TS7Worker14SZLSystemStateEv	TS7Worker::SZLSystemState()
function _ZN9TS7Worker7SZLDataEPvi	TS7Worker::SZLData(void*, int)
function _ZN9TS7Worker9SZL_ID424Ev	TS7Worker::SZL_ID424()
function _ZN9TS7Worker16SZL_ID131_IDX003Ev	TS7Worker::SZL_ID131_IDX003()
function _ZN9TS7Worker15PerformGroupSZLEv	TS7Worker::PerformGroupSZL()
function _ZN9TS7Worker20PerformGroupSecurityEv	TS7Worker::PerformGroupSecurity()
function _ZN9TS7Worker15PerformGetClockEv	TS7Worker::PerformGetClock()
function _ZN9TS7Worker15PerformSetClockEv	TS7Worker::PerformSetClock()
function _ZN12TSnap7ServerC2Ev	TSnap7Server::TSnap7Server()
function _ZN12TSnap7Server6FindDBEt	TSnap7Server::FindDB(unsigned short)
function _ZN9TS7Worker7GetAreaEht	TS7Worker::GetArea(unsigned char, unsigned short)
function _ZN9TS7Worker14BLK_GetBlkInfoER3TCB	TS7Worker::BLK_GetBlkInfo(TCB&)
function _ZN9TS7Worker21PerformGroupBlockInfoEv	TS7Worker::PerformGroupBlockInfo()
function _ZN9TS7Worker17PerformPDUUsrDataERi	TS7Worker::PerformPDUUsrData(int&)
function _ZN12TSnap7Server9IndexOfDBEt	TSnap7Server::IndexOfDB(unsigned short)
function _ZN12TSnap7Server15FindFirstFreeDBEv	TSnap7Server::FindFirstFreeDB()
function _ZN12TSnap7Server10RegisterDBEtPvt	TSnap7Server::RegisterDB(unsigned short, void*, unsigned short)
function _ZN12TSnap7Server11RegisterSysEiPvt	TSnap7Server::RegisterSys(int, void*, unsigned short)
function _ZN12TSnap7Server12UnregisterDBEt	TSnap7Server::UnregisterDB(unsigned short)
function _ZN12TSnap7Server13UnregisterSysEi	TSnap7Server::UnregisterSys(int)
function _ZN12TSnap7Server10DisposeAllEv	TSnap7Server::DisposeAll()
function _ZN12TSnap7ServerD2Ev	TSnap7Server::~TSnap7Server()
function _ZN12TSnap7ServerD0Ev	TSnap7Server::~TSnap7Server()
function _ZN12TSnap7Server7StartToEPKc	TSnap7Server::StartTo(char const*)
function _ZN12TSnap7Server8GetParamEiPv	TSnap7Server::GetParam(int, void*)
function _ZN12TSnap7Server8SetParamEiPv	TSnap7Server::SetParam(int, void*)
function _ZN12TSnap7Server12RegisterAreaEitPvt	TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short)
function _ZN12TSnap7Server14UnregisterAreaEit	TSnap7Server::UnregisterArea(int, unsigned short)
function _ZN12TSnap7Server8LockAreaEit	TSnap7Server::LockArea(int, unsigned short)
function _ZN12TSnap7Server10UnlockAreaEit	TSnap7Server::UnlockArea(int, unsigned short)
function _ZN12TSnap7Server21SetReadEventsCallBackEPFvPvP9TSrvEventiES0_	TSnap7Server::SetReadEventsCallBack(void (*)(void*, TSrvEvent*, int), void*)
function _ZN12TSnap7Server17SetRWAreaCallBackEPFiPviiP6TS7TagS0_ES0_	TSnap7Server::SetRWAreaCallBack(int (*)(void*, int, int, TS7Tag*, void*), void*)
function _ZN12TSnap7Server11DoReadEventEijttttt	TSnap7Server::DoReadEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
function _ZN9TS7Worker11DoReadEventEjttttt	TS7Worker::DoReadEvent(unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
function _ZN12TSnap7Server10DoReadAreaEiiiiiiPv	TSnap7Server::DoReadArea(int, int, int, int, int, int, void*)
function _ZN9TS7Worker8ReadAreaEP15TResFunReadItemP15TReqFunReadItemRiR3TEv	TS7Worker::ReadArea(TResFunReadItem*, TReqFunReadItem*, int&, TEv&)
function _ZN9TS7Worker19PerformFunctionReadEv	TS7Worker::PerformFunctionRead()
function _ZN12TSnap7Server11DoWriteAreaEiiiiiiPv	TSnap7Server::DoWriteArea(int, int, int, int, int, int, void*)
function _ZN9TS7Worker9WriteAreaEP20TReqFunWriteDataItemP16TReqFunWriteItemR3TEv	TS7Worker::WriteArea(TReqFunWriteDataItem*, TReqFunWriteItem*, TEv&)
function _ZN9TS7Worker20PerformFunctionWriteEv	TS7Worker::PerformFunctionWrite()
function _ZN9TS7Worker17PerformPDURequestERi	TS7Worker::PerformPDURequest(int&)
function _ZN9TS7Worker17IsoPerformCommandERi	TS7Worker::IsoPerformCommand(int&)
function _ZN13TIsoTcpWorkerD1Ev	TIsoTcpWorker::~TIsoTcpWorker()
function _ZN13TIsoTcpWorkerD0Ev	TIsoTcpWorker::~TIsoTcpWorker()
function _ZN9TS7WorkerD1Ev	TS7Worker::~TS7Worker()
function _ZN9TS7WorkerD0Ev	TS7Worker::~TS7Worker()
function _Z17IpAddressToStringB5cxx11i	_Z17IpAddressToStringB5cxx11i
function _Z11NumToStringB5cxx11iij	_Z11NumToStringB5cxx11iij
function _Z11IntToStringB5cxx11i	_Z11IntToStringB5cxx11i
function _ZL12TxtStartSizeR9TSrvEvent	TxtStartSize(TSrvEvent&)
function _Z12TimeToStringB5cxx11l	_Z12TimeToStringB5cxx11l
function _ZL10SenderTextR9TSrvEvent	SenderText(TSrvEvent&)
function _ZL13TxtDataResultR9TSrvEvent	TxtDataResult(TSrvEvent&)
function _ZL12StrBlockTypet	StrBlockType(unsigned short)
function _ZL7TxtAreaR9TSrvEvent	TxtArea(TSrvEvent&)
function _ZL9IsoTextOfi	IsoTextOf(int)
function _ZL9TcpTextOfi	TcpTextOf(int)
function _Z10EvtSrvTextB5cxx11R9TSrvEvent	_Z10EvtSrvTextB5cxx11R9TSrvEvent
function _Z10ErrCliTextB5cxx11i	_Z10ErrCliTextB5cxx11i
function _Z10ErrSrvTextB5cxx11i	_Z10ErrSrvTextB5cxx11i
function _Z10ErrParTextB5cxx11i	_Z10ErrParTextB5cxx11i
function _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag	void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
function _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag	void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
function _ZN17TSnap7MicroClientD1Ev	TSnap7MicroClient::~TSnap7MicroClient()
function _ZN17TSnap7MicroClientD0Ev	TSnap7MicroClient::~TSnap7MicroClient()
function _ZN17TSnap7MicroClientC1Ev	TSnap7MicroClient::TSnap7MicroClient()
function _ZN17TSnap7MicroClient18opListBlocksOfTypeEv	TSnap7MicroClient::opListBlocksOfType()
function _ZN17TSnap7MicroClient8FillTimeEtPc	TSnap7MicroClient::FillTime(unsigned short, char*)
function _ZN17TSnap7MicroClient8opDeleteEv	TSnap7MicroClient::opDelete()
function _ZN17TSnap7MicroClient9BCDtoByteEh	TSnap7MicroClient::BCDtoByte(unsigned char)
function _ZN17TSnap7MicroClient9WordToBCDEt	TSnap7MicroClient::WordToBCD(unsigned short)
function _ZN17TSnap7MicroClient9opPlcStopEv	TSnap7MicroClient::opPlcStop()
function _ZN17TSnap7MicroClient13opPlcHotStartEv	TSnap7MicroClient::opPlcHotStart()
function _ZN17TSnap7MicroClient14opPlcColdStartEv	TSnap7MicroClient::opPlcColdStart()
function _ZN17TSnap7MicroClient14opCopyRamToRomEv	TSnap7MicroClient::opCopyRamToRom()
function _ZN17TSnap7MicroClient10opCompressEv	TSnap7MicroClient::opCompress()
function _ZN17TSnap7MicroClient8CpuErrorEi	TSnap7MicroClient::CpuError(int)
function _ZN17TSnap7MicroClient15opReadMultiVarsEv	TSnap7MicroClient::opReadMultiVars()
function _ZN17TSnap7MicroClient12opListBlocksEv	TSnap7MicroClient::opListBlocks()
function _ZN17TSnap7MicroClient13opAgBlockInfoEv	TSnap7MicroClient::opAgBlockInfo()
function _ZN17TSnap7MicroClient8opUploadEv	TSnap7MicroClient::opUpload()
function _ZN17TSnap7MicroClient9opReadSZLEv	TSnap7MicroClient::opReadSZL()
function _ZN17TSnap7MicroClient13opReadSZLListEv	TSnap7MicroClient::opReadSZLList()
function _ZN17TSnap7MicroClient14opGetOrderCodeEv	TSnap7MicroClient::opGetOrderCode()
function _ZN17TSnap7MicroClient12opGetCpuInfoEv	TSnap7MicroClient::opGetCpuInfo()
function _ZN17TSnap7MicroClient14opGetPlcStatusEv	TSnap7MicroClient::opGetPlcStatus()
function _ZN17TSnap7MicroClient15opGetProtectionEv	TSnap7MicroClient::opGetProtection()
function _ZN17TSnap7MicroClient13opGetDateTimeEv	TSnap7MicroClient::opGetDateTime()
function _ZN17TSnap7MicroClient13opSetDateTimeEv	TSnap7MicroClient::opSetDateTime()
function _ZN17TSnap7MicroClient13opSetPasswordEv	TSnap7MicroClient::opSetPassword()
function _ZN17TSnap7MicroClient15opClearPasswordEv	TSnap7MicroClient::opClearPassword()
function _ZN17TSnap7MicroClient12DataSizeByteEi	TSnap7MicroClient::DataSizeByte(int)
function _ZN17TSnap7MicroClient10opReadAreaEv	TSnap7MicroClient::opReadArea()
function _ZN17TSnap7MicroClient7opDBGetEv	TSnap7MicroClient::opDBGet()
function _ZN17TSnap7MicroClient11opWriteAreaEv	TSnap7MicroClient::opWriteArea()
function _ZN17TSnap7MicroClient8opDBFillEv	TSnap7MicroClient::opDBFill()
function _ZN17TSnap7MicroClient16opWriteMultiVarsEv	TSnap7MicroClient::opWriteMultiVars()
function _ZN17TSnap7MicroClient7DWordAtEPv	TSnap7MicroClient::DWordAt(void*)
function _ZN17TSnap7MicroClient11opGetCpInfoEv	TSnap7MicroClient::opGetCpInfo()
function _ZN17TSnap7MicroClient10CheckBlockEiiPvi	TSnap7MicroClient::CheckBlock(int, int, void*, int)
function _ZN17TSnap7MicroClient15SubBlockToBlockEi	TSnap7MicroClient::SubBlockToBlock(int)
function _ZN17TSnap7MicroClient10opDownloadEv	TSnap7MicroClient::opDownload()
function _ZN17TSnap7MicroClient16PerformOperationEv	TSnap7MicroClient::PerformOperation()
function _ZN17TSnap7MicroClient10DisconnectEv	TSnap7MicroClient::Disconnect()
function _ZN17TSnap7MicroClient7ConnectEv	TSnap7MicroClient::Connect()
function _ZN17TSnap7MicroClient5ResetEb	TSnap7MicroClient::Reset(bool)
function _ZN17TSnap7MicroClient17SetConnectionTypeEt	TSnap7MicroClient::SetConnectionType(unsigned short)
function _ZN17TSnap7MicroClient19SetConnectionParamsEPKctt	TSnap7MicroClient::SetConnectionParams(char const*, unsigned short, unsigned short)
function _ZN17TSnap7MicroClient9ConnectToEPKcii	TSnap7MicroClient::ConnectTo(char const*, int, int)
function _ZN17TSnap7MicroClient8GetParamEiPv	TSnap7MicroClient::GetParam(int, void*)
function _ZN17TSnap7MicroClient8SetParamEiPv	TSnap7MicroClient::SetParam(int, void*)
function _ZN17TSnap7MicroClient8ReadAreaEiiiiiPv	TSnap7MicroClient::ReadArea(int, int, int, int, int, void*)
function _ZN17TSnap7MicroClient9WriteAreaEiiiiiPv	TSnap7MicroClient::WriteArea(int, int, int, int, int, void*)
function _ZN17TSnap7MicroClient13ReadMultiVarsEP11TS7DataItemi	TSnap7MicroClient::ReadMultiVars(TS7DataItem*, int)
function _ZN17TSnap7MicroClient14WriteMultiVarsEP11TS7DataItemi	TSnap7MicroClient::WriteMultiVars(TS7DataItem*, int)
function _ZN17TSnap7MicroClient6DBReadEiiiPv	TSnap7MicroClient::DBRead(int, int, int, void*)
function _ZN17TSnap7MicroClient7DBWriteEiiiPv	TSnap7MicroClient::DBWrite(int, int, int, void*)
function _ZN17TSnap7MicroClient6MBReadEiiPv	TSnap7MicroClient::MBRead(int, int, void*)
function _ZN17TSnap7MicroClient7MBWriteEiiPv	TSnap7MicroClient::MBWrite(int, int, void*)
function _ZN17TSnap7MicroClient6EBReadEiiPv	TSnap7MicroClient::EBRead(int, int, void*)
function _ZN17TSnap7MicroClient7EBWriteEiiPv	TSnap7MicroClient::EBWrite(int, int, void*)
function _ZN17TSnap7MicroClient6ABReadEiiPv	TSnap7MicroClient::ABRead(int, int, void*)
function _ZN17TSnap7MicroClient7ABWriteEiiPv	TSnap7MicroClient::ABWrite(int, int, void*)
function _ZN17TSnap7MicroClient6TMReadEiiPv	TSnap7MicroClient::TMRead(int, int, void*)
function _ZN17TSnap7MicroClient7TMWriteEiiPv	TSnap7MicroClient::TMWrite(int, int, void*)
function _ZN17TSnap7MicroClient6CTReadEiiPv	TSnap7MicroClient::CTRead(int, int, void*)
function _ZN17TSnap7MicroClient7CTWriteEiiPv	TSnap7MicroClient::CTWrite(int, int, void*)
function _ZN17TSnap7MicroClient10ListBlocksEP13TS7BlocksList	TSnap7MicroClient::ListBlocks(TS7BlocksList*)
function _ZN17TSnap7MicroClient14GetAgBlockInfoEiiP12TS7BlockInfo	TSnap7MicroClient::GetAgBlockInfo(int, int, TS7BlockInfo*)
function _ZN17TSnap7MicroClient14GetPgBlockInfoEPvP12TS7BlockInfoi	TSnap7MicroClient::GetPgBlockInfo(void*, TS7BlockInfo*, int)
function _ZN17TSnap7MicroClient16ListBlocksOfTypeEiPA8192_tRi	TSnap7MicroClient::ListBlocksOfType(int, unsigned short (*) [8192], int&)
function _ZN17TSnap7MicroClient6UploadEiiPvRi	TSnap7MicroClient::Upload(int, int, void*, int&)
function _ZN17TSnap7MicroClient10FullUploadEiiPvRi	TSnap7MicroClient::FullUpload(int, int, void*, int&)
function _ZN17TSnap7MicroClient8DownloadEiPvi	TSnap7MicroClient::Download(int, void*, int)
function _ZN17TSnap7MicroClient6DeleteEii	TSnap7MicroClient::Delete(int, int)
function _ZN17TSnap7MicroClient5DBGetEiPvRi	TSnap7MicroClient::DBGet(int, void*, int&)
function _ZN17TSnap7MicroClient6DBFillEii	TSnap7MicroClient::DBFill(int, int)
function _ZN17TSnap7MicroClient14GetPlcDateTimeER2tm	TSnap7MicroClient::GetPlcDateTime(tm&)
function _ZN17TSnap7MicroClient14SetPlcDateTimeEP2tm	TSnap7MicroClient::SetPlcDateTime(tm*)
function _ZN17TSnap7MicroClient20SetPlcSystemDateTimeEv	TSnap7MicroClient::SetPlcSystemDateTime()
function _ZN17TSnap7MicroClient12GetOrderCodeEP12TS7OrderCode	TSnap7MicroClient::GetOrderCode(TS7OrderCode*)
function _ZN17TSnap7MicroClient10GetCpuInfoEP10TS7CpuInfo	TSnap7MicroClient::GetCpuInfo(TS7CpuInfo*)
function _ZN17TSnap7MicroClient9GetCpInfoEP9TS7CpInfo	TSnap7MicroClient::GetCpInfo(TS7CpInfo*)
function _ZN17TSnap7MicroClient7ReadSZLEiiP6TS7SZLRi	TSnap7MicroClient::ReadSZL(int, int, TS7SZL*, int&)
function _ZN17TSnap7MicroClient11ReadSZLListEP10TS7SZLListRi	TSnap7MicroClient::ReadSZLList(TS7SZLList*, int&)
function _ZN17TSnap7MicroClient11PlcHotStartEv	TSnap7MicroClient::PlcHotStart()
function _ZN17TSnap7MicroClient12PlcColdStartEv	TSnap7MicroClient::PlcColdStart()
function _ZN17TSnap7MicroClient7PlcStopEv	TSnap7MicroClient::PlcStop()
function _ZN17TSnap7MicroClient12CopyRamToRomEi	TSnap7MicroClient::CopyRamToRom(int)
function _ZN17TSnap7MicroClient8CompressEi	TSnap7MicroClient::Compress(int)
function _ZN17TSnap7MicroClient12GetPlcStatusERi	TSnap7MicroClient::GetPlcStatus(int&)
function _ZN17TSnap7MicroClient13GetProtectionEP13TS7Protection	TSnap7MicroClient::GetProtection(TS7Protection*)
function _ZN17TSnap7MicroClient18SetSessionPasswordEPc	TSnap7MicroClient::SetSessionPassword(char*)
function _ZN17TSnap7MicroClient20ClearSessionPasswordEv	TSnap7MicroClient::ClearSessionPassword()
function _Z7libinitv	libinit()
function _Z7libdonev	libdone()
function Cli_Create	Cli_Create
function Cli_Destroy	Cli_Destroy
function Cli_SetConnectionParams	Cli_SetConnectionParams
function Cli_SetConnectionType	Cli_SetConnectionType
function Cli_ConnectTo	Cli_ConnectTo
function Cli_Connect	Cli_Connect
function Cli_Disconnect	Cli_Disconnect
function Cli_GetParam	Cli_GetParam
function Cli_SetParam	Cli_SetParam
function Cli_SetAsCallback	Cli_SetAsCallback
function Cli_ReadArea	Cli_ReadArea
function Cli_WriteArea	Cli_WriteArea
function Cli_ReadMultiVars	Cli_ReadMultiVars
function Cli_WriteMultiVars	Cli_WriteMultiVars
function Cli_DBRead	Cli_DBRead
function Cli_DBWrite	Cli_DBWrite
function Cli_MBRead	Cli_MBRead
function Cli_MBWrite	Cli_MBWrite
function Cli_EBRead	Cli_EBRead
function Cli_EBWrite	Cli_EBWrite
function Cli_ABRead	Cli_ABRead
function Cli_ABWrite	Cli_ABWrite
function Cli_TMRead	Cli_TMRead
function Cli_TMWrite	Cli_TMWrite
function Cli_CTRead	Cli_CTRead
function Cli_CTWrite	Cli_CTWrite
function Cli_ListBlocks	Cli_ListBlocks
function Cli_GetAgBlockInfo	Cli_GetAgBlockInfo
function Cli_GetPgBlockInfo	Cli_GetPgBlockInfo
function Cli_ListBlocksOfType	Cli_ListBlocksOfType
function Cli_Upload	Cli_Upload
function Cli_FullUpload	Cli_FullUpload
function Cli_Download	Cli_Download
function Cli_Delete	Cli_Delete
function Cli_DBGet	Cli_DBGet
function Cli_DBFill	Cli_DBFill
function Cli_GetPlcDateTime	Cli_GetPlcDateTime
function Cli_SetPlcDateTime	Cli_SetPlcDateTime
function Cli_SetPlcSystemDateTime	Cli_SetPlcSystemDateTime
function Cli_GetOrderCode	Cli_GetOrderCode
function Cli_GetCpuInfo	Cli_GetCpuInfo
function Cli_GetCpInfo	Cli_GetCpInfo
function Cli_ReadSZL	Cli_ReadSZL
function Cli_ReadSZLList	Cli_ReadSZLList
function Cli_PlcHotStart	Cli_PlcHotStart
function Cli_PlcColdStart	Cli_PlcColdStart
function Cli_PlcStop	Cli_PlcStop
function Cli_CopyRamToRom	Cli_CopyRamToRom
function Cli_Compress	Cli_Compress
function Cli_GetPlcStatus	Cli_GetPlcStatus
function Cli_GetProtection	Cli_GetProtection
function Cli_SetSessionPassword	Cli_SetSessionPassword
function Cli_ClearSessionPassword	Cli_ClearSessionPassword
function Cli_IsoExchangeBuffer	Cli_IsoExchangeBuffer
function Cli_GetExecTime	Cli_GetExecTime
function Cli_GetLastError	Cli_GetLastError
function Cli_GetPduLength	Cli_GetPduLength
function Cli_ErrorText	Cli_ErrorText
function Cli_GetConnected	Cli_GetConnected
function Cli_AsReadArea	Cli_AsReadArea
function Cli_AsWriteArea	Cli_AsWriteArea
function Cli_AsDBRead	Cli_AsDBRead
function Cli_AsDBWrite	Cli_AsDBWrite
function Cli_AsMBRead	Cli_AsMBRead
function Cli_AsMBWrite	Cli_AsMBWrite
function Cli_AsEBRead	Cli_AsEBRead
function Cli_AsEBWrite	Cli_AsEBWrite
function Cli_AsABRead	Cli_AsABRead
function Cli_AsABWrite	Cli_AsABWrite
function Cli_AsTMRead	Cli_AsTMRead
function Cli_AsTMWrite	Cli_AsTMWrite
function Cli_AsCTRead	Cli_AsCTRead
function Cli_AsCTWrite	Cli_AsCTWrite
function Cli_AsListBlocksOfType	Cli_AsListBlocksOfType
function Cli_AsReadSZL	Cli_AsReadSZL
function Cli_AsReadSZLList	Cli_AsReadSZLList
function Cli_AsUpload	Cli_AsUpload
function Cli_AsFullUpload	Cli_AsFullUpload
function Cli_AsDownload	Cli_AsDownload
function Cli_AsCopyRamToRom	Cli_AsCopyRamToRom
function Cli_AsCompress	Cli_AsCompress
function Cli_AsDBGet	Cli_AsDBGet
function Cli_AsDBFill	Cli_AsDBFill
function Cli_CheckAsCompletion	Cli_CheckAsCompletion
function Cli_WaitAsCompletion	Cli_WaitAsCompletion
function Srv_Create	Srv_Create
function Srv_Destroy	Srv_Destroy
function Srv_GetParam	Srv_GetParam
function Srv_SetParam	Srv_SetParam
function Srv_StartTo	Srv_StartTo
function Srv_Start	Srv_Start
function Srv_Stop	Srv_Stop
function Srv_RegisterArea	Srv_RegisterArea
function Srv_UnregisterArea	Srv_UnregisterArea
function Srv_LockArea	Srv_LockArea
function Srv_UnlockArea	Srv_UnlockArea
function Srv_GetStatus	Srv_GetStatus
function Srv_SetCpuStatus	Srv_SetCpuStatus
function Srv_ErrorText	Srv_ErrorText
function Srv_EventText	Srv_EventText
function Srv_PickEvent	Srv_PickEvent
function Srv_ClearEvents	Srv_ClearEvents
function Srv_GetMask	Srv_GetMask
function Srv_SetMask	Srv_SetMask
function Srv_SetEventsCallback	Srv_SetEventsCallback
function Srv_SetReadEventsCallback	Srv_SetReadEventsCallback
function Srv_SetRWAreaCallback	Srv_SetRWAreaCallback
function Par_Create	Par_Create
function Par_Destroy	Par_Destroy
function Par_GetParam	Par_GetParam
function Par_SetParam	Par_SetParam
function Par_StartTo	Par_StartTo
function Par_Start	Par_Start
function Par_Stop	Par_Stop
function Par_BSend	Par_BSend
function Par_AsBSend	Par_AsBSend
function Par_CheckAsBSendCompletion	Par_CheckAsBSendCompletion
function Par_WaitAsBSendCompletion	Par_WaitAsBSendCompletion
function Par_SetSendCallback	Par_SetSendCallback
function Par_BRecv	Par_BRecv
function Par_CheckAsBRecvCompletion	Par_CheckAsBRecvCompletion
function Par_SetRecvCallback	Par_SetRecvCallback
function Par_GetTimes	Par_GetTimes
function Par_GetStats	Par_GetStats
function Par_GetLastError	Par_GetLastError
function Par_GetStatus	Par_GetStatus
function Par_ErrorText	Par_ErrorText
sec: .fini
function _fini	_fini
sec: .rodata
sec: .eh_frame_hdr
sec: .eh_frame
sec: .gcc_except_table
sec: .init_array
sec: .fini_array
sec: .jcr
sec: .data.rel.ro
sec: .dynamic
sec: .got
sec: .got.plt
sec: .data
sec: .bss
sec: .comment
sec: .shstrtab
sec: .symtab
sec: .strtab
image: /usr/lib/x86_64-linux-gnu/libstdc++.so.6
image: /lib/x86_64-linux-gnu/libgcc_s.so.1
image: /lib/x86_64-linux-gnu/libc.so.6
image: /lib/x86_64-linux-gnu/libdl.so.2
image: /lib/x86_64-linux-gnu/libpthread.so.0
image: /lib/x86_64-linux-gnu/librt.so.1
image: /lib/x86_64-linux-gnu/libm.so.6
_init: 1 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_init
0x7f7d1065d960: sub rsp, 0x8
0x7f7d1065d964: mov rax, qword ptr [rip+0x22219d]  reg(10, 7f7d1065d960) 
0x7f7d1065d96b: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065d96e: jz 0x7f7d1065d975
0x7f7d1065d975: add rsp, 0x8
0x7f7d1065d979: ret 
frame_dummy: 1 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	frame_dummy
0x7f7d1065f530: lea rdi, ptr [rip+0x21fda9]  reg(3, 1) 
0x7f7d1065f537: cmp qword ptr [rdi], 0x0  mem(7f7d1087f2e0, 0) 
0x7f7d1065f53b: jnz 0x7f7d1065f548
0x7f7d1065f53d: jmp 0x7f7d1065f4a0
register_tm_clones: 7f7d1087f2e0 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	register_tm_clones
0x7f7d1065f4a0: lea rdi, ptr [rip+0x225051]  reg(3, 7f7d1087f2e0) 
0x7f7d1065f4a7: lea rsi, ptr [rip+0x22504a]  reg(4, 7ffd5f796d78) 
0x7f7d1065f4ae: push rbp
0x7f7d1065f4af: sub rsi, rdi  reg(4, 7f7d108844f8)  reg(3, 7f7d108844f8) 
0x7f7d1065f4b2: mov rbp, rsp
0x7f7d1065f4b5: sar rsi, 0x3  reg(4, 0) 
0x7f7d1065f4b9: mov rax, rsi  reg(10, 2)  reg(4, 0) 
0x7f7d1065f4bc: shr rax, 0x3f  reg(10, 0) 
0x7f7d1065f4c0: add rsi, rax  reg(4, 0)  reg(10, 0) 
0x7f7d1065f4c3: sar rsi, 0x1  reg(4, 0) 
0x7f7d1065f4c6: jz 0x7f7d1065f4e0
0x7f7d1065f4e0: pop rbp
0x7f7d1065f4e1: ret 
_GLOBAL__sub_I_snap_msgsock.cpp: 1 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_GLOBAL__sub_I_snap_msgsock.cpp
0x7f7d10660892: sub rsp, 0x8
0x7f7d10660896: lea rdi, ptr [rip+0x223c63]  reg(3, 1) 
0x7f7d1066089d: call 0x7f7d1065e2c0
SocketsLayer::SocketsLayer()@plt: 7f7d10884500 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_ZN12SocketsLayerC1Ev@plt
0x7f7d1065e2c0: jmp qword ptr [rip+0x2221ea]
0x7f7d1065e2c6: push 0x93 
0x7f7d1065e2cb: jmp 0x7f7d1065d980
SocketsLayer::SocketsLayer(): 7f7d10884500 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_ZN12SocketsLayerC2Ev
0x7f7d10660874: sub rsp, 0x8
0x7f7d10660878: call 0x7f7d1065dff0
RawSocketsCheck()@plt: 7f7d10884500 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_Z15RawSocketsCheckv@plt
0x7f7d1065dff0: jmp qword ptr [rip+0x222352]
0x7f7d1065dff6: push 0x66 
0x7f7d1065dffb: jmp 0x7f7d1065d980
RawSocketsCheck(): 7f7d10884500 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_Z15RawSocketsCheckv
0x7f7d1066084b: push rbx  reg(7, 7f7d1087f2c0) 
0x7f7d1066084c: mov edx, 0x1  reg(54, 7ffd5f796d88) 
0x7f7d10660851: mov esi, 0x3  reg(47, 7ffd5f796d78) 
0x7f7d10660856: mov edi, 0x2  reg(45, 7f7d10884500) 
0x7f7d1066085b: call 0x7f7d1065e940
socket@plt: 2 3 1 7ffd5f796d88	socket@plt
0x7f7d1065e940: jmp qword ptr [rip+0x221eaa]
0x7f7d1065e946: push 0xfb 
0x7f7d1065e94b: jmp 0x7f7d1065d980
0x7f7d10660860: cmp eax, 0xffffffff  reg(56, 3) 
0x7f7d10660863: setnz bl  reg(36, 7f7d1087f2c0) 
0x7f7d10660866: jz 0x7f7d1066086f
0x7f7d10660868: mov edi, eax  reg(45, 2)  reg(56, 3) 
0x7f7d1066086a: call 0x7f7d1065dbb0
close@plt: 3 3 1 7ffd5f796d88	close@plt
0x7f7d1065dbb0: jmp qword ptr [rip+0x222572]
0x7f7d1065dbb6: push 0x22 
0x7f7d1065dbbb: jmp 0x7f7d1065d980
0x7f7d1066086f: mov eax, ebx  reg(56, 0)  reg(53, 7f7d1087f201) 
0x7f7d10660871: pop rbx  reg(7, 7f7d1087f201) 
0x7f7d10660872: ret 
0x7f7d1066087d: cmp al, 0x1  reg(27, 1087f201) 
0x7f7d1066087f: sbb eax, eax  reg(56, 1087f201)  reg(56, 1087f201) 
0x7f7d10660881: and eax, 0xfffffffe  reg(56, 0) 
0x7f7d10660884: add eax, 0x3  reg(56, 0) 
0x7f7d10660887: mov dword ptr [rip+0x223c6f], eax  reg(56, 3)  mem(7f7d108844fc, 0) 
0x7f7d1066088d: add rsp, 0x8
0x7f7d10660891: ret 
0x7f7d106608a2: lea rdx, ptr [rip+0x2204d7]  reg(8, 1) 
0x7f7d106608a9: lea rsi, ptr [rip+0x223c50]  reg(4, 3) 
0x7f7d106608b0: mov rdi, qword ptr [rip+0x21f1a1]  reg(3, 3) 
0x7f7d106608b7: call 0x7f7d1065e0a0
__cxa_atexit@plt: 7f7d1065f566 7f7d10884500 7f7d10880d80 7ffd5f796d88	__cxa_atexit@plt
0x7f7d1065e0a0: jmp qword ptr [rip+0x2222fa]
0x7f7d1065e0a6: push 0x71 
0x7f7d1065e0ab: jmp 0x7f7d1065d980
0x7f7d106608bc: add rsp, 0x8
0x7f7d106608c0: ret 
libinit(): 1 7ffd5f796d78 7ffd5f796d88 a0	_Z7libinitv
0x7f7d10675489: ret 
_init: 1 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	_init
frame_dummy: 1 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	frame_dummy
register_tm_clones: 7f7d10af4df8 7ffd5f796d78 7ffd5f796d88 7ffd5f796d88	register_tm_clones
_start: 7f7d24505168 1 7f7d242eeab0 7ffd5f796d88	_start
0x403230: xor ebp, ebp
0x403232: mov r9, rdx  reg(12, 0)  reg(8, 7f7d242eeab0) 
0x403235: pop rsi  reg(4, 1) 
0x403236: mov rdx, rsp  reg(8, 7f7d242eeab0) 
0x403239: and rsp, 0xfffffffffffffff0
0x40323d: push rax  reg(10, 1c) 
0x40323e: push rsp
0x40323f: mov r8, 0x4045e0  reg(11, 7f7d245056f8) 
0x403246: mov rcx, 0x404570  reg(9, 7ffd5f796d88) 
0x40324d: mov rdi, 0x4034c5  reg(3, 7f7d24505168) 
0x403254: call 0x403150
__libc_start_main@plt: 4034c5 1 7ffd5f796d78 404570	__libc_start_main@plt
0x403150: jmp qword ptr [rip+0x2032a2]
0x403156: push 0x7c 
0x40315b: jmp 0x402980
__libc_csu_init: 1 7ffd5f796d78 7ffd5f796d88 c0	__libc_csu_init
0x404570: push r15  reg(18, 0) 
0x404572: push r14  reg(17, 0) 
0x404574: mov r15d, edi  reg(82, 0)  reg(45, 1) 
0x404577: push r13  reg(16, 7ffd5f796d70) 
0x404579: push r12  reg(15, 403230) 
0x40457b: lea r12, ptr [rip+0x20185e]  reg(15, 403230) 
0x404582: push rbp
0x404583: lea rbp, ptr [rip+0x20185e]
0x40458a: push rbx  reg(7, 0) 
0x40458b: mov r14, rsi  reg(17, 0)  reg(4, 7ffd5f796d78) 
0x40458e: mov r13, rdx  reg(16, 7ffd5f796d70)  reg(8, 7ffd5f796d88) 
0x404591: sub rbp, r12
0x404594: sub rsp, 0x8
0x404598: sar rbp, 0x3
0x40459c: call 0x402958
_init: 1 7ffd5f796d78 7ffd5f796d88 c0	_init
0x402958: sub rsp, 0x8
0x40295c: mov rax, qword ptr [rip+0x203695]  reg(10, 7f7d10069f38) 
0x402963: test rax, rax  reg(10, 0)  reg(10, 0) 
0x402966: jz 0x40296d
0x40296d: add rsp, 0x8
0x402971: ret 
0x4045a1: test rbp, rbp
0x4045a4: jz 0x4045c6
0x4045a6: xor ebx, ebx  reg(53, 0)  reg(53, 0) 
0x4045a8: nop dword ptr [rax+rax*1], eax
0x4045b0: mov rdx, r13  reg(8, 7ffd5f796d88)  reg(16, 7ffd5f796d88) 
0x4045b3: mov rsi, r14  reg(4, 7ffd5f796d78)  reg(17, 7ffd5f796d78) 
0x4045b6: mov edi, r15d  reg(45, 1)  reg(82, 1) 
0x4045b9: call qword ptr [r12+rbx*8]
frame_dummy: 1 7ffd5f796d78 7ffd5f796d88 c0	frame_dummy
0x403300: mov edi, 0x605df0  reg(45, 1) 
0x403305: cmp qword ptr [rdi], 0x0  mem(605df0, 0) 
0x403309: jnz 0x403310
0x40330b: jmp 0x4032a0
register_tm_clones: 605df0 7ffd5f796d78 7ffd5f796d88 c0	register_tm_clones
0x4032a0: mov esi, 0x606470  reg(47, 7ffd5f796d78) 
0x4032a5: push rbp
0x4032a6: sub rsi, 0x606470  reg(4, 606470) 
0x4032ad: sar rsi, 0x3  reg(4, 0) 
0x4032b1: mov rbp, rsp
0x4032b4: mov rax, rsi  reg(10, 0)  reg(4, 0) 
0x4032b7: shr rax, 0x3f  reg(10, 0) 
0x4032bb: add rsi, rax  reg(4, 0)  reg(10, 0) 
0x4032be: sar rsi, 0x1  reg(4, 0) 
0x4032c1: jz 0x4032d8
0x4032d8: pop rbp
0x4032d9: ret 
0x4045bd: add rbx, 0x1  reg(7, 0) 
0x4045c1: cmp rbx, rbp  reg(7, 1) 
0x4045c4: jnz 0x4045b0
0x4045c6: add rsp, 0x8
0x4045ca: pop rbx  reg(7, 1) 
0x4045cb: pop rbp
0x4045cc: pop r12  reg(15, 605de0) 
0x4045ce: pop r13  reg(16, 7ffd5f796d88) 
0x4045d0: pop r14  reg(17, 7ffd5f796d78) 
0x4045d2: pop r15  reg(18, 1) 
0x4045d4: ret 
main: 1 7ffd5f796d78 7ffd5f796d88 c0	main
0x4034c5: push rbp
0x4034c6: push rbx  reg(7, 0) 
0x4034c7: sub rsp, 0x38
0x4034cb: mov rax, qword ptr fs:[0x28]  reg(10, 4034c5) 
0x4034d4: mov qword ptr [rsp+0x28], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796c78, 403230) 
0x4034d9: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x4034db: mov edi, 0x8  reg(45, 1) 
0x4034e0: call 0x402d30
operator new(unsigned long)@plt: 8 7ffd5f796d78 7ffd5f796d88 c0	_Znwm@plt
0x402d30: jmp qword ptr [rip+0x2034b2]
0x402d36: push 0x3a 
0x402d3b: jmp 0x402980
0x4034e5: mov rbx, rax  reg(7, 0)  reg(10, 200dc20) 
0x4034e8: mov rdi, rax  reg(3, 0)  reg(10, 200dc20) 
0x4034eb: call 0x403d90
TS7Server::TS7Server(): 200dc20 200dc30 200dc20 7f7d10067b20	_ZN9TS7ServerC2Ev
0x403d90: push rbx  reg(7, 200dc20) 
0x403d91: mov rbx, rdi  reg(7, 200dc20)  reg(3, 200dc20) 
0x403d94: call 0x402ad0
Srv_Create@plt: 200dc20 200dc30 200dc20 7f7d10067b20	Srv_Create@plt
0x402ad0: jmp qword ptr [rip+0x2035e2]
0x402ad6: push 0x14 
0x402adb: jmp 0x402980
Srv_Create: 200dc20 200dc30 200dc20 7f7d10067b20	Srv_Create
0x7f7d10675da9: push rbp
0x7f7d10675daa: push rbx  reg(7, 200dc20) 
0x7f7d10675dab: sub rsp, 0x8
0x7f7d10675daf: mov edi, 0x60e8  reg(45, 200dc20) 
0x7f7d10675db4: call 0x7f7d1065f130
operator new(unsigned long)@plt: 60e8 200dc30 200dc20 7f7d10067b20	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1065f136: push 0x17a 
0x7f7d1065f13b: jmp 0x7f7d1065d980
0x7f7d10675db9: mov rbx, rax  reg(7, 200dc20)  reg(10, 200dc40) 
0x7f7d10675dbc: mov rdi, rax  reg(3, 3)  reg(10, 200dc40) 
0x7f7d10675dbf: call 0x7f7d1065e990
TSnap7Server::TSnap7Server()@plt: 200dc40 2013d20 200dc40 7f7d10067b20	_ZN12TSnap7ServerC1Ev@plt
0x7f7d1065e990: jmp qword ptr [rip+0x221e82]
0x7f7d1065e996: push 0x100 
0x7f7d1065e99b: jmp 0x7f7d1065d980
TSnap7Server::TSnap7Server(): 200dc40 2013d20 200dc40 7f7d10067b20	_ZN12TSnap7ServerC2Ev
0x7f7d1066836a: push rbp
0x7f7d1066836b: push rbx  reg(7, 200dc40) 
0x7f7d1066836c: sub rsp, 0x8
0x7f7d10668370: mov rbx, rdi  reg(7, 200dc40)  reg(3, 200dc40) 
0x7f7d10668373: call 0x7f7d1065ef40
TCustomMsgServer::TCustomMsgServer()@plt: 200dc40 2013d20 200dc40 7f7d10067b20	_ZN16TCustomMsgServerC2Ev@plt
0x7f7d1065ef40: jmp qword ptr [rip+0x221baa]
0x7f7d1065ef46: push 0x15b 
0x7f7d1065ef4b: jmp 0x7f7d1065d980
TCustomMsgServer::TCustomMsgServer(): 200dc40 2013d20 200dc40 7f7d10067b20	_ZN16TCustomMsgServerC1Ev
0x7f7d10660d08: push rbp
0x7f7d10660d09: push rbx  reg(7, 200dc40) 
0x7f7d10660d0a: sub rsp, 0x8
0x7f7d10660d0e: mov rbx, rdi  reg(7, 200dc40)  reg(3, 200dc40) 
0x7f7d10660d11: mov rax, qword ptr [rip+0x21f2d8]  reg(10, 200dc40) 
0x7f7d10660d18: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f418) 
0x7f7d10660d1c: mov qword ptr [rdi], rax  reg(10, 7f7d1087f428)  mem(200dc40, 0) 
0x7f7d10660d1f: mov rax, 0x302e302e302e30  reg(10, 7f7d1087f428) 
0x7f7d10660d29: mov qword ptr [rdi+0xc], rax  reg(10, 302e302e302e30)  mem(200dc4c, 0) 
0x7f7d10660d2d: mov edi, 0x28  reg(45, 200dc40) 
0x7f7d10660d32: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 2013d20 200dc40 7f7d10067b20	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d10660d37: mov rbp, rax
0x7f7d10660d3a: mov esi, 0x0  reg(47, 2013d50) 
0x7f7d10660d3f: mov rdi, rax  reg(3, 0)  reg(10, 2013d30) 
0x7f7d10660d42: call 0x7f7d1065e150
pthread_mutex_init@plt: 2013d30 0 2013d30 7f7d10067b20	pthread_mutex_init@plt
0x7f7d1065e150: jmp qword ptr [rip+0x2222a2]
0x7f7d1065e156: push 0x7c 
0x7f7d1065e15b: jmp 0x7f7d1065d980
0x7f7d10660d47: mov qword ptr [rbx+0x30], rbp  mem(200dc70, 0) 
0x7f7d10660d4b: mov edi, 0x28  reg(45, 2013d30) 
0x7f7d10660d50: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 7f7d0f890ff4 0 0	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d10660d55: mov rbp, rax
0x7f7d10660d58: mov esi, 0x0  reg(47, 2013d80) 
0x7f7d10660d5d: mov rdi, rax  reg(3, 0)  reg(10, 2013d60) 
0x7f7d10660d60: call 0x7f7d1065e150
pthread_mutex_init@plt: 2013d60 0 2013d60 7f7d10067b20	pthread_mutex_init@plt
0x7f7d1065e150: jmp qword ptr [rip+0x2222a2]
0x7f7d10660d65: mov qword ptr [rbx+0x58], rbp  mem(200dc98, 0) 
0x7f7d10660d69: mov edi, 0x20  reg(45, 2013d60) 
0x7f7d10660d6e: call 0x7f7d1065f130
operator new(unsigned long)@plt: 20 7f7d0f890ff4 0 0	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d10660d73: mov rbp, rax
0x7f7d10660d76: mov edx, 0x1a  reg(54, 2013d90) 
0x7f7d10660d7b: mov esi, 0x5dc  reg(47, 2013db0) 
0x7f7d10660d80: mov rdi, rax  reg(3, 0)  reg(10, 2013d90) 
0x7f7d10660d83: call 0x7f7d1065e210
TMsgEventQueue::TMsgEventQueue(int, int)@plt: 2013d90 5dc 1a 7f7d10067b20	_ZN14TMsgEventQueueC1Eii@plt
0x7f7d1065e210: jmp qword ptr [rip+0x222242]
0x7f7d1065e216: push 0x88 
0x7f7d1065e21b: jmp 0x7f7d1065d980
TMsgEventQueue::TMsgEventQueue(int, int): 2013d90 5dc 1a 7f7d10067b20	_ZN14TMsgEventQueueC2Eii
0x7f7d10660a92: push rbx  reg(7, 200dc40) 
0x7f7d10660a93: mov rbx, rdi  reg(7, 200dc40)  reg(3, 2013d90) 
0x7f7d10660a96: mov dword ptr [rdi+0xc], esi  reg(47, 5dc)  mem(2013d9c, 0) 
0x7f7d10660a99: lea eax, ptr [rsi-0x1]  reg(56, 2013d90) 
0x7f7d10660a9c: mov dword ptr [rdi+0x8], eax  reg(56, 5db)  mem(2013d98, 5dc00000000) 
0x7f7d10660a9f: mov dword ptr [rdi+0x18], edx  reg(54, 1a)  mem(2013da8, 0) 
0x7f7d10660aa2: imul edx, esi  reg(54, 1a)  reg(47, 5dc) 
0x7f7d10660aa5: movsxd rdi, edx  reg(3, 2013d90)  reg(54, 9858) 
0x7f7d10660aa8: call 0x7f7d1065dd30
operator new[](unsigned long)@plt: 9858 5dc 9858 7f7d10067b20	_Znam@plt
0x7f7d1065dd30: jmp qword ptr [rip+0x2224b2]
0x7f7d1065dd36: push 0x3a 
0x7f7d1065dd3b: jmp 0x7f7d1065d980
0x7f7d10660aad: mov qword ptr [rbx+0x10], rax  reg(10, 2013dc0)  mem(2013da0, 0) 
0x7f7d10660ab1: mov rdi, rbx  reg(3, 3)  reg(7, 2013d90) 
0x7f7d10660ab4: call 0x7f7d1065f0a0
TMsgEventQueue::Flush()@plt: 2013d90 201d610 2013dc0 7f7d10067b20	_ZN14TMsgEventQueue5FlushEv@plt
0x7f7d1065f0a0: jmp qword ptr [rip+0x221afa]
0x7f7d1065f0a6: push 0x171 
0x7f7d1065f0ab: jmp 0x7f7d1065d980
TMsgEventQueue::Flush(): 2013d90 201d610 2013dc0 7f7d10067b20	_ZN14TMsgEventQueue5FlushEv
0x7f7d10660a84: mov dword ptr [rdi], 0x0  mem(2013d90, 0) 
0x7f7d10660a8a: mov dword ptr [rdi+0x4], 0x0  mem(2013d94, 5db00000000) 
0x7f7d10660a91: ret 
0x7f7d10660ab9: pop rbx  reg(7, 2013d90) 
0x7f7d10660aba: ret 
0x7f7d10660d88: mov qword ptr [rbx+0x38], rbp  mem(200dc78, 0) 
0x7f7d10660d8c: lea rdx, ptr [rbx+0x60]  reg(8, 2013dc0) 
0x7f7d10660d90: mov qword ptr [rbx+0x60], 0x0  mem(200dca0, 0) 
0x7f7d10660d98: mov qword ptr [rbx+0x2058], 0x0  mem(200fc98, 0) 
0x7f7d10660da3: lea rdi, ptr [rbx+0x68]  reg(3, 2013d90) 
0x7f7d10660da7: and rdi, 0xfffffffffffffff8  reg(3, 200dca8) 
0x7f7d10660dab: mov rcx, rdx  reg(9, 7f7d10067b20)  reg(8, 200dca0) 
0x7f7d10660dae: sub rcx, rdi  reg(9, 200dca0)  reg(3, 200dca8) 
0x7f7d10660db1: add ecx, 0x2000  reg(55, fffffffffffffff8) 
0x7f7d10660db7: shr ecx, 0x3  reg(55, 1ff8) 
0x7f7d10660dba: mov ecx, ecx  reg(55, 3ff)  reg(55, 3ff) 
0x7f7d10660dbc: mov eax, 0x0  reg(56, 2013dc0) 
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc1: rep stosq qword ptr [rdi]
0x7f7d10660dc4: mov rax, rdx  reg(10, 0)  reg(8, 200dca0) 
0x7f7d10660dc7: lea rdx, ptr [rbx+0x2060]  reg(8, 200dca0) 
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dca0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dca0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dca8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dca8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dca8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dce0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dce0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dce0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dce8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dce8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dce8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dcf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dcf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dcf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dd98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dd98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dd98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dda0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dda0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dda0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dda8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dda8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dda8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dde0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dde0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dde0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dde8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dde8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dde8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ddf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ddf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ddf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200de98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200de98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200de98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dea0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dea0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dea0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dea8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dea8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dea8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200deb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200deb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200deb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200deb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200deb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200deb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dec0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dec0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dec0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dec8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dec8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dec8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ded0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ded0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ded0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ded8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ded8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ded8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dee0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dee0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dee0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dee8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dee8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dee8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200def0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200def0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200def0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200def8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200def8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200def8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200df98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200df98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200df98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfa0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfa0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfa0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfa8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfa8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfa8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfe0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfe0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfe0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dfe8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dfe8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dfe8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dff0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dff0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dff0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200dff8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200dff8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200dff8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e000)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e000, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e000) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e008)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e008, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e008) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e010)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e010, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e010) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e018)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e018, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e018) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e020)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e020, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e020) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e028)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e028, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e028) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e030)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e030, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e030) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e038)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e038, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e038) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e040)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e040, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e040) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e048)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e048, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e048) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e050)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e050, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e050) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e058)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e058, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e058) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e060)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e060, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e060) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e068)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e068, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e068) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e070)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e070, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e070) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e078)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e078, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e078) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e080)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e080, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e080) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e088)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e088, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e088) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e090)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e090, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e090) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e098)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e098, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e098) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e0f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e0f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e0f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e100)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e100, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e100) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e108)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e108, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e108) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e110)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e110, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e110) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e118)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e118, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e118) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e120)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e120, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e120) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e128)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e128, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e128) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e130)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e130, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e130) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e138)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e138, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e138) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e140)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e140, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e140) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e148)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e148, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e148) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e150)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e150, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e150) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e158)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e158, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e158) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e160)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e160, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e160) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e168)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e168, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e168) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e170)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e170, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e170) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e178)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e178, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e178) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e180)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e180, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e180) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e188)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e188, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e188) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e190)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e190, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e190) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e198)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e198, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e198) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e1f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e1f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e1f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e200)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e200, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e200) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e208)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e208, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e208) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e210)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e210, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e210) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e218)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e218, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e218) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e220)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e220, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e220) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e228)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e228, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e228) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e230)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e230, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e230) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e238)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e238, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e238) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e240)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e240, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e240) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e248)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e248, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e248) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e250)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e250, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e250) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e258)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e258, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e258) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e260)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e260, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e260) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e268)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e268, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e268) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e270)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e270, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e270) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e278)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e278, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e278) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e280)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e280, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e280) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e288)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e288, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e288) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e290)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e290, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e290) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e298)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e298, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e298) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e2f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e2f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e2f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e300)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e300, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e300) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e308)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e308, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e308) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e310)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e310, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e310) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e318)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e318, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e318) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e320)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e320, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e320) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e328)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e328, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e328) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e330)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e330, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e330) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e338)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e338, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e338) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e340)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e340, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e340) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e348)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e348, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e348) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e350)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e350, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e350) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e358)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e358, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e358) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e360)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e360, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e360) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e368)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e368, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e368) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e370)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e370, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e370) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e378)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e378, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e378) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e380)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e380, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e380) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e388)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e388, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e388) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e390)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e390, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e390) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e398)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e398, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e398) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e3f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e3f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e3f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e400)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e400, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e400) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e408)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e408, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e408) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e410)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e410, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e410) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e418)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e418, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e418) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e420)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e420, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e420) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e428)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e428, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e428) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e430)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e430, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e430) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e438)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e438, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e438) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e440)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e440, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e440) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e448)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e448, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e448) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e450)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e450, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e450) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e458)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e458, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e458) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e460)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e460, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e460) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e468)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e468, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e468) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e470)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e470, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e470) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e478)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e478, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e478) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e480)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e480, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e480) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e488)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e488, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e488) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e490)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e490, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e490) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e498)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e498, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e498) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e4f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e4f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e4f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e500)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e500, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e500) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e508)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e508, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e508) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e510)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e510, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e510) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e518)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e518, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e518) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e520)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e520, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e520) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e528)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e528, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e528) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e530)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e530, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e530) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e538)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e538, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e538) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e540)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e540, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e540) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e548)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e548, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e548) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e550)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e550, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e550) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e558)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e558, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e558) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e560)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e560, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e560) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e568)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e568, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e568) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e570)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e570, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e570) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e578)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e578, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e578) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e580)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e580, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e580) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e588)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e588, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e588) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e590)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e590, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e590) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e598)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e598, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e598) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e5f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e5f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e5f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e600)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e600, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e600) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e608)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e608, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e608) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e610)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e610, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e610) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e618)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e618, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e618) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e620)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e620, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e620) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e628)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e628, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e628) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e630)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e630, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e630) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e638)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e638, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e638) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e640)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e640, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e640) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e648)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e648, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e648) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e650)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e650, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e650) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e658)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e658, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e658) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e660)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e660, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e660) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e668)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e668, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e668) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e670)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e670, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e670) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e678)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e678, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e678) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e680)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e680, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e680) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e688)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e688, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e688) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e690)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e690, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e690) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e698)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e698, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e698) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e6f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e6f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e6f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e700)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e700, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e700) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e708)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e708, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e708) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e710)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e710, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e710) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e718)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e718, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e718) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e720)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e720, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e720) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e728)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e728, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e728) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e730)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e730, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e730) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e738)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e738, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e738) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e740)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e740, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e740) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e748)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e748, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e748) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e750)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e750, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e750) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e758)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e758, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e758) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e760)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e760, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e760) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e768)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e768, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e768) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e770)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e770, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e770) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e778)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e778, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e778) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e780)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e780, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e780) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e788)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e788, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e788) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e790)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e790, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e790) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e798)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e798, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e798) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e7f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e7f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e7f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e800)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e800, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e800) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e808)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e808, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e808) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e810)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e810, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e810) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e818)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e818, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e818) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e820)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e820, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e820) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e828)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e828, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e828) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e830)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e830, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e830) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e838)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e838, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e838) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e840)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e840, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e840) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e848)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e848, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e848) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e850)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e850, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e850) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e858)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e858, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e858) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e860)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e860, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e860) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e868)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e868, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e868) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e870)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e870, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e870) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e878)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e878, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e878) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e880)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e880, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e880) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e888)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e888, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e888) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e890)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e890, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e890) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e898)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e898, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e898) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e8f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e8f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e8f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e900)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e900, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e900) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e908)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e908, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e908) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e910)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e910, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e910) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e918)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e918, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e918) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e920)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e920, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e920) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e928)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e928, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e928) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e930)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e930, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e930) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e938)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e938, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e938) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e940)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e940, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e940) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e948)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e948, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e948) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e950)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e950, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e950) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e958)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e958, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e958) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e960)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e960, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e960) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e968)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e968, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e968) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e970)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e970, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e970) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e978)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e978, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e978) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e980)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e980, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e980) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e988)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e988, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e988) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e990)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e990, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e990) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e998)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e998, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e998) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200e9f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200e9f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200e9f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ea98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ea98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ea98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eaa0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eaa0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eaa0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eaa8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eaa8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eaa8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eab0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eab0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eab0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eab8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eab8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eab8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eac0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eac0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eac0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eac8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eac8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eac8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ead0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ead0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ead0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ead8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ead8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ead8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eae0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eae0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eae0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eae8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eae8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eae8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eaf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eaf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eaf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eaf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eaf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eaf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eb98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eb98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eb98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eba0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eba0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eba0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eba8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eba8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eba8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebe0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebe0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebe0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebe8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebe8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebe8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ebf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ebf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ebf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ec98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ec98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ec98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eca0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eca0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eca0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eca8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eca8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eca8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ece0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ece0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ece0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ece8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ece8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ece8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ecf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ecf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ecf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ed98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ed98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ed98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eda0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eda0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eda0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eda8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eda8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eda8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ede0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ede0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ede0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ede8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ede8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ede8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200edf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200edf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200edf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ee98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ee98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ee98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eea0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eea0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eea0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eea8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eea8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eea8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eeb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eeb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eeb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eeb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eeb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eeb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eec0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eec0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eec0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eec8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eec8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eec8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eed0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eed0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eed0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eed8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eed8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eed8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eee0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eee0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eee0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eee8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eee8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eee8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eef0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eef0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eef0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eef8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eef8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eef8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200ef98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200ef98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200ef98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efa0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efa0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efa0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efa8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efa8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efa8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efe0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efe0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efe0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200efe8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200efe8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200efe8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eff0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eff0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eff0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200eff8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200eff8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200eff8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f000)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f000, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f000) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f008)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f008, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f008) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f010)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f010, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f010) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f018)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f018, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f018) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f020)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f020, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f020) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f028)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f028, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f028) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f030)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f030, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f030) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f038)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f038, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f038) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f040)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f040, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f040) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f048)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f048, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f048) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f050)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f050, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f050) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f058)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f058, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f058) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f060)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f060, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f060) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f068)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f068, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f068) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f070)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f070, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f070) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f078)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f078, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f078) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f080)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f080, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f080) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f088)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f088, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f088) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f090)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f090, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f090) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f098)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f098, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f098) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f0f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f0f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f0f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f100)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f100, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f100) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f108)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f108, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f108) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f110)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f110, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f110) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f118)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f118, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f118) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f120)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f120, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f120) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f128)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f128, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f128) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f130)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f130, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f130) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f138)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f138, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f138) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f140)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f140, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f140) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f148)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f148, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f148) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f150)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f150, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f150) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f158)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f158, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f158) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f160)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f160, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f160) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f168)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f168, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f168) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f170)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f170, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f170) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f178)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f178, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f178) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f180)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f180, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f180) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f188)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f188, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f188) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f190)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f190, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f190) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f198)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f198, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f198) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f1f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f1f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f1f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f200)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f200, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f200) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f208)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f208, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f208) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f210)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f210, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f210) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f218)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f218, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f218) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f220)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f220, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f220) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f228)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f228, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f228) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f230)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f230, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f230) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f238)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f238, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f238) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f240)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f240, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f240) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f248)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f248, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f248) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f250)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f250, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f250) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f258)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f258, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f258) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f260)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f260, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f260) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f268)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f268, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f268) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f270)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f270, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f270) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f278)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f278, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f278) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f280)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f280, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f280) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f288)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f288, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f288) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f290)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f290, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f290) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f298)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f298, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f298) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f2f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f2f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f2f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f300)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f300, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f300) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f308)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f308, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f308) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f310)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f310, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f310) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f318)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f318, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f318) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f320)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f320, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f320) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f328)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f328, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f328) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f330)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f330, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f330) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f338)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f338, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f338) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f340)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f340, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f340) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f348)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f348, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f348) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f350)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f350, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f350) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f358)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f358, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f358) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f360)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f360, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f360) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f368)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f368, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f368) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f370)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f370, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f370) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f378)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f378, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f378) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f380)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f380, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f380) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f388)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f388, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f388) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f390)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f390, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f390) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f398)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f398, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f398) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f3f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f3f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f3f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f400)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f400, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f400) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f408)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f408, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f408) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f410)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f410, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f410) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f418)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f418, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f418) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f420)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f420, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f420) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f428)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f428, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f428) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f430)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f430, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f430) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f438)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f438, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f438) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f440)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f440, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f440) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f448)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f448, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f448) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f450)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f450, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f450) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f458)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f458, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f458) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f460)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f460, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f460) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f468)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f468, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f468) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f470)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f470, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f470) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f478)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f478, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f478) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f480)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f480, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f480) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f488)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f488, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f488) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f490)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f490, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f490) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f498)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f498, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f498) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f4f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f4f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f4f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f500)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f500, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f500) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f508)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f508, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f508) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f510)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f510, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f510) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f518)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f518, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f518) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f520)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f520, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f520) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f528)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f528, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f528) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f530)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f530, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f530) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f538)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f538, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f538) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f540)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f540, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f540) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f548)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f548, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f548) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f550)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f550, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f550) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f558)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f558, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f558) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f560)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f560, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f560) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f568)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f568, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f568) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f570)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f570, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f570) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f578)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f578, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f578) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f580)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f580, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f580) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f588)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f588, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f588) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f590)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f590, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f590) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f598)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f598, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f598) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f5f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f5f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f5f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f600)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f600, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f600) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f608)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f608, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f608) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f610)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f610, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f610) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f618)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f618, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f618) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f620)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f620, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f620) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f628)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f628, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f628) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f630)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f630, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f630) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f638)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f638, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f638) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f640)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f640, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f640) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f648)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f648, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f648) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f650)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f650, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f650) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f658)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f658, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f658) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f660)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f660, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f660) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f668)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f668, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f668) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f670)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f670, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f670) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f678)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f678, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f678) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f680)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f680, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f680) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f688)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f688, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f688) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f690)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f690, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f690) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f698)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f698, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f698) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f6f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f6f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f6f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f700)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f700, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f700) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f708)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f708, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f708) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f710)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f710, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f710) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f718)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f718, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f718) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f720)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f720, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f720) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f728)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f728, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f728) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f730)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f730, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f730) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f738)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f738, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f738) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f740)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f740, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f740) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f748)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f748, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f748) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f750)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f750, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f750) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f758)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f758, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f758) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f760)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f760, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f760) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f768)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f768, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f768) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f770)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f770, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f770) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f778)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f778, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f778) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f780)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f780, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f780) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f788)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f788, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f788) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f790)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f790, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f790) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f798)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f798, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f798) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f7f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f7f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f7f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f800)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f800, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f800) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f808)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f808, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f808) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f810)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f810, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f810) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f818)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f818, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f818) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f820)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f820, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f820) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f828)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f828, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f828) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f830)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f830, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f830) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f838)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f838, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f838) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f840)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f840, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f840) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f848)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f848, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f848) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f850)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f850, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f850) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f858)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f858, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f858) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f860)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f860, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f860) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f868)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f868, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f868) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f870)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f870, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f870) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f878)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f878, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f878) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f880)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f880, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f880) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f888)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f888, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f888) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f890)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f890, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f890) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f898)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f898, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f898) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f8f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f8f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f8f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f900)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f900, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f900) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f908)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f908, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f908) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f910)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f910, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f910) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f918)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f918, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f918) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f920)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f920, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f920) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f928)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f928, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f928) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f930)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f930, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f930) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f938)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f938, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f938) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f940)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f940, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f940) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f948)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f948, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f948) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f950)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f950, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f950) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f958)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f958, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f958) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f960)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f960, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f960) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f968)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f968, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f968) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f970)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f970, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f970) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f978)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f978, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f978) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f980)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f980, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f980) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f988)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f988, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f988) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f990)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f990, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f990) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f998)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f998, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f998) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9a0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9a0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9a0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9a8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9a8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9a8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9b0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9b0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9b0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9b8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9b8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9b8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9c0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9c0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9c0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9c8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9c8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9c8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9d0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9d0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9d0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9d8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9d8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9d8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9e0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9e0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9e0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9e8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9e8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9e8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9f0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9f0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9f0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200f9f8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200f9f8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200f9f8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fa98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fa98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fa98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200faa0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200faa0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200faa0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200faa8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200faa8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200faa8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fab0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fab0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fab0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fab8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fab8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fab8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fac0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fac0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fac0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fac8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fac8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fac8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fad0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fad0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fad0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fad8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fad8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fad8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fae0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fae0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fae0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fae8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fae8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fae8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200faf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200faf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200faf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200faf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200faf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200faf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fb98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fb98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fb98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fba0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fba0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fba0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fba8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fba8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fba8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbb0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbb0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbb0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbb8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbb8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbb8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbc0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbc0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbc0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbc8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbc8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbc8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbd0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbd0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbd0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbd8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbd8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbd8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbe0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbe0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbe0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbe8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbe8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbe8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbf0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbf0, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbf0) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fbf8)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fbf8, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fbf8) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc00)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc00, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc00) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc08)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc08, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc08) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc10)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc10, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc10) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc18)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc18, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc18) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc20)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc20, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc20) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc28)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc28, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc28) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc30)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc30, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc30) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc38)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc38, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc38) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc40)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc40, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc40) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc48)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc48, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc48) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc50)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc50, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc50) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc58)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc58, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc58) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc60)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc60, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc60) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc68)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc68, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc68) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc70)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc70, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc70) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc78)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc78, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc78) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc80)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc80, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc80) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc88)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc88, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc88) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc90)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc90, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc90) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fc98)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dce: mov qword ptr [rax], 0x0  mem(200fc98, 0) 
0x7f7d10660dd5: add rax, 0x8  reg(10, 200fc98) 
0x7f7d10660dd9: cmp rax, rdx  reg(10, 200fca0)  reg(8, 200fca0) 
0x7f7d10660ddc: jnz 0x7f7d10660dce
0x7f7d10660dde: mov dword ptr [rbx+0x2070], 0x0  mem(200fcb0, 0) 
0x7f7d10660de8: mov dword ptr [rbx+0x206c], 0xffffffff  mem(200fcac, 0) 
0x7f7d10660df2: mov dword ptr [rbx+0x2068], 0xffffffff  mem(200fca8, ffffffff00000000) 
0x7f7d10660dfc: mov byte ptr [rbx+0x50], 0x0  mem(200dc90, 0) 
0x7f7d10660e00: mov dword ptr [rbx+0x8], 0x0  mem(200dc48, 2e302e3000000000) 
0x7f7d10660e07: mov dword ptr [rbx+0x2074], 0x0  mem(200fcb4, 0) 
0x7f7d10660e11: mov dword ptr [rbx+0x2064], 0x0  mem(200fca4, ffffffff00000000) 
0x7f7d10660e1b: mov dword ptr [rbx+0x2078], 0x400  mem(200fcb8, 0) 
0x7f7d10660e25: mov qword ptr [rbx+0x40], 0x0  mem(200dc80, 0) 
0x7f7d10660e2d: jmp 0x7f7d10660e42
0x7f7d10660e42: add rsp, 0x8
0x7f7d10660e46: pop rbx  reg(7, 200dc40) 
0x7f7d10660e47: pop rbp
0x7f7d10660e48: ret 
0x7f7d10668378: mov rax, qword ptr [rip+0x217b01]  reg(10, 200fca0) 
0x7f7d1066837f: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f7b0) 
0x7f7d10668383: mov qword ptr [rbx], rax  reg(10, 7f7d1087f7c0)  mem(200dc40, 7f7d1087f428) 
0x7f7d10668386: mov edi, 0x28  reg(45, 200fca0) 
0x7f7d1066838b: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 201d610 200fca0 0	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d10668390: mov rbp, rax
0x7f7d10668393: mov esi, 0x0  reg(47, 201d640) 
0x7f7d10668398: mov rdi, rax  reg(3, 0)  reg(10, 201d620) 
0x7f7d1066839b: call 0x7f7d1065e150
pthread_mutex_init@plt: 201d620 0 201d620 7f7d10067b20	pthread_mutex_init@plt
0x7f7d1065e150: jmp qword ptr [rip+0x2222a2]
0x7f7d106683a0: mov qword ptr [rbx+0x2090], rbp  mem(200fcd0, 0) 
0x7f7d106683a7: mov qword ptr [rbx+0x2080], 0x0  mem(200fcc0, 0) 
0x7f7d106683b2: lea rdi, ptr [rbx+0x20b0]  reg(3, 201d620) 
0x7f7d106683b9: mov edx, 0x4000  reg(54, 0) 
0x7f7d106683be: mov esi, 0x0  reg(47, 7f7d0f890ff4) 
0x7f7d106683c3: call 0x7f7d1065db00
memset@plt: 200fcf0 0 4000 0	memset@plt
0x7f7d1065db00: jmp qword ptr [rip+0x2225ca]
0x7f7d1065db06: push 0x17 
0x7f7d1065db0b: jmp 0x7f7d1065d980
0x7f7d106683c8: mov qword ptr [rbx+0x60b0], 0x0  mem(2013cf0, 0) 
0x7f7d106683d3: mov qword ptr [rbx+0x60b8], 0x0  mem(2013cf8, 0) 
0x7f7d106683de: mov qword ptr [rbx+0x60c0], 0x0  mem(2013d00, 0) 
0x7f7d106683e9: mov qword ptr [rbx+0x60c8], 0x0  mem(2013d08, 0) 
0x7f7d106683f4: mov qword ptr [rbx+0x60d0], 0x0  mem(2013d10, 0) 
0x7f7d106683ff: mov dword ptr [rbx+0x20a8], 0x0  mem(200fce8, 0) 
0x7f7d10668409: mov dword ptr [rbx+0x20ac], 0x0  mem(200fcec, 0) 
0x7f7d10668413: mov word ptr [rbx+0x60da], 0x0  mem(2013d1a, 0) 
0x7f7d1066841c: mov byte ptr [rbx+0x60d8], 0x0  mem(2013d18, 0) 
0x7f7d10668423: mov word ptr [rbx+0x2060], 0x66  mem(200fca0, 0) 
0x7f7d1066842c: mov byte ptr [rbx+0x60e0], 0x8  mem(2013d20, 0) 
0x7f7d10668433: mov dword ptr [rbx+0x60dc], 0x64  mem(2013d1c, 800000000) 
0x7f7d1066843d: jmp 0x7f7d10668452
0x7f7d10668452: add rsp, 0x8
0x7f7d10668456: pop rbx  reg(7, 200dc40) 
0x7f7d10668457: pop rbp
0x7f7d10668458: ret 
0x7f7d10675dc4: jmp 0x7f7d10675dd9
0x7f7d10675dd9: mov rax, rbx  reg(10, 200fcf0)  reg(7, 200dc40) 
0x7f7d10675ddc: add rsp, 0x8
0x7f7d10675de0: pop rbx  reg(7, 200dc40) 
0x7f7d10675de1: pop rbp
0x7f7d10675de2: ret 
0x403d99: mov qword ptr [rbx], rax  reg(10, 200dc40)  mem(200dc20, 0) 
0x403d9c: pop rbx  reg(7, 200dc20) 
0x403d9d: ret 
0x4034f0: mov qword ptr [rip+0x203ac9], rbx  reg(7, 200dc20)  mem(606fc0, 0) 
0x4034f7: mov r8d, 0x200  reg(61, 4045e0) 
0x4034fd: mov ecx, 0x606dc0  reg(55, 0) 
0x403502: mov edx, 0x15  reg(54, 4000) 
0x403507: mov esi, 0x5  reg(47, 2013cf0) 
0x40350c: mov rdi, rbx  reg(3, 2013cf0)  reg(7, 200dc20) 
0x40350f: call 0x403f68
TS7Server::RegisterArea(int, unsigned short, void*, unsigned short): 200dc20 5 15 606dc0	_ZN9TS7Server12RegisterAreaEitPvt
0x403f68: sub rsp, 0x8
0x403f6c: movzx edx, dx  reg(54, 15)  reg(35, 15) 
0x403f6f: movzx r8d, r8w  reg(61, 200)  reg(60, 200) 
0x403f73: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403f76: call 0x403090
Srv_RegisterArea@plt: 200dc40 5 15 606dc0	Srv_RegisterArea@plt
0x403090: jmp qword ptr [rip+0x203302]
0x403096: push 0x70 
0x40309b: jmp 0x402980
Srv_RegisterArea: 200dc40 5 15 606dc0	Srv_RegisterArea
0x7f7d10675e86: mov eax, 0xfffffffe  reg(56, 200dc40) 
0x7f7d10675e8b: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d10675e8e: jz 0x7f7d10675ea4
0x7f7d10675e90: sub rsp, 0x8
0x7f7d10675e94: movzx edx, dx  reg(54, 15)  reg(35, 15) 
0x7f7d10675e97: movzx r8d, r8w  reg(61, 200)  reg(60, 200) 
0x7f7d10675e9b: call 0x7f7d1065ded0
TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short)@plt: 200dc40 5 15 606dc0	_ZN12TSnap7Server12RegisterAreaEitPvt@plt
0x7f7d1065ded0: jmp qword ptr [rip+0x2223e2]
0x7f7d1065ded6: push 0x54 
0x7f7d1065dedb: jmp 0x7f7d1065d980
TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short): 200dc40 5 15 606dc0	_ZN12TSnap7Server12RegisterAreaEitPvt
0x7f7d10668c48: sub rsp, 0x8
0x7f7d10668c4c: mov rax, rcx  reg(10, fffffffe)  reg(9, 606dc0) 
0x7f7d10668c4f: cmp esi, 0x5  reg(47, 5) 
0x7f7d10668c52: jnz 0x7f7d10668c65
0x7f7d10668c54: movzx ecx, r8w  reg(55, 606dc0)  reg(60, 200) 
0x7f7d10668c58: movzx esi, dx  reg(47, 5)  reg(35, 15) 
0x7f7d10668c5b: mov rdx, rax  reg(8, 15)  reg(10, 606dc0) 
0x7f7d10668c5e: call 0x7f7d1065e920
TSnap7Server::RegisterDB(unsigned short, void*, unsigned short)@plt: 200dc40 15 606dc0 200	_ZN12TSnap7Server10RegisterDBEtPvt@plt
0x7f7d1065e920: jmp qword ptr [rip+0x221eba]
0x7f7d1065e926: push 0xf9 
0x7f7d1065e92b: jmp 0x7f7d1065d980
TSnap7Server::RegisterDB(unsigned short, void*, unsigned short): 200dc40 15 606dc0 200	_ZN12TSnap7Server10RegisterDBEtPvt
0x7f7d10668840: mov eax, 0x200000  reg(56, 606dc0) 
0x7f7d10668845: test rdx, rdx  reg(8, 606dc0)  reg(8, 606dc0) 
0x7f7d10668848: jz 0x7f7d10668900
0x7f7d1066884e: push r15  reg(18, 0) 
0x7f7d10668850: push r14  reg(17, 0) 
0x7f7d10668852: push r13  reg(16, 7ffd5f796d70) 
0x7f7d10668854: push r12  reg(15, 403230) 
0x7f7d10668856: push rbp
0x7f7d10668857: push rbx  reg(7, 200dc20) 
0x7f7d10668858: sub rsp, 0x8
0x7f7d1066885c: mov r12d, ecx  reg(73, 403230)  reg(55, 200) 
0x7f7d1066885f: mov rbx, rdx  reg(7, 200dc20)  reg(8, 606dc0) 
0x7f7d10668862: mov r13d, esi  reg(76, 7ffd5f796d70)  reg(47, 15) 
0x7f7d10668865: mov rbp, rdi
0x7f7d10668868: movzx esi, si  reg(47, 15)  reg(40, 15) 
0x7f7d1066886b: call 0x7f7d1065deb0
TSnap7Server::FindDB(unsigned short)@plt: 200dc40 15 606dc0 200	_ZN12TSnap7Server6FindDBEt@plt
0x7f7d1065deb0: jmp qword ptr [rip+0x2223f2]
0x7f7d1065deb6: push 0x52 
0x7f7d1065debb: jmp 0x7f7d1065d980
TSnap7Server::FindDB(unsigned short): 200dc40 15 606dc0 200	_ZN12TSnap7Server6FindDBEt
0x7f7d1066845a: mov eax, dword ptr [rdi+0x20ac]  reg(56, 200000) 
0x7f7d10668460: lea edx, ptr [rax+0x1]  reg(54, 606dc0) 
0x7f7d10668463: test edx, edx  reg(54, 1)  reg(54, 1) 
0x7f7d10668465: jle 0x7f7d10668494
0x7f7d10668467: lea rdx, ptr [rdi+0x20b0]  reg(8, 1) 
0x7f7d1066846e: mov eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10668470: lea rcx, ptr [rdi+rax*8+0x20b8]  reg(9, 200) 
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 0) 
0x7f7d1066847b: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668485: add rdx, 0x8  reg(8, 200fcf0) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fcf8)  reg(9, 200fcf8) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d1066848e: mov eax, 0x0  reg(56, 0) 
0x7f7d10668493: ret 
0x7f7d10668870: mov rdx, rax  reg(8, 200fcf8)  reg(10, 0) 
0x7f7d10668873: mov eax, 0x300000  reg(56, 0) 
0x7f7d10668878: test rdx, rdx  reg(8, 0)  reg(8, 0) 
0x7f7d1066887b: jnz 0x7f7d106688f2
0x7f7d1066887d: mov rdi, rbp  reg(3, 200dc40) 
0x7f7d10668880: call 0x7f7d1065e530
TSnap7Server::FindFirstFreeDB()@plt: 200dc40 15 0 200fcf8	_ZN12TSnap7Server15FindFirstFreeDBEv@plt
0x7f7d1065e530: jmp qword ptr [rip+0x2220b2]
0x7f7d1065e536: push 0xba 
0x7f7d1065e53b: jmp 0x7f7d1065d980
TSnap7Server::FindFirstFreeDB(): 200dc40 15 0 200fcf8	_ZN12TSnap7Server15FindFirstFreeDBEv
0x7f7d10668808: cmp qword ptr [rdi+0x20b0], 0x0  mem(200fcf0, 0) 
0x7f7d10668810: jz 0x7f7d10668838
0x7f7d10668838: mov eax, 0x0  reg(56, 300000) 
0x7f7d1066883d: ret 
0x7f7d10668885: mov r14d, eax  reg(79, 0)  reg(56, 0) 
0x7f7d10668888: mov eax, 0x600000  reg(56, 0) 
0x7f7d1066888d: cmp r14d, 0xffffffff  reg(79, 0) 
0x7f7d10668891: jz 0x7f7d106688f2
0x7f7d10668893: mov edi, 0x18  reg(45, 200dc40) 
0x7f7d10668898: call 0x7f7d1065f130
operator new(unsigned long)@plt: 18 15 0 200fcf8	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066889d: mov r15, rax  reg(18, 0)  reg(10, 201d650) 
0x7f7d106688a0: mov word ptr [rax], r13w  reg(75, 15)  mem(201d650, 0) 
0x7f7d106688a4: mov edi, 0x28  reg(45, 0) 
0x7f7d106688a9: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 201d660 201d650 7f7d10067b20	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d106688ae: mov r13, rax  reg(16, 15)  reg(10, 201d670) 
0x7f7d106688b1: mov esi, 0x0  reg(47, 201d690) 
0x7f7d106688b6: mov rdi, rax  reg(3, 0)  reg(10, 201d670) 
0x7f7d106688b9: call 0x7f7d1065e150
pthread_mutex_init@plt: 201d670 0 201d670 7f7d10067b20	pthread_mutex_init@plt
0x7f7d1065e150: jmp qword ptr [rip+0x2222a2]
0x7f7d106688be: mov qword ptr [r15+0x10], r13  reg(16, 201d670)  mem(201d660, 0) 
0x7f7d106688c2: mov qword ptr [r15+0x8], rbx  reg(7, 606dc0)  mem(201d658, 0) 
0x7f7d106688c6: mov word ptr [r15+0x2], r12w  reg(72, 200)  mem(201d652, 6dc0000000000000) 
0x7f7d106688cb: movsxd rax, r14d  reg(10, 0)  reg(79, 0) 
0x7f7d106688ce: mov qword ptr [rbp+rax*8+0x20b0], r15  reg(18, 201d650)  mem(200fcf0, 0) 
0x7f7d106688d6: add dword ptr [rbp+0x20a8], 0x1  mem(200fce8, 0) 
0x7f7d106688dd: mov eax, 0x0  reg(56, 0) 
0x7f7d106688e2: cmp r14d, dword ptr [rbp+0x20ac]  reg(79, 0) 
0x7f7d106688e9: jle 0x7f7d106688f2
0x7f7d106688f2: add rsp, 0x8
0x7f7d106688f6: pop rbx  reg(7, 606dc0) 
0x7f7d106688f7: pop rbp
0x7f7d106688f8: pop r12  reg(15, 200) 
0x7f7d106688fa: pop r13  reg(16, 201d670) 
0x7f7d106688fc: pop r14  reg(17, 0) 
0x7f7d106688fe: pop r15  reg(18, 201d650) 
0x7f7d10668900: ret 
0x7f7d10668c63: jmp 0x7f7d10668c71
0x7f7d10668c71: add rsp, 0x8
0x7f7d10668c75: ret 
0x7f7d10675ea0: add rsp, 0x8
0x7f7d10675ea4: ret 
0x403f7b: add rsp, 0x8
0x403f7f: ret 
0x403514: mov r8d, 0x500  reg(61, 200) 
0x40351a: mov ecx, 0x6068c0  reg(55, 0) 
0x40351f: mov edx, 0x67  reg(54, 0) 
0x403524: mov esi, 0x5  reg(47, 7f7d0f890ff4) 
0x403529: mov rdi, qword ptr [rip+0x203a90]  reg(3, 201d670) 
0x403530: call 0x403f68
TS7Server::RegisterArea(int, unsigned short, void*, unsigned short): 200dc20 5 67 6068c0	_ZN9TS7Server12RegisterAreaEitPvt
0x403f68: sub rsp, 0x8
0x403f6c: movzx edx, dx  reg(54, 67)  reg(35, 67) 
0x403f6f: movzx r8d, r8w  reg(61, 500)  reg(60, 500) 
0x403f73: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403f76: call 0x403090
Srv_RegisterArea@plt: 200dc40 5 67 6068c0	Srv_RegisterArea@plt
0x403090: jmp qword ptr [rip+0x203302]
Srv_RegisterArea: 200dc40 5 67 6068c0	Srv_RegisterArea
0x7f7d10675e86: mov eax, 0xfffffffe  reg(56, 0) 
0x7f7d10675e8b: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d10675e8e: jz 0x7f7d10675ea4
0x7f7d10675e90: sub rsp, 0x8
0x7f7d10675e94: movzx edx, dx  reg(54, 67)  reg(35, 67) 
0x7f7d10675e97: movzx r8d, r8w  reg(61, 500)  reg(60, 500) 
0x7f7d10675e9b: call 0x7f7d1065ded0
TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short)@plt: 200dc40 5 67 6068c0	_ZN12TSnap7Server12RegisterAreaEitPvt@plt
0x7f7d1065ded0: jmp qword ptr [rip+0x2223e2]
TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short): 200dc40 5 67 6068c0	_ZN12TSnap7Server12RegisterAreaEitPvt
0x7f7d10668c48: sub rsp, 0x8
0x7f7d10668c4c: mov rax, rcx  reg(10, fffffffe)  reg(9, 6068c0) 
0x7f7d10668c4f: cmp esi, 0x5  reg(47, 5) 
0x7f7d10668c52: jnz 0x7f7d10668c65
0x7f7d10668c54: movzx ecx, r8w  reg(55, 6068c0)  reg(60, 500) 
0x7f7d10668c58: movzx esi, dx  reg(47, 5)  reg(35, 67) 
0x7f7d10668c5b: mov rdx, rax  reg(8, 67)  reg(10, 6068c0) 
0x7f7d10668c5e: call 0x7f7d1065e920
TSnap7Server::RegisterDB(unsigned short, void*, unsigned short)@plt: 200dc40 67 6068c0 500	_ZN12TSnap7Server10RegisterDBEtPvt@plt
0x7f7d1065e920: jmp qword ptr [rip+0x221eba]
TSnap7Server::RegisterDB(unsigned short, void*, unsigned short): 200dc40 67 6068c0 500	_ZN12TSnap7Server10RegisterDBEtPvt
0x7f7d10668840: mov eax, 0x200000  reg(56, 6068c0) 
0x7f7d10668845: test rdx, rdx  reg(8, 6068c0)  reg(8, 6068c0) 
0x7f7d10668848: jz 0x7f7d10668900
0x7f7d1066884e: push r15  reg(18, 0) 
0x7f7d10668850: push r14  reg(17, 0) 
0x7f7d10668852: push r13  reg(16, 7ffd5f796d70) 
0x7f7d10668854: push r12  reg(15, 403230) 
0x7f7d10668856: push rbp
0x7f7d10668857: push rbx  reg(7, 200dc20) 
0x7f7d10668858: sub rsp, 0x8
0x7f7d1066885c: mov r12d, ecx  reg(73, 403230)  reg(55, 500) 
0x7f7d1066885f: mov rbx, rdx  reg(7, 200dc20)  reg(8, 6068c0) 
0x7f7d10668862: mov r13d, esi  reg(76, 7ffd5f796d70)  reg(47, 67) 
0x7f7d10668865: mov rbp, rdi
0x7f7d10668868: movzx esi, si  reg(47, 67)  reg(40, 67) 
0x7f7d1066886b: call 0x7f7d1065deb0
TSnap7Server::FindDB(unsigned short)@plt: 200dc40 67 6068c0 500	_ZN12TSnap7Server6FindDBEt@plt
0x7f7d1065deb0: jmp qword ptr [rip+0x2223f2]
TSnap7Server::FindDB(unsigned short): 200dc40 67 6068c0 500	_ZN12TSnap7Server6FindDBEt
0x7f7d1066845a: mov eax, dword ptr [rdi+0x20ac]  reg(56, 200000) 
0x7f7d10668460: lea edx, ptr [rax+0x1]  reg(54, 6068c0) 
0x7f7d10668463: test edx, edx  reg(54, 1)  reg(54, 1) 
0x7f7d10668465: jle 0x7f7d10668494
0x7f7d10668467: lea rdx, ptr [rdi+0x20b0]  reg(8, 1) 
0x7f7d1066846e: mov eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10668470: lea rcx, ptr [rdi+rax*8+0x20b8]  reg(9, 500) 
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 0) 
0x7f7d1066847b: test rax, rax  reg(10, 201d650)  reg(10, 201d650) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668480: cmp word ptr [rax], si  reg(40, 67)  mem(201d650, 2000015) 
0x7f7d10668483: jz 0x7f7d10668499
0x7f7d10668485: add rdx, 0x8  reg(8, 200fcf0) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fcf8)  reg(9, 200fcf8) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d1066848e: mov eax, 0x0  reg(56, 201d650) 
0x7f7d10668493: ret 
0x7f7d10668870: mov rdx, rax  reg(8, 200fcf8)  reg(10, 0) 
0x7f7d10668873: mov eax, 0x300000  reg(56, 0) 
0x7f7d10668878: test rdx, rdx  reg(8, 0)  reg(8, 0) 
0x7f7d1066887b: jnz 0x7f7d106688f2
0x7f7d1066887d: mov rdi, rbp  reg(3, 200dc40) 
0x7f7d10668880: call 0x7f7d1065e530
TSnap7Server::FindFirstFreeDB()@plt: 200dc40 67 0 200fcf8	_ZN12TSnap7Server15FindFirstFreeDBEv@plt
0x7f7d1065e530: jmp qword ptr [rip+0x2220b2]
TSnap7Server::FindFirstFreeDB(): 200dc40 67 0 200fcf8	_ZN12TSnap7Server15FindFirstFreeDBEv
0x7f7d10668808: cmp qword ptr [rdi+0x20b0], 0x0  mem(200fcf0, 201d650) 
0x7f7d10668810: jz 0x7f7d10668838
0x7f7d10668812: add rdi, 0x20b8  reg(3, 200dc40) 
0x7f7d10668819: mov eax, 0x1  reg(56, 300000) 
0x7f7d1066881e: cmp qword ptr [rdi], 0x0  mem(200fcf8, 0) 
0x7f7d10668822: jz 0x7f7d1066883d
0x7f7d1066883d: ret 
0x7f7d10668885: mov r14d, eax  reg(79, 0)  reg(56, 1) 
0x7f7d10668888: mov eax, 0x600000  reg(56, 1) 
0x7f7d1066888d: cmp r14d, 0xffffffff  reg(79, 1) 
0x7f7d10668891: jz 0x7f7d106688f2
0x7f7d10668893: mov edi, 0x18  reg(45, 200fcf8) 
0x7f7d10668898: call 0x7f7d1065f130
operator new(unsigned long)@plt: 18 67 0 200fcf8	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066889d: mov r15, rax  reg(18, 0)  reg(10, 201d6a0) 
0x7f7d106688a0: mov word ptr [rax], r13w  reg(75, 67)  mem(201d6a0, 0) 
0x7f7d106688a4: mov edi, 0x28  reg(45, 0) 
0x7f7d106688a9: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 201d6b0 201d6a0 7f7d10067b20	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d106688ae: mov r13, rax  reg(16, 67)  reg(10, 201d6c0) 
0x7f7d106688b1: mov esi, 0x0  reg(47, 201d6e0) 
0x7f7d106688b6: mov rdi, rax  reg(3, 0)  reg(10, 201d6c0) 
0x7f7d106688b9: call 0x7f7d1065e150
pthread_mutex_init@plt: 201d6c0 0 201d6c0 7f7d10067b20	pthread_mutex_init@plt
0x7f7d1065e150: jmp qword ptr [rip+0x2222a2]
0x7f7d106688be: mov qword ptr [r15+0x10], r13  reg(16, 201d6c0)  mem(201d6b0, 0) 
0x7f7d106688c2: mov qword ptr [r15+0x8], rbx  reg(7, 6068c0)  mem(201d6a8, 0) 
0x7f7d106688c6: mov word ptr [r15+0x2], r12w  reg(72, 500)  mem(201d6a2, 68c0000000000000) 
0x7f7d106688cb: movsxd rax, r14d  reg(10, 0)  reg(79, 1) 
0x7f7d106688ce: mov qword ptr [rbp+rax*8+0x20b0], r15  reg(18, 201d6a0)  mem(200fcf8, 0) 
0x7f7d106688d6: add dword ptr [rbp+0x20a8], 0x1  mem(200fce8, 1) 
0x7f7d106688dd: mov eax, 0x0  reg(56, 1) 
0x7f7d106688e2: cmp r14d, dword ptr [rbp+0x20ac]  reg(79, 1) 
0x7f7d106688e9: jle 0x7f7d106688f2
0x7f7d106688eb: mov dword ptr [rbp+0x20ac], r14d  reg(79, 1)  mem(200fcec, 201d65000000000) 
0x7f7d106688f2: add rsp, 0x8
0x7f7d106688f6: pop rbx  reg(7, 6068c0) 
0x7f7d106688f7: pop rbp
0x7f7d106688f8: pop r12  reg(15, 500) 
0x7f7d106688fa: pop r13  reg(16, 201d6c0) 
0x7f7d106688fc: pop r14  reg(17, 1) 
0x7f7d106688fe: pop r15  reg(18, 201d6a0) 
0x7f7d10668900: ret 
0x7f7d10668c63: jmp 0x7f7d10668c71
0x7f7d10668c71: add rsp, 0x8
0x7f7d10668c75: ret 
0x7f7d10675ea0: add rsp, 0x8
0x7f7d10675ea4: ret 
0x403f7b: add rsp, 0x8
0x403f7f: ret 
0x403535: mov r8d, 0x400  reg(61, 500) 
0x40353b: mov ecx, 0x6064c0  reg(55, 0) 
0x403540: mov edx, 0x3  reg(54, 0) 
0x403545: mov esi, 0x5  reg(47, 7f7d0f890ff4) 
0x40354a: mov rdi, qword ptr [rip+0x203a6f]  reg(3, 201d6c0) 
0x403551: call 0x403f68
TS7Server::RegisterArea(int, unsigned short, void*, unsigned short): 200dc20 5 3 6064c0	_ZN9TS7Server12RegisterAreaEitPvt
0x403f68: sub rsp, 0x8
0x403f6c: movzx edx, dx  reg(54, 3)  reg(35, 3) 
0x403f6f: movzx r8d, r8w  reg(61, 400)  reg(60, 400) 
0x403f73: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403f76: call 0x403090
Srv_RegisterArea@plt: 200dc40 5 3 6064c0	Srv_RegisterArea@plt
0x403090: jmp qword ptr [rip+0x203302]
Srv_RegisterArea: 200dc40 5 3 6064c0	Srv_RegisterArea
0x7f7d10675e86: mov eax, 0xfffffffe  reg(56, 0) 
0x7f7d10675e8b: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d10675e8e: jz 0x7f7d10675ea4
0x7f7d10675e90: sub rsp, 0x8
0x7f7d10675e94: movzx edx, dx  reg(54, 3)  reg(35, 3) 
0x7f7d10675e97: movzx r8d, r8w  reg(61, 400)  reg(60, 400) 
0x7f7d10675e9b: call 0x7f7d1065ded0
TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short)@plt: 200dc40 5 3 6064c0	_ZN12TSnap7Server12RegisterAreaEitPvt@plt
0x7f7d1065ded0: jmp qword ptr [rip+0x2223e2]
TSnap7Server::RegisterArea(int, unsigned short, void*, unsigned short): 200dc40 5 3 6064c0	_ZN12TSnap7Server12RegisterAreaEitPvt
0x7f7d10668c48: sub rsp, 0x8
0x7f7d10668c4c: mov rax, rcx  reg(10, fffffffe)  reg(9, 6064c0) 
0x7f7d10668c4f: cmp esi, 0x5  reg(47, 5) 
0x7f7d10668c52: jnz 0x7f7d10668c65
0x7f7d10668c54: movzx ecx, r8w  reg(55, 6064c0)  reg(60, 400) 
0x7f7d10668c58: movzx esi, dx  reg(47, 5)  reg(35, 3) 
0x7f7d10668c5b: mov rdx, rax  reg(8, 3)  reg(10, 6064c0) 
0x7f7d10668c5e: call 0x7f7d1065e920
TSnap7Server::RegisterDB(unsigned short, void*, unsigned short)@plt: 200dc40 3 6064c0 400	_ZN12TSnap7Server10RegisterDBEtPvt@plt
0x7f7d1065e920: jmp qword ptr [rip+0x221eba]
TSnap7Server::RegisterDB(unsigned short, void*, unsigned short): 200dc40 3 6064c0 400	_ZN12TSnap7Server10RegisterDBEtPvt
0x7f7d10668840: mov eax, 0x200000  reg(56, 6064c0) 
0x7f7d10668845: test rdx, rdx  reg(8, 6064c0)  reg(8, 6064c0) 
0x7f7d10668848: jz 0x7f7d10668900
0x7f7d1066884e: push r15  reg(18, 0) 
0x7f7d10668850: push r14  reg(17, 0) 
0x7f7d10668852: push r13  reg(16, 7ffd5f796d70) 
0x7f7d10668854: push r12  reg(15, 403230) 
0x7f7d10668856: push rbp
0x7f7d10668857: push rbx  reg(7, 200dc20) 
0x7f7d10668858: sub rsp, 0x8
0x7f7d1066885c: mov r12d, ecx  reg(73, 403230)  reg(55, 400) 
0x7f7d1066885f: mov rbx, rdx  reg(7, 200dc20)  reg(8, 6064c0) 
0x7f7d10668862: mov r13d, esi  reg(76, 7ffd5f796d70)  reg(47, 3) 
0x7f7d10668865: mov rbp, rdi
0x7f7d10668868: movzx esi, si  reg(47, 3)  reg(40, 3) 
0x7f7d1066886b: call 0x7f7d1065deb0
TSnap7Server::FindDB(unsigned short)@plt: 200dc40 3 6064c0 400	_ZN12TSnap7Server6FindDBEt@plt
0x7f7d1065deb0: jmp qword ptr [rip+0x2223f2]
TSnap7Server::FindDB(unsigned short): 200dc40 3 6064c0 400	_ZN12TSnap7Server6FindDBEt
0x7f7d1066845a: mov eax, dword ptr [rdi+0x20ac]  reg(56, 200000) 
0x7f7d10668460: lea edx, ptr [rax+0x1]  reg(54, 6064c0) 
0x7f7d10668463: test edx, edx  reg(54, 2)  reg(54, 2) 
0x7f7d10668465: jle 0x7f7d10668494
0x7f7d10668467: lea rdx, ptr [rdi+0x20b0]  reg(8, 2) 
0x7f7d1066846e: mov eax, eax  reg(56, 1)  reg(56, 1) 
0x7f7d10668470: lea rcx, ptr [rdi+rax*8+0x20b8]  reg(9, 400) 
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 1) 
0x7f7d1066847b: test rax, rax  reg(10, 201d650)  reg(10, 201d650) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668480: cmp word ptr [rax], si  reg(40, 3)  mem(201d650, 2000015) 
0x7f7d10668483: jz 0x7f7d10668499
0x7f7d10668485: add rdx, 0x8  reg(8, 200fcf0) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fcf8)  reg(9, 200fd00) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 201d650) 
0x7f7d1066847b: test rax, rax  reg(10, 201d6a0)  reg(10, 201d6a0) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668480: cmp word ptr [rax], si  reg(40, 3)  mem(201d6a0, 5000067) 
0x7f7d10668483: jz 0x7f7d10668499
0x7f7d10668485: add rdx, 0x8  reg(8, 200fcf8) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fd00)  reg(9, 200fd00) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d1066848e: mov eax, 0x0  reg(56, 201d6a0) 
0x7f7d10668493: ret 
0x7f7d10668870: mov rdx, rax  reg(8, 200fd00)  reg(10, 0) 
0x7f7d10668873: mov eax, 0x300000  reg(56, 0) 
0x7f7d10668878: test rdx, rdx  reg(8, 0)  reg(8, 0) 
0x7f7d1066887b: jnz 0x7f7d106688f2
0x7f7d1066887d: mov rdi, rbp  reg(3, 200dc40) 
0x7f7d10668880: call 0x7f7d1065e530
TSnap7Server::FindFirstFreeDB()@plt: 200dc40 3 0 200fd00	_ZN12TSnap7Server15FindFirstFreeDBEv@plt
0x7f7d1065e530: jmp qword ptr [rip+0x2220b2]
TSnap7Server::FindFirstFreeDB(): 200dc40 3 0 200fd00	_ZN12TSnap7Server15FindFirstFreeDBEv
0x7f7d10668808: cmp qword ptr [rdi+0x20b0], 0x0  mem(200fcf0, 201d650) 
0x7f7d10668810: jz 0x7f7d10668838
0x7f7d10668812: add rdi, 0x20b8  reg(3, 200dc40) 
0x7f7d10668819: mov eax, 0x1  reg(56, 300000) 
0x7f7d1066881e: cmp qword ptr [rdi], 0x0  mem(200fcf8, 201d6a0) 
0x7f7d10668822: jz 0x7f7d1066883d
0x7f7d10668824: add eax, 0x1  reg(56, 1) 
0x7f7d10668827: add rdi, 0x8  reg(3, 200fcf8) 
0x7f7d1066882b: cmp eax, 0x800  reg(56, 2) 
0x7f7d10668830: jnz 0x7f7d1066881e
0x7f7d1066881e: cmp qword ptr [rdi], 0x0  mem(200fd00, 0) 
0x7f7d10668822: jz 0x7f7d1066883d
0x7f7d1066883d: ret 
0x7f7d10668885: mov r14d, eax  reg(79, 0)  reg(56, 2) 
0x7f7d10668888: mov eax, 0x600000  reg(56, 2) 
0x7f7d1066888d: cmp r14d, 0xffffffff  reg(79, 2) 
0x7f7d10668891: jz 0x7f7d106688f2
0x7f7d10668893: mov edi, 0x18  reg(45, 200fd00) 
0x7f7d10668898: call 0x7f7d1065f130
operator new(unsigned long)@plt: 18 3 0 200fd00	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066889d: mov r15, rax  reg(18, 0)  reg(10, 201d6f0) 
0x7f7d106688a0: mov word ptr [rax], r13w  reg(75, 3)  mem(201d6f0, 0) 
0x7f7d106688a4: mov edi, 0x28  reg(45, 0) 
0x7f7d106688a9: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 201d700 201d6f0 7f7d10067b20	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d106688ae: mov r13, rax  reg(16, 3)  reg(10, 201d710) 
0x7f7d106688b1: mov esi, 0x0  reg(47, 201d730) 
0x7f7d106688b6: mov rdi, rax  reg(3, 0)  reg(10, 201d710) 
0x7f7d106688b9: call 0x7f7d1065e150
pthread_mutex_init@plt: 201d710 0 201d710 7f7d10067b20	pthread_mutex_init@plt
0x7f7d1065e150: jmp qword ptr [rip+0x2222a2]
0x7f7d106688be: mov qword ptr [r15+0x10], r13  reg(16, 201d710)  mem(201d700, 0) 
0x7f7d106688c2: mov qword ptr [r15+0x8], rbx  reg(7, 6064c0)  mem(201d6f8, 0) 
0x7f7d106688c6: mov word ptr [r15+0x2], r12w  reg(72, 400)  mem(201d6f2, 64c0000000000000) 
0x7f7d106688cb: movsxd rax, r14d  reg(10, 0)  reg(79, 2) 
0x7f7d106688ce: mov qword ptr [rbp+rax*8+0x20b0], r15  reg(18, 201d6f0)  mem(200fd00, 0) 
0x7f7d106688d6: add dword ptr [rbp+0x20a8], 0x1  mem(200fce8, 100000002) 
0x7f7d106688dd: mov eax, 0x0  reg(56, 2) 
0x7f7d106688e2: cmp r14d, dword ptr [rbp+0x20ac]  reg(79, 2) 
0x7f7d106688e9: jle 0x7f7d106688f2
0x7f7d106688eb: mov dword ptr [rbp+0x20ac], r14d  reg(79, 2)  mem(200fcec, 201d65000000001) 
0x7f7d106688f2: add rsp, 0x8
0x7f7d106688f6: pop rbx  reg(7, 6064c0) 
0x7f7d106688f7: pop rbp
0x7f7d106688f8: pop r12  reg(15, 400) 
0x7f7d106688fa: pop r13  reg(16, 201d710) 
0x7f7d106688fc: pop r14  reg(17, 2) 
0x7f7d106688fe: pop r15  reg(18, 201d6f0) 
0x7f7d10668900: ret 
0x7f7d10668c63: jmp 0x7f7d10668c71
0x7f7d10668c71: add rsp, 0x8
0x7f7d10668c75: ret 
0x7f7d10675ea0: add rsp, 0x8
0x7f7d10675ea4: ret 
0x403f7b: add rsp, 0x8
0x403f7f: ret 
0x403556: mov esi, 0xfffdffff  reg(47, 7f7d0f890ff4) 
0x40355b: mov rdi, qword ptr [rip+0x203a5e]  reg(3, 201d710) 
0x403562: call 0x403f38
TS7Server::SetEventsMask(unsigned int): 200dc20 fffdffff 0 0	_ZN9TS7Server13SetEventsMaskEj
0x403f38: sub rsp, 0x8
0x403f3c: mov edx, esi  reg(54, 0)  reg(47, fffdffff) 
0x403f3e: mov esi, 0x0  reg(47, fffdffff) 
0x403f43: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403f46: call 0x402f20
Srv_SetMask@plt: 200dc40 0 fffdffff 0	Srv_SetMask@plt
0x402f20: jmp qword ptr [rip+0x2033ba]
0x402f26: push 0x59 
0x402f2b: jmp 0x402980
Srv_SetMask: 200dc40 0 fffdffff 0	Srv_SetMask
0x7f7d106760cc: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d106760cf: jz 0x7f7d106760f7
0x7f7d106760d1: mov eax, 0xffffffff  reg(56, 0) 
0x7f7d106760d6: cmp esi, 0x1  reg(47, 0) 
0x7f7d106760d9: jnbe 0x7f7d106760fc
0x7f7d106760db: test esi, esi  reg(47, 0)  reg(47, 0) 
0x7f7d106760dd: jnz 0x7f7d106760eb
0x7f7d106760df: mov dword ptr [rdi+0x206c], edx  reg(54, fffdffff)  mem(200fcac, ffffffff) 
0x7f7d106760e5: mov eax, 0x0  reg(56, ffffffff) 
0x7f7d106760ea: ret 
0x403f4b: add rsp, 0x8
0x403f4f: ret 
0x403567: mov edx, 0x0  reg(54, fffdffff) 
0x40356c: mov esi, 0x403326  reg(47, 0) 
0x403571: mov rdi, qword ptr [rip+0x203a48]  reg(3, 200dc40) 
0x403578: call 0x403e06
TS7Server::SetEventsCallback(void (*)(void*, TSrvEvent*, int), void*): 200dc20 403326 0 0	_ZN9TS7Server17SetEventsCallbackEPFvPvP9TSrvEventiES0_
0x403e06: sub rsp, 0x8
0x403e0a: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403e0d: call 0x402e30
Srv_SetEventsCallback@plt: 200dc40 403326 0 0	Srv_SetEventsCallback@plt
0x402e30: jmp qword ptr [rip+0x203432]
0x402e36: push 0x4a 
0x402e3b: jmp 0x402980
Srv_SetEventsCallback: 200dc40 403326 0 0	Srv_SetEventsCallback
0x7f7d106760fe: mov eax, 0xfffffffe  reg(56, 0) 
0x7f7d10676103: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d10676106: jz 0x7f7d10676115
0x7f7d10676108: sub rsp, 0x8
0x7f7d1067610c: call 0x7f7d1065dcf0
TCustomMsgServer::SetEventsCallBack(void (*)(void*, TSrvEvent*, int), void*)@plt: 200dc40 403326 0 0	_ZN16TCustomMsgServer17SetEventsCallBackEPFvPvP9TSrvEventiES0_@plt
0x7f7d1065dcf0: jmp qword ptr [rip+0x2224d2]
0x7f7d1065dcf6: push 0x36 
0x7f7d1065dcfb: jmp 0x7f7d1065d980
TCustomMsgServer::SetEventsCallBack(void (*)(void*, TSrvEvent*, int), void*): 200dc40 403326 0 0	_ZN16TCustomMsgServer17SetEventsCallBackEPFvPvP9TSrvEventiES0_
0x7f7d10661590: mov qword ptr [rdi+0x40], rsi  reg(4, 403326)  mem(200dc80, 0) 
0x7f7d10661594: mov qword ptr [rdi+0x48], rdx  reg(8, 0)  mem(200dc88, 0) 
0x7f7d10661598: mov eax, 0x0  reg(56, fffffffe) 
0x7f7d1066159d: ret 
0x7f7d10676111: add rsp, 0x8
0x7f7d10676115: ret 
0x403e12: add rsp, 0x8
0x403e16: ret 
0x40357d: mov edx, 0x0  reg(54, 0) 
0x403582: mov esi, 0x40339a  reg(47, 403326) 
0x403587: mov rdi, qword ptr [rip+0x203a32]  reg(3, 200dc40) 
0x40358e: call 0x403e18
TS7Server::SetReadEventsCallback(void (*)(void*, TSrvEvent*, int), void*): 200dc20 40339a 0 0	_ZN9TS7Server21SetReadEventsCallbackEPFvPvP9TSrvEventiES0_
0x403e18: sub rsp, 0x8
0x403e1c: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403e1f: call 0x402e60
Srv_SetReadEventsCallback@plt: 200dc40 40339a 0 0	Srv_SetReadEventsCallback@plt
0x402e60: jmp qword ptr [rip+0x20341a]
0x402e66: push 0x4d 
0x402e6b: jmp 0x402980
Srv_SetReadEventsCallback: 200dc40 40339a 0 0	Srv_SetReadEventsCallback
0x7f7d10676117: mov eax, 0xfffffffe  reg(56, 0) 
0x7f7d1067611c: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d1067611f: jz 0x7f7d1067612e
0x7f7d10676121: sub rsp, 0x8
0x7f7d10676125: call 0x7f7d1065e4b0
TSnap7Server::SetReadEventsCallBack(void (*)(void*, TSrvEvent*, int), void*)@plt: 200dc40 40339a 0 0	_ZN12TSnap7Server21SetReadEventsCallBackEPFvPvP9TSrvEventiES0_@plt
0x7f7d1065e4b0: jmp qword ptr [rip+0x2220f2]
0x7f7d1065e4b6: push 0xb2 
0x7f7d1065e4bb: jmp 0x7f7d1065d980
TSnap7Server::SetReadEventsCallBack(void (*)(void*, TSrvEvent*, int), void*): 200dc40 40339a 0 0	_ZN12TSnap7Server21SetReadEventsCallBackEPFvPvP9TSrvEventiES0_
0x7f7d10668d6e: mov qword ptr [rdi+0x2080], rsi  reg(4, 40339a)  mem(200fcc0, 0) 
0x7f7d10668d75: mov qword ptr [rdi+0x2098], rdx  reg(8, 0)  mem(200fcd8, 0) 
0x7f7d10668d7c: mov eax, 0x0  reg(56, fffffffe) 
0x7f7d10668d81: ret 
0x7f7d1067612a: add rsp, 0x8
0x7f7d1067612e: ret 
0x403e24: add rsp, 0x8
0x403e28: ret 
0x403593: mov rdi, qword ptr [rip+0x203a26]  reg(3, 200dc40) 
0x40359a: call 0x403dac
TS7Server::Start(): 200dc20 40339a 0 0	_ZN9TS7Server5StartEv
0x403dac: sub rsp, 0x8
0x403db0: mov rdi, qword ptr [rdi]  reg(3, 200dc20) 
0x403db3: call 0x403030
Srv_Start@plt: 200dc40 40339a 0 0	Srv_Start@plt
0x403030: jmp qword ptr [rip+0x203332]
0x403036: push 0x6a 
0x40303b: jmp 0x402980
Srv_Start: 200dc40 40339a 0 0	Srv_Start
0x7f7d10675e4f: mov eax, 0xfffffffe  reg(56, 0) 
0x7f7d10675e54: test rdi, rdi  reg(3, 200dc40)  reg(3, 200dc40) 
0x7f7d10675e57: jz 0x7f7d10675e66
0x7f7d10675e59: sub rsp, 0x8
0x7f7d10675e5d: call 0x7f7d1065dce0
TCustomMsgServer::Start()@plt: 200dc40 40339a 0 0	_ZN16TCustomMsgServer5StartEv@plt
0x7f7d1065dce0: jmp qword ptr [rip+0x2224da]
0x7f7d1065dce6: push 0x35 
0x7f7d1065dceb: jmp 0x7f7d1065d980
TCustomMsgServer::Start(): 200dc40 40339a 0 0	_ZN16TCustomMsgServer5StartEv
0x7f7d1066138e: push rbp
0x7f7d1066138f: push rbx  reg(7, 200dc20) 
0x7f7d10661390: sub rsp, 0x8
0x7f7d10661394: mov rbx, rdi  reg(7, 200dc20)  reg(3, 200dc40) 
0x7f7d10661397: mov ebp, 0x0
0x7f7d1066139c: cmp dword ptr [rdi+0x2070], 0x1  mem(200fcb0, 0) 
0x7f7d106613a3: jz 0x7f7d10661421
0x7f7d106613a5: call 0x7f7d1065f3f0
TCustomMsgServer::StartListener()@plt: 200dc40 40339a 0 0	_ZN16TCustomMsgServer13StartListenerEv@plt
0x7f7d1065f3f0: jmp qword ptr [rip+0x221952]
0x7f7d1065f3f6: push 0x1a6 
0x7f7d1065f3fb: jmp 0x7f7d1065d980
TCustomMsgServer::StartListener(): 200dc40 40339a 0 0	_ZN16TCustomMsgServer13StartListenerEv
0x7f7d10660fe0: push r12  reg(15, 403230) 
0x7f7d10660fe2: push rbp
0x7f7d10660fe3: push rbx  reg(7, 200dc40) 
0x7f7d10660fe4: mov rbp, rdi
0x7f7d10660fe7: mov edi, 0x80  reg(45, 200dc40) 
0x7f7d10660fec: call 0x7f7d1065f130
operator new(unsigned long)@plt: 80 40339a 0 0	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d10660ff1: mov rbx, rax  reg(7, 200dc40)  reg(10, 201d740) 
0x7f7d10660ff4: mov rdi, rax  reg(3, 0)  reg(10, 201d740) 
0x7f7d10660ff7: call 0x7f7d1065daa0
TMsgSocket::TMsgSocket()@plt: 201d740 201d7c0 201d740 7f7d10067b20	_ZN10TMsgSocketC1Ev@plt
0x7f7d1065daa0: jmp qword ptr [rip+0x2225fa]
0x7f7d1065daa6: push 0x11 
0x7f7d1065daab: jmp 0x7f7d1065d980
TMsgSocket::TMsgSocket(): 201d740 201d7c0 201d740 7f7d10067b20	_ZN10TMsgSocketC1Ev
0x7f7d10660670: push rbp
0x7f7d10660671: push rbx  reg(7, 201d740) 
0x7f7d10660672: sub rsp, 0x8
0x7f7d10660676: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d10660679: lea rdi, ptr [rdi+0x8]  reg(3, 201d740) 
0x7f7d1066067d: call 0x7f7d1065ede0
TSnapBase::TSnapBase()@plt: 201d748 201d7c0 201d740 7f7d10067b20	_ZN9TSnapBaseC2Ev@plt
0x7f7d1065ede0: jmp qword ptr [rip+0x221c5a]
0x7f7d1065ede6: push 0x145 
0x7f7d1065edeb: jmp 0x7f7d1065d980
TSnapBase::TSnapBase(): 201d748 201d7c0 201d740 7f7d10067b20	_ZN9TSnapBaseC2Ev
0x7f7d1065f568: mov byte ptr [rdi], 0x1  mem(201d748, 0) 
0x7f7d1065f56b: ret 
0x7f7d10660682: mov rax, qword ptr [rip+0x21f6b7]  reg(10, 201d740) 
0x7f7d10660689: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f320) 
0x7f7d1066068d: mov qword ptr [rbx], rax  reg(10, 7f7d1087f330)  mem(201d740, 0) 
0x7f7d10660690: mov edi, 0x10  reg(45, 201d748) 
0x7f7d10660695: call 0x7f7d1065f130
operator new(unsigned long)@plt: 10 201d7c0 201d740 7f7d10067b20	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066069a: mov rbp, rax
0x7f7d1066069d: mov rdi, rax  reg(3, 0)  reg(10, 201d7d0) 
0x7f7d106606a0: call 0x7f7d1065dde0
TPinger::TPinger()@plt: 201d7d0 201d7e0 201d7d0 7f7d10067b20	_ZN7TPingerC1Ev@plt
0x7f7d1065dde0: jmp qword ptr [rip+0x22245a]
0x7f7d1065dde6: push 0x45 
0x7f7d1065ddeb: jmp 0x7f7d1065d980
TPinger::TPinger(): 201d7d0 201d7e0 201d7d0 7f7d10067b20	_ZN7TPingerC1Ev
0x7f7d1066066e: ret 
0x7f7d106606a5: mov qword ptr [rbx+0x10], rbp  mem(201d750, 0) 
0x7f7d106606a9: mov rax, 0x302e302e302e30  reg(10, 201d7d0) 
0x7f7d106606b3: mov qword ptr [rbx+0x44], rax  reg(10, 302e302e302e30)  mem(201d784, 0) 
0x7f7d106606b7: mov word ptr [rbx+0x64], 0x0  mem(201d7a4, 0) 
0x7f7d106606bd: mov rax, 0x2e302e302e373231  reg(10, 302e302e302e30) 
0x7f7d106606c7: mov qword ptr [rbx+0x54], rax  reg(10, 2e302e302e373231)  mem(201d794, 0) 
0x7f7d106606cb: mov word ptr [rbx+0x5c], 0x31  mem(201d79c, 0) 
0x7f7d106606d1: mov word ptr [rbx+0x66], 0x0  mem(201d7a6, 0) 
0x7f7d106606d7: mov dword ptr [rbx+0x68], 0x64  mem(201d7a8, 0) 
0x7f7d106606de: mov dword ptr [rbx+0x70], 0x1f4  mem(201d7b0, 0) 
0x7f7d106606e5: mov dword ptr [rbx+0x74], 0xa  mem(201d7b4, 0) 
0x7f7d106606ec: mov dword ptr [rbx+0x6c], 0x2ee  mem(201d7ac, 1f400000000) 
0x7f7d106606f3: mov byte ptr [rbx+0x7c], 0x0  mem(201d7bc, 0) 
0x7f7d106606f7: mov dword ptr [rbx+0x18], 0xffffffff  mem(201d758, 0) 
0x7f7d106606fe: mov dword ptr [rbx+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d10660705: mov dword ptr [rbx+0x40], 0x0  mem(201d780, 2e302e3000000000) 
0x7f7d1066070c: jmp 0x7f7d10660721
0x7f7d10660721: add rsp, 0x8
0x7f7d10660725: pop rbx  reg(7, 201d740) 
0x7f7d10660726: pop rbp
0x7f7d10660727: ret 
0x7f7d10660ffc: mov qword ptr [rbp+0x20], rbx  reg(7, 201d740)  mem(200dc60, 0) 
0x7f7d10661000: lea rsi, ptr [rbp+0xc]  reg(4, 201d7e0) 
0x7f7d10661004: lea rdi, ptr [rbx+0x44]  reg(3, 201d7d0) 
0x7f7d10661008: mov edx, 0x10  reg(54, 201d7d0) 
0x7f7d1066100d: call 0x7f7d1065ee30
strncpy@plt: 201d784 200dc4c 10 7f7d10067b20	strncpy@plt
0x7f7d1065ee30: jmp qword ptr [rip+0x221c32]
0x7f7d1065ee36: push 0x14a 
0x7f7d1065ee3b: jmp 0x7f7d1065d980
0x7f7d10661012: movzx eax, word ptr [rbp+0x2060]  reg(56, 201d784) 
0x7f7d10661019: mov word ptr [rbx+0x64], ax  reg(29, 66)  mem(201d7a4, 6400000000) 
0x7f7d1066101d: mov rdi, rbx  reg(3, 201d78c)  reg(7, 201d740) 
0x7f7d10661020: call 0x7f7d1065ec60
TMsgSocket::SckBind()@plt: 201d740 200dc4c 0 7f7d0fd49d70	_ZN10TMsgSocket7SckBindEv@plt
0x7f7d1065ec60: jmp qword ptr [rip+0x221d1a]
0x7f7d1065ec66: push 0x12d 
0x7f7d1065ec6b: jmp 0x7f7d1065d980
TMsgSocket::SckBind(): 201d740 200dc4c 0 7f7d0fd49d70	_ZN10TMsgSocket7SckBindEv
0x7f7d10660068: push rbp
0x7f7d10660069: push rbx  reg(7, 201d740) 
0x7f7d1066006a: sub rsp, 0x18
0x7f7d1066006e: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d10660071: mov rax, qword ptr fs:[0x28]  reg(10, 66) 
0x7f7d1066007a: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796bc8, 7f7d106606a5) 
0x7f7d1066007f: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10660081: mov dword ptr [rsp+0x4], 0x1  mem(7ffd5f796bc4, 48f98f0000000000) 
0x7f7d10660089: lea rbp, ptr [rdi+0x1c]
0x7f7d1066008d: movzx ecx, word ptr [rdi+0x64]  reg(55, 7f7d0fd49d70) 
0x7f7d10660091: lea rdx, ptr [rdi+0x44]  reg(8, 0) 
0x7f7d10660095: mov rsi, rbp  reg(4, 200dc4c) 
0x7f7d10660098: call 0x7f7d1065db10
TMsgSocket::SetSin(sockaddr_in&, char*, unsigned short)@plt: 201d740 201d75c 201d784 66	_ZN10TMsgSocket6SetSinER11sockaddr_inPct@plt
0x7f7d1065db10: jmp qword ptr [rip+0x2225c2]
0x7f7d1065db16: push 0x18 
0x7f7d1065db1b: jmp 0x7f7d1065d980
TMsgSocket::SetSin(sockaddr_in&, char*, unsigned short): 201d740 201d75c 201d784 66	_ZN10TMsgSocket6SetSinER11sockaddr_inPct
0x7f7d1065f606: push r12  reg(15, 403230) 
0x7f7d1065f608: push rbp
0x7f7d1065f609: push rbx  reg(7, 201d740) 
0x7f7d1065f60a: mov r12, rdi  reg(15, 403230)  reg(3, 201d740) 
0x7f7d1065f60d: mov rbx, rsi  reg(7, 201d740)  reg(4, 201d75c) 
0x7f7d1065f610: mov ebp, ecx
0x7f7d1065f612: mov rdi, rdx  reg(3, 201d740)  reg(8, 201d784) 
0x7f7d1065f615: call 0x7f7d1065f3d0
inet_addr@plt: 201d784 201d75c 201d784 66	inet_addr@plt
0x7f7d1065f3d0: jmp qword ptr [rip+0x221962]
0x7f7d1065f3d6: push 0x1a4 
0x7f7d1065f3db: jmp 0x7f7d1065d980
0x7f7d1065f61a: mov qword ptr [rbx], 0x0  mem(201d75c, 0) 
0x7f7d1065f621: mov qword ptr [rbx+0x8], 0x0  mem(201d764, 0) 
0x7f7d1065f629: mov dword ptr [r12+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d1065f632: cmp eax, 0xffffffff  reg(56, 0) 
0x7f7d1065f635: jz 0x7f7d1065f64b
0x7f7d1065f637: mov dword ptr [rbx+0x4], eax  reg(56, 0)  mem(201d760, 0) 
0x7f7d1065f63a: mov word ptr [rbx], 0x2  mem(201d75c, 0) 
0x7f7d1065f63f: mov ecx, ebp  reg(55, ffffffffffffff78) 
0x7f7d1065f641: ror cx, 0x8  reg(32, 66) 
0x7f7d1065f645: mov word ptr [rbx+0x2], cx  reg(32, 6600)  mem(201d75e, 0) 
0x7f7d1065f649: jmp 0x7f7d1065f654
0x7f7d1065f654: pop rbx  reg(7, 201d75c) 
0x7f7d1065f655: pop rbp
0x7f7d1065f656: pop r12  reg(15, 201d740) 
0x7f7d1065f658: ret 
0x7f7d1066009d: cmp dword ptr [rbx+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d106600a1: jnz 0x7f7d106600f6
0x7f7d106600a3: mov rdi, rbx  reg(3, 0)  reg(7, 201d740) 
0x7f7d106600a6: call 0x7f7d1065e230
TMsgSocket::CreateSocket()@plt: 201d740 0 7f7d0fe37550 6600	_ZN10TMsgSocket12CreateSocketEv@plt
0x7f7d1065e230: jmp qword ptr [rip+0x222232]
0x7f7d1065e236: push 0x8a 
0x7f7d1065e23b: jmp 0x7f7d1065d980
TMsgSocket::CreateSocket(): 201d740 0 7f7d0fe37550 6600	_ZN10TMsgSocket12CreateSocketEv
0x7f7d1065fb5e: push rbx  reg(7, 201d740) 
0x7f7d1065fb5f: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065fb62: call 0x7f7d1065f040
TMsgSocket::DestroySocket()@plt: 201d740 0 7f7d0fe37550 6600	_ZN10TMsgSocket13DestroySocketEv@plt
0x7f7d1065f040: jmp qword ptr [rip+0x221b2a]
0x7f7d1065f046: push 0x16b 
0x7f7d1065f04b: jmp 0x7f7d1065d980
TMsgSocket::DestroySocket(): 201d740 0 7f7d0fe37550 6600	_ZN10TMsgSocket13DestroySocketEv
0x7f7d1065fb24: push rbx  reg(7, 201d740) 
0x7f7d1065fb25: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065fb28: mov edi, dword ptr [rdi+0x18]  reg(45, 201d740) 
0x7f7d1065fb2b: cmp edi, 0xffffffff  reg(45, ffffffff) 
0x7f7d1065fb2e: jz 0x7f7d1065fb55
0x7f7d1065fb55: mov dword ptr [rbx+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d1065fb5c: pop rbx  reg(7, 201d740) 
0x7f7d1065fb5d: ret 
0x7f7d1065fb67: mov dword ptr [rbx+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d1065fb6e: mov edx, 0x6  reg(54, 7f7d0fe37550) 
0x7f7d1065fb73: mov esi, 0x1  reg(47, 0) 
0x7f7d1065fb78: mov edi, 0x2  reg(45, ffffffff) 
0x7f7d1065fb7d: call 0x7f7d1065e940
socket@plt: 2 1 6 6600	socket@plt
0x7f7d1065e940: jmp qword ptr [rip+0x221eaa]
0x7f7d1065fb82: mov dword ptr [rbx+0x18], eax  reg(56, 3)  mem(201d758, 66000002ffffffff) 
0x7f7d1065fb85: cmp eax, 0xffffffff  reg(56, 3) 
0x7f7d1065fb88: jz 0x7f7d1065fb94
0x7f7d1065fb8a: mov rdi, rbx  reg(3, 2)  reg(7, 201d740) 
0x7f7d1065fb8d: call 0x7f7d1065e710
TMsgSocket::SetSocketOptions()@plt: 201d740 1 6 6600	_ZN10TMsgSocket16SetSocketOptionsEv@plt
0x7f7d1065e710: jmp qword ptr [rip+0x221fc2]
0x7f7d1065e716: push 0xd8 
0x7f7d1065e71b: jmp 0x7f7d1065d980
TMsgSocket::SetSocketOptions(): 201d740 1 6 6600	_ZN10TMsgSocket16SetSocketOptionsEv
0x7f7d1065f7f0: push rbx  reg(7, 201d740) 
0x7f7d1065f7f1: sub rsp, 0x10
0x7f7d1065f7f5: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065f7f8: mov rax, qword ptr fs:[0x28]  reg(10, 3) 
0x7f7d1065f801: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796b98, 7f7d10b2b548) 
0x7f7d1065f806: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f808: mov dword ptr [rsp], 0x1  mem(7ffd5f796b90, 201d740) 
0x7f7d1065f80f: mov dword ptr [rsp+0x4], 0x1  mem(7ffd5f796b94, 48f98f0000000000) 
0x7f7d1065f817: mov dword ptr [rdi+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d1065f81e: mov rcx, rsp  reg(9, 6600) 
0x7f7d1065f821: mov edi, dword ptr [rdi+0x18]  reg(45, 201d740) 
0x7f7d1065f824: mov r8d, 0x4  reg(61, 1fffffffffffffff) 
0x7f7d1065f82a: mov edx, 0x1  reg(54, 6) 
0x7f7d1065f82f: mov esi, 0x6  reg(47, 1) 
0x7f7d1065f834: call 0x7f7d1065e0f0
setsockopt@plt: 3 6 1 7ffd5f796b90	setsockopt@plt
0x7f7d1065e0f0: jmp qword ptr [rip+0x2222d2]
0x7f7d1065e0f6: push 0x76 
0x7f7d1065e0fb: jmp 0x7f7d1065d980
0x7f7d1065f839: mov esi, eax  reg(47, 6)  reg(56, 0) 
0x7f7d1065f83b: mov rdi, rbx  reg(3, 3)  reg(7, 201d740) 
0x7f7d1065f83e: call 0x7f7d1065e240
TMsgSocket::SockCheck(int)@plt: 201d740 0 1 7ffd5f796b90	_ZN10TMsgSocket9SockCheckEi@plt
0x7f7d1065e240: jmp qword ptr [rip+0x22222a]
0x7f7d1065e246: push 0x8b 
0x7f7d1065e24b: jmp 0x7f7d1065d980
TMsgSocket::SockCheck(int): 201d740 0 1 7ffd5f796b90	_ZN10TMsgSocket9SockCheckEi
0x7f7d1065f7da: push rbx  reg(7, 201d740) 
0x7f7d1065f7db: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065f7de: cmp esi, 0xffffffff  reg(47, 0) 
0x7f7d1065f7e1: jnz 0x7f7d1065f7eb
0x7f7d1065f7eb: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1065f7ee: pop rbx  reg(7, 201d740) 
0x7f7d1065f7ef: ret 
0x7f7d1065f843: cmp dword ptr [rbx+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d1065f847: jnz 0x7f7d1065f870
0x7f7d1065f849: lea rcx, ptr [rsp+0x4]  reg(9, 7ffd5f796b90) 
0x7f7d1065f84e: mov edi, dword ptr [rbx+0x18]  reg(45, 201d740) 
0x7f7d1065f851: mov r8d, 0x4  reg(61, 4) 
0x7f7d1065f857: mov edx, 0x9  reg(54, 1) 
0x7f7d1065f85c: mov esi, 0x1  reg(47, 0) 
0x7f7d1065f861: call 0x7f7d1065e0f0
setsockopt@plt: 3 1 9 7ffd5f796b94	setsockopt@plt
0x7f7d1065e0f0: jmp qword ptr [rip+0x2222d2]
0x7f7d1065f866: mov esi, eax  reg(47, 1)  reg(56, 0) 
0x7f7d1065f868: mov rdi, rbx  reg(3, 3)  reg(7, 201d740) 
0x7f7d1065f86b: call 0x7f7d1065e240
TMsgSocket::SockCheck(int)@plt: 201d740 0 9 7ffd5f796b94	_ZN10TMsgSocket9SockCheckEi@plt
0x7f7d1065e240: jmp qword ptr [rip+0x22222a]
TMsgSocket::SockCheck(int): 201d740 0 9 7ffd5f796b94	_ZN10TMsgSocket9SockCheckEi
0x7f7d1065f7da: push rbx  reg(7, 201d740) 
0x7f7d1065f7db: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065f7de: cmp esi, 0xffffffff  reg(47, 0) 
0x7f7d1065f7e1: jnz 0x7f7d1065f7eb
0x7f7d1065f7eb: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1065f7ee: pop rbx  reg(7, 201d740) 
0x7f7d1065f7ef: ret 
0x7f7d1065f870: mov rax, qword ptr [rsp+0x8]  reg(10, 0) 
0x7f7d1065f875: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d1065f87e: jz 0x7f7d1065f885
0x7f7d1065f885: add rsp, 0x10
0x7f7d1065f889: pop rbx  reg(7, 201d740) 
0x7f7d1065f88a: ret 
0x7f7d1065fb92: jmp 0x7f7d1065fb9f
0x7f7d1065fb9f: pop rbx  reg(7, 201d740) 
0x7f7d1065fba0: ret 
0x7f7d106600ab: cmp dword ptr [rbx+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d106600af: jnz 0x7f7d106600fd
0x7f7d106600b1: lea rcx, ptr [rsp+0x4]  reg(9, 7ffd5f796b94) 
0x7f7d106600b6: mov edi, dword ptr [rbx+0x18]  reg(45, 201d740) 
0x7f7d106600b9: mov r8d, 0x4  reg(61, 4) 
0x7f7d106600bf: mov edx, 0x2  reg(54, 9) 
0x7f7d106600c4: mov esi, 0x1  reg(47, 0) 
0x7f7d106600c9: call 0x7f7d1065e0f0
setsockopt@plt: 3 1 2 7ffd5f796bc4	setsockopt@plt
0x7f7d1065e0f0: jmp qword ptr [rip+0x2222d2]
0x7f7d106600ce: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d106600d1: mov edx, 0x10  reg(54, 2) 
0x7f7d106600d6: mov rsi, rbp  reg(4, 1) 
0x7f7d106600d9: call 0x7f7d1065efd0
bind@plt: 3 201d75c 10 7ffd5f796bc4	bind@plt
0x7f7d1065efd0: jmp qword ptr [rip+0x221b62]
0x7f7d1065efd6: push 0x164 
0x7f7d1065efdb: jmp 0x7f7d1065d980
0x7f7d106600de: mov ebp, eax
0x7f7d106600e0: mov esi, eax  reg(47, 201d75c)  reg(56, 0) 
0x7f7d106600e2: mov rdi, rbx  reg(3, 3)  reg(7, 201d740) 
0x7f7d106600e5: call 0x7f7d1065e240
TMsgSocket::SockCheck(int)@plt: 201d740 0 10 7ffd5f796bc4	_ZN10TMsgSocket9SockCheckEi@plt
0x7f7d1065e240: jmp qword ptr [rip+0x22222a]
TMsgSocket::SockCheck(int): 201d740 0 10 7ffd5f796bc4	_ZN10TMsgSocket9SockCheckEi
0x7f7d1065f7da: push rbx  reg(7, 201d740) 
0x7f7d1065f7db: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065f7de: cmp esi, 0xffffffff  reg(47, 0) 
0x7f7d1065f7e1: jnz 0x7f7d1065f7eb
0x7f7d1065f7eb: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1065f7ee: pop rbx  reg(7, 201d740) 
0x7f7d1065f7ef: ret 
0x7f7d106600ea: test ebp, ebp
0x7f7d106600ec: jnz 0x7f7d106600fd
0x7f7d106600ee: mov eax, dword ptr [rbx+0x20]  reg(56, 0) 
0x7f7d106600f1: mov dword ptr [rbx+0x40], eax  reg(56, 0)  mem(201d780, 2e302e3000000000) 
0x7f7d106600f4: jmp 0x7f7d106600fd
0x7f7d106600fd: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d10660100: mov rsi, qword ptr [rsp+0x8]  reg(4, 0) 
0x7f7d10660105: xor rsi, qword ptr fs:[0x28]  reg(4, f4f60b3748f98f00) 
0x7f7d1066010e: jz 0x7f7d10660115
0x7f7d10660115: add rsp, 0x18
0x7f7d10660119: pop rbx  reg(7, 201d740) 
0x7f7d1066011a: pop rbp
0x7f7d1066011b: ret 
0x7f7d10661025: mov ebx, eax  reg(53, 201d740)  reg(56, 0) 
0x7f7d10661027: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10661029: jnz 0x7f7d1066107e
0x7f7d1066102b: mov rdi, qword ptr [rbp+0x20]  reg(3, 201d740) 
0x7f7d1066102f: mov eax, dword ptr [rdi+0x40]  reg(56, 0) 
0x7f7d10661032: mov dword ptr [rbp+0x2064], eax  reg(56, 0)  mem(200fca4, ffffffff00000000) 
0x7f7d10661038: call 0x7f7d1065ed70
TMsgSocket::SckListen()@plt: 201d740 0 10 7ffd5f796bc4	_ZN10TMsgSocket9SckListenEv@plt
0x7f7d1065ed70: jmp qword ptr [rip+0x221c92]
0x7f7d1065ed76: push 0x13e 
0x7f7d1065ed7b: jmp 0x7f7d1065d980
TMsgSocket::SckListen(): 201d740 0 10 7ffd5f796bc4	_ZN10TMsgSocket9SckListenEv
0x7f7d1066011c: push rbx  reg(7, 0) 
0x7f7d1066011d: mov rbx, rdi  reg(7, 0)  reg(3, 201d740) 
0x7f7d10660120: mov dword ptr [rdi+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d10660127: mov edi, dword ptr [rdi+0x18]  reg(45, 201d740) 
0x7f7d1066012a: mov esi, 0x80  reg(47, 0) 
0x7f7d1066012f: call 0x7f7d1065e430
listen@plt: 3 80 10 7ffd5f796bc4	listen@plt
0x7f7d1065e430: jmp qword ptr [rip+0x222132]
0x7f7d1065e436: push 0xaa 
0x7f7d1065e43b: jmp 0x7f7d1065d980
0x7f7d10660134: mov esi, eax  reg(47, 80)  reg(56, 0) 
0x7f7d10660136: mov rdi, rbx  reg(3, 3)  reg(7, 201d740) 
0x7f7d10660139: call 0x7f7d1065e240
TMsgSocket::SockCheck(int)@plt: 201d740 0 10 7ffd5f796bc4	_ZN10TMsgSocket9SockCheckEi@plt
0x7f7d1065e240: jmp qword ptr [rip+0x22222a]
TMsgSocket::SockCheck(int): 201d740 0 10 7ffd5f796bc4	_ZN10TMsgSocket9SockCheckEi
0x7f7d1065f7da: push rbx  reg(7, 201d740) 
0x7f7d1065f7db: mov rbx, rdi  reg(7, 201d740)  reg(3, 201d740) 
0x7f7d1065f7de: cmp esi, 0xffffffff  reg(47, 0) 
0x7f7d1065f7e1: jnz 0x7f7d1065f7eb
0x7f7d1065f7eb: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1065f7ee: pop rbx  reg(7, 201d740) 
0x7f7d1065f7ef: ret 
0x7f7d1066013e: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d10660141: pop rbx  reg(7, 201d740) 
0x7f7d10660142: ret 
0x7f7d1066103d: mov ebx, eax  reg(53, 0)  reg(56, 0) 
0x7f7d1066103f: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10661041: jnz 0x7f7d1066106d
0x7f7d10661043: mov edi, 0x28  reg(45, 201d740) 
0x7f7d10661048: call 0x7f7d1065f130
operator new(unsigned long)@plt: 28 0 10 7ffd5f796bc4	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066104d: mov r12, rax  reg(15, 403230)  reg(10, 201d7f0) 
0x7f7d10661050: mov rsi, qword ptr [rbp+0x20]  reg(4, 201d810) 
0x7f7d10661054: mov rdx, rbp  reg(8, 201d7f0) 
0x7f7d10661057: mov rdi, rax  reg(3, 0)  reg(10, 201d7f0) 
0x7f7d1066105a: call 0x7f7d1065e500
TMsgListenerThread::TMsgListenerThread(TMsgSocket*, TCustomMsgServer*)@plt: 201d7f0 201d740 200dc40 7f7d10067b20	_ZN18TMsgListenerThreadC1EP10TMsgSocketP16TCustomMsgServer@plt
0x7f7d1065e500: jmp qword ptr [rip+0x2220ca]
0x7f7d1065e506: push 0xb7 
0x7f7d1065e50b: jmp 0x7f7d1065d980
TMsgListenerThread::TMsgListenerThread(TMsgSocket*, TCustomMsgServer*): 201d7f0 201d740 200dc40 7f7d10067b20	_ZN18TMsgListenerThreadC2EP10TMsgSocketP16TCustomMsgServer
0x7f7d10660cd6: push r12  reg(15, 201d7f0) 
0x7f7d10660cd8: push rbp
0x7f7d10660cd9: push rbx  reg(7, 0) 
0x7f7d10660cda: mov rbx, rdi  reg(7, 0)  reg(3, 201d7f0) 
0x7f7d10660cdd: mov rbp, rsi
0x7f7d10660ce0: mov r12, rdx  reg(15, 201d7f0)  reg(8, 200dc40) 
0x7f7d10660ce3: call 0x7f7d1065e510
TSnapThread::TSnapThread()@plt: 201d7f0 201d740 200dc40 7f7d10067b20	_ZN11TSnapThreadC2Ev@plt
0x7f7d1065e510: jmp qword ptr [rip+0x2220c2]
0x7f7d1065e516: push 0xb8 
0x7f7d1065e51b: jmp 0x7f7d1065d980
TSnapThread::TSnapThread(): 201d7f0 201d740 200dc40 7f7d10067b20	_ZN11TSnapThreadC1Ev
0x7f7d106617b6: mov rax, qword ptr [rip+0x21e2cb]  reg(10, 201d7f0) 
0x7f7d106617bd: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f470) 
0x7f7d106617c1: mov qword ptr [rdi], rax  reg(10, 7f7d1087f480)  mem(201d7f0, 0) 
0x7f7d106617c4: mov byte ptr [rdi+0x11], 0x0  mem(201d801, 0) 
0x7f7d106617c8: mov byte ptr [rdi+0x13], 0x0  mem(201d803, 0) 
0x7f7d106617cc: mov byte ptr [rdi+0x12], 0x0  mem(201d802, 0) 
0x7f7d106617d0: mov byte ptr [rdi+0x14], 0x0  mem(201d804, 0) 
0x7f7d106617d4: ret 
0x7f7d10660ce8: mov rax, qword ptr [rip+0x21eea1]  reg(10, 7f7d1087f480) 
0x7f7d10660cef: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f3f0) 
0x7f7d10660cf3: mov qword ptr [rbx], rax  reg(10, 7f7d1087f400)  mem(201d7f0, 7f7d1087f480) 
0x7f7d10660cf6: mov qword ptr [rbx+0x20], r12  reg(15, 200dc40)  mem(201d810, 0) 
0x7f7d10660cfa: mov qword ptr [rbx+0x18], rbp  mem(201d808, 0) 
0x7f7d10660cfe: mov byte ptr [rbx+0x14], 0x0  mem(201d804, 201d74000000000) 
0x7f7d10660d02: pop rbx  reg(7, 201d7f0) 
0x7f7d10660d03: pop rbp
0x7f7d10660d04: pop r12  reg(15, 200dc40) 
0x7f7d10660d06: ret 
0x7f7d1066105f: mov qword ptr [rbp+0x28], r12  reg(15, 201d7f0)  mem(200dc68, 0) 
0x7f7d10661063: mov rdi, r12  reg(3, 201d7f0)  reg(15, 201d7f0) 
0x7f7d10661066: call 0x7f7d1065efa0
TSnapThread::Start()@plt: 201d7f0 201d740 200dc40 7f7d10067b20	_ZN11TSnapThread5StartEv@plt
0x7f7d1065efa0: jmp qword ptr [rip+0x221b7a]
0x7f7d1065efa6: push 0x161 
0x7f7d1065efab: jmp 0x7f7d1065d980
TSnapThread::Start(): 201d7f0 201d740 200dc40 7f7d10067b20	_ZN11TSnapThread5StartEv
0x7f7d10661836: cmp byte ptr [rdi+0x11], 0x0  mem(201d801, 4000000000000000) 
0x7f7d1066183a: jnz 0x7f7d1066184a
0x7f7d1066183c: push rbx  reg(7, 0) 
0x7f7d1066183d: mov rbx, rdi  reg(7, 0)  reg(3, 201d7f0) 
0x7f7d10661840: call 0x7f7d1065e1e0
TSnapThread::ThreadCreate()@plt: 201d7f0 201d740 200dc40 7f7d10067b20	_ZN11TSnapThread12ThreadCreateEv@plt
0x7f7d1065e1e0: jmp qword ptr [rip+0x22225a]
0x7f7d1065e1e6: push 0x85 
0x7f7d1065e1eb: jmp 0x7f7d1065d980
TSnapThread::ThreadCreate(): 201d7f0 201d740 200dc40 7f7d10067b20	_ZN11TSnapThread12ThreadCreateEv
0x7f7d106617d6: push rbp
0x7f7d106617d7: push rbx  reg(7, 201d7f0) 
0x7f7d106617d8: sub rsp, 0x48
0x7f7d106617dc: mov rbp, rdi
0x7f7d106617df: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d1087f400) 
0x7f7d106617e8: mov qword ptr [rsp+0x38], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796bb8, 7f7d10b2b548) 
0x7f7d106617ed: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d106617ef: mov rdi, rsp  reg(3, 201d7f0) 
0x7f7d106617f2: call 0x7f7d1065eea0
pthread_attr_init@plt: 7ffd5f796b80 201d740 200dc40 7f7d10067b20	pthread_attr_init@plt
0x7f7d1065eea0: jmp qword ptr [rip+0x221bfa]
0x7f7d1065eea6: push 0x151 
0x7f7d1065eeab: jmp 0x7f7d1065d980
0x7f7d106617f7: mov esi, 0x1  reg(47, 201d740) 
0x7f7d106617fc: mov rdi, rsp  reg(3, 7ffd5f796bb8) 
0x7f7d106617ff: call 0x7f7d1065f440
pthread_attr_setdetachstate@plt: 7ffd5f796b80 1 200dc40 0	pthread_attr_setdetachstate@plt
0x7f7d1065f440: jmp qword ptr [rip+0x22192a]
0x7f7d1065f446: push 0x1ab 
0x7f7d1065f44b: jmp 0x7f7d1065d980
0x7f7d10661804: lea rdi, ptr [rbp+0x8]  reg(3, 7ffd5f796b80) 
0x7f7d10661808: mov rcx, rbp  reg(9, 0) 
0x7f7d1066180b: mov rdx, qword ptr [rip+0x21e3d6]  reg(8, 200dc40) 
0x7f7d10661812: mov rsi, rsp  reg(4, 1) 
0x7f7d10661815: call 0x7f7d1065e3a0
pthread_create@plt: 201d7f8 7ffd5f796b80 7f7d10661742 201d7f0	pthread_create@plt
0x7f7d1065e3a0: jmp qword ptr [rip+0x22217a]
0x7f7d1065e3a6: push 0xa1 
0x7f7d1065e3ab: jmp 0x7f7d1065d980
0x7f7d1066181a: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f7d1066181f: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10661828: jz 0x7f7d1066182f
ThreadProc(void*): 201d7f0 0 2a584757da54d76a ffffffffffffff88	_Z10ThreadProcPv
0x7f7d10661742: push rbx  reg(7, 0) 
0x7f7d10661743: sub rsp, 0x10
0x7f7d10661747: mov rbx, rdi  reg(7, 0)  reg(3, 201d7f0) 
0x7f7d1066182f: add rsp, 0x48
0x7f7d10661833: pop rbx  reg(7, 201d7f0) 
0x7f7d10661834: pop rbp
0x7f7d10661835: ret 
0x7f7d1066174a: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0de85700) 
0x7f7d10661753: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84f08, 7f7d1007a000) 
0x7f7d10661758: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066175a: mov rsi, rsp  reg(4, 0) 
0x7f7d1066175d: mov edi, 0x1  reg(45, 201d7f0) 
0x7f7d10661845: mov byte ptr [rbx+0x11], 0x1  mem(201d801, 4000000000000000) 
0x7f7d10661762: call 0x7f7d1065e5d0
0x7f7d10661849: pop rbx  reg(7, 201d7f0) 
0x7f7d1066184a: ret 
pthread_setcanceltype@plt: 1 7f7d0de84f00 2a584757da54d76a ffffffffffffff88	pthread_setcanceltype@plt
0x7f7d1065e5d0: jmp qword ptr [rip+0x222062]
0x7f7d1066106b: jmp 0x7f7d106610b5
0x7f7d1065e5d6: push 0xc4 
0x7f7d1065e5db: jmp 0x7f7d1065d980
0x7f7d106610b5: mov eax, ebx  reg(56, 0)  reg(53, 0) 
0x7f7d106610b7: pop rbx  reg(7, 0) 
0x7f7d106610b8: pop rbp
0x7f7d106610b9: pop r12  reg(15, 201d7f0) 
0x7f7d106610bb: ret 
0x7f7d10661767: lea rsi, ptr [rsp+0x4]  reg(4, 7f7d0de84f00) 
0x7f7d1066176c: mov edi, 0x0  reg(45, 1) 
0x7f7d10661771: call 0x7f7d1065d9f0
0x7f7d106613aa: mov ebp, eax
0x7f7d106613ac: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d106613ae: jz 0x7f7d106613e6
pthread_setcancelstate@plt: 0 7f7d0de84f04 0 2	pthread_setcancelstate@plt
0x7f7d1065d9f0: jmp qword ptr [rip+0x222652]
0x7f7d106613e6: mov rax, qword ptr [rbx+0x20]  reg(10, 0) 
0x7f7d106613ea: movzx ecx, word ptr [rax+0x3c]  reg(55, 800000) 
0x7f7d106613ee: mov rax, qword ptr [rbx]  reg(10, 201d740) 
0x7f7d106613f1: push 0x0 
0x7f7d106613f3: push 0x0 
0x7f7d106613f5: mov r9d, 0x0  reg(64, 7f7d0de85700) 
0x7f7d106613fb: movzx r8d, word ptr [rbx+0x2060]  reg(61, 0) 
0x7f7d10661403: mov edx, 0x1  reg(54, 0) 
0x7f7d1065d9f6: push 0x6  reg(47, 7f7d0de84fb0) 
0x7f7d1065d9fb: jmp 0x7f7d1065d980
0x7f7d10661408: mov esi, 0x0  reg(47, 7f7d0de84fb0) 
0x7f7d1066140d: mov rdi, rbx  reg(3, 3d0f00)  reg(7, 200dc40) 
0x7f7d10661410: call qword ptr [rax+0x18]
0x7f7d10661776: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d1066177a: jnz 0x7f7d10661785
0x7f7d1066177c: mov rax, qword ptr [rbx]  reg(10, 0) 
0x7f7d1066177f: mov rdi, rbx  reg(3, 0)  reg(7, 201d7f0) 
0x7f7d10661782: call qword ptr [rax+0x10]
TCustomMsgServer::DoEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 200dc40 0 1 0	_ZN16TCustomMsgServer7DoEventEijttttt
0x7f7d10660b80: push r15  reg(18, 0) 
0x7f7d10660b82: push r14  reg(17, 0) 
0x7f7d10660b84: push r13  reg(16, 7ffd5f796d70) 
0x7f7d10660b86: push r12  reg(15, 403230) 
0x7f7d10660b88: push rbp
0x7f7d10660b89: push rbx  reg(7, 200dc40) 
0x7f7d10660b8a: sub rsp, 0x48
0x7f7d10660b8e: mov dword ptr [rsp], esi  reg(47, 0)  mem(7ffd5f796b80, 0) 
0x7f7d10660b91: mov dword ptr [rsp+0x4], ecx  reg(55, 0)  mem(7ffd5f796b84, 100000000) 
0x7f7d10660b95: mov dword ptr [rsp+0x8], r8d  reg(61, 66)  mem(7ffd5f796b88, 1) 
0x7f7d10660b9a: mov dword ptr [rsp+0xc], r9d  reg(64, 0)  mem(7ffd5f796b8c, 100000000000) 
0x7f7d10660b9f: mov r14d, dword ptr [rsp+0x80]  reg(79, 0) 
0x7f7d10660ba7: mov r13d, dword ptr [rsp+0x88]  reg(76, 7ffd5f796d70) 
0x7f7d10660baf: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d1087f7c0) 
0x7f7d10660bb8: mov qword ptr [rsp+0x38], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796bb8, f4f60b3748f98f00) 
0x7f7d10660bbd: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10660bbf: cmp byte ptr [rdi+0x50], 0x0  mem(200dc90, 0) 
0x7f7d10660bc3: jnz 0x7f7d10660c80
0x7f7d10660bc9: mov rbx, rdi  reg(7, 200dc40)  reg(3, 200dc40) 
0x7f7d10660bcc: mov ebp, edx
0x7f7d10660bce: mov r12d, edx  reg(73, 403230)  reg(54, 1) 
0x7f7d10660bd1: and r12d, dword ptr [rdi+0x206c]  reg(73, 1) 
0x7f7d10660bd8: mov r15d, edx  reg(82, 0)  reg(54, 1) 
TMsgListenerThread::Execute(): 201d7f0 7f7d0de84f04 2 2	_ZN18TMsgListenerThread7ExecuteEv
0x7f7d106609b6: push rbx  reg(7, 201d7f0) 
0x7f7d106609b7: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d7f0) 
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 201d7f0) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84f04) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 2 2	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
0x7f7d1065ee86: push 0x14f 
0x7f7d10660bdb: and r15d, dword ptr [rdi+0x2068] 
0x7f7d10660be2: jnz 0x7f7d10660bed
0x7f7d10660bed: mov rdi, qword ptr [rbx+0x58]  reg(3, 200dc40) 
0x7f7d10660bf1: call 0x7f7d1065f050
pthread_mutex_lock@plt: 2013d60 0 1 0	pthread_mutex_lock@plt
0x7f7d1065f050: jmp qword ptr [rip+0x221b22]
0x7f7d1065f056: push 0x16c 
0x7f7d1065f05b: jmp 0x7f7d1065d980
0x7f7d10660bf6: lea rdi, ptr [rsp+0x10]  reg(3, 1) 
0x7f7d1065ee8b: jmp 0x7f7d1065d980
TMsgSocket::CanRead(int): 201d740 64 2 2	_ZN10TMsgSocket7CanReadEi
0x7f7d10660bfb: call 0x7f7d1065f3a0
time@plt: 7ffd5f796b90 0 0 0	time@plt
0x7f7d1065f3a0: jmp qword ptr [rip+0x22197a]
0x7f7d1065f3a6: push 0x1a1 
0x7f7d1065f3ab: jmp 0x7f7d1065d980
0x7f7d10660c00: mov eax, dword ptr [rsp]  reg(56, 5cc5a8aa) 
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d1087f400) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, 7f7d0de85700) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 2) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 2) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065f396: push 0x1a0 
0x7f7d1065f39b: jmp 0x7f7d1065d980
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d10660c03: mov dword ptr [rsp+0x18], eax  reg(45, 3) 
0x7f7d10660c07: mov dword ptr [rsp+0x1c], ebp  mem(7ffd5f796b9c, 0) 
0x7f7d10660c0b: movzx eax, word ptr [rsp+0x4]  reg(56, 0) 
0x7f7d10660c10: mov word ptr [rsp+0x20], ax  reg(29, 0)  mem(7ffd5f796ba0, 0) 
0x7f7d10660c15: movzx eax, word ptr [rsp+0x8]  reg(56, 0) 
0x7f7d10660c1a: mov word ptr [rsp+0x22], ax  reg(29, 66)  mem(7ffd5f796ba2, 0) 
0x7f7d10660c1f: movzx eax, word ptr [rsp+0xc]  reg(56, 66) 
0x7f7d10660c24: mov word ptr [rsp+0x24], ax  reg(29, 0)  mem(7ffd5f796ba4, 0) 
0x7f7d10660c29: mov word ptr [rsp+0x26], r14w  reg(78, 0)  mem(7ffd5f796ba6, 0) 
0x7f7d10660c2f: mov word ptr [rsp+0x28], r13w  reg(75, 0)  mem(7ffd5f796ba8, 0) 
0x7f7d10660c35: test r12d, r12d  reg(73, 1)  reg(73, 1) 
0x7f7d10660c38: jz 0x7f7d10660c53
0x7f7d10660c3a: mov rax, qword ptr [rbx+0x40]  reg(10, 0) 
0x7f7d10660c3e: test rax, rax  reg(10, 403326)  reg(10, 403326) 
0x7f7d10660c41: jz 0x7f7d10660c53
0x7f7d10660c43: lea rsi, ptr [rsp+0x10]  reg(4, 0) 
0x7f7d10660c48: mov rdi, qword ptr [rbx+0x48]  reg(3, 7ffd5f796b90) 
0x7f7d10660c4c: mov edx, 0x1a  reg(54, 0) 
0x7f7d10660c51: call rax
EventCallBack(void*, TSrvEvent*, int): 0 7ffd5f796b90 1a 0	_Z13EventCallBackPvP9TSrvEventi
0x403326: push rbx  reg(7, 200dc40) 
0x403327: sub rsp, 0x30
0x40332b: mov rax, qword ptr fs:[0x28]  reg(10, 403326) 
0x403334: mov qword ptr [rsp+0x28], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796b68, 7f7d10b2b548) 
0x403339: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x40333b: mov rdi, rsp  reg(3, 0) 
0x40333e: call 0x404311
_Z12SrvEventTextB5cxx11P9TSrvEvent: 7ffd5f796b40 7ffd5f796b90 1a 0	_Z12SrvEventTextB5cxx11P9TSrvEvent
0x404311: push rbp
0x404312: push rbx  reg(7, 200dc40) 
0x404313: sub rsp, 0x418
0x40431a: mov rbx, rdi  reg(7, 200dc40)  reg(3, 7ffd5f796b40) 
0x40431d: mov rdi, rsi  reg(3, 7ffd5f796b40)  reg(4, 7ffd5f796b90) 
0x404320: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x404329: mov qword ptr [rsp+0x408], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796b18, 201d740) 
0x404331: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x404333: mov rbp, rsp
0x404336: mov edx, 0x400  reg(54, 1a) 
0x40433b: mov rsi, rsp  reg(4, 7ffd5f796b90) 
0x40433e: call 0x402a00
Srv_EventText@plt: 7ffd5f796b90 7ffd5f796710 400 0	Srv_EventText@plt
0x402a00: jmp qword ptr [rip+0x20364a]
0x402a06: push 0x7 
0x7f7d1065fa33: mov edx, edi 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de85700) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065dda6: push 0x41 
0x7f7d1065ddab: jmp 0x7f7d1065d980
0x7f7d1065fa68: cdqe   reg(10, 1)  reg(56, 1) 
0x402a0b: jmp 0x402980
Srv_EventText: 7ffd5f796b90 7ffd5f796710 400 0	Srv_EventText
0x7f7d10675fc3: push r12  reg(15, 1) 
0x7f7d10675fc5: push rbp
0x7f7d10675fc6: push rbx  reg(7, 7ffd5f796b40) 
0x7f7d10675fc7: sub rsp, 0x30
0x7f7d10675fcb: mov rax, rdi  reg(10, 0)  reg(3, 7ffd5f796b90) 
0x7f7d10675fce: mov r12, rsi  reg(15, 1)  reg(4, 7ffd5f796710) 
0x7f7d10675fd1: mov rcx, qword ptr fs:[0x28]  reg(9, 0) 
0x7f7d10675fda: mov qword ptr [rsp+0x28], rcx  reg(9, f4f60b3748f98f00)  mem(7ffd5f7966e8, 4) 
0x7f7d10675fdf: xor ecx, ecx  reg(55, f4f60b3748f98f00)  reg(55, f4f60b3748f98f00) 
0x7f7d10675fe1: movsxd rbx, edx  reg(7, 7ffd5f796b40)  reg(54, 400) 
0x7f7d10675fe4: mov rdi, rsp  reg(3, 7ffd5f796b90) 
0x7f7d10675fe7: mov rsi, rax  reg(4, 7ffd5f796710)  reg(10, 7ffd5f796b90) 
0x7f7d10675fea: call 0x7f7d1065df40
_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt: 7ffd5f7966c0 7ffd5f796b90 400 0	_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt
0x7f7d1065df40: jmp qword ptr [rip+0x2223aa]
0x7f7d1065df46: push 0x5b 
0x7f7d1065df4b: jmp 0x7f7d1065d980
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065fa83: setnle al  reg(27, 1) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609d0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609d4: call 0x7f7d1065e950
TMsgSocket::SckAccept()@plt: 201d740 7f7d0de84e40 1 0	_ZN10TMsgSocket9SckAcceptEv@plt
0x7f7d1065e950: jmp qword ptr [rip+0x221ea2]
0x7f7d1065e956: push 0xfc 
0x7f7d1065e95b: jmp 0x7f7d1065d980
TMsgSocket::SckAccept(): 201d740 7f7d0de84e40 1 0	_ZN10TMsgSocket9SckAcceptEv
0x7f7d10660144: push rbp
0x7f7d10660145: push rbx  reg(7, 201d7f0) 
0x7f7d10660146: sub rsp, 0x8
0x7f7d1066014a: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1066014d: mov dword ptr [rdi+0x78], 0x0  mem(201d7b8, 0) 
0x7f7d10660154: mov edi, dword ptr [rdi+0x18]  reg(45, 201d740) 
0x7f7d10660157: mov edx, 0x0  reg(54, 1) 
0x7f7d1066015c: mov esi, 0x0  reg(47, 7f7d0de84e40) 
0x7f7d10660161: call 0x7f7d1065f200
TMsgSocket::SckAccept(): 7ffd5f7966c0 7ffd5f796b90 400 0	_Z10EvtSrvTextB5cxx11R9TSrvEvent
0x7f7d1066bc97: push rbp
0x7f7d1066bc98: mov rbp, rsp
0x7f7d1066bc9b: push r14  reg(17, 0) 
0x7f7d1066bc9d: push r12  reg(15, 7ffd5f796710) 
0x7f7d1066bc9f: push rbx  reg(7, 400) 
0x7f7d1066bca0: sub rsp, 0x878
0x7f7d1066bca7: mov r14, rdi  reg(17, 0)  reg(3, 7ffd5f7966c0) 
0x7f7d1066bcaa: mov rbx, rsi  reg(7, 400)  reg(4, 7ffd5f796b90) 
0x7f7d1066bcad: mov rax, qword ptr fs:[0x28]  reg(10, 7ffd5f796b90) 
0x7f7d1066bcb6: mov qword ptr [rbp-0x28], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f796688, 2013d60) 
0x7f7d1066bcba: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066bcbc: lea rax, ptr [rbp-0x880]  reg(10, 0) 
0x7f7d1066bcc3: mov qword ptr [rbp-0x890], rax  reg(10, 7ffd5f795e30)  mem(7ffd5f795e20, 0) 
0x7f7d1066bcca: mov qword ptr [rbp-0x888], 0x0  mem(7ffd5f795e28, 20) 
0x7f7d1066bcd5: mov byte ptr [rbp-0x880], 0x0  mem(7ffd5f795e30, 1) 
0x7f7d1066bcdc: mov esi, dword ptr [rsi+0xc]  reg(47, 7ffd5f796b90) 
0x7f7d1066bcdf: cmp esi, 0x8000  reg(47, 1) 
0x7f7d1066bce5: jbe 0x7f7d1066dc02
0x7f7d1066dc02: lea rax, ptr [rbp-0x140]  reg(10, 7ffd5f795e30) 
0x7f7d1066dc09: mov qword ptr [rbp-0x150], rax  reg(10, 7ffd5f796570)  mem(7ffd5f796560, 201d74000000000) 
0x7f7d1066dc10: mov qword ptr [rbp-0x148], 0x0  mem(7ffd5f796568, 0) 
0x7f7d1066dc1b: mov byte ptr [rbp-0x140], 0x0  mem(7ffd5f796570, 0) 
0x7f7d1066dc22: cmp esi, 0x10  reg(47, 1) 
0x7f7d1066dc25: jz 0x7f7d1066dd7d
0x7f7d1066dc2b: cmp esi, 0x10  reg(47, 1) 
0x7f7d1066dc2e: jnbe 0x7f7d1066dc5f
0x7f7d1066dc30: cmp esi, 0x2  reg(47, 1) 
0x7f7d1066dc33: jz 0x7f7d1066dccf
0x7f7d1066dc39: cmp esi, 0x2  reg(47, 1) 
accept@plt: 3 0 0 0	accept@plt
0x7f7d1065f200: jmp qword ptr [rip+0x221a4a]
0x7f7d1065f206: push 0x187 
0x7f7d1065f20b: jmp 0x7f7d1065d980
0x7f7d10660166: mov ebp, eax
0x7f7d10660168: cmp eax, 0xffffffff  reg(56, 4) 
0x7f7d1066016b: jnz 0x7f7d10660178
0x7f7d10660178: mov eax, ebp  reg(56, 4) 
0x7f7d1066dc3c: jnbe 0x7f7d1066dc48
0x7f7d1066dc3e: cmp esi, 0x1  reg(47, 1) 
0x7f7d1066dc41: jz 0x7f7d1066dca7
0x7f7d1066dca7: lea rdi, ptr [rbp-0x150]  reg(3, 7ffd5f7966c0) 
0x7f7d1066dcae: mov r8d, 0x7  reg(61, 2013d60) 
0x7f7d1066dcb4: lea rcx, ptr [rip+0x9234]  reg(9, 0) 
0x7f7d1066dcbb: mov edx, 0x0  reg(54, 400) 
0x7f7d1066dcc0: mov esi, 0x0  reg(47, 1) 
0x7f7d1066dcc5: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7ffd5f796560 0 0 7f7d10676eef	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
0x7f7d1065e196: push 0x80 
0x7f7d1065e19b: jmp 0x7f7d1065d980
memcpy: 7ffd5f796570 7f7d10676eef 7 7f7d10676eef	memcpy
0x7f7d1066017a: add rsp, 0x8
0x7f7d1066017e: pop rbx  reg(7, 201d740) 
0x7f7d1066017f: pop rbp
0x7f7d10660180: ret 
0x7f7d106609d9: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609dd: jnz 0x7f7d106609f8
0x7f7d106609df: mov rdi, qword ptr [rbx+0x20]  reg(3, 2) 
0x7f7d106609e3: cmp byte ptr [rdi+0x50], 0x0  mem(200dc90, 0) 
0x7f7d106609e7: jnz 0x7f7d106609f8
0x7f7d106609e9: cmp eax, 0xffffffff  reg(56, 4) 
0x7f7d106609ec: jz 0x7f7d106609ba
0x7f7d106609ee: mov rdx, qword ptr [rdi]  reg(8, 4) 
0x7f7d106609f1: mov esi, eax  reg(47, 0)  reg(56, 4) 
0x7f7d106609f3: call qword ptr [rdx+0x20]
TCustomMsgServer::Incoming(int): 200dc40 4 7f7d1087f7c0 0	_ZN16TCustomMsgServer8IncomingEi
0x7f7d10660ea0: push r13  reg(16, 7ffd5f796aff) 
0x7f7d10660ea2: push r12  reg(15, 0) 
0x7f7d10660ea4: push rbp
0x7f7d10660ea5: push rbx  reg(7, 201d7f0) 
0x7f7d10660ea6: sub rsp, 0x8
0x7f7d10660eaa: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 200dc40) 
0x7f7d10660ead: mov ebp, esi
0x7f7d10660eaf: mov edi, esi  reg(45, 200dc40)  reg(47, 4) 
0x7f7d10660eb1: call 0x7f7d1065f410
Msg_GetSockAddr(int)@plt: 4 4 7f7d1087f7c0 0	_Z15Msg_GetSockAddri@plt
0x7f7d1065f410: jmp qword ptr [rip+0x221942]
0x7f7d1065f416: push 0x1a8 
0x7f7d1065f41b: jmp 0x7f7d1065d980
Msg_GetSockAddr(int): 4 4 7f7d1087f7c0 0	_Z15Msg_GetSockAddri
Msg_GetSockAddr(int): ffffffffffffffff 7f7d108f3d08 7 7f7d10676eef	dlsym@plt
0x7f7d1065f5b3: sub rsp, 0x38
0x7f7d1065f5b7: mov rax, qword ptr fs:[0x28]  reg(10, 4) 
0x7f7d1065f5c0: mov qword ptr [rsp+0x28], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ea8, 7f7d10b2b548) 
0x7f7d1065f5c5: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f5c7: mov dword ptr [rsp+0xc], 0x10  mem(7f7d0de84e8c, de8570000007f7d) 
0x7f7d1065f5cf: lea rdx, ptr [rsp+0xc]  reg(8, 7f7d1087f7c0) 
0x7f7d1065f5d4: lea rsi, ptr [rsp+0x10]  reg(4, 4) 
0x7f7d1065f5d9: call 0x7f7d1065ddc0
getpeername@plt: 4 7f7d0de84e90 7f7d0de84e8c 0	getpeername@plt
0x7f7d1065ddc0: jmp qword ptr [rip+0x22246a]
0x7f7d1065ddc6: push 0x43 
0x7f7d1065ddcb: jmp 0x7f7d1065d980
0x7f7d1065f5de: mov edx, 0x0  reg(54, 7f7d0de84e8c) 
0x7f7d1065f5e3: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f5e5: cmovz edx, dword ptr [rsp+0x14]  reg(54, 0) 
0x7f7d1065f5ea: mov rcx, qword ptr [rsp+0x28]  reg(9, 0) 
0x7f7d1065f5ef: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065f5f8: jz 0x7f7d1065f5ff
0x7f7d1065f5ff: mov eax, edx  reg(56, 0)  reg(54, 100007f) 
0x7f7d1065f601: add rsp, 0x38
0x7f7d1065f605: ret 
0x7f7d10660eb6: mov r13d, eax  reg(76, 7ffd5f796aff)  reg(56, 100007f) 
0x7f7d10660eb9: mov rax, qword ptr [rbx]  reg(10, 100007f) 
0x7f7d10660ebc: mov esi, ebp  reg(47, 7f7d0de84e90) 
0x7f7d10660ebe: mov rdi, rbx  reg(3, 4)  reg(7, 200dc40) 
0x7f7d10660ec1: call qword ptr [rax+0x8]
TCustomMsgServer::CanAccept(int): 200dc40 4 100007f 0	_ZN16TCustomMsgServer9CanAcceptEi
0x7f7d1066099c: mov edx, dword ptr [rdi+0x2078]  reg(54, 100007f) 
0x7f7d106609a2: mov eax, 0x1  reg(56, 7f7d1087f7c0) 
0x7f7d106609a7: test edx, edx  reg(54, 400)  reg(54, 400) 
0x7f7d106609a9: jz 0x7f7d106609b4
0x7f7d106609ab: cmp edx, dword ptr [rdi+0x2074]  reg(54, 400) 
0x7f7d106609b1: setnle al  reg(27, 1) 
0x7f7d106609b4: ret 
0x7f7d10660ec4: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d10660ec6: jz 0x7f7d10660f8f
0x7f7d10660ecc: mov rdi, rbx  reg(3, 200dc40)  reg(7, 200dc40) 
0x7f7d10660ecf: call 0x7f7d1065f2f0
TCustomMsgServer::LockList()@plt: 200dc40 4 400 0	_ZN16TCustomMsgServer8LockListEv@plt
0x7f7d1065f2f0: jmp qword ptr [rip+0x2219d2]
0x7f7d1065f2f6: push 0x196 
0x7f7d1065f2fb: jmp 0x7f7d1065d980
TCustomMsgServer::LockList(): 200dc40 4 400 0	_ZN16TCustomMsgServer8LockListEv
0x7f7d10660e4a: sub rsp, 0x8
0x7f7d10660e4e: mov rdi, qword ptr [rdi+0x30]  reg(3, 200dc40) 
0x7f7d10660e52: call 0x7f7d1065f050
pthread_mutex_lock@plt: 2013d30 4 400 0	pthread_mutex_lock@plt
0x7f7d1065f050: jmp qword ptr [rip+0x221b22]
0x7f7d10660e57: add rsp, 0x8
0x7f7d10660e5b: ret 
0x7f7d10660ed4: mov rdi, rbx  reg(3, 1)  reg(7, 200dc40) 
0x7f7d10660ed7: call 0x7f7d1065eff0
TCustomMsgServer::FirstFree()@plt: 200dc40 0 0 0	_ZN16TCustomMsgServer9FirstFreeEv@plt
0x7f7d1065eff0: jmp qword ptr [rip+0x221b52]
0x7f7d1065eff6: push 0x166 
0x7f7d1065effb: jmp 0x7f7d1065d980
TCustomMsgServer::FirstFree(): 200dc40 0 0 0	_ZN16TCustomMsgServer9FirstFreeEv
0x7f7d10660e6e: cmp qword ptr [rdi+0x60], 0x0  mem(200dca0, 0) 
0x7f7d10660e73: jz 0x7f7d10660e98
0x7f7d10660e98: mov eax, 0x0  reg(56, 0) 
0x7f7d10660e9d: ret 
0x7f7d10660edc: mov r12d, eax  reg(73, 0)  reg(56, 0) 
0x7f7d10660edf: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10660ee1: js 0x7f7d10660f54
0x7f7d1066dcca: jmp 0x7f7d1066e03e
0x7f7d1066e03e: lea rdi, ptr [rbp-0x130]  reg(3, 7ffd5f796570) 
0x7f7d1066e045: mov rsi, rbx  reg(4, 72617473)  reg(7, 7ffd5f796b90) 
0x7f7d1066e048: call 0x7f7d1066a34c
SenderText(TSrvEvent&): 7ffd5f796580 7ffd5f796b90 7 64657472	_ZL10SenderTextR9TSrvEvent
0x7f7d1066a34c: push rbp
0x7f7d1066a34d: mov rbp, rsp
0x7f7d1066a350: push r14  reg(17, 7ffd5f7966c0) 
0x7f7d1066a352: push r12  reg(15, 7ffd5f796710) 
0x7f7d1066a354: push rbx  reg(7, 7ffd5f796b90) 
0x7f7d10660ee3: mov rax, qword ptr [rbx]  reg(7, 7ffd5f796b90) 
0x7f7d10660ee6: mov esi, ebp  reg(47, 0) 
0x7f7d10660ee8: mov rdi, rbx  reg(3, 200dc40)  reg(7, 200dc40) 
0x7f7d10660eeb: call qword ptr [rax+0x10]
TSnap7Server::CreateWorkerSocket(int): 200dc40 4 0 0	_ZN12TSnap7Server18CreateWorkerSocketEi
0x7f7d10665444: push r12  reg(15, 0) 
0x7f7d10665446: push rbp
0x7f7d10665447: push rbx  reg(7, 200dc40) 
0x7f7d10665448: mov rbp, rdi
0x7f7d1066544b: mov r12d, esi  reg(73, 0)  reg(47, 4) 
0x7f7d1066544e: mov edi, 0x21f0  reg(45, 200dc40) 
0x7f7d10665453: call 0x7f7d1065f130
operator new(unsigned long)@plt: 21f0 4 0 0	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066a355: sub rsp, 0x98
0x7f7d1066a35c: mov rbx, rdi  reg(7, 7ffd5f796b90)  reg(3, 7ffd5f796580) 
0x7f7d1066a35f: mov r12, rsi  reg(15, 7ffd5f796710)  reg(4, 7ffd5f796b90) 
0x7f7d1066a362: mov rcx, qword ptr fs:[0x28]  reg(9, 64657472) 
0x7f7d1066a36b: mov qword ptr [rbp-0x28], rcx  reg(9, f4f60b3748f98f00)  mem(7ffd5f795de8, 7) 
0x7f7d1066a36f: xor ecx, ecx  reg(55, f4f60b3748f98f00)  reg(55, f4f60b3748f98f00) 
0x7f7d1066a371: mov esi, dword ptr [rsi+0x8]  reg(47, 7ffd5f796b90) 
0x7f7d1066a374: test esi, esi  reg(47, 0)  reg(47, 0) 
0x7f7d1066a376: jz 0x7f7d1066a508
0x7f7d1066a508: lea rdi, ptr [rbp-0x50]  reg(3, 7ffd5f796580) 
0x7f7d1066a50c: mov rsi, qword ptr [r12]  reg(4, 0) 
0x7f7d1066a510: call 0x7f7d1065f000
_Z12TimeToStringB5cxx11l@plt: 7ffd5f795dc0 5cc5a8aa 7 0	_Z12TimeToStringB5cxx11l@plt
0x7f7d1065f000: jmp qword ptr [rip+0x221b4a]
0x7f7d1065f006: push 0x167 
0x7f7d1065f00b: jmp 0x7f7d1065d980
_Z12TimeToStringB5cxx11l: 7ffd5f795dc0 5cc5a8aa 7 0	_Z12TimeToStringB5cxx11l
0x7f7d1066a223: push rbp
0x7f7d1066a224: mov rbp, rsp
0x7f7d1066a227: push r14  reg(17, 7ffd5f7966c0) 
0x7f7d1066a229: push rbx  reg(7, 7ffd5f796580) 
0x7f7d1066a22a: sub rsp, 0x70
0x7f7d1066a22e: mov rbx, rdi  reg(7, 7ffd5f796580)  reg(3, 7ffd5f795dc0) 
0x7f7d1066a231: mov qword ptr [rbp-0x78], rsi  reg(4, 5cc5a8aa)  mem(7ffd5f795cd8, 7f7d10067b20) 
0x7f7d1066a235: mov rax, qword ptr fs:[0x28]  reg(10, 7ffd5f796560) 
0x7f7d1066a23e: mov qword ptr [rbp-0x18], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f795d38, 7f7d0faa0571) 
0x7f7d1066a242: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066a244: lea rax, ptr [rbp-0x60]  reg(10, 0) 
0x7f7d1066a248: mov qword ptr [rbp-0x70], rax  reg(10, 7ffd5f795cf0)  mem(7ffd5f795ce0, 20) 
0x7f7d1066a24c: mov qword ptr [rbp-0x68], 0x0  mem(7ffd5f795ce8, 106c0) 
0x7f7d10665458: mov rbx, rax  mem(7ffd5f795ce8, 106c0) 
0x7f7d1066545b: mov rdi, rax  reg(3, 3)  reg(10, 7f7d080008c0) 
0x7f7d1066545e: call 0x7f7d1065f1b0
TS7Worker::TS7Worker()@plt: 7f7d080008c0 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN9TS7WorkerC1Ev@plt
0x7f7d1065f1b0: jmp qword ptr [rip+0x221a72]
0x7f7d1065f1b6: push 0x182 
0x7f7d1065f1bb: jmp 0x7f7d1065d980
TS7Worker::TS7Worker(): 7f7d080008c0 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN9TS7WorkerC2Ev
0x7f7d10665402: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10665403: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10665406: call 0x7f7d1065f010
TIsoTcpSocket::TIsoTcpSocket()@plt: 7f7d080008c0 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN13TIsoTcpSocketC2Ev@plt
0x7f7d1065f010: jmp qword ptr [rip+0x221b42]
0x7f7d1066a254: mov byte ptr [rbp-0x60], 0x0  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1066a258: lea rdi, ptr [rbp-0x78]  reg(3, 7ffd5f795dc0) 
0x7f7d1066a25c: call 0x7f7d1065f0d0
localtime@plt: 7ffd5f795cd8 5cc5a8aa 7 0	localtime@plt
0x7f7d1065f0d0: jmp qword ptr [rip+0x221ae2]
0x7f7d1065f0d6: push 0x174 
0x7f7d1065f0db: jmp 0x7f7d1065d980
0x7f7d1065f016: push 0x168 
0x7f7d1065f01b: jmp 0x7f7d1065d980
TIsoTcpSocket::TIsoTcpSocket(): 7f7d080008c0 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN13TIsoTcpSocketC2Ev
0x7f7d10662754: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10662755: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10662758: call 0x7f7d1065dcb0
TMsgSocket::TMsgSocket()@plt: 7f7d080008c0 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN10TMsgSocketC2Ev@plt
0x7f7d1065dcb0: jmp qword ptr [rip+0x2224f2]
0x7f7d1065dcb6: push 0x32 
0x7f7d1065dcbb: jmp 0x7f7d1065d980
TMsgSocket::TMsgSocket(): 7f7d080008c0 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN10TMsgSocketC1Ev
0x7f7d10660670: push rbp
0x7f7d10660671: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10660672: sub rsp, 0x8
0x7f7d10660676: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10660679: lea rdi, ptr [rdi+0x8]  reg(3, 7f7d080008c0) 
0x7f7d1066067d: call 0x7f7d1065ede0
TSnapBase::TSnapBase()@plt: 7f7d080008c8 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN9TSnapBaseC2Ev@plt
0x7f7d1065ede0: jmp qword ptr [rip+0x221c5a]
TSnapBase::TSnapBase(): 7f7d080008c8 7f7d08002ab0 7f7d080008c0 7f7d08000020	_ZN9TSnapBaseC2Ev
0x7f7d1065f568: mov byte ptr [rdi], 0x1  mem(7f7d080008c8, 0) 
0x7f7d1065f56b: ret 
0x7f7d10660682: mov rax, qword ptr [rip+0x21f6b7]  reg(10, 7f7d080008c0) 
0x7f7d10660689: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f320) 
0x7f7d1066068d: mov qword ptr [rbx], rax  reg(10, 7f7d1087f330)  mem(7f7d080008c0, 0) 
0x7f7d10660690: mov edi, 0x10  reg(45, 7f7d080008c8) 
0x7f7d10660695: call 0x7f7d1065f130
operator new(unsigned long)@plt: 10 7f7d08002ab0 7f7d080008c0 7f7d08000020	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d1066069a: mov rbp, rax
0x7f7d1066069d: mov rdi, rax  reg(3, 0)  reg(10, 7f7d08002ac0) 
0x7f7d106606a0: call 0x7f7d1065dde0
TPinger::TPinger()@plt: 7f7d08002ac0 7f7d08002ad0 7f7d08002ac0 7f7d08000020	_ZN7TPingerC1Ev@plt
0x7f7d1065dde0: jmp qword ptr [rip+0x22245a]
TPinger::TPinger(): 7f7d08002ac0 7f7d08002ad0 7f7d08002ac0 7f7d08000020	_ZN7TPingerC1Ev
0x7f7d1066066e: ret 
0x7f7d106606a5: mov qword ptr [rbx+0x10], rbp  mem(7f7d080008d0, 0) 
0x7f7d106606a9: mov rax, 0x302e302e302e30  reg(10, 7f7d08002ac0) 
0x7f7d106606b3: mov qword ptr [rbx+0x44], rax  reg(10, 302e302e302e30)  mem(7f7d08000904, 0) 
0x7f7d106606b7: mov word ptr [rbx+0x64], 0x0  mem(7f7d08000924, 0) 
0x7f7d106606bd: mov rax, 0x2e302e302e373231  reg(10, 302e302e302e30) 
0x7f7d106606c7: mov qword ptr [rbx+0x54], rax  reg(10, 2e302e302e373231)  mem(7f7d08000914, 0) 
0x7f7d106606cb: mov word ptr [rbx+0x5c], 0x31  mem(7f7d0800091c, 0) 
0x7f7d106606d1: mov word ptr [rbx+0x66], 0x0  mem(7f7d08000926, 0) 
0x7f7d106606d7: mov dword ptr [rbx+0x68], 0x64  mem(7f7d08000928, 0) 
0x7f7d106606de: mov dword ptr [rbx+0x70], 0x1f4  mem(7f7d08000930, 0) 
0x7f7d106606e5: mov dword ptr [rbx+0x74], 0xa  mem(7f7d08000934, 0) 
0x7f7d106606ec: mov dword ptr [rbx+0x6c], 0x2ee  mem(7f7d0800092c, 1f400000000) 
0x7f7d106606f3: mov byte ptr [rbx+0x7c], 0x0  mem(7f7d0800093c, 0) 
0x7f7d106606f7: mov dword ptr [rbx+0x18], 0xffffffff  mem(7f7d080008d8, 0) 
0x7f7d106606fe: mov dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 0) 
0x7f7d10660705: mov dword ptr [rbx+0x40], 0x0  mem(7f7d08000900, 2e302e3000000000) 
0x7f7d1066070c: jmp 0x7f7d10660721
0x7f7d10660721: add rsp, 0x8
0x7f7d10660725: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10660726: pop rbp
0x7f7d10660727: ret 
0x7f7d1066275d: mov rax, qword ptr [rip+0x21d694]  reg(10, 2e302e302e373231) 
0x7f7d10662764: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f548) 
0x7f7d10662768: mov qword ptr [rbx], rax  reg(10, 7f7d1087f558)  mem(7f7d080008c0, 7f7d1087f330) 
0x7f7d1066276b: mov dword ptr [rbx+0x70], 0xbb8  mem(7f7d08000930, a000001f4) 
0x7f7d10662772: mov word ptr [rbx+0x66], 0x66  mem(7f7d08000926, 2ee000000640000) 
0x7f7d10662778: mov word ptr [rbx+0x1192], 0x0  mem(7f7d08001a52, 0) 
0x7f7d10662781: mov word ptr [rbx+0x1190], 0x100  mem(7f7d08001a50, 0) 
0x7f7d1066278a: mov dword ptr [rbx+0x1194], 0x400  mem(7f7d08001a54, 0) 
0x7f7d10662794: mov dword ptr [rbx+0x180], 0x40  mem(7f7d08000a40, 0) 
0x7f7d1066279e: mov dword ptr [rbx+0x1198], 0x0  mem(7f7d08001a58, 0) 
0x7f7d106627a8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106627a9: ret 
0x7f7d1066540b: mov rax, qword ptr [rip+0x21a8d6]  reg(10, 7f7d1087f558) 
0x7f7d10665412: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f758) 
0x7f7d10665416: mov qword ptr [rbx], rax  reg(10, 7f7d1087f768)  mem(7f7d080008c0, 7f7d1087f558) 
0x7f7d10665419: lea rax, ptr [rbx+0x18b]  reg(10, 7f7d1087f768) 
0x7f7d10665420: mov qword ptr [rbx+0x11a0], rax  reg(10, 7f7d08000a4b)  mem(7f7d08001a60, 0) 
0x7f7d10665427: mov dword ptr [rbx+0x21e8], 0x800  mem(7f7d08002aa8, 0) 
0x7f7d10665431: mov dword ptr [rbx+0x11a8], 0x0  mem(7f7d08001a68, 0) 
0x7f7d1066543b: mov byte ptr [rbx+0x11ac], 0x41  mem(7f7d08001a6c, 0) 
0x7f7d10665442: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10665443: ret 
0x7f7d10665463: jmp 0x7f7d10665478
0x7f7d10665478: mov esi, r12d  reg(47, 7f7d08002ad0)  reg(73, 4) 
0x7f7d1066547b: mov rdi, rbx  reg(3, 7f7d08002ac0)  reg(7, 7f7d080008c0) 
0x7f7d1066547e: call 0x7f7d1065e400
TMsgSocket::SetSocket(int)@plt: 7f7d080008c0 4 7f7d08002ac0 7f7d08000020	_ZN10TMsgSocket9SetSocketEi@plt
0x7f7d1065e400: jmp qword ptr [rip+0x22214a]
0x7f7d1065e406: push 0xa7 
0x7f7d1065e40b: jmp 0x7f7d1065d980
TMsgSocket::SetSocket(int): 7f7d080008c0 4 7f7d08002ac0 7f7d08000020	_ZN10TMsgSocket9SetSocketEi
0x7f7d1065f88c: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f88d: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f890: mov dword ptr [rdi+0x18], esi  reg(47, 4)  mem(7f7d080008d8, ffffffff) 
0x7f7d1065f893: cmp esi, 0xffffffff  reg(47, 4) 
0x7f7d1065f896: jz 0x7f7d1065f8b5
0x7f7d1065f898: call 0x7f7d1065e710
TMsgSocket::SetSocketOptions()@plt: 7f7d080008c0 4 7f7d08002ac0 7f7d08000020	_ZN10TMsgSocket16SetSocketOptionsEv@plt
0x7f7d1065e710: jmp qword ptr [rip+0x221fc2]
TMsgSocket::SetSocketOptions(): 7f7d080008c0 4 7f7d08002ac0 7f7d08000020	_ZN10TMsgSocket16SetSocketOptionsEv
0x7f7d1065f7f0: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f7f1: sub rsp, 0x10
0x7f7d1065f7f5: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f7f8: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d08000a4b) 
0x7f7d1065f801: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84e78, 7f7d1066275d) 
0x7f7d1065f806: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f808: mov dword ptr [rsp], 0x1  mem(7f7d0de84e70, 1) 
0x7f7d1065f80f: mov dword ptr [rsp+0x4], 0x1  mem(7f7d0de84e74, 48f98f0000000000) 
0x7f7d1065f817: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 0) 
0x7f7d1065f81e: mov rcx, rsp  reg(9, 7f7d08000020) 
0x7f7d1065f821: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f824: mov r8d, 0x4  reg(61, 7f7d08000000) 
0x7f7d1065f82a: mov edx, 0x1  reg(54, 7f7d08002ac0) 
0x7f7d1065f82f: mov esi, 0x6  reg(47, 4) 
0x7f7d1065f834: call 0x7f7d1065e0f0
setsockopt@plt: 4 6 1 7f7d0de84e70	setsockopt@plt
0x7f7d1065e0f0: jmp qword ptr [rip+0x2222d2]
0x7f7d1065f839: mov esi, eax  reg(47, 6)  reg(56, 0) 
0x7f7d1065f83b: mov rdi, rbx  reg(3, 4)  reg(7, 7f7d080008c0) 
0x7f7d1065f83e: call 0x7f7d1065e240
TMsgSocket::SockCheck(int)@plt: 7f7d080008c0 0 1 7f7d0de84e70	_ZN10TMsgSocket9SockCheckEi@plt
0x7f7d1065e240: jmp qword ptr [rip+0x22222a]
TMsgSocket::SockCheck(int): 7f7d080008c0 0 1 7f7d0de84e70	_ZN10TMsgSocket9SockCheckEi
0x7f7d1065f7da: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f7db: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f7de: cmp esi, 0xffffffff  reg(47, 0) 
0x7f7d1065f7e1: jnz 0x7f7d1065f7eb
0x7f7d1065f7eb: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1065f7ee: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f7ef: ret 
0x7f7d1065f843: cmp dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 0) 
0x7f7d1065f847: jnz 0x7f7d1065f870
0x7f7d1065f849: lea rcx, ptr [rsp+0x4]  reg(9, 7f7d0de84e70) 
0x7f7d1065f84e: mov edi, dword ptr [rbx+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f851: mov r8d, 0x4  reg(61, 4) 
0x7f7d1065f857: mov edx, 0x9  reg(54, 1) 
0x7f7d1065f85c: mov esi, 0x1  reg(47, 0) 
0x7f7d1065f861: call 0x7f7d1065e0f0
setsockopt@plt: 4 1 9 7f7d0de84e74	setsockopt@plt
0x7f7d1065e0f0: jmp qword ptr [rip+0x2222d2]
0x7f7d1065f866: mov esi, eax  reg(47, 1)  reg(56, 0) 
0x7f7d1065f868: mov rdi, rbx  reg(3, 4)  reg(7, 7f7d080008c0) 
0x7f7d1065f86b: call 0x7f7d1065e240
TMsgSocket::SockCheck(int)@plt: 7f7d080008c0 0 9 7f7d0de84e74	_ZN10TMsgSocket9SockCheckEi@plt
0x7f7d1065e240: jmp qword ptr [rip+0x22222a]
TMsgSocket::SockCheck(int): 7f7d080008c0 0 9 7f7d0de84e74	_ZN10TMsgSocket9SockCheckEi
0x7f7d1065f7da: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f7db: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f7de: cmp esi, 0xffffffff  reg(47, 0) 
0x7f7d1065f7e1: jnz 0x7f7d1065f7eb
0x7f7d1065f7eb: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1065f7ee: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f7ef: ret 
0x7f7d1065f870: mov rax, qword ptr [rsp+0x8]  reg(10, 0) 
0x7f7d1065f875: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d1065f87e: jz 0x7f7d1065f885
0x7f7d1065f885: add rsp, 0x10
0x7f7d1065f889: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f88a: ret 
0x7f7d1065f89d: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d1065f8a0: call 0x7f7d1065e650
TMsgSocket::GetLocal()@plt: 7f7d080008c0 0 9 7f7d0de84e74	_ZN10TMsgSocket8GetLocalEv@plt
0x7f7d1065e650: jmp qword ptr [rip+0x222022]
0x7f7d1065e656: push 0xcc 
0x7f7d1065e65b: jmp 0x7f7d1065d980
TMsgSocket::GetLocal(): 7f7d080008c0 0 9 7f7d0de84e74	_ZN10TMsgSocket8GetLocalEv
0x7f7d1065f692: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f693: sub rsp, 0x10
0x7f7d1065f697: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f69a: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f6a3: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84e78, 7f7d10b2b548) 
0x7f7d1065f6a8: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f6aa: mov dword ptr [rsp+0x4], 0x10  mem(7f7d0de84e74, 48f98f0000007f7d) 
0x7f7d1065f6b2: lea rdx, ptr [rsp+0x4]  reg(8, 9) 
0x7f7d1065f6b7: lea rsi, ptr [rdi+0x1c]  reg(4, 0) 
0x7f7d1065f6bb: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f6be: call 0x7f7d1065e6f0
getsockname@plt: 4 7f7d080008dc 7f7d0de84e74 7f7d0de84e74	getsockname@plt
0x7f7d1065e6f0: jmp qword ptr [rip+0x221fd2]
0x7f7d1065e6f6: push 0xd6 
0x7f7d1065e6fb: jmp 0x7f7d1065d980
0x7f7d1065f6c3: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f6c5: jnz 0x7f7d1065f6df
0x7f7d1066a261: test rax, rax  reg(56, 0)  reg(56, 0) 
0x7f7d1066a264: jz 0x7f7d1066a2d8
0x7f7d1066a266: lea rdi, ptr [rbp-0x50]  reg(3, 1c) 
0x7f7d1066a26a: mov r14, rdi  reg(17, 7ffd5f7966c0)  reg(3, 7ffd5f795d00) 
0x7f7d1066a26d: mov rcx, rax  reg(9, 7f7d0fe2b620)  reg(10, 7f7d1006c4a0) 
0x7f7d1066a270: lea rdx, ptr [rip+0xc640]  reg(8, 5a) 
0x7f7d1066a277: mov esi, 0x32  reg(47, 3) 
0x7f7d1066a27c: call 0x7f7d1065f1a0
strftime@plt: 7ffd5f795d00 32 7f7d106768b7 7f7d1006c4a0	strftime@plt
0x7f7d1065f1a0: jmp qword ptr [rip+0x221a7a]
0x7f7d1065f1a6: push 0x181 
0x7f7d1065f1ab: jmp 0x7f7d1065d980
0x7f7d1066a281: mov eax, 0x0  reg(56, 13) 
0x7f7d1065f6c7: lea rcx, ptr [rbx+0x44]  reg(56, 13) 
0x7f7d1065f6cb: mov rsi, qword ptr [rbx+0x1c]  reg(4, 7f7d080008dc) 
0x7f7d1065f6cf: mov rdx, qword ptr [rbx+0x24]  reg(8, 7f7d0de84e74) 
0x7f7d1065f6d3: lea r8, ptr [rbx+0x64]  reg(11, 4) 
0x7f7d1065f6d7: mov rdi, rbx  reg(3, 4)  reg(7, 7f7d080008c0) 
0x7f7d1065f6da: call 0x7f7d1065e390
TMsgSocket::GetSin(sockaddr_in, char*, unsigned short&)@plt: 7f7d080008c0 100007f66000002 0 7f7d08000904	_ZN10TMsgSocket6GetSinE11sockaddr_inPcRt@plt
0x7f7d1065e390: jmp qword ptr [rip+0x222182]
0x7f7d1065e396: push 0xa0 
0x7f7d1065e39b: jmp 0x7f7d1065d980
TMsgSocket::GetSin(sockaddr_in, char*, unsigned short&): 7f7d080008c0 100007f66000002 0 7f7d08000904	_ZN10TMsgSocket6GetSinE11sockaddr_inPcRt
0x7f7d1065f65a: push r12  reg(15, 4) 
0x7f7d1065f65c: push rbp
0x7f7d1065f65d: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f65e: mov rbx, rsi  reg(7, 7f7d080008c0)  reg(4, 100007f66000002) 
0x7f7d1065f661: mov r12, rcx  reg(15, 4)  reg(9, 7f7d08000904) 
0x7f7d1065f664: mov rbp, r8
0x7f7d1065f667: mov rdi, rsi  reg(3, 7f7d080008c0)  reg(4, 100007f66000002) 
0x7f7d1065f66a: sar rdi, 0x20  reg(3, 100007f66000002) 
0x7f7d1065f66e: call 0x7f7d1065e960
inet_ntoa@plt: 100007f 100007f66000002 0 7f7d08000904	inet_ntoa@plt
0x7f7d1065e960: jmp qword ptr [rip+0x221e9a]
0x7f7d1065e966: push 0xfd 
0x7f7d1065e96b: jmp 0x7f7d1065d980
0x7f7d1066a286: mov rcx, 0xffffffffffffffff 
0x7f7d1066a28d: mov qword ptr [rbp-0x80], r14  reg(17, 7ffd5f795d00)  mem(7ffd5f795cd0, 0) 
0x7f7d1066a291: mov rdi, r14  reg(3, 7ffd5f795d13)  reg(17, 7ffd5f795d00) 
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a296: not rcx
0x7f7d1066a299: lea rdi, ptr [rbp-0x70]  reg(3, 7ffd5f795d14) 
0x7f7d1066a29d: lea r8, ptr [rcx-0x1]  reg(11, 2) 
0x7f7d1066a2a1: mov rcx, r14  reg(9, 14)  reg(17, 7ffd5f795d00) 
0x7f7d1066a2a4: mov rdx, qword ptr [rbp-0x68]  reg(8, 0) 
0x7f7d1066a2a8: mov esi, 0x0  reg(47, 7ffd5f795c26) 
0x7f7d1066a2ad: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7ffd5f795ce0 0 0 7ffd5f795d00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
memcpy: 201d9a0 7ffd5f795d00 13 7ffd5f795d00	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7ffd5f795d00	dlsym@plt
0x7f7d1066a2b2: lea rax, ptr [rbx+0x10]  reg(10, 7ffd5f795ce0) 
0x7f7d1066a2b6: mov qword ptr [rbx], rax  reg(10, 7ffd5f795dd0)  mem(7ffd5f795dc0, 7ffd5f796560) 
0x7f7d1066a2b9: mov rsi, qword ptr [rbp-0x70]  reg(4, 7ffd5f795d00) 
0x7f7d1066a2bd: mov rdx, rsi  reg(8, 13)  reg(4, 201d9a0) 
0x7f7d1066a2c0: add rdx, qword ptr [rbp-0x68]  reg(8, 201d9a0) 
0x7f7d1066a2c4: sub rsp, 0x8
0x7f7d1066a2c8: push 0x0 
0x7f7d1066a2ca: mov rdi, rbx  reg(3, 7ffd5f795cf0)  reg(7, 7ffd5f795dc0) 
0x7f7d1066a2cd: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7ffd5f795dc0 201d9a0 201d9b3 201d9a0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
0x7f7d1065e026: push 0x69 
0x7f7d1065f673: mov rsi, rax 
0x7f7d1065f676: mov rdi, r12  reg(3, 7f7d0de84bf0)  reg(15, 7f7d08000904) 
0x7f7d1065f679: call 0x7f7d1065ebd0
strcpy@plt: 7f7d08000904 7f7d0de856b8 7f7d10b2b548 7ffffff6	strcpy@plt
0x7f7d1065ebd0: jmp qword ptr [rip+0x221d62]
0x7f7d1065ebd6: push 0x124 
0x7f7d1065ebdb: jmp 0x7f7d1065d980
0x7f7d1065f67e: shr rbx, 0x10  reg(7, 100007f66000002) 
0x7f7d1065f682: mov rsi, rbx  reg(4, 7f7d0de856b8)  reg(7, 100007f6600) 
0x7f7d1065f685: ror si, 0x8  reg(40, 100007f6600) 
0x7f7d1065f689: mov word ptr [rbp], si  reg(40, 100007f0066)  mem(7f7d08000924, 6400660000) 
0x7f7d1065e02b: jmp 0x7f7d1065d980
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7ffd5f795dc0 201d9a0 201d9b3 201d9a0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7ffd5f796b90) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7ffd5f795dc0) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7ffd5f796b90)  reg(4, 201d9a0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7ffd5f795dd0) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f795c98, 7ffd5f795d00) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 201d9a0)  reg(8, 201d9b3) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 201d9a0)  reg(4, 201d9a0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7ffd5f795dc0)  reg(8, 201d9b3) 
0x7f7d1065f68d: pop rbx  reg(7, 7ffd5f795dc0)  reg(8, 201d9b3) 
0x7f7d1065f68e: pop rbp
0x7f7d1065f68f: pop r12  reg(15, 7f7d08000904) 
0x7f7d1065f691: ret 
0x7f7d1065f6df: mov rax, qword ptr [rsp+0x8]  reg(10, 7f7d08000904) 
0x7f7d1065f6e4: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d1065f6ed: jz 0x7f7d1065f6f4
0x7f7d1065f6f4: add rsp, 0x10
0x7f7d1065f6f8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f6f9: ret 
0x7f7d1065f8a5: mov rdi, rbx  reg(3, 7f7d08000904)  reg(7, 7f7d080008c0) 
0x7f7d1065f8a8: call 0x7f7d1065e560
TMsgSocket::GetRemote()@plt: 7f7d080008c0 100007f0066 31 2e302e302e373231	_ZN10TMsgSocket9GetRemoteEv@plt
0x7f7d1065e560: jmp qword ptr [rip+0x22209a]
0x7f7d1065e566: push 0xbd 
0x7f7d1065e56b: jmp 0x7f7d1065d980
TMsgSocket::GetRemote(): 7f7d080008c0 100007f0066 31 2e302e302e373231	_ZN10TMsgSocket9GetRemoteEv
0x7f7d106701b7: sub rbx, r12 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 13)  mem(7ffd5f795c90, 7f7d1061e4e8) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 13) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 201d9a0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 201d9b3) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7ffd5f795dc0) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7ffd5f795dc0 7ffd5f795c90 0 201d9a0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d1065de16: push 0x48 
0x7f7d1065de1b: jmp 0x7f7d1065d980
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 201d9d0)  mem(7ffd5f795dc0, 7ffd5f795dd0) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 201d9d0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 13)  mem(7ffd5f795dd0, 0) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 13) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 13)  reg(7, 13) 
0x7f7d1065f6fa: push rbx  reg(7, 13)  reg(7, 13) 
0x7f7d1065f6fb: sub rsp, 0x10
0x7f7d1065f6ff: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f702: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f70b: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84e78, 7f7d10b2b548) 
0x7f7d1065f710: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f712: mov dword ptr [rsp+0x4], 0x10  mem(7f7d0de84e74, 48f98f0000007f7d) 
0x7f7d1065f71a: lea rdx, ptr [rsp+0x4]  reg(8, 31) 
0x7f7d1065f71f: lea rsi, ptr [rdi+0x2c]  reg(4, 100007f0066) 
0x7f7d1065f723: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f726: call 0x7f7d1065ddc0
getpeername@plt: 4 7f7d080008ec 7f7d0de84e74 2e302e302e373231	getpeername@plt
0x7f7d1065ddc0: jmp qword ptr [rip+0x22246a]
0x7f7d1065f72b: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f72d: jnz 0x7f7d1065f747
0x7f7d1065f72f: lea rcx, ptr [rbx+0x54]  reg(9, 2e302e302e373231) 
0x7f7d1065f733: mov rsi, qword ptr [rbx+0x2c]  reg(4, 7f7d080008ec) 
0x7f7d1065f737: mov rdx, qword ptr [rbx+0x34]  reg(8, 7f7d0de84e74) 
0x7f7d1065f73b: lea r8, ptr [rbx+0x66]  reg(11, 0) 
0x7f7d1065f73f: mov rdi, rbx  reg(3, 4)  reg(7, 7f7d080008c0) 
0x7f7d1065f742: call 0x7f7d1065e390
TMsgSocket::GetSin(sockaddr_in, char*, unsigned short&)@plt: 7f7d080008c0 100007fb6930002 0 7f7d08000914	_ZN10TMsgSocket6GetSinE11sockaddr_inPcRt@plt
0x7f7d1065e390: jmp qword ptr [rip+0x222182]
TMsgSocket::GetSin(sockaddr_in, char*, unsigned short&): 7f7d080008c0 100007fb6930002 0 7f7d08000914	_ZN10TMsgSocket6GetSinE11sockaddr_inPcRt
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 201d9d0)  reg(7, 13) 
0x7f7d106701fb: mov rsi, r12  reg(4, 201d9e0)  reg(15, 201d9a0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 201d9d0 201d9a0 13 7f7d10067b20	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
0x7f7d1065f2a6: push 0x191 
0x7f7d1065f2ab: jmp 0x7f7d1065d980
memcpy: 201d9d0 201d9a0 13 7f7d10067b20	memcpy
0x7f7d1065f65a: push r12 
0x7f7d1065f65c: push rbp
0x7f7d1065f65d: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f65e: mov rbx, rsi  reg(7, 7f7d080008c0)  reg(4, 100007fb6930002) 
0x7f7d1065f661: mov r12, rcx  reg(15, 4)  reg(9, 7f7d08000914) 
0x7f7d1065f664: mov rbp, r8
0x7f7d1065f667: mov rdi, rsi  reg(3, 7f7d080008c0)  reg(4, 100007fb6930002) 
0x7f7d1065f66a: sar rdi, 0x20  reg(3, 100007fb6930002) 
0x7f7d1065f66e: call 0x7f7d1065e960
inet_ntoa@plt: 100007f 100007fb6930002 0 7f7d08000914	inet_ntoa@plt
0x7f7d1065e960: jmp qword ptr [rip+0x221e9a]
0x7f7d1065f673: mov rsi, rax  reg(4, 0)  reg(10, 7f7d0de856b8) 
inet_ntoa@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d10067b20	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 201d9d0) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 13)  mem(7ffd5f795dc8, 7f7d0fdf09b0) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 13) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(201d9e3, 106210000000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 13) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 13) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 201d9a0) 
0x7f7d10670230: ret 
0x7f7d1066a2d2: add rsp, 0x10
0x7f7d1066a2d6: jmp 0x7f7d1066a2fb
0x7f7d1066a2fb: mov rdi, qword ptr [rbp-0x70]  reg(3, 201d9d0) 
0x7f7d1065f676: mov rdi, r12  reg(3, 201d9d0) 
0x7f7d1065f679: call 0x7f7d1065ebd0
strcpy@plt: 7f7d08000914 7f7d0de856b8 100007f0066 7ffffff6	strcpy@plt
0x7f7d1065ebd0: jmp qword ptr [rip+0x221d62]
0x7f7d1065f67e: shr rbx, 0x10  reg(7, 100007fb6930002) 
0x7f7d1065f682: mov rsi, rbx  reg(4, 7f7d0de856b8)  reg(7, 100007fb693) 
0x7f7d1065f685: ror si, 0x8  reg(40, 100007fb693) 
0x7f7d1065f689: mov word ptr [rbp], si  reg(40, 100007f93b6)  mem(7f7d08000926, 2ee000000640066) 
0x7f7d1065f68d: pop rbx  reg(7, 100007fb693) 
0x7f7d1065f68e: pop rbp
0x7f7d1065f68f: pop r12  reg(15, 7f7d08000914) 
0x7f7d1065f691: ret 
0x7f7d1065f747: mov rax, qword ptr [rsp+0x8]  reg(10, 7f7d08000914) 
0x7f7d1065f74c: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d1065f755: jz 0x7f7d1065f75c
0x7f7d1065f75c: add rsp, 0x10
0x7f7d1065f760: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f761: ret 
0x7f7d1065f8ad: mov rdi, rbx  reg(3, 7f7d08000914)  reg(7, 7f7d080008c0) 
0x7f7d1065f8b0: call 0x7f7d1065eba0
0x7f7d1066a2ff: lea rax, ptr [rbp-0x60]  reg(3, 7f7d08000914)  reg(7, 7f7d080008c0) 
0x7f7d1066a303: cmp rdi, rax  reg(3, 201d9a0)  reg(10, 7ffd5f795cf0) 
0x7f7d1066a306: jz 0x7f7d1066a32c
0x7f7d1066a308: call 0x7f7d1065dd80
operator delete(void*)@plt: 201d9a0 201d9a0 201d9d0 201d9d0	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1065dd86: push 0x3f 
0x7f7d1065dd8b: jmp 0x7f7d1065d980
0x7f7d1066a30d: jmp 0x7f7d1066a32c
0x7f7d1066a32c: mov rax, rbx  reg(10, 0)  reg(7, 7ffd5f795dc0) 
operator delete(void*)@plt: 7f7d080008c0 100007f93b6 31 2e302e302e373231	_ZN10TMsgSocket9GotSocketEv@plt
0x7f7d1065eba0: jmp qword ptr [rip+0x221d7a]
0x7f7d1065eba6: push 0x121 
0x7f7d1065ebab: jmp 0x7f7d1065d980
TMsgSocket::GotSocket(): 7f7d080008c0 100007f93b6 31 2e302e302e373231	_ZN10TMsgSocket9GotSocketEv
0x7f7d1065f772: mov eax, dword ptr [rdi+0x30]  reg(56, 0) 
0x7f7d1065f775: mov dword ptr [rdi+0x3c], eax  reg(56, 100007f)  mem(7f7d080008fc, 0) 
0x7f7d1065f778: ret 
0x7f7d1065f8b5: cmp dword ptr [rbx+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f8b9: setnz byte ptr [rbx+0x7c]  mem(7f7d0800093c, 0) 
0x7f7d1065f8bd: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f8be: ret 
0x7f7d10665483: mov qword ptr [rbx+0x21e0], rbp  mem(7f7d08002aa0, 0) 
0x7f7d1066548a: mov rax, rbx  reg(10, 100007f)  reg(7, 7f7d080008c0) 
0x7f7d1066548d: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1066548e: pop rbp
0x7f7d1066a32f: mov rbx, qword ptr [rbp-0x18]  reg(7, 7f7d080008c0) 
0x7f7d1066a333: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1066a33c: jz 0x7f7d1066a343
0x7f7d1066a343: lea rsp, ptr [rbp-0x10]
0x7f7d1066a347: pop rbx  reg(7, 0) 
0x7f7d1066a348: pop r14  reg(17, 7ffd5f795d00) 
0x7f7d1066a34a: pop rbp
0x7f7d1066a34b: ret 
0x7f7d1066a515: lea rax, ptr [rbx+0x10]  reg(10, 7ffd5f795dc0) 
0x7f7d1066a519: mov r14, rax  reg(17, 7ffd5f7966c0)  reg(10, 7ffd5f796590) 
0x7f7d1066a51c: mov qword ptr [rbx], rax  reg(10, 7ffd5f796590)  mem(7ffd5f796580, 0) 
0x7f7d1066a51f: mov rsi, qword ptr [rbp-0x50]  reg(4, 7f7d10067b30) 
0x7f7d1066a523: mov rdx, rsi  reg(8, 0)  reg(4, 201d9d0) 
0x7f7d1066a526: add rdx, qword ptr [rbp-0x48]  reg(8, 201d9d0) 
0x7f7d1066a52a: sub rsp, 0x8
0x7f7d1066a52e: push 0x0 
0x7f7d1066a530: mov rdi, rbx  reg(3, ffffffff)  reg(7, 7ffd5f796580) 
0x7f7d1066a533: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7ffd5f796580 201d9d0 201d9e3 201d900	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7ffd5f796580 201d9d0 201d9e3 201d900	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d1066548f: pop r12  reg(3, ffffffff)  reg(7, 7ffd5f796580) 
0x7f7d10665491: ret 
0x7f7d10660eee: mov r13, rax  reg(16, 100007f)  reg(10, 7f7d080008c0) 
0x7f7d10660ef1: mov edi, 0x30  reg(45, 7f7d080008c0) 
0x7f7d10660ef6: call 0x7f7d1065f130
operator new(unsigned long)@plt: 30 100007f93b6 31 2e302e302e373231	_Znwm@plt
0x7f7d1065f130: jmp qword ptr [rip+0x221ab2]
0x7f7d10660efb: mov rbp, rax
0x7f7d10660efe: mov rdx, rbx  reg(8, 7f7d08002ae0)  reg(7, 200dc40) 
0x7f7d10660f01: mov rsi, r13  reg(4, 7f7d08002b10)  reg(16, 7f7d080008c0) 
0x7f7d10660f04: mov rdi, rax  reg(3, 0)  reg(10, 7f7d08002ae0) 
0x7f7d10660f07: call 0x7f7d1065e660
TMsgWorkerThread::TMsgWorkerThread(TMsgSocket*, TCustomMsgServer*)@plt: 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN16TMsgWorkerThreadC1EP10TMsgSocketP16TCustomMsgServer@plt
0x7f7d1065e660: jmp qword ptr [rip+0x22201a]
0x7f7d1065e666: push 0xcd 
0x7f7d1065e66b: jmp 0x7f7d1065d980
TMsgWorkerThread::TMsgWorkerThread(TMsgSocket*, TCustomMsgServer*): 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN16TMsgWorkerThreadC1EP10TMsgSocketP16TCustomMsgServer
0x7f7d10660ca4: push r12  reg(15, 0) 
0x7f7d10660ca6: push rbp
0x7f7d10660ca7: push rbx  reg(7, 200dc40) 
0x7f7d10660ca8: mov rbx, rdi  reg(7, 200dc40)  reg(3, 7f7d08002ae0) 
0x7f7d10660cab: mov r12, rsi  reg(15, 0)  reg(4, 7f7d080008c0) 
0x7f7d10660cae: mov rbp, rdx
0x7f7d10660cb1: call 0x7f7d1065e510
TSnapThread::TSnapThread()@plt: 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN11TSnapThreadC2Ev@plt
0x7f7d1065e510: jmp qword ptr [rip+0x2220c2]
TSnapThread::TSnapThread(): 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN11TSnapThreadC1Ev
0x7f7d10670180: push r12  reg(15, 0)  reg(4, 7f7d080008c0) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7ffd5f796580) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7ffd5f796b90)  reg(4, 201d9d0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7ffd5f796590) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f795d28, 0) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 201d9d0)  reg(8, 201d9e3) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 201d9d0)  reg(4, 201d9d0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7ffd5f796580)  reg(8, 201d9e3) 
0x7f7d106701b7: sub rbx, r12  reg(7, 201d9e3)  reg(15, 201d9d0) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 13)  mem(7ffd5f795d20, 7ffd5f795dc0) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 13) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 201d9d0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 201d9e3) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7ffd5f796580) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7ffd5f796580 7ffd5f795d20 0 201d900	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 201d9f0)  mem(7ffd5f796580, 7ffd5f796590) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 201d9f0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 13)  mem(7ffd5f796590, 0) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 13) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 13)  reg(7, 13) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 201d9f0)  reg(7, 13) 
0x7f7d106701fb: mov rsi, r12  reg(4, 201da00)  reg(15, 201d9d0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 201d9f0 201d9d0 13 7f7d10067b20	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 201d9f0 201d9d0 13 7f7d10067b20	memcpy
0x7f7d106617b6: mov rax, qword ptr [rip+0x21e2cb]  reg(4, 201da00)  reg(15, 201d9d0) 
0x7f7d106617bd: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f470) 
0x7f7d106617c1: mov qword ptr [rdi], rax  reg(10, 7f7d1087f480)  mem(7f7d08002ae0, 0) 
0x7f7d106617c4: mov byte ptr [rdi+0x11], 0x0  mem(7f7d08002af1, 0) 
0x7f7d106617c8: mov byte ptr [rdi+0x13], 0x0  mem(7f7d08002af3, 0) 
0x7f7d106617cc: mov byte ptr [rdi+0x12], 0x0  mem(7f7d08002af2, 0) 
0x7f7d106617d0: mov byte ptr [rdi+0x14], 0x0  mem(7f7d08002af4, 0) 
0x7f7d106617d4: ret 
0x7f7d10660cb6: mov rax, qword ptr [rip+0x21ef1b]  reg(10, 7f7d1087f480) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d10067b20	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 201d9f0) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 13)  mem(7ffd5f796588, ff000000) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 13) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(201da03, 106010000000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 13) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 13) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 201d9d0) 
0x7f7d10670230: ret 
0x7f7d1066a538: add rsp, 0x10
0x7f7d1066a53c: mov rax, 0x7fffffffffffffff  reg(10, 0) 
0x7f7d1066a546: sub rax, qword ptr [rbx+0x8]  reg(10, 7fffffffffffffff) 
0x7f7d1066a54a: cmp rax, 0x7  reg(10, 7fffffffffffffec) 
0x7f7d1066a54e: jnbe 0x7f7d1066a55c
0x7f7d1066a55c: mov edx, 0x8  reg(54, 201d9f0) 
0x7f7d1066a561: lea rsi, ptr [rip+0xc367]  reg(4, 201d9d0) 
0x7f7d1066a568: mov rdi, rbx  reg(3, 201d9f0)  reg(7, 7ffd5f796580) 
0x7f7d1066a56b: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7ffd5f796580 7f7d106768cf 8 201d9f0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
0x7f7d1065edb6: push 0x142 
0x7f7d10660cbd: lea rax, ptr [rax+0x10] 
0x7f7d10660cc1: mov qword ptr [rbx], rax  reg(10, 7f7d1087f3d8)  mem(7f7d08002ae0, 7f7d1087f480) 
0x7f7d10660cc4: mov byte ptr [rbx+0x14], 0x1  mem(7f7d08002af4, 0) 
0x7f7d10660cc8: mov qword ptr [rbx+0x20], r12  reg(15, 7f7d080008c0)  mem(7f7d08002b00, 0) 
0x7f7d10660ccc: mov qword ptr [rbx+0x18], rbp  mem(7f7d08002af8, 0) 
0x7f7d10660cd0: pop rbx  reg(7, 7f7d08002ae0) 
0x7f7d10660cd1: pop rbp
0x7f7d10660cd2: pop r12  reg(15, 7f7d080008c0) 
0x7f7d10660cd4: ret 
0x7f7d10660f0c: movsxd rax, r12d  reg(10, 7f7d1087f3d8)  reg(73, 0) 
0x7f7d10660f0f: mov qword ptr [rbx+rax*8+0x60], rbp  mem(200dca0, 0) 
0x7f7d10660f14: mov dword ptr [rbp+0x28], r12d  reg(73, 0)  mem(7f7d08002b08, 0) 
0x7f7d10660f18: add dword ptr [rbx+0x2074], 0x1  mem(200fcb4, 40000000000) 
0x7f7d10660f1f: mov rdi, rbp  reg(3, 7f7d08002ae0) 
0x7f7d10660f22: call 0x7f7d1065efa0
TSnapThread::Start()@plt: 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN11TSnapThread5StartEv@plt
0x7f7d1065efa0: jmp qword ptr [rip+0x221b7a]
TSnapThread::Start(): 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN11TSnapThread5StartEv
0x7f7d10661836: cmp byte ptr [rdi+0x11], 0x0  mem(7f7d08002af1, 4000000001000000) 
0x7f7d1066183a: jnz 0x7f7d1066184a
0x7f7d1066183c: push rbx  reg(7, 200dc40) 
0x7f7d1066183d: mov rbx, rdi  reg(7, 200dc40)  reg(3, 7f7d08002ae0) 
0x7f7d10661840: call 0x7f7d1065e1e0
TSnapThread::ThreadCreate()@plt: 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN11TSnapThread12ThreadCreateEv@plt
0x7f7d1065e1e0: jmp qword ptr [rip+0x22225a]
TSnapThread::ThreadCreate(): 7f7d08002ae0 7f7d080008c0 200dc40 7f7d08000020	_ZN11TSnapThread12ThreadCreateEv
0x7f7d1065edbb: jmp 0x7f7d1065d980
memcpy: 201d9a0 201d9f0 13 7f7d106768cf	memcpy
0x7f7d106617d6: push rbp
0x7f7d106617d7: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d106617d8: sub rsp, 0x48
0x7f7d106617dc: mov rbp, rdi
0x7f7d106617df: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d106617e8: mov qword ptr [rsp+0x38], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84e88, 0) 
0x7f7d106617ed: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d106617ef: mov rdi, rsp  reg(3, 7f7d08002ae0) 
0x7f7d106617f2: call 0x7f7d1065eea0
pthread_attr_init@plt: 7f7d0de84e50 7f7d080008c0 200dc40 7f7d08000020	pthread_attr_init@plt
0x7f7d1065eea0: jmp qword ptr [rip+0x221bfa]
0x7f7d106617f7: mov esi, 0x1  reg(47, 7f7d080008c0) 
pthread_attr_init@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d106768cf	dlsym@plt
memcpy: 201d9b3 7f7d106768cf 8 7f7d106768cf	memcpy
0x7f7d106617fc: mov rdi, rsp  reg(3, 7f7d0de84e88) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 8 7f7d106768cf	dlsym@plt
0x7f7d106617ff: call 0x7f7d1065f440
pthread_attr_setdetachstate@plt: 7f7d0de84e50 1 200dc40 0	pthread_attr_setdetachstate@plt
0x7f7d1065f440: jmp qword ptr [rip+0x22192a]
0x7f7d10661804: lea rdi, ptr [rbp+0x8]  reg(3, 7f7d0de84e50) 
0x7f7d10661808: mov rcx, rbp  reg(9, 0) 
0x7f7d1066180b: mov rdx, qword ptr [rip+0x21e3d6]  reg(8, 200dc40) 
0x7f7d10661812: mov rsi, rsp  reg(4, 1) 
0x7f7d10661815: call 0x7f7d1065e3a0
pthread_create@plt: 7f7d08002ae8 7f7d0de84e50 7f7d10661742 7f7d08002ae0	pthread_create@plt
0x7f7d1065e3a0: jmp qword ptr [rip+0x22217a]
0x7f7d1066181a: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f7d1066a570: mov rdi, qword ptr [rbp-0x50]  reg(10, 0) 
0x7f7d1066a574: lea rax, ptr [rbp-0x40]  reg(10, 7ffd5f796580) 
ThreadProc(void*): 7f7d08002ae0 0 2a5845fa9a54d76a ffffffffffffff88	_Z10ThreadProcPv
0x7f7d1066a578: cmp rdi, rax  reg(3, 201d9d0)  reg(10, 7ffd5f795dd0) 
0x7f7d1066a57b: jnz 0x7f7d1066a597
0x7f7d1066a597: call 0x7f7d1065dd80
operator delete(void*)@plt: 201d9d0 7f7d10067b28 0 2072657672655300	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d10661742: push rbx  reg(7, 0) 
0x7f7d1066a59c: jmp 0x7f7d1066a629
0x7f7d1066a629: mov rax, rbx  reg(10, 201d9e0)  reg(7, 7ffd5f796580) 
0x7f7d1066a62c: mov rcx, qword ptr [rbp-0x28]  reg(9, 2072657672655300) 
0x7f7d1066a630: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1066a639: jz 0x7f7d1066a640
0x7f7d1066a640: lea rsp, ptr [rbp-0x18]
0x7f7d1066a644: pop rbx  reg(7, 7ffd5f796580) 
0x7f7d10661743: sub rsp, 0x10
0x7f7d1066181f: xor rax, qword ptr fs:[0x28]  reg(7, 7ffd5f796580) 
0x7f7d10661828: jz 0x7f7d1066182f
0x7f7d1066182f: add rsp, 0x48
0x7f7d10661833: pop rbx  reg(7, 7f7d08002ae0) 
0x7f7d10661834: pop rbp
0x7f7d10661835: ret 
0x7f7d10661845: mov byte ptr [rbx+0x11], 0x1  mem(7f7d08002af1, 4000000001000000) 
0x7f7d10661849: pop rbx  reg(7, 7f7d08002ae0) 
0x7f7d1066184a: ret 
0x7f7d10660f27: mov esi, dword ptr [r13+0x3c]  reg(47, 7f7d0cbeefb0) 
0x7f7d10660f2b: mov rax, qword ptr [rbx]  reg(10, 0) 
0x7f7d10660f2e: push 0x0 
0x7f7d10660f30: push 0x0 
0x7f7d1066a645: pop r12  reg(15, 7ffd5f796b90) 
0x7f7d1066a647: pop r14  reg(17, 7ffd5f796590) 
0x7f7d1066a649: pop rbp
0x7f7d1066a64a: ret 
0x7f7d1066e04d: lea rdx, ptr [rbp-0x150]  reg(8, 201d9e0) 
0x7f7d1066e054: lea rsi, ptr [rbp-0x130]  reg(4, 7f7d10067b28) 
0x7f7d10661747: mov rbx, rdi  reg(3, ffffffff) 
0x7f7d1066e05b: mov rdi, r14  reg(3, ffffffff)  reg(17, 7ffd5f7966c0) 
0x7f7d1066e05e: call 0x7f7d1065de70
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt: 7ffd5f7966c0 7ffd5f796580 7ffd5f796560 0	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_@plt
0x7f7d1065de70: jmp qword ptr [rip+0x222412]
0x7f7d1065de76: push 0x4e 
0x7f7d1065de7b: jmp 0x7f7d1065d980
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&): 7ffd5f7966c0 7ffd5f796580 7ffd5f796560 0	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
0x7f7d10670231: push r12  reg(15, 7ffd5f796710) 
0x7f7d10660f32: mov r9d, 0x0  reg(15, 7ffd5f796710) 
0x7f7d10660f38: mov r8d, 0x0  reg(61, 0) 
0x7f7d10660f3e: mov ecx, 0x0  reg(55, 800000) 
0x7f7d10660f43: mov edx, 0x8  reg(54, 0) 
0x7f7d10660f48: mov rdi, rbx  reg(3, 3d0f00)  reg(7, 200dc40) 
0x7f7d10660f4b: call qword ptr [rax+0x18]
TCustomMsgServer::DoEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 200dc40 100007f 8 0	_ZN16TCustomMsgServer7DoEventEijttttt
0x7f7d10660b80: push r15  reg(18, 0) 
0x7f7d10660b82: push r14  reg(17, 7f7d0de859c0) 
0x7f7d10660b84: push r13  reg(16, 7f7d080008c0) 
0x7f7d10660b86: push r12  reg(15, 0) 
0x7f7d10660b88: push rbp
0x7f7d10660b89: push rbx  reg(7, 200dc40) 
0x7f7d10660b8a: sub rsp, 0x48
0x7f7d10660b8e: mov dword ptr [rsp], esi  reg(47, 100007f)  mem(7f7d0de84e30, 7f7d0de859c0) 
0x7f7d10660b91: mov dword ptr [rsp+0x4], ecx  reg(55, 0)  mem(7f7d0de84e34, 7f7d) 
0x7f7d10660b95: mov dword ptr [rsp+0x8], r8d  reg(61, 0)  mem(7f7d0de84e38, 0) 
0x7f7d10660b9a: mov dword ptr [rsp+0xc], r9d  reg(64, 0)  mem(7f7d0de84e3c, 8002ae000000000) 
0x7f7d10660b9f: mov r14d, dword ptr [rsp+0x80]  reg(79, 7f7d0de859c0) 
0x7f7d10660ba7: mov r13d, dword ptr [rsp+0x88]  reg(76, 7f7d080008c0) 
0x7f7d10660baf: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d1087f7c0) 
0x7f7d10660bb8: mov qword ptr [rsp+0x38], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84e68, 0) 
0x7f7d10660bbd: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10660bbf: cmp byte ptr [rdi+0x50], 0x0  mem(200dc90, 0) 
0x7f7d10660bc3: jnz 0x7f7d10660c80
0x7f7d10660bc9: mov rbx, rdi  reg(7, 200dc40)  reg(3, 200dc40) 
0x7f7d10660bcc: mov ebp, edx
0x7f7d10660bce: mov r12d, edx  reg(73, 0)  reg(54, 8) 
0x7f7d10660bd1: and r12d, dword ptr [rdi+0x206c]  reg(73, 8) 
0x7f7d10660bd8: mov r15d, edx  reg(82, 0)  reg(54, 8) 
0x7f7d10660bdb: and r15d, dword ptr [rdi+0x2068]  reg(82, 8) 
0x7f7d10660be2: jnz 0x7f7d10660bed
0x7f7d10660bed: mov rdi, qword ptr [rbx+0x58]  reg(3, 200dc40) 
0x7f7d10660bf1: call 0x7f7d1065f050
pthread_mutex_lock@plt: 2013d60 100007f 8 0	pthread_mutex_lock@plt
0x7f7d1065f050: jmp qword ptr [rip+0x221b22]
0x7f7d10670233: push rbp
0x7f7d10670234: push rbx  reg(7, 7ffd5f796b90) 
0x7f7d10670235: mov rbx, rdi  reg(7, 7ffd5f796b90)  reg(3, 7ffd5f7966c0) 
0x7f7d10670238: mov rbp, rdx
0x7f7d1067023b: lea r12, ptr [rdi+0x10]  reg(15, 7ffd5f796710) 
0x7f7d1066174a: mov rax, qword ptr fs:[0x28]  reg(15, 7ffd5f7966d0)  mem(7ffd5f7966c0, 7ffd5f796b90) 
0x7f7d1067023f: mov qword ptr [rdi], r12  reg(15, 7ffd5f7966d0)  mem(7ffd5f7966c0, 7ffd5f796b90) 
0x7f7d10670242: mov rax, qword ptr [rsi]  reg(10, 7ffd5f796580) 
0x7f7d10670245: mov rdx, rax  reg(8, 7ffd5f796560)  reg(10, 201d9a0) 
0x7f7d10670248: add rdx, qword ptr [rsi+0x8]  reg(8, 201d9a0) 
0x7f7d1067024c: sub rsp, 0x8
0x7f7d10670250: push 0x0 
0x7f7d10661753: mov qword ptr [rsp+0x8], rax  reg(4, 7ffd5f796580) 
0x7f7d10670252: mov rsi, rax  reg(4, 7ffd5f796580)  reg(10, 201d9a0) 
0x7f7d10670255: call 0x7f7d1065e020
0x7f7d10661758: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066175a: mov rsi, rsp  reg(4, 0) 
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7ffd5f7966c0 201d9a0 201d9bb 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1066175d: mov edi, 0x1  reg(45, 7f7d08002ae0) 
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7ffd5f7966c0 201d9a0 201d9bb 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7ffd5f7966d0) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7ffd5f7966c0) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7ffd5f7966d0)  reg(4, 201d9a0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 201d9a0) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f795dc8, 0) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 201d9a0)  reg(8, 201d9bb) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 201d9a0)  reg(4, 201d9a0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7ffd5f7966c0)  reg(8, 201d9bb) 
0x7f7d106701b7: sub rbx, r12  reg(7, 201d9bb)  reg(15, 201d9a0) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 1b)  mem(7ffd5f795dc0, 7ffd5f796580) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 1b) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 201d9a0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 201d9bb) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7ffd5f7966c0) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7ffd5f7966c0 7ffd5f795dc0 0 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 201da10)  mem(7ffd5f7966c0, 7ffd5f7966d0) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 201da10) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 1b)  mem(7ffd5f7966d0, 0) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 1b) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 1b)  reg(7, 1b) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 201da10)  reg(7, 1b) 
0x7f7d106701fb: mov rsi, r12  reg(4, 201da30)  reg(15, 201d9a0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 201da10 201d9a0 1b 7f7d10067b20	memcpy@plt
0x7f7d10661762: call 0x7f7d1065e5d0
pthread_setcanceltype@plt: 1 7f7d0cbeef00 2a5845fa9a54d76a ffffffffffffff88	pthread_setcanceltype@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 201da10 201d9a0 1b 7f7d10067b20	memcpy
0x7f7d1065e5d0: jmp qword ptr [rip+0x222062]
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1b 7f7d10067b20	dlsym@plt
0x7f7d10661767: lea rsi, ptr [rsp+0x4]  reg(4, 7f7d0cbeef00) 
0x7f7d1066176c: mov edi, 0x0  reg(45, 1) 
0x7f7d10661771: call 0x7f7d1065d9f0
pthread_setcancelstate@plt: 0 7f7d0cbeef04 0 2	pthread_setcancelstate@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(45, 1) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 1b)  mem(7ffd5f7966c8, 2013d60) 
0x7f7d1065d9f0: jmp qword ptr [rip+0x222652]
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 1b) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(201da2b, ffffff0000000002) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 1b) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 1b) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 201d9a0) 
0x7f7d10670230: ret 
0x7f7d10661776: cmp byte ptr [rbx+0x12], 0x0  reg(15, 201d9a0) 
0x7f7d1066177a: jnz 0x7f7d10661785
0x7f7d1066177c: mov rax, qword ptr [rbx]  reg(10, 0) 
0x7f7d1066177f: mov rdi, rbx  reg(3, 0)  reg(7, 7f7d08002ae0) 
0x7f7d10661782: call qword ptr [rax+0x10]
0x7f7d1067025a: add rsp, 0x10
0x7f7d1067025e: mov rdx, qword ptr [rbp+0x8]  reg(8, 201da10) 
TMsgWorkerThread::Execute(): 7f7d08002ae0 7f7d0cbeef04 2 2	_ZN16TMsgWorkerThread7ExecuteEv
0x7f7d10670262: mov rsi, qword ptr [rbp]  reg(4, 201d9a0) 
0x7f7d10670266: mov rdi, rbx  reg(3, 201da10)  reg(7, 7ffd5f7966c0) 
0x7f7d10670269: call 0x7f7d1065edb0
0x7f7d10661264: push r12  reg(15, 0) 
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7ffd5f7966c0 7ffd5f796570 7 201da10	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
0x7f7d10661266: push rbp
0x7f7d10661267: push rbx  reg(7, 7f7d08002ae0) 
memcpy: 201da40 201da10 1b 7ffd5f796570	memcpy
0x7f7d10661268: mov rbx, rdi  reg(7, 7f7d08002ae0)  reg(3, 7f7d08002ae0) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1b 7ffd5f796570	dlsym@plt
memcpy: 201da5b 7ffd5f796570 7 7ffd5f796570	memcpy
0x7f7d1066126b: mov ebp, 0x0
0x7f7d10661270: mov r12d, 0x0  reg(73, 0) 
0x7f7d10661276: cmp byte ptr [rbx+0x12], 0x0  mem(7f7d08002af2, dc40000000010000) 
0x7f7d1066127a: jnz 0x7f7d106612aa
0x7f7d1066127c: test r12b, r12b  reg(71, 0)  reg(71, 0) 
0x7f7d1066127f: jnz 0x7f7d106612aa
0x7f7d10661281: test bpl, bpl 
0x7f7d10661284: jnz 0x7f7d106612aa
dlsym@plt: ffffffffffffffff 7f7d108f3d08 7 7ffd5f796570	dlsym@plt
0x7f7d10661286: mov rax, qword ptr [rbx+0x18]  reg(10, 7f7d1087f3d8) 
0x7f7d1066128a: cmp byte ptr [rax+0x50], 0x0  mem(200dc90, 0) 
0x7f7d1066128e: jnz 0x7f7d10661354
0x7f7d1067026e: jmp 0x7f7d10670288
0x7f7d10661294: mov rdi, qword ptr [rbx+0x20]  reg(3, 7f7d08002ae0) 
0x7f7d10661298: mov rax, qword ptr [rdi]  reg(10, 200dc40) 
0x7f7d1066129b: call qword ptr [rax+0x10]
0x7f7d10670288: mov rax, rbx  reg(10, 7ffd5f7966c0)  reg(7, 7ffd5f7966c0) 
0x7f7d1067028b: pop rbx  reg(7, 7ffd5f7966c0) 
0x7f7d1067028c: pop rbp
0x7f7d1067028d: pop r12  reg(15, 7ffd5f7966d0) 
0x7f7d1067028f: ret 
TIsoTcpWorker::Execute(): 7f7d080008c0 7f7d0cbeef04 2 2	_ZN13TIsoTcpWorker7ExecuteEv
0x7f7d106652aa: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d1066e063: mov rdi, qword ptr [rbp-0x130]  reg(3, ffffffff) 
0x7f7d1066e06a: lea rax, ptr [rbp-0x120]  reg(10, 7ffd5f7966c0) 
0x7f7d106652ab: mov rbx, rdi  reg(3, 201d9a0)  reg(10, 7ffd5f796590) 
0x7f7d1066e071: cmp rdi, rax  reg(3, 201d9a0)  reg(10, 7ffd5f796590) 
0x7f7d1066e074: jz 0x7f7d1066e07b
0x7f7d1066e076: call 0x7f7d1065dd80
0x7f7d106652ae: mov rax, qword ptr [rdi]  reg(10, 7f7d1087f768) 
operator delete(void*)@plt: 201d9a0 7f7d10067b30 0 64657400	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d106652b1: call qword ptr [rax+0x38]
0x7f7d1066e07b: mov rdi, qword ptr [rbp-0x150]  reg(3, ffffffff) 
0x7f7d1066e082: lea rax, ptr [rbp-0x140]  reg(10, 201da00) 
0x7f7d1066e089: cmp rdi, rax  reg(3, 7ffd5f796570)  reg(10, 7ffd5f796570) 
0x7f7d1066e08c: jz 0x7f7d1066e1a0
TIsoTcpWorker::ExecuteSend(): 7f7d080008c0 7f7d0cbeef04 2 2	_ZN13TIsoTcpWorker11ExecuteSendEv
0x7f7d106652a4: mov eax, 0x1  reg(56, 7f7d1087f768) 
0x7f7d1066e1a0: mov rdi, qword ptr [rbp-0x890]  reg(3, 7ffd5f796570) 
0x7f7d1066e1a7: lea rax, ptr [rbp-0x880]  reg(10, 7ffd5f796570) 
0x7f7d106652a9: ret 
0x7f7d1066e1ae: cmp rdi, rax  reg(3, 7ffd5f795e30)  reg(10, 7ffd5f795e30) 
0x7f7d1066e1b1: jz 0x7f7d1066e556
0x7f7d106652b4: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106652b6: jz 0x7f7d106652c1
0x7f7d106652b8: mov rax, qword ptr [rbx]  reg(10, 1) 
0x7f7d106652bb: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d106652be: call qword ptr [rax+0x40]
0x7f7d1066e556: mov rax, r14  reg(10, 7ffd5f795e30)  reg(17, 7ffd5f7966c0) 
0x7f7d1066e559: mov rcx, qword ptr [rbp-0x28]  reg(9, 64657400) 
0x7f7d1066e55d: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1066e566: jz 0x7f7d1066e56d
TS7Worker::ExecuteRecv(): 7f7d080008c0 7f7d0cbeef04 2 2	_ZN9TS7Worker11ExecuteRecvEv
0x7f7d106653e4: sub rsp, 0x8
0x7f7d106653e8: mov rax, qword ptr [rdi+0x21e0]  reg(10, 7f7d1087f768) 
0x7f7d1066e56d: lea rsp, ptr [rbp-0x18]
0x7f7d1066e571: pop rbx  reg(7, 7ffd5f796b90) 
0x7f7d1066e572: pop r12  reg(15, 7ffd5f796710) 
0x7f7d1066e574: pop r14  reg(17, 7ffd5f7966c0) 
0x7f7d1066e576: pop rbp
0x7f7d1066e577: ret 
0x7f7d106653ef: mov eax, dword ptr [rax+0x60dc]  reg(17, 7ffd5f7966c0) 
0x7f7d106653f5: mov dword ptr [rdi+0x68], eax  reg(56, 64)  mem(7f7d08000928, 2ee00000064) 
0x7f7d106653f8: call 0x7f7d1065eb10
0x7f7d10675fef: mov rbp, qword ptr [rsp]
TIsoTcpWorker::ExecuteRecv()@plt: 7f7d080008c0 7f7d0cbeef04 2 2	_ZN13TIsoTcpWorker11ExecuteRecvEv@plt
0x7f7d10675ff3: mov rdx, rbx  reg(8, 201da00)  reg(7, 400) 
0x7f7d10675ff6: mov rsi, rbp  reg(4, 7f7d10067b30) 
0x7f7d10675ff9: mov rdi, r12  reg(3, 7ffd5f795e30)  reg(15, 7ffd5f796710) 
0x7f7d10675ffc: call 0x7f7d1065ee30
0x7f7d1065eb10: jmp qword ptr [rip+0x221dc2]
strncpy@plt: 7ffd5f796710 201da40 400 0	strncpy@plt
0x7f7d1065ee30: jmp qword ptr [rip+0x221c32]
0x7f7d1065eb16: push 0x118 
0x7f7d1065eb1b: jmp 0x7f7d1065d980
0x7f7d10676001: lea rax, ptr [rsp+0x10]  reg(10, 7ffd5f796710) 
0x7f7d10676006: cmp rbp, rax
0x7f7d10676009: jz 0x7f7d10676013
TIsoTcpWorker::ExecuteRecv(): 7f7d080008c0 7f7d0cbeef04 2 2	_ZN13TIsoTcpWorker11ExecuteRecvEv
0x7f7d1067600b: mov rdi, rbp  reg(3, 7ffd5f796b10) 
0x7f7d1067600e: call 0x7f7d1065dd80
0x7f7d106652c6: push r12  reg(15, 0) 
operator delete(void*)@plt: 201da40 3 0 7f7d0fd49cf0	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d106652c8: push rbp
0x7f7d106652c9: push rbx  reg(7, 7f7d080008c0) 
0x7f7d106652ca: sub rsp, 0x10
0x7f7d10676013: mov eax, 0x0  reg(56, 0) 
0x7f7d10676018: mov rcx, qword ptr [rsp+0x28]  reg(9, 7f7d0fd49c00) 
0x7f7d1067601d: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d106652ce: mov rbx, rdi  reg(9, f4f60b3748f98f00) 
0x7f7d10676026: jz 0x7f7d10676043
0x7f7d106652d1: mov rax, qword ptr fs:[0x28]  reg(10, 64) 
0x7f7d106652da: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee98, 0) 
0x7f7d10676043: add rsp, 0x30
0x7f7d106652df: xor eax, eax  reg(7, 400) 
0x7f7d106652e1: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0cbeef04) 
0x7f7d10676047: pop rbx  reg(47, 7f7d0cbeef04) 
0x7f7d10676048: pop rbp
0x7f7d106652e4: call 0x7f7d1065ee80
0x7f7d10676049: pop r12  reg(15, 7ffd5f796710) 
0x7f7d1067604b: ret 
TMsgSocket::CanRead(int)@plt: 7f7d080008c0 64 2 2	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
0x404343: lea rax, ptr [rbx+0x10]  reg(10, 0) 
0x404347: mov qword ptr [rbx], rax  reg(10, 7ffd5f796b50)  mem(7ffd5f796b40, 7ffd5f796b90) 
0x40434a: mov eax, 0x0  reg(56, 7ffd5f796b50) 
0x40434f: mov rcx, 0xffffffffffffffff  reg(9, 0) 
TMsgSocket::CanRead(int): 7f7d080008c0 64 2 2	_ZN10TMsgSocket7CanReadEi
0x404356: mov rdi, rsp  reg(3, ffffffff) 
0x404359: repne scasb byte ptr [rdi]
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 7f7d080008c0) 
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee68, 2) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x40435b: not rcx
0x7f7d1065f9de: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x40435e: lea rdx, ptr [rsp+rcx*1-0x1]  reg(8, 0) 
0x404363: sub rsp, 0x8
0x404367: push 0x0 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(4, 7f7d10067b38) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x404369: mov rsi, rbp  reg(56, 0)  reg(47, 64) 
0x40436c: mov rdi, rbx  reg(3, 7ffd5f79673 re reg, , ) 
0x40436f: call 0x4044b4
0x7f7d1065f9e8: imul edx  reg(3, 7ffd5f79673 re reg, , ) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0cbeedd8, 0) 
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag): 7ffd5f796b40 7ffd5f796710 7ffd5f796732 23	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
0x4044b4: push r12  reg(15, 1) 
0x4044b6: push rbp
0x4044b7: push rbx  reg(7, 7ffd5f796b40) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(7, 7ffd5f796b40) 
0x4044b8: sub rsp, 0x10
0x4044bc: mov rbp, rdi
0x4044bf: mov r12, rsi  reg(15, 1)  reg(4, 7ffd5f796710) 
0x4044c2: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x4044cb: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7ffd5f7966d8, 7f7d242e7e14) 
0x4044d0: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x4044d2: cmp rsi, rdx  reg(4, 7ffd5f796710)  reg(8, 7ffd5f796732) 
0x4044d5: jz 0x4044e6
0x4044d7: test rsi, rsi  reg(4, 7ffd5f796710)  reg(4, 7ffd5f796710) 
0x4044da: jnz 0x4044e6
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 2) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x4044e6: mov rbx, rdx  reg(7, 7ffd5f796b40)  reg(8, 7ffd5f796732) 
0x4044e9: sub rbx, r12  reg(7, 7ffd5f796732)  reg(15, 7ffd5f796710) 
0x4044ec: mov qword ptr [rsp], rbx  reg(7, 22)  mem(7ffd5f7966d0, 36) 
0x4044f0: cmp rbx, 0xf  reg(7, 22) 
0x4044f4: jbe 0x404512
0x4044f6: mov edx, 0x0  reg(54, 7ffd5f796732) 
0x4044fb: mov rsi, rsp  reg(4, 7ffd5f796710) 
0x4044fe: mov rdi, rbp  reg(3, 7ffd5f796b40) 
0x404501: call 0x403100
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7ffd5f796b40 7ffd5f7966d0 0 23	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x403100: jmp qword ptr [rip+0x2032ca]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0cbeee60) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 4 186a0 0 0	__fdelt_chk@plt
0x403106: push 0x77 
0x40310b: jmp 0x402980
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x404506: mov qword ptr [rbp], rax  reg(10, 201d9a0)  mem(7ffd5f796b40, 7ffd5f796b50) 
0x40450a: mov rax, qword ptr [rsp]  reg(10, 201d9a0) 
0x40450e: mov qword ptr [rbp+0x10], rax  reg(10, 22)  mem(7ffd5f796b50, 0) 
0x404512: mov rdi, qword ptr [rbp]  reg(3, 1) 
0x404516: cmp rbx, 0x1  reg(7, 22) 
0x40451a: jnz 0x404525
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 4) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 4) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 4) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 4)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 4) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 10)  mem(7f7d0cbeede0, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 4) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0cbef700) 
0x404525: test rbx, rbx  reg(11, 7f7d0cbef700) 
0x404528: jz 0x404535
0x40452a: mov rdx, rbx  reg(8, 201d9a0)  reg(7, 22) 
0x40452d: mov rsi, r12  reg(4, 7f7d10067b28)  reg(15, 7ffd5f796710) 
0x404530: call 0x402c30
0x7f7d1065fa56: mov ecx, 0x0  reg(4, 7f7d10067b28)  reg(15, 7ffd5f796710) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 10) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
memcpy@plt: 201d9a0 7ffd5f796710 22 7f7d10067b20	memcpy@plt
0x402c30: jmp qword ptr [rip+0x203532]
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 5 7f7d0cbeede0 0 0	select@plt
0x402c36: push 0x2a 
0x402c3b: jmp 0x402980
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
memcpy: 201d9a0 7ffd5f796710 22 7f7d10067b20	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 22 7f7d10067b20	dlsym@plt
0x7f7d1065fa68: cdqe   reg(10, 1)  reg(56, 1) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 1) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065fa83: setnle al  reg(27, 1) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 7f7d080008c0) 
0x404535: mov rax, qword ptr [rsp]  reg(10, 201d9a0) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(10, 22)  mem(7ffd5f796b48 7ffd5f796710) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x404539: mov qword ptr [rbp+0x8], rax  reg(7, 0) 
0x40453d: mov rdx, qword ptr [rbp]  reg(8, 22) 
0x404541: mov byte ptr [rdx+rax*1], 0x0  mem(201d9c2, 21000000000000) 
0x404545: mov rax, qword ptr [rsp+0x8]  reg(10, 22) 
0x40454a: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x404553: jz 0x40455a
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x40455a: add rsp, 0x10
0x40455e: pop rbx  reg(7, 22) 
0x40455f: pop rbp
0x404560: pop r12  reg(15, 7ffd5f796710) 
0x404562: ret 
0x7f7d106652e9: mov ebp, 0x1
0x7f7d106652ee: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106652f0: jz 0x7f7d106653c4
0x7f7d106652f6: mov ebp, eax
0x7f7d106652f8: lea r12, ptr [rbx+0x184]  reg(15, 0) 
0x7f7d106652ff: mov rsi, r12  reg(4, 7f7d0cbeede0)  reg(15, 7f7d08000a44) 
0x404374: add rsp, 0x10
0x7f7d10665302: mov rdi, rbx  reg(3, 2)  reg(7, 7f7d080008c0) 
0x404378: mov rsi, qword ptr [rsp+0x408]  reg(4, 7ffd5f796710) 
0x404380: xor rsi, qword ptr fs:[0x28]  reg(4, f4f60b3748f98f00) 
0x7f7d10665305: call 0x7f7d1065f0f0
0x404389: jz 0x404390
TIsoTcpSocket::isoRecvPDU(TIsoDataPDU*)@plt: 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket10isoRecvPDUEP11TIsoDataPDU@plt
0x7f7d1065f0f0: jmp qword ptr [rip+0x221ad2]
0x404390: mov rax, rbx  reg(10, 0)  reg(7, 7ffd5f796b40) 
0x404393: add rsp, 0x418
0x40439a: pop rbx  reg(7, 7ffd5f796b40) 
0x40439b: pop rbp
0x40439c: ret 
0x7f7d1065f0f6: push 0x176 
0x7f7d1065f0fb: jmp 0x7f7d1065d980
0x403343: mov rdi, qword ptr [rsp]  reg(3, 201d9a0) 
0x403347: call 0x402f90
TIsoTcpSocket::isoRecvPDU(TIsoDataPDU*): 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket10isoRecvPDUEP11TIsoDataPDU
puts@plt: 201d9a0 0 201d9a0 201d9a0	puts@plt
0x402f90: jmp qword ptr [rip+0x203382]
0x7f7d10662df4: push r15  reg(18, 0) 
0x7f7d10662df6: push r14  reg(17, 7f7d0cbef9c0) 
0x402f96: push 0x60 
0x402f9b: jmp 0x402980
0x7f7d10662df8: push r13  reg(16, 7f7d0de84dcf) 
0x7f7d10662dfa: push r12  reg(15, 7f7d08000a44) 
0x7f7d10662dfc: push rbp
0x7f7d10662dfd: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10662dfe: sub rsp, 0x38
0x7f7d10662e02: mov r13, rdi  reg(16, 7f7d0de84dcf)  reg(3, 7f7d080008c0) 
0x7f7d10662e05: mov qword ptr [rsp+0x18], rsi  reg(4, 7f7d08000a44)  mem(7f7d0cbeee38, 7f7d08000a44) 
0x7f7d10662e0a: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f7d10662e13: mov qword ptr [rsp+0x28], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee48, 7f7d0cbeedd0) 
0x7f7d10662e18: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10662e1a: mov byte ptr [rsp+0x23], 0x0  mem(7f7d0cbeee43, f98f0000007f7d08) 
0x7f7d10662e1f: call 0x7f7d1065e1b0
TIsoTcpSocket::ClrIsoError()@plt: 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket11ClrIsoErrorEv@plt
0x7f7d1065e1b0: jmp qword ptr [rip+0x222272]
0x7f7d1065e1b6: push 0x82 
0x7f7d1065e1bb: jmp 0x7f7d1065d980
TIsoTcpSocket::ClrIsoError(): 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket11ClrIsoErrorEv
0x7f7d106627b6: mov dword ptr [rdi+0x1198], 0x0  mem(7f7d08001a58, 0) 
0x7f7d106627c0: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d106627c7: ret 
0x40334c: mov rdi, qword ptr [rsp]  reg(3, 0) 
0x403350: lea rax, ptr [rsp+0x10]  reg(10, 23) 
0x403355: cmp rdi, rax  reg(3, 201d9a0)  reg(10, 7ffd5f796b50) 
0x403358: jz 0x40337f
0x40335a: call 0x402d10
0x7f7d10662e24: lea rbx, ptr [r13+0x18b]  reg(7, 7f7d080008c0) 
0x7f7d10662e2b: mov dword ptr [rsp+0x14], 0x1  mem(7f7d0cbeee34, 8000a4400000000) 
operator delete(void*)@plt: 201d9a0 201d9d0 7f7d10069780 fbad2a84	_ZdlPv@plt
0x402d10: jmp qword ptr [rip+0x2034c2]
0x7f7d10662e33: mov ebp, 0x0
0x7f7d10662e38: mov r14d, 0x1000  reg(79, 7f7d0cbef9c0) 
0x7f7d10662e3e: lea r15, ptr [rsp+0x23]  reg(18, 0) 
0x7f7d10662e43: lea rax, ptr [rsp+0x24]  reg(10, 0) 
0x7f7d10662e48: mov qword ptr [rsp+0x8], rax  reg(10, 7f7d0cbeee44)  mem(7f7d0cbeee28, 0) 
0x402d16: push 0x38  reg(10, 7f7d0cbeee44)  mem(7f7d0cbeee28, 0) 
0x402d1b: jmp 0x402980
0x7f7d10662e4d: movsxd rax, ebp  reg(10, 7f7d0cbeee44) 
0x40335f: jmp 0x40337f
0x7f7d10662e50: add rbx, rax  reg(7, 7f7d08000a4b)  reg(10, 0) 
0x7f7d10662e53: mov edx, r14d  reg(54, 1)  reg(79, 1000) 
0x7f7d10662e56: sub edx, ebp  reg(54, 1000) 
0x7f7d10662e58: test edx, edx  reg(54, 1000)  reg(54, 1000) 
0x7f7d10662e5a: jle 0x7f7d10662ea5
0x7f7d10662e5c: mov r8, r15  reg(11, 7f7d0cbeedd0)  reg(18, 7f7d0cbeee43) 
0x40337f: mov rax, qword ptr [rsp+0x28]  reg(11, 7f7d0cbeedd0)  reg(18, 7f7d0cbeee43) 
0x7f7d10662e5f: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x403384: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x40338d: jz 0x403394
0x7f7d10662e64: mov rsi, rbx  reg(4, 7f7d08000a44)  reg(7, 7f7d08000a4b) 
0x7f7d10662e67: mov rdi, r13  reg(3, 7f7d080008c0)  reg(16, 7f7d080008c0) 
0x7f7d10662e6a: call 0x7f7d1065e0b0
0x403394: add rsp, 0x30
0x403398: pop rbx  reg(7, 200dc40) 
0x403399: ret 
TIsoTcpSocket::isoRecvFragment(void*, int, int&, bool&)@plt: 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket15isoRecvFragmentEPviRiRb@plt
0x7f7d1065e0b0: jmp qword ptr [rip+0x2222f2]
0x7f7d10660c53: test r15d, r15d  reg(82, 1)  reg(82, 1) 
0x7f7d10660c56: jz 0x7f7d10660c66
0x7f7d10660c58: lea rsi, ptr [rsp+0x10]  reg(4, 7f7d10067b30) 
0x7f7d10660c5d: mov rdi, qword ptr [rbx+0x38]  reg(3, ffffffff) 
0x7f7d10660c61: call 0x7f7d1065e1a0
0x7f7d1065e0b6: push 0x72 
0x7f7d1065e0bb: jmp 0x7f7d1065d980
TMsgEventQueue::Insert(void*)@plt: 2013d90 7ffd5f796b90 0 fbad2a00	_ZN14TMsgEventQueue6InsertEPv@plt
0x7f7d1065e1a0: jmp qword ptr [rip+0x22227a]
TIsoTcpSocket::isoRecvFragment(void*, int, int&, bool&): 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket15isoRecvFragmentEPviRiRb
0x7f7d1065e1a6: push 0x81 
0x7f7d1065e1ab: jmp 0x7f7d1065d980
0x7f7d10662cce: push r15  reg(18, 7f7d0cbeee43) 
0x7f7d10662cd0: push r14  reg(17, 1000) 
TMsgEventQueue::Insert(void*): 2013d90 7ffd5f796b90 0 fbad2a00	_ZN14TMsgEventQueue6InsertEPv
0x7f7d10660b36: push rbp
0x7f7d10660b37: push rbx  reg(7, 200dc40) 
0x7f7d10662cd2: push r13  reg(7, 200dc40) 
0x7f7d10660b38: sub rsp, 0x8
0x7f7d10660b3c: mov rbx, rdi  reg(7, 200dc40)  reg(3, 2013d90) 
0x7f7d10660b3f: mov rbp, rsi
0x7f7d10660b42: call 0x7f7d1065dfb0
0x7f7d10662cd4: push r12  reg(15, 7f7d08000a44) 
TMsgEventQueue::Full()@plt: 2013d90 7ffd5f796b90 0 fbad2a00	_ZN14TMsgEventQueue4FullEv@plt
0x7f7d1065dfb0: jmp qword ptr [rip+0x222372]
0x7f7d10662cd6: push rbp
0x7f7d10662cd7: push rbx  reg(7, 7f7d08000a4b) 
0x7f7d1065dfb6: push 0x62 
0x7f7d1065dfbb: jmp 0x7f7d1065d980
0x7f7d10662cd8: sub rsp, 0x18
0x7f7d10662cdc: mov rbx, rdi  reg(7, 7f7d08000a4b)  reg(3, 7f7d080008c0) 
0x7f7d10662cdf: mov qword ptr [rsp+0x8], rsi  reg(4, 7f7d08000a4b)  mem(7f7d0cbeedd8, 7f7d08000a4b) 
0x7f7d10662ce4: mov r15d, edx  reg(82, 7f7d0cbeee43)  reg(54, 1000) 
0x7f7d10662ce7: mov r14, rcx  reg(17, 1000)  reg(9, 7f7d0cbeee44) 
0x7f7d10662cea: mov r13, r8  reg(16, 7f7d080008c0)  reg(11, 7f7d0cbeee43) 
0x7f7d10662ced: mov dword ptr [rcx], 0x0  mem(7f7d0cbeee44, 48f98f0000007f7d) 
TMsgEventQueue::Full(): 2013d90 7ffd5f796b90 0 fbad2a00	_ZN14TMsgEventQueue4FullEv
0x7f7d10660b16: mov edx, dword ptr [rdi+0x4]  reg(54, 0) 
0x7f7d10660b19: mov eax, dword ptr [rdi]  reg(56, 0) 
0x7f7d10660b1b: lea ecx, ptr [rax+0x1]  reg(55, fbad2a00) 
0x7f7d10660b1e: cmp edx, ecx  reg(54, 0)  reg(55, 1) 
0x7f7d10660b20: jz 0x7f7d10660b30
0x7f7d10662cf3: mov byte ptr [r8], 0x0  reg(56, 0)  mem(2013d98, 5dc000005db) 
0x7f7d10660b22: cmp dword ptr [rdi+0x8], eax  reg(56, 0)  mem(2013d98, 5dc000005db) 
0x7f7d10660b25: setz cl  reg(30, 1) 
0x7f7d10660b28: test edx, edx  reg(54, 0)  reg(54, 0) 
0x7f7d10660b2a: setz al  reg(27, 0) 
0x7f7d10662cf7: call 0x7f7d1065e1b0
TIsoTcpSocket::ClrIsoError()@plt: 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket11ClrIsoErrorEv@plt
0x7f7d10660b2d: and eax, ecx  reg(56, 1)  reg(55, 0) 
0x7f7d10660b2f: ret 
0x7f7d1065e1b0: jmp qword ptr [rip+0x222272]
0x7f7d10660b47: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d10660b49: jnz 0x7f7d10660b79
0x7f7d10660b4b: mov eax, dword ptr [rbx]  reg(56, 0) 
0x7f7d10660b4d: cmp eax, dword ptr [rbx+0x8]  reg(56, 0) 
0x7f7d10660b50: jnl 0x7f7d10660b59
0x7f7d10660b52: add eax, 0x1  reg(56, 0) 
0x7f7d10660b55: mov dword ptr [rbx], eax  reg(56, 1)  mem(2013d90, 0) 
0x7f7d10660b57: jmp 0x7f7d10660b5f
TIsoTcpSocket::ClrIsoError(): 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket11ClrIsoErrorEv
0x7f7d106627b6: mov dword ptr [rdi+0x1198], 0x0  mem(7f7d08001a58, 0) 
0x7f7d106627c0: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d10660b5f: mov edx, dword ptr [rbx+0x18]  reg(54, 0) 
0x7f7d10660b62: mov edi, edx  reg(45, 2013d90)  reg(54, 1a) 
0x7f7d10660b64: imul edi, dword ptr [rbx]  reg(45, 1a) 
0x7f7d10660b67: movsxd rdi, edi  reg(3, 1a)  reg(45, 1a) 
0x7f7d10660b6a: add rdi, qword ptr [rbx+0x10]  reg(3, 1a) 
0x7f7d106627c7: ret 
0x7f7d10660b6e: movsxd rdx, edx  reg(8, 1a)  reg(54, 1a) 
0x7f7d10660b71: mov rsi, rbp  reg(4, 7ffd5f796b90) 
0x7f7d10660b74: call 0x7f7d1065f2a0
memcpy@plt: 2013dda 7ffd5f796b90 1a 0	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 2013dda 7ffd5f796b90 1a 0	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1a 0	dlsym@plt
0x7f7d10662cfc: lea r12, ptr [rbx+0x184]  reg(15, 7f7d08000a44) 
0x7f7d10662d03: mov edx, 0x7  reg(54, 1000) 
0x7f7d10662d08: mov rsi, r12  reg(4, 7f7d08000a4b)  reg(15, 7f7d08000a44) 
0x7f7d10660b79: add rsp, 0x8
0x7f7d10660b7d: pop rbx  reg(7, 2013d90) 
0x7f7d10660b7e: pop rbp
0x7f7d10660b7f: ret 
0x7f7d10662d0b: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d10662d0e: call 0x7f7d1065f220
0x7f7d10660c66: mov rdi, qword ptr [rbx+0x58]  reg(3, 2013dda) 
0x7f7d10660c6a: call 0x7f7d1065f270
TMsgSocket::RecvPacket(void*, int)@plt: 7f7d080008c0 7f7d08000a44 7 7f7d0cbeee44	_ZN10TMsgSocket10RecvPacketEPvi@plt
pthread_mutex_unlock@plt: 2013d60 7ffd5f796b90 1a 2013dda	pthread_mutex_unlock@plt
0x7f7d1065f270: jmp qword ptr [rip+0x221a12]
0x7f7d1065f220: jmp qword ptr [rip+0x221a3a]
0x7f7d1065f276: push 0x18e 
0x7f7d1065f27b: jmp 0x7f7d1065d980
0x7f7d1065f226: push 0x189 
0x7f7d1065f22b: jmp 0x7f7d1065d980
0x7f7d10660bf6: lea rdi, ptr [rsp+0x10]  reg(3, 2013d60) 
0x7f7d10660bfb: call 0x7f7d1065f3a0
time@plt: 7f7d0de84e40 80 0 0	time@plt
0x7f7d1065f3a0: jmp qword ptr [rip+0x22197a]
TMsgSocket::RecvPacket(void*, int): 7f7d080008c0 7f7d08000a44 7 7f7d0cbeee44	_ZN10TMsgSocket10RecvPacketEPvi
0x7f7d1066028c: push r12  reg(15, 7f7d08000a44) 
0x7f7d10660c00: mov eax, dword ptr [rsp]  reg(56, 5cc5a8ab) 
0x7f7d10660c03: mov dword ptr [rsp+0x18], eax  reg(56, 100007f)  mem(7f7d0de84e48, 7f7d1066181a) 
0x7f7d10660c07: mov dword ptr [rsp+0x1c], ebp  mem(7f7d0de84e4c, 7f7d) 
0x7f7d1066028e: push rbp
0x7f7d1066028f: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10660c0b: movzx eax, word ptr [rsp+0x4]  reg(56, 100007f) 
0x7f7d10660c10: mov word ptr [rsp+0x20], ax  reg(29, 0)  mem(7f7d0de84e50, 0) 
0x7f7d10660290: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10660c15: movzx eax, word ptr [rsp+0x8]  reg(56, 0) 
0x7f7d10660c1a: mov word ptr [rsp+0x22], ax  reg(29, 0)  mem(7f7d0de84e52, 1000000000000) 
0x7f7d10660c1f: movzx eax, word ptr [rsp+0xc]  reg(56, 0) 
0x7f7d10660c24: mov word ptr [rsp+0x24], ax  reg(29, 0)  mem(7f7d0de84e54, 100000000) 
0x7f7d10660c29: mov word ptr [rsp+0x26], r14w  reg(78, 0)  mem(7f7d0de84e56, 10000) 
0x7f7d10660c2f: mov word ptr [rsp+0x28], r13w  reg(75, 0)  mem(7f7d0de84e58, 1) 
0x7f7d10660c35: test r12d, r12d  reg(73, 8)  reg(73, 8) 
0x7f7d10660c38: jz 0x7f7d10660c53
0x7f7d10660c3a: mov rax, qword ptr [rbx+0x40]  reg(10, 0) 
0x7f7d10660c3e: test rax, rax  reg(10, 403326)  reg(10, 403326) 
0x7f7d10660c41: jz 0x7f7d10660c53
0x7f7d10660c43: lea rsi, ptr [rsp+0x10]  reg(4, 80) 
0x7f7d10660c48: mov rdi, qword ptr [rbx+0x48]  reg(3, 7f7d0de84e40) 
0x7f7d10660293: mov r12, rsi  reg(3, 7f7d0de84e40) 
0x7f7d10660c6f: jmp 0x7f7d10660c80
0x7f7d10660c4c: mov edx, 0x1a  reg(54, 0) 
0x7f7d10660c51: call rax
EventCallBack(void*, TSrvEvent*, int): 0 7f7d0de84e40 1a 0	_Z13EventCallBackPvP9TSrvEventi
0x7f7d10660296: mov ebp, edx
0x7f7d10660298: mov edx, dword ptr [rdi+0x70]  reg(54, 7) 
0x403326: push rbx  reg(54, 7) 
0x403327: sub rsp, 0x30
0x40332b: mov rax, qword ptr fs:[0x28]  reg(10, 403326) 
0x403334: mov qword ptr [rsp+0x28], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84e18, 7f7d08002ae0) 
0x403339: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066029b: mov esi, ebp  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x40333b: mov rdi, rsp  reg(3, 0) 
0x40333e: call 0x404311
_Z12SrvEventTextB5cxx11P9TSrvEvent: 7f7d0de84df0 7f7d0de84e40 1a 0	_Z12SrvEventTextB5cxx11P9TSrvEvent
0x404311: push rbp
0x404312: push rbx  reg(7, 200dc40) 
0x404313: sub rsp, 0x418
0x40431a: mov rbx, rdi  reg(7, 200dc40)  reg(3, 7f7d0de84df0) 
0x40431d: mov rdi, rsi  reg(3, 7f7d0de84df0)  reg(4, 7f7d0de84e40) 
0x404320: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x404329: mov qword ptr [rsp+0x408], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84dc8, 100000000000000) 
0x404331: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x404333: mov rbp, rsp
0x404336: mov edx, 0x400  reg(54, 1a) 
0x40433b: mov rsi, rsp  reg(4, 7f7d0de84e40) 
0x40433e: call 0x402a00
Srv_EventText@plt: 7f7d0de84e40 7f7d0de849c0 400 0	Srv_EventText@plt
0x402a00: jmp qword ptr [rip+0x20364a]
Srv_EventText: 7f7d0de84e40 7f7d0de849c0 400 0	Srv_EventText
0x7f7d1066029d: call 0x7f7d1065f310
0x7f7d10675fc3: push r12  reg(15, 8) 
0x7f7d10675fc5: push rbp
0x7f7d10675fc6: push rbx  reg(7, 7f7d0de84df0) 
0x7f7d10675fc7: sub rsp, 0x30
0x7f7d10675fcb: mov rax, rdi  reg(10, 0)  reg(3, 7f7d0de84e40) 
TMsgSocket::WaitForData(int, int)@plt: 7f7d080008c0 7 bb8 7f7d0cbeee44	_ZN10TMsgSocket11WaitForDataEii@plt
0x7f7d10675fce: mov r12, rsi  reg(15, 8)  reg(4, 7f7d0de849c0) 
0x7f7d10675fd1: mov rcx, qword ptr fs:[0x28]  reg(9, 0) 
0x7f7d10675fda: mov qword ptr [rsp+0x28], rcx  reg(9, f4f60b3748f98f00)  mem(7f7d0de84998, 0) 
0x7f7d10675fdf: xor ecx, ecx  reg(55, f4f60b3748f98f00)  reg(55, f4f60b3748f98f00) 
0x7f7d10675fe1: movsxd rbx, edx  reg(7, 7f7d0de84df0)  reg(54, 400) 
0x7f7d10675fe4: mov rdi, rsp  reg(3, 7f7d0de84e40) 
0x7f7d10675fe7: mov rsi, rax  reg(4, 7f7d0de849c0)  reg(10, 7f7d0de84e40) 
0x7f7d10675fea: call 0x7f7d1065df40
_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt: 7f7d0de84970 7f7d0de84e40 400 0	_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt
0x7f7d1065df40: jmp qword ptr [rip+0x2223aa]
_Z10EvtSrvTextB5cxx11R9TSrvEvent: 7f7d0de84970 7f7d0de84e40 400 0	_Z10EvtSrvTextB5cxx11R9TSrvEvent
0x7f7d1066bc97: push rbp
0x7f7d10660c80: mov rax, qword ptr [rsp+0x38]  reg(4, 7f7d0de849c0)  reg(10, 7f7d0de84e40) 
0x7f7d10660c85: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10660c8e: jz 0x7f7d10660c95
0x7f7d1065f310: jmp qword ptr [rip+0x2219c2]
0x7f7d10660c95: add rsp, 0x48
0x7f7d10660c99: pop rbx  reg(7, 200dc40) 
0x7f7d10660c9a: pop rbp
0x7f7d10660c9b: pop r12  reg(15, 1) 
0x7f7d10660c9d: pop r13  reg(16, 0) 
0x7f7d10660c9f: pop r14  reg(17, 0) 
0x7f7d1065f316: push 0x198  reg(18, 1) 
0x7f7d10660ca1: pop r15  reg(18, 1) 
0x7f7d10660ca3: ret 
0x7f7d1065f31b: jmp 0x7f7d1065d980
0x7f7d10661413: mov dword ptr [rbx+0x2070], 0x1  mem(200fcb0, 100000000) 
0x7f7d1066141d: add rsp, 0x10
0x7f7d10661421: mov dword ptr [rbx+0x8], ebp  mem(200dc48, 2e302e3000000000) 
0x7f7d10661424: mov eax, ebp  reg(56, 0) 
0x7f7d10661426: add rsp, 0x8
0x7f7d1066142a: pop rbx  reg(7, 200dc40) 
0x7f7d1066142b: pop rbp
0x7f7d1066142c: ret 
0x7f7d1066bc98: mov rbp, rsp
0x7f7d1066bc9b: push r14  reg(17, 0) 
0x7f7d1066bc9d: push r12  reg(15, 7f7d0de849c0) 
0x7f7d1066bc9f: push rbx  reg(7, 400) 
0x7f7d1066bca0: sub rsp, 0x878
0x7f7d1066bca7: mov r14, rdi  reg(17, 0)  reg(3, 7f7d0de84970) 
0x7f7d1066bcaa: mov rbx, rsi  reg(7, 400)  reg(4, 7f7d0de84e40) 
0x7f7d1066bcad: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0de84e40) 
0x7f7d1066bcb6: mov qword ptr [rbp-0x28], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84938, 0) 
0x7f7d1066bcba: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066bcbc: lea rax, ptr [rbp-0x880]  reg(10, 0) 
0x7f7d1066bcc3: mov qword ptr [rbp-0x890], rax  reg(10, 7f7d0de840e0)  mem(7f7d0de840d0, 0) 
0x7f7d1066bcca: mov qword ptr [rbp-0x888], 0x0  mem(7f7d0de840d8, 0) 
0x7f7d1066bcd5: mov byte ptr [rbp-0x880], 0x0  mem(7f7d0de840e0, 0) 
0x7f7d1066bcdc: mov esi, dword ptr [rsi+0xc]  reg(47, 7f7d0de84e40) 
0x7f7d1066bcdf: cmp esi, 0x8000  reg(47, 8) 
0x7f7d1066bce5: jbe 0x7f7d1066dc02
TMsgSocket::WaitForData(int, int): 7f7d080008c0 7 bb8 7f7d0cbeee44	_ZN10TMsgSocket11WaitForDataEii
0x7f7d1066dc02: lea rax, ptr [rbp-0x140]  reg(10, 7f7d0de840e0) 
0x7f7d1066dc09: mov qword ptr [rbp-0x150], rax  reg(10, 7f7d0de84820)  mem(7f7d0de84810, 0) 
0x7f7d1066dc10: mov qword ptr [rbp-0x148], 0x0  mem(7f7d0de84818, 0) 
0x7f7d1066dc1b: mov byte ptr [rbp-0x140], 0x0  mem(7f7d0de84820, 0) 
0x7f7d1066dc22: cmp esi, 0x10  reg(47, 8) 
0x7f7d1066dc25: jz 0x7f7d1066dd7d
0x7f7d1066dc2b: cmp esi, 0x10  reg(47, 8) 
0x7f7d1066dc2e: jnbe 0x7f7d1066dc5f
0x7f7d1066dc30: cmp esi, 0x2  reg(47, 8) 
0x7f7d1066dc33: jz 0x7f7d1066dccf
0x7f7d1066dc39: cmp esi, 0x2  reg(47, 8) 
0x7f7d1066dc3c: jnbe 0x7f7d1066dc48
0x7f7d1066dc48: cmp esi, 0x4  reg(47, 8) 
0x7f7d1066dc4b: jz 0x7f7d1066dcf7
0x7f7d1066dc51: cmp esi, 0x8  reg(47, 8) 
0x7f7d1066dc54: jz 0x7f7d1066dd55
0x7f7d1066dd55: lea rdi, ptr [rbp-0x150]  reg(3, 7f7d0de84970) 
0x7f7d1066dd5c: mov r8d, 0xc  reg(61, 2013d60) 
0x7f7d10675e62: add rsp, 0x8
0x7f7d10675e66: ret 
0x403db8: add rsp, 0x8
0x403dbc: ret 
0x40359f: test eax, eax  reg(56, 0)  reg(56, 0) 
0x4035a1: jnz 0x4035b1
0x4035a3: mov rdi, qword ptr [rip+0x202ed6]  reg(3, 2013d60) 
0x4035aa: call 0x402e10
_IO_getc@plt: 7f7d100678e0 0 2013d60 2013dda	_IO_getc@plt
0x402e10: jmp qword ptr [rip+0x203442]
0x402e16: push 0x48 
0x402e1b: jmp 0x402980
0x7f7d1066dd62: lea rcx, ptr [rip+0x9196] 
0x7f7d1066dd69: mov edx, 0x0  reg(54, 400) 
0x7f7d1066dd6e: mov esi, 0x0  reg(47, 8) 
0x7f7d1066dd73: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7f7d0de84810 0 0 7f7d10676eff	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
0x7f7d1065fba2: push r13  reg(47, 8) 
0x7f7d1065fba4: push r12  reg(15, 7f7d08000a44) 
memcpy: 7f7d0de84820 7f7d10676eff c 7f7d10676eff	memcpy
0x7f7d1065fba6: push rbp
dlsym@plt: ffffffffffffffff 7f7d108f3d08 c 7f7d10676eff	dlsym@plt
0x7f7d1065fba7: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fba8: sub rsp, 0x18
0x7f7d1065fbac: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1066dd78: jmp 0x7f7d1066e03e
0x7f7d1065fbaf: mov ebp, esi
0x7f7d1065fbb1: mov r12d, edx  reg(73, 7f7d08000a44)  reg(54, bb8) 
0x7f7d1066e03e: lea rdi, ptr [rbp-0x130]  reg(3, 7f7d0de84820) 
0x7f7d1066e045: mov rsi, rbx  reg(4, 6120746e65696c43)  reg(7, 7f7d0de84e40) 
0x7f7d1066e048: call 0x7f7d1066a34c
SenderText(TSrvEvent&): 7f7d0de84830 7f7d0de84e40 c 646564646120746e	_ZL10SenderTextR9TSrvEvent
0x7f7d1066a34c: push rbp
0x7f7d1066a34d: mov rbp, rsp
0x7f7d1066a350: push r14  reg(17, 7f7d0de84970) 
0x7f7d1066a352: push r12  reg(15, 7f7d0de849c0) 
0x7f7d1066a354: push rbx  reg(7, 7f7d0de84e40) 
0x7f7d1066a355: sub rsp, 0x98
0x7f7d1065fbb4: mov rax, qword ptr fs:[0x28]  reg(7, 7f7d0de84e40)  reg(3, 7f7d0de84830) 
0x7f7d1066a35c: mov rbx, rdi  reg(7, 7f7d0de84e40)  reg(3, 7f7d0de84830) 
0x7f7d1065fbbd: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed78, 7f7d08000a44) 
0x7f7d1066a35f: mov r12, rsi  reg(15, 7f7d0de849c0)  reg(4, 7f7d0de84e40) 
0x7f7d1066a362: mov rcx, qword ptr fs:[0x28]  reg(9, 646564646120746e) 
0x7f7d1065fbc2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065fbc4: mov esi, 0x0  reg(47, 7) 
0x7f7d1065fbc9: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 7f7d080008c0 0 bb8 7f7d0cbeee44	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1066a36b: mov qword ptr [rbp-0x28], rcx  reg(47, 7) 
0x7f7d1066a36f: xor ecx, ecx  reg(55, f4f60b3748f98f00)  reg(55, f4f60b3748f98f00) 
0x7f7d1066a371: mov esi, dword ptr [rsi+0x8]  reg(47, 7f7d0de84e40) 
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 7f7d080008c0 0 bb8 7f7d0cbeee44	_ZN10TMsgSocket7CanReadEi
0x7f7d1066a374: test esi, esi  reg(47, 100007f)  reg(47, 100007f) 
0x7f7d1066a376: jz 0x7f7d1066a508
0x7f7d1066a37c: lea rdi, ptr [rbp-0x70]  reg(3, 7f7d0de84830) 
0x7f7d1066a380: call 0x7f7d1065dae0
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 7f7d080008c0) 
_Z17IpAddressToStringB5cxx11i@plt: 7f7d0de84050 100007f c 0	_Z17IpAddressToStringB5cxx11i@plt
0x7f7d1065dae0: jmp qword ptr [rip+0x2225da]
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed48, 7f7d0cbeee44) 
0x7f7d1065dae6: push 0x15 
0x7f7d1065daeb: jmp 0x7f7d1065d980
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, bb8) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 0) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 0) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 0) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 0)  reg(47, 0) 
_Z17IpAddressToStringB5cxx11i: 7f7d0de84050 100007f c 0	_Z17IpAddressToStringB5cxx11i
0x7f7d1065f9ef: sar eax, 0x1f  reg(15, 7f7d0de84e40) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 0)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 0)  reg(47, 0) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 0)  reg(47, 0) 
0x7f7d10669e2b: push r12  reg(4, 0)  reg(47, 0) 
0x7f7d10669e2d: push rbp
0x7f7d10669e2e: push rbx  reg(7, 7f7d0de84830) 
0x7f7d10669e2f: mov rbx, rdi  reg(7, 7f7d0de84830)  reg(3, 7f7d0de84050) 
0x7f7d10669e32: lea rbp, ptr [rdi+0x10]
0x7f7d10669e36: mov qword ptr [rdi], rbp  mem(7f7d0de84050, 0) 
0x7f7d10669e39: mov qword ptr [rdi+0x8], 0x0  mem(7f7d0de84058, c) 
0x7f7d10669e41: mov byte ptr [rdi+0x10], 0x0  mem(7f7d0de84060, 7f7d10676eff) 
0x7f7d10669e45: mov edi, esi  reg(45, 7f7d0de84050)  reg(47, 100007f) 
0x7f7d10669e47: call 0x7f7d1065e960
inet_ntoa@plt: 100007f 100007f c 0	inet_ntoa@plt
0x7f7d1065e960: jmp qword ptr [rip+0x221e9a]
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(45, 7f7d0de84050)  reg(47, 100007f) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0cbeecb0, 0) 
0x7f7d10669e4c: mov rsi, rax  reg(4, 0)  reg(10, 7f7d0de856b8) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 7f7d0cbeee44) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d10669e4f: mov eax, 0x0  reg(3, 7f7d080008c0) 
0x7f7d10669e54: mov rcx, 0xffffffffffffffff  reg(9, 7ffffff6) 
0x7f7d10669e5b: mov rdi, rsi  reg(3, 7f7d0de83d90)  reg(4, 7f7d0de856b8) 
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0cbeed40) 
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 4 0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d10669e60: not rcx
0x7f7d1065fa33: mov edx, edi  reg(8, 7f7d0de84010) 
0x7f7d10669e63: mov rdx, qword ptr [rbx+0x8]  reg(8, 7f7d0de84010) 
0x7f7d10669e67: lea r8, ptr [rcx-0x1]  reg(11, 0) 
0x7f7d10669e6b: mov rcx, rsi  reg(9, a)  reg(4, 7f7d0de856b8) 
0x7f7d10669e6e: mov esi, 0x0  reg(47, 7f7d0de856b8) 
0x7f7d10669e73: mov rdi, rbx  reg(3, 7f7d0de856c2)  reg(7, 7f7d0de84050) 
0x7f7d10669e76: call 0x7f7d1065e190
0x7f7d1065fa35: sar edx, 0x1f  reg(3, 7f7d0de856c2)  reg(7, 7f7d0de84050) 
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7f7d0de84050 0 0 7f7d0de856b8	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 4) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 4)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 4) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 10)  mem(7f7d0cbeecc0, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 4) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0cbeee43) 
memcpy: 7f7d0de84060 7f7d0de856b8 9 7f7d0de856b8	memcpy
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 4) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 10) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 0) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 9 7f7d0de856b8	dlsym@plt
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 5 7f7d0cbeecc0 0 0	select@plt
0x7f7d10669e7b: jmp 0x7f7d10669e95
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d10669e95: mov rax, rbx  reg(10, 7f7d0de84050)  reg(7, 7f7d0de84050) 
0x7f7d10669e98: pop rbx  reg(7, 7f7d0de84050) 
0x7f7d10669e99: pop rbp
0x7f7d10669e9a: pop r12  reg(15, 7f7d0de84e40) 
0x7f7d10669e9c: ret 
0x7f7d1065fa68: cdqe   reg(15, 7f7d0de84e40) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 1) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065fa83: setnle al  reg(27, 1) 
0x7f7d1066a385: lea rdi, ptr [rbp-0xb0]  reg(27, 1) 
0x7f7d1066a38c: mov rsi, qword ptr [r12]  reg(4, 2e302e302e373231) 
0x7f7d1066a390: call 0x7f7d1065f000
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 7f7d080008c0) 
_Z12TimeToStringB5cxx11l@plt: 7f7d0de84010 5cc5a8ab 9 312e302e302e3732	_Z12TimeToStringB5cxx11l@plt
0x7f7d1065f000: jmp qword ptr [rip+0x221b4a]
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
_Z12TimeToStringB5cxx11l: 7f7d0de84010 5cc5a8ab 9 312e302e302e3732	_Z12TimeToStringB5cxx11l
0x7f7d1066a223: push rbp
0x7f7d1066a224: mov rbp, rsp
0x7f7d1066a227: push r14  reg(17, 7f7d0de84970) 
0x7f7d1066a229: push rbx  reg(7, 7f7d0de84830) 
0x7f7d1066a22a: sub rsp, 0x70
0x7f7d1066a22e: mov rbx, rdi  reg(7, 7f7d0de84830)  reg(3, 7f7d0de84010) 
0x7f7d1066a231: mov qword ptr [rbp-0x78], rsi  reg(4, 5cc5a8ab)  mem(7f7d0de83f88, 7f7d0de84060) 
0x7f7d1066a235: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0de84050) 
0x7f7d1066a23e: mov qword ptr [rbp-0x18], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de83fe8, 7f7d10669e7b) 
0x7f7d1065fbce: test al, al  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00669e7b) 
0x7f7d1066a242: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066a244: lea rax, ptr [rbp-0x60]  reg(10, 0) 
0x7f7d1066a248: mov qword ptr [rbp-0x70], rax  reg(10, 7f7d0de83fa0)  mem(7f7d0de83f90, 20) 
0x7f7d1066a24c: mov qword ptr [rbp-0x68], 0x0  mem(7f7d0de83f98, 7f7d0fdf09b0) 
0x7f7d1066a254: mov byte ptr [rbp-0x60], 0x0  mem(7f7d0de83fa0, 0) 
0x7f7d1065fbd0: jz 0x7f7d1065fbec
0x7f7d1065fbd2: mov rdi, rbx  reg(3, 2)  reg(7, 7f7d080008c0) 
0x7f7d1066a258: lea rdi, ptr [rbp-0x78]  reg(3, 2)  reg(7, 7f7d080008c0) 
0x7f7d1066a25c: call 0x7f7d1065f0d0
0x7f7d1065fbd5: call 0x7f7d1065de40
localtime@plt: 7f7d0de83f88 5cc5a8ab 9 312e302e302e3732	localtime@plt
0x7f7d1065f0d0: jmp qword ptr [rip+0x221ae2]
TMsgSocket::WaitingData()@plt: 7f7d080008c0 7f7d0cbeecc0 1 0	_ZN10TMsgSocket11WaitingDataEv@plt
0x7f7d1065de40: jmp qword ptr [rip+0x22242a]
0x7f7d1065de46: push 0x4b 
0x7f7d1065de4b: jmp 0x7f7d1065d980
0x7f7d1066a261: test rax, rax  reg(10, 7f7d1006c4a0)  reg(10, 7f7d1006c4a0) 
0x7f7d1066a264: jz 0x7f7d1066a2d8
0x7f7d1066a266: lea rdi, ptr [rbp-0x50]  reg(3, 1c) 
0x7f7d1066a26a: mov r14, rdi  reg(17, 7f7d0de84970)  reg(3, 7f7d0de83fb0) 
0x7f7d1066a26d: mov rcx, rax  reg(9, 7f7d0fe2b620)  reg(10, 7f7d1006c4a0) 
0x7f7d1066a270: lea rdx, ptr [rip+0xc640]  reg(8, 5a) 
0x7f7d1066a277: mov esi, 0x32  reg(47, 3) 
0x7f7d1066a27c: call 0x7f7d1065f1a0
strftime@plt: 7f7d0de83fb0 32 7f7d106768b7 7f7d1006c4a0	strftime@plt
0x7f7d1065f1a0: jmp qword ptr [rip+0x221a7a]
TMsgSocket::WaitingData(): 7f7d080008c0 7f7d0cbeecc0 1 0	_ZN10TMsgSocket11WaitingDataEv
0x7f7d1065f77a: sub rsp, 0x18
0x7f7d1065f77e: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f7d1066a281: mov eax, 0x0  reg(10, 1) 
0x7f7d1066a286: mov rcx, 0xffffffffffffffff  reg(9, 2) 
0x7f7d1066a28d: mov qword ptr [rbp-0x80], r14  reg(17, 7f7d0de83fb0)  mem(7f7d0de83f80, 7f7d0de856b8) 
0x7f7d1066a291: mov rdi, r14  reg(3, 7f7d0de83fc3)  reg(17, 7f7d0de83fb0) 
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1065f787: mov qword ptr [rsp+0x8], rax  reg(3, 7f7d0de83fc3)  reg(17, 7f7d0de83fb0) 
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a296: not rcx
0x7f7d1065f78c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066a299: lea rdi, ptr [rbp-0x70]  mem(7f7d0cbeed50, 7f7d080008c0) 
0x7f7d1066a29d: lea r8, ptr [rcx-0x1]  reg(11, 2) 
0x7f7d1065f78e: mov qword ptr [rsp], 0x0  reg(9, 14)  reg(17, 7f7d0de83fb0) 
0x7f7d1066a2a1: mov rcx, r14  reg(9, 14)  reg(17, 7f7d0de83fb0) 
0x7f7d1066a2a4: mov rdx, qword ptr [rbp-0x68]  reg(8, 0) 
0x7f7d1066a2a8: mov esi, 0x0  reg(47, 7f7d0de83ed6) 
0x7f7d1066a2ad: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7f7d0de83f90 0 0 7f7d0de83fb0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
0x7f7d1065f796: mov rdx, rsp  reg(47, 7f7d0de83ed6) 
memcpy: 7f7d08002ca0 7f7d0de83fb0 13 7f7d0de83fb0	memcpy
0x7f7d1065f799: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d0de83fb0	dlsym@plt
0x7f7d1066a2b2: lea rax, ptr [rbx+0x10]  reg(10, 7f7d0de83f90) 
0x7f7d1066a2b6: mov qword ptr [rbx], rax  reg(10, 7f7d0de84020)  mem(7f7d0de84010, ffffffffffffffff) 
0x7f7d1066a2b9: mov rsi, qword ptr [rbp-0x70]  reg(4, 7f7d0de83fb0) 
0x7f7d1066a2bd: mov rdx, rsi  reg(8, 13)  reg(4, 7f7d08002ca0) 
0x7f7d1066a2c0: add rdx, qword ptr [rbp-0x68]  reg(8, 7f7d08002ca0) 
0x7f7d1066a2c4: sub rsp, 0x8
0x7f7d1066a2c8: push 0x0 
0x7f7d1066a2ca: mov rdi, rbx  reg(3, 7f7d0de83fa0)  reg(7, 7f7d0de84010) 
0x7f7d1066a2cd: call 0x7f7d1065e020
0x7f7d1065f79c: mov esi, 0x541b  reg(3, 7f7d0de83fa0)  reg(7, 7f7d0de84010) 
0x7f7d1065f7a1: call 0x7f7d1065dbd0
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0de84010 7f7d08002ca0 7f7d08002cb3 7f7d08002ca0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0de84010 7f7d08002ca0 7f7d08002cb3 7f7d08002ca0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0de84e40) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0de84010) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0de84e40)  reg(4, 7f7d08002ca0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0de84020) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de83f48, 7f7d0de83fb0) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d08002ca0)  reg(8, 7f7d08002cb3) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d08002ca0)  reg(4, 7f7d08002ca0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0de84010)  reg(8, 7f7d08002cb3) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d08002cb3)  reg(15, 7f7d08002ca0) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 13)  mem(7f7d0de83f40, 0) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 13) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d08002ca0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d08002cb3) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0de84010) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0de84010 7f7d0de83f40 0 7f7d08002ca0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d08002cd0)  mem(7f7d0de84010, 7f7d0de84020) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d08002cd0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 13)  mem(7f7d0de84020, 7f7d108f38a7) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 13) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 13)  reg(7, 13) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d08002cd0)  reg(7, 13) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d08002ce0)  reg(15, 7f7d08002ca0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d08002cd0 7f7d08002ca0 13 7f7d08000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d08002cd0 7f7d08002ca0 13 7f7d08000020	memcpy
memcpy: 4 541b 7f7d0cbeed50 0	ioctl@plt
ioctl: ffffffffffffffff 7f7d108f3d08 13 7f7d08000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d08002cd0) 
0x7f7d1065dbd0: jmp qword ptr [rip+0x222562]
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 13)  mem(7f7d0de84018, 7f7d108f3d08) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 13) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d08002ce3, 203210000000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 13) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 13) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d08002ca0) 
0x7f7d1065dbd6: push 0x24 
0x7f7d10670230: ret 
0x7f7d1066a2d2: add rsp, 0x10
0x7f7d1065dbdb: jmp 0x7f7d1065d980
0x7f7d1066a2d6: jmp 0x7f7d1066a2fb
0x7f7d1066a2fb: mov rdi, qword ptr [rbp-0x70]  reg(3, 7f7d08002cd0) 
0x7f7d1066a2ff: lea rax, ptr [rbp-0x60]  reg(10, 0) 
0x7f7d1066a303: cmp rdi, rax  reg(3, 7f7d08002ca0)  reg(10, 7f7d0de83fa0) 
0x7f7d1066a306: jz 0x7f7d1066a32c
0x7f7d1066a308: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002ca0 7f7d08002ca0 7f7d08002cd0 7f7d08002cd0	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066a30d: jmp 0x7f7d1066a32c
0x7f7d1066a32c: mov rax, rbx  reg(10, 0)  reg(7, 7f7d0de84010) 
0x7f7d1066a32f: mov rbx, qword ptr [rbp-0x18]  reg(7, 7f7d0de84010) 
0x7f7d1066a333: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1066a33c: jz 0x7f7d1066a343
0x7f7d1066a343: lea rsp, ptr [rbp-0x10]
0x7f7d1066a347: pop rbx  reg(7, 0) 
0x7f7d1066a348: pop r14  reg(17, 7f7d0de83fb0) 
0x7f7d1066a34a: pop rbp
0x7f7d1066a34b: ret 
0x7f7d1065f7a6: mov edx, 0x0  reg(54, 7f7d0cbeed50) 
0x7f7d1065f7ab: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f7ad: cmovz edx, dword ptr [rsp]  reg(54, 0) 
0x7f7d1065f7b1: cmp edx, 0x10000  reg(54, 1f) 
0x7f7d1065f7b7: mov eax, 0x10000  reg(56, 0) 
0x7f7d1065f7bc: cmovle eax, edx  reg(56, 10000)  reg(54, 1f) 
0x7f7d1065f7bf: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065f7c4: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065f7cd: jz 0x7f7d1065f7d4
0x7f7d1066a395: lea rdi, ptr [rbp-0x90]  reg(3, ffffffff) 
0x7f7d1066a39c: lea rax, ptr [rdi+0x10]  reg(10, 7f7d0de84010) 
0x7f7d1066a3a0: mov qword ptr [rbp-0x90], rax  reg(10, 7f7d0de84040)  mem(7f7d0de84030, 0) 
0x7f7d1066a3a7: mov rsi, qword ptr [rbp-0xb0]  reg(4, 7f7d08000030) 
0x7f7d1066a3ae: mov rdx, rsi  reg(8, 0)  reg(4, 7f7d08002cd0) 
0x7f7d1065f7d4: add rsp, 0x18
0x7f7d1066a3b1: add rdx, qword ptr [rbp-0xa8]  reg(8, 7f7d08002cd0) 
0x7f7d1066a3b8: sub rsp, 0x8
0x7f7d1066a3bc: push 0x0 
0x7f7d1066a3be: call 0x7f7d1065e020
0x7f7d1065f7d8: ret 
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0de84030 7f7d08002cd0 7f7d08002ce3 7f7d08002c00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0de84030 7f7d08002cd0 7f7d08002ce3 7f7d08002c00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0de84e40) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0de84830) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0de84e40)  reg(4, 7f7d08002cd0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0de84040) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de83fd8, 0) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d08002cd0)  reg(8, 7f7d08002ce3) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d1065fbda: test eax, eax  reg(4, 7f7d08002cd0) 1f) 
0x7f7d1065fbdc: jnz 0x7f7d1065fbec
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d08002cd0)  reg(4, 7f7d08002cd0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0de84830)  reg(8, 7f7d08002ce3) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d08002ce3)  reg(15, 7f7d08002cd0) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 13)  mem(7f7d0de83fd0, 7f7d0de84e40) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 13) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d08002cd0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d08002ce3) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0de84030) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0de84030 7f7d0de83fd0 0 7f7d08002c00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d08002cf0)  mem(7f7d0de84030, 7f7d0de84040) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d08002cf0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 13)  mem(7f7d0de84040, 7f7d0de84080) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 13) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 13)  reg(7, 13) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d08002cf0)  reg(7, 13) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d08002d00)  reg(15, 7f7d08002cd0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d08002cf0 7f7d08002cd0 13 7f7d08000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d08002cf0 7f7d08002cd0 13 7f7d08000020	memcpy
0x7f7d1065fbec: mov dword ptr [rbx+0x78], 0x0  reg(4, 7f7d08002d00)  reg(15, 7f7d08002cd0) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d08000020	dlsym@plt
0x7f7d1065fbf3: call 0x7f7d1065e9f0
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d08002cf0) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 13)  mem(7f7d0de84038, 7f7d0de84810) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 13) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d08002d03, 203010000000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 13) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 13) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d08002cd0) 
0x7f7d10670230: ret 
SysGetTick()@plt: 4 541b 1f 0	_Z10SysGetTickv@plt
0x7f7d1065e9f0: jmp qword ptr [rip+0x221e52]
0x7f7d1066a3c3: add rsp, 0x10
0x7f7d1066a3c7: mov rax, 0x7fffffffffffffff  reg(10, 0) 
0x7f7d1066a3d1: sub rax, qword ptr [rbp-0x88]  reg(10, 7fffffffffffffff) 
0x7f7d1066a3d8: cmp rax, 0x1  reg(10, 7fffffffffffffec) 
0x7f7d1066a3dc: jnbe 0x7f7d1066a3ea
0x7f7d1065e9f6: push 0x106 
0x7f7d1065e9fb: jmp 0x7f7d1065d980
0x7f7d1066a3ea: lea rdi, ptr [rbp-0x90]  reg(3, 7f7d08002cf0) 
0x7f7d1066a3f1: mov edx, 0x2  reg(54, 7f7d08002cf0) 
0x7f7d1066a3f6: lea rsi, ptr [rip+0xc4cc]  reg(4, 7f7d08002cd0) 
0x7f7d1066a3fd: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0de84030 7f7d106768c9 2 7f7d08002cf0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d08002ca0 7f7d08002cf0 13 7f7d106768c9	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d106768c9	dlsym@plt
memcpy: 7f7d08002cb3 7f7d106768c9 2 7f7d106768c9	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 2 7f7d106768c9	dlsym@plt
SysGetTick(): 4 541b 1f 0	_Z10SysGetTickv
0x7f7d106608c1: sub rsp, 0x28
0x7f7d106608c5: mov rax, qword ptr fs:[0x28]  reg(10, 1f) 
0x7f7d1066a402: lea rdi, ptr [rbp-0x50]  reg(3, ffffffff) 
0x7f7d106608ce: mov qword ptr [rsp+0x18], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed58, 7f7d10b2b548) 
0x7f7d1066a406: lea rdx, ptr [rbp-0x70]  reg(8, 0) 
0x7f7d1066a40a: lea rsi, ptr [rbp-0x90]  reg(4, 7f7d08000028) 
0x7f7d1066a411: call 0x7f7d1065de70
0x7f7d106608d3: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d106608d5: mov rsi, rsp  reg(4, 541b) 
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt: 7f7d0de84070 7f7d0de84030 7f7d0de84050 7f7d08005b00	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_@plt
0x7f7d1065de70: jmp qword ptr [rip+0x222412]
0x7f7d106608d8: mov edi, 0x1  reg(45, 4) 
0x7f7d106608dd: call 0x7f7d1065f210
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&): 7f7d0de84070 7f7d0de84030 7f7d0de84050 7f7d08005b00	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
0x7f7d10670231: push r12  reg(15, 7f7d0de84e40) 
0x7f7d10670233: push rbp
0x7f7d10670234: push rbx  reg(7, 7f7d0de84830) 
clock_gettime@plt: 1 7f7d0cbeed40 1f 0	clock_gettime@plt
0x7f7d10670235: mov rbx, rdi  reg(7, 7f7d0de84830)  reg(3, 7f7d0de84070) 
0x7f7d10670238: mov rbp, rdx
0x7f7d1067023b: lea r12, ptr [rdi+0x10]  reg(15, 7f7d0de84e40) 
0x7f7d1067023f: mov qword ptr [rdi], r12  reg(15, 7f7d0de84080)  mem(7f7d0de84070, 0) 
0x7f7d10670242: mov rax, qword ptr [rsi]  reg(10, 7f7d0de84030) 
0x7f7d10670245: mov rdx, rax  reg(8, 7f7d0de84050)  reg(10, 7f7d08002ca0) 
0x7f7d10670248: add rdx, qword ptr [rsi+0x8]  reg(8, 7f7d08002ca0) 
0x7f7d1065f210: jmp qword ptr [rip+0x221a42]
0x7f7d1067024c: sub rsp, 0x8
0x7f7d10670250: push 0x0 
0x7f7d1065f216: push 0x188  reg(4, 7f7d0de84030)  reg(10, 7f7d08002ca0) 
0x7f7d10670252: mov rsi, rax  reg(4, 7f7d0de84030)  reg(10, 7f7d08002ca0) 
0x7f7d10670255: call 0x7f7d1065e020
0x7f7d1065f21b: jmp 0x7f7d1065d980
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0de84070 7f7d08002ca0 7f7d08002cb5 7f7d08005b00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0de84070 7f7d08002ca0 7f7d08002cb5 7f7d08005b00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0de84080) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0de84070) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0de84080)  reg(4, 7f7d08002ca0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d08002ca0) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de83fb8, 7f7d0de84030) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d08002ca0)  reg(8, 7f7d08002cb5) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d08002ca0)  reg(4, 7f7d08002ca0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0de84070)  reg(8, 7f7d08002cb5) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d08002cb5)  reg(15, 7f7d08002ca0) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 15)  mem(7f7d0de83fb0, 7f7d0de84030) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 15) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d08002ca0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d08002cb5) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0de84070) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0de84070 7f7d0de83fb0 0 7f7d08005b00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d08002cf0)  mem(7f7d0de84070, 7f7d0de84080) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d08002cf0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 15)  mem(7f7d0de84080, 0) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 15) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 15)  reg(7, 15) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d08002cf0)  reg(7, 15) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d08000020)  reg(15, 7f7d08002ca0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d08002cf0 7f7d08002ca0 15 7f7d08000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d08002cf0 7f7d08002ca0 15 7f7d08000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 15 7f7d08000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d08002cf0) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 15)  mem(7f7d0de84078, 7f7d0fdf09b0) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 15) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d08002d05, 20301000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 15) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 15) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d08002ca0) 
0x7f7d10670230: ret 
0x7f7d1067025a: add rsp, 0x10
0x7f7d106608e2: imul esi, dword ptr [rsp], 0x3e8  reg(8, 7f7d08002cf0) 
0x7f7d106608e9: mov rcx, qword ptr [rsp+0x8]  reg(9, 19) 
0x7f7d1067025e: mov rdx, qword ptr [rbp+0x8]  reg(9, 19) 
0x7f7d10670262: mov rsi, qword ptr [rbp]  reg(4, 7f7d08002ca0) 
0x7f7d10670266: mov rdi, rbx  reg(3, 7f7d08002cf0)  reg(7, 7f7d0de84070) 
0x7f7d10670269: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0de84070 7f7d0de84060 9 7f7d08002cf0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
0x7f7d106608ee: mov rdx, 0x431bde82d7b634db  reg(3, 7f7d08002cf0)  reg(7, 7f7d0de84070) 
memcpy: 7f7d08002d10 7f7d08002cf0 15 7f7d0de84060	memcpy
0x7f7d106608f8: mov rax, rcx  reg(10, 0)  reg(9, 3a54b0e3) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 15 7f7d0de84060	dlsym@plt
memcpy: 7f7d08002d25 7f7d0de84060 9 7f7d0de84060	memcpy
0x7f7d106608fb: imul rdx  reg(8, 431bde82d7b634db)  reg(10, 3a54b0e3) 
0x7f7d106608fe: sar rdx, 0x12  reg(8, f4a83ed) 
0x7f7d10660902: sar rcx, 0x3f  reg(9, 3a54b0e3) 
0x7f7d10660906: sub rdx, rcx  reg(8, 3d2)  reg(9, 0) 
0x7f7d10660909: lea eax, ptr [rsi+rdx*1]  reg(56, 527e521580c36e31) 
0x7f7d1066090c: mov rdi, qword ptr [rsp+0x18]  reg(3, 1) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 9 7f7d0de84060	dlsym@plt
0x7f7d1067026e: jmp 0x7f7d10670288
0x7f7d10660911: xor rdi, qword ptr fs:[0x28]  reg(3, f4f60b3748f98f00) 
0x7f7d1066091a: jz 0x7f7d10660921
0x7f7d10670288: mov rax, rbx  reg(10, 7f7d0de84070)  reg(7, 7f7d0de84070) 
0x7f7d1067028b: pop rbx  reg(7, 7f7d0de84070) 
0x7f7d1067028c: pop rbp
0x7f7d1067028d: pop r12  reg(15, 7f7d0de84080) 
0x7f7d1067028f: ret 
0x7f7d10660921: add rsp, 0x28
0x7f7d10660925: ret 
0x7f7d1066a416: jmp 0x7f7d1066a439
0x7f7d1065fbf8: mov dword ptr [rsp+0x4], eax  reg(56, 980868ea)  mem(7f7d0cbeed74, 48f98f0000007f7d) 
0x7f7d1065fbfc: lea r13, ptr [rsp+0x4]  reg(16, 7f7d0cbeee43) 
0x7f7d1065fc01: mov rdi, rbx  reg(3, 0)  reg(7, 7f7d080008c0) 
0x7f7d1065fc04: call 0x7f7d1065de40
TMsgSocket::WaitingData()@plt: 7f7d080008c0 98086518 3d2 0	_ZN10TMsgSocket11WaitingDataEv@plt
0x7f7d1065de40: jmp qword ptr [rip+0x22242a]
0x7f7d1066a439: lea rax, ptr [rbx+0x10]  reg(10, 7f7d0de84070) 
0x7f7d1066a43d: mov r14, rax  reg(17, 7f7d0de84970)  reg(10, 7f7d0de84840) 
0x7f7d1066a440: mov qword ptr [rbx], rax  reg(10, 7f7d0de84840)  mem(7f7d0de84830, 0) 
0x7f7d1066a443: mov rsi, qword ptr [rbp-0x50]  reg(4, 7f7d08000028) 
0x7f7d1066a447: mov rdx, rsi  reg(8, 0)  reg(4, 7f7d08002d10) 
0x7f7d1066a44a: add rdx, qword ptr [rbp-0x48]  reg(8, 7f7d08002d10) 
0x7f7d1066a44e: sub rsp, 0x8
0x7f7d1066a452: push 0x0 
0x7f7d1066a454: mov rdi, rbx  reg(3, ffffffff)  reg(7, 7f7d0de84830) 
0x7f7d1066a457: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0de84830 7f7d08002d10 7f7d08002d2e 312e302e302e3700	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0de84830 7f7d08002d10 7f7d08002d2e 312e302e302e3700	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0de84e40) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0de84830) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0de84e40)  reg(4, 7f7d08002d10) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0de84840) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de83fd8, 7f7d0de84070) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d08002d10)  reg(8, 7f7d08002d2e) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d08002d10)  reg(4, 7f7d08002d10) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0de84830)  reg(8, 7f7d08002d2e) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d08002d2e)  reg(15, 7f7d08002d10) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 1e)  mem(7f7d0de83fd0, 7f7d0de84080) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 1e) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d08002d10) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d08002d2e) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0de84830) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::alloc: 7f7d080008c0 98086518 3d2 0	_ZN10TMsgSocket11WaitingDataEv
TMsgSocket::WaitingData(): 7f7d0de84830 7f7d0de83fd0 0 312e302e302e3700	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d08002d50)  mem(7f7d0de84830, 7f7d0de84840) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d08002d50) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 1e)  mem(7f7d0de84840, 0) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 1e) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 1e)  reg(7, 1e) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d08002d50)  reg(7, 1e) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d08002d70)  reg(15, 7f7d08002d10) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d08002d50 7f7d08002d10 1e 7f7d08000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d08002d50 7f7d08002d10 1e 7f7d08000020	memcpy
0x7f7d1065f77a: sub rsp, 0x18
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1e 7f7d08000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d08002d50) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 1e)  mem(7f7d0de84838, 0) 
0x7f7d1065f77e: mov rax, qword ptr fs:[0x28]  reg(10, 1e)  mem(7f7d0de84838, 0) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 1e) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f, f4f60b3748f) 
0x7f7d1065f787: mov qword ptr [rsp+0x8], rax  mem(7f, f4f60b3748f) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 1e) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 1e) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d08002d10) 
0x7f7d10670230: ret 
0x7f7d1065f78c: xor eax, eax  reg(15, 7f7d08002d10) 
0x7f7d1065f78e: mov qword ptr [rsp], 0x0  mem(7f7d0cbeed50, 7f7d080008c0) 
0x7f7d1065f796: mov rdx, rsp  reg(8, 3d2) 
0x7f7d1065f799: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f79c: mov esi, 0x541b  reg(47, 98086518) 
0x7f7d1066a45c: add rsp, 0x10
0x7f7d1065f7a1: call 0x7f7d1065dbd0
0x7f7d1066a460: mov rax, 0x7fffffffffffffff  reg(10, 0) 
0x7f7d1066a46a: sub rax, qword ptr [rbx+0x8]  reg(10, 7fffffffffffffff) 
0x7f7d1066a46e: cmp rax, 0x1  reg(10, 7fffffffffffffe1) 
0x7f7d1066a472: jnbe 0x7f7d1066a480
ioctl@plt: 4 541b 7f7d0cbeed50 0	ioctl@plt
0x7f7d1065dbd0: jmp qword ptr [rip+0x222562]
0x7f7d1066a480: mov edx, 0x2  reg(54, 7f7d08002d50) 
0x7f7d1066a485: lea rsi, ptr [rip+0xc440]  reg(4, 7f7d08002d10) 
0x7f7d1066a48c: mov rdi, rbx  reg(3, 7f7d08002d50)  reg(7, 7f7d0de84830) 
0x7f7d1066a48f: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0de84830 7f7d106768cc 2 7f7d08002d50	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d08002d80 7f7d08002d50 1e 7f7d106768cc	memcpy
0x7f7d1065f7a6: mov edx, 0x0  reg(54, 7f7d0cbeed50) 
0x7f7d1065f7ab: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f7ad: cmovz edx, dword ptr [rsp]  reg(54, 0) 
0x7f7d1065f7b1: cmp edx, 0x10000  reg(54, 1f) 
0x7f7d1065f7b7: mov eax, 0x10000  reg(56, 0) 
0x7f7d1065f7bc: cmovle eax, edx  reg(56, 10000)  reg(54, 1f) 
0x7f7d1065f7bf: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1e 7f7d106768cc	dlsym@plt
memcpy: 7f7d08002d9e 7f7d106768cc 2 7f7d106768cc	memcpy
0x7f7d1065f7c4: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065f7cd: jz 0x7f7d1065f7d4
0x7f7d1065f7d4: add rsp, 0x18
TMsgSocket::WaitingData(): ffffffffffffffff 7f7d108f3d08 2 7f7d106768cc	dlsym@plt
0x7f7d1065f7d8: ret 
0x7f7d1066a494: mov rdi, qword ptr [rbp-0x50]  reg(3, ffffffff) 
0x7f7d1066a498: lea rax, ptr [rbp-0x40]  reg(10, 7f7d0de84830) 
0x7f7d1066a49c: cmp rdi, rax  reg(3, 7f7d08002d10)  reg(10, 7f7d0de84080) 
0x7f7d1066a49f: jnz 0x7f7d1066a4bb
0x7f7d1065fc09: cmp eax, ebp  reg(56, 1f) 
0x7f7d1065fc0b: jnl 0x7f7d1065fc2a
0x7f7d1066a4bb: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002d10 7f7d08000030 0 7f7d08002000	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1065fc2a: mov eax, dword ptr [rbx+0x78]  reg(56, 1f) 
0x7f7d1065fc2d: cmp eax, 0x68  reg(56, 0) 
0x7f7d1065fc30: jnz 0x7f7d1065fc36
0x7f7d1066a4c0: mov rdi, qword ptr [rbp-0x90]  reg(3, ffffffff) 
0x7f7d1066a4c7: lea rax, ptr [rbp-0x80]  reg(10, 0) 
0x7f7d1066a4cb: cmp rdi, rax  reg(3, 7f7d08002ca0)  reg(10, 7f7d0de84040) 
0x7f7d1066a4ce: jz 0x7f7d1066a4d5
0x7f7d1066a4d0: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002ca0 7f7d08000038 0 7f7d08002000	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1065fc36: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065fc3b: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065fc44: jz 0x7f7d1065fc5c
0x7f7d1066a4d5: mov rdi, qword ptr [rbp-0xb0]  reg(3, ffffffff) 
0x7f7d1066a4dc: lea rax, ptr [rbp-0xa0]  reg(10, 7f7d08002d40) 
0x7f7d1066a4e3: cmp rdi, rax  reg(3, 7f7d08002cd0)  reg(10, 7f7d0de84020) 
0x7f7d1066a4e6: jz 0x7f7d1066a4ed
0x7f7d1066a4e8: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002cd0 7f7d08000030 7f7d08002d40 7f7d08002000	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1065fc5c: add rsp, 0x18
0x7f7d1065fc60: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fc61: pop rbp
0x7f7d1065fc62: pop r12  reg(15, bb8) 
0x7f7d1066a4ed: mov rdi, qword ptr [rbp-0x70]  reg(3, ffffffff) 
0x7f7d1066a4f1: lea rax, ptr [rbp-0x60]  reg(10, 7f7d08002ce0) 
0x7f7d1066a4f5: cmp rdi, rax  reg(3, 7f7d0de84060)  reg(10, 7f7d0de84060) 
0x7f7d1066a4f8: jz 0x7f7d1066a629
0x7f7d1066a629: mov rax, rbx  reg(10, 7f7d0de84060)  reg(7, 7f7d0de84830) 
0x7f7d1066a62c: mov rcx, qword ptr [rbp-0x28]  reg(9, 7f7d08002000) 
0x7f7d1066a630: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1066a639: jz 0x7f7d1066a640
0x7f7d1066a640: lea rsp, ptr [rbp-0x18]
0x7f7d1066a644: pop rbx  reg(7, 7f7d0de84830) 
0x7f7d1066a645: pop r12  reg(15, 7f7d0de84e40) 
0x7f7d1066a647: pop r14  reg(17, 7f7d0de84840) 
0x7f7d1066a649: pop rbp
0x7f7d1066a64a: ret 
0x7f7d1066e04d: lea rdx, ptr [rbp-0x150]  reg(8, 7f7d08002ce0) 
0x7f7d1066e054: lea rsi, ptr [rbp-0x130]  reg(4, 7f7d08000028) 
0x7f7d1066e05b: mov rdi, r14  reg(3, 7f7d0de84060)  reg(17, 7f7d0de84970) 
0x7f7d1066e05e: call 0x7f7d1065de70
0x7f7d1065fc64: pop r13  reg(3, 7f7d0de84060)  reg(17, 7f7d0de84970) 
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt: 7f7d0de84970 7f7d0de84830 7f7d0de84810 0	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_@plt
0x7f7d1065de70: jmp qword ptr [rip+0x222412]
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&): 7f7d0de84970 7f7d0de84830 7f7d0de84810 0	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
0x7f7d10670231: push r12  reg(15, 7f7d0de849c0) 
0x7f7d10670233: push rbp
0x7f7d10670234: push rbx  reg(7, 7f7d0de84e40) 
0x7f7d10670235: mov rbx, rdi  reg(7, 7f7d0de84e40)  reg(3, 7f7d0de84970) 
0x7f7d10670238: mov rbp, rdx
0x7f7d1067023b: lea r12, ptr [rdi+0x10]  reg(15, 7f7d0de849c0) 
0x7f7d1067023f: mov qword ptr [rdi], r12  reg(15, 7f7d0de84980)  mem(7f7d0de84970, 0) 
0x7f7d10670242: mov rax, qword ptr [rsi]  reg(10, 7f7d0de84830) 
0x7f7d10670245: mov rdx, rax  reg(8, 7f7d0de84810)  reg(10, 7f7d08002d80) 
0x7f7d10670248: add rdx, qword ptr [rsi+0x8]  reg(8, 7f7d08002d80) 
0x7f7d1067024c: sub rsp, 0x8
0x7f7d10670250: push 0x0 
0x7f7d10670252: mov rsi, rax  reg(4, 7f7d0de84830)  reg(10, 7f7d08002d80) 
0x7f7d10670255: call 0x7f7d1065e020
0x7f7d1065fc66: ret 
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0de84970 7f7d08002d80 7f7d08002da0 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0de84970 7f7d08002d80 7f7d08002da0 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0de84980) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0de84970) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0de84980)  reg(4, 7f7d08002d80) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d08002d80) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84078, 1e) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d08002d80)  reg(8, 7f7d08002da0) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d08002d80)  reg(4, 7f7d08002d80) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0de84970)  reg(8, 7f7d08002da0) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d08002da0)  reg(15, 7f7d08002d80) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 20)  mem(7f7d0de84070, 7f7d08002d10) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 20) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d08002d80) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d08002da0) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0de84970) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0de84970 7f7d0de84070 0 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d08002ca0)  mem(7f7d0de84970, 7f7d0de84980) 
0x7f7d106602a2: mov eax, dword ptr [rbx+0x78]  reg(10, 7f7d08002ca0)  mem(7f7d0de84970, 7f7d0de84980) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d08002ca0) 
0x7f7d106602a5: test eax, eax  reg(56, 2))  mem(7, 0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(56, 2))  mem(7, 0) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 1) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 20) 
0x7f7d106602a7: jnz 0x7f7d106602da
0x7f7d106602a9: movsxd rdx, ebp  reg(8, 1f) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106602ac: mov edi, dword ptr [rbx+0x18]  reg(7, 20)  reg(7, 20) 
0x7f7d106701f3: test rbx, rbx  reg(7, 20)  reg(7, 20) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106602af: mov ecx, 0x4000  reg(55, 0) 
0x7f7d106602b4: mov rsi, r12  reg(4, 541b)  reg(15, 7f7d08000a44) 
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d08002ca0)  reg(7, 20) 
0x7f7d106602b7: call 0x7f7d1065df50
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d08000028)  reg(15, 7f7d08002d80) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d08002ca0 7f7d08002d80 20 7f7d08000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
recv: 7f7d08002ca0 7f7d08002d80 20 7f7d08000020	memcpy
recv@plt: 4 7f7d08000a44 7 4000	recv@plt
dlsym@plt: ffffffffffffffff 7f7d108f3d08 20 7f7d08000020	dlsym@plt
0x7f7d1065df50: jmp qword ptr [rip+0x2223a2]
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d08002ca0) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 20)  mem(7f7d0de84978, 0) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 20) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d08002cc0, 0) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 20) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 20) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d08002d80) 
0x7f7d10670230: ret 
0x7f7d1067025a: add rsp, 0x10
0x7f7d1067025e: mov rdx, qword ptr [rbp+0x8]  reg(8, 7f7d08002ca0) 
0x7f7d10670262: mov rsi, qword ptr [rbp]  reg(4, 7f7d08002d80) 
0x7f7d10670266: mov rdi, rbx  reg(3, 7f7d08002ca0)  reg(7, 7f7d0de84970) 
0x7f7d10670269: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0de84970 7f7d0de84820 c 7f7d08002ca0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d08002dd0 7f7d08002ca0 20 7f7d0de84820	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 20 7f7d0de84820	dlsym@plt
memcpy: 7f7d08002df0 7f7d0de84820 c 7f7d0de84820	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 c 7f7d0de84820	dlsym@plt
0x7f7d1067026e: jmp 0x7f7d10670288
0x7f7d1065df56: push 0x5c  reg(10, 7f7d0de84970)  reg(7, 7f7d0de84970) 
0x7f7d10670288: mov rax, rbx  reg(10, 7f7d0de84970)  reg(7, 7f7d0de84970) 
0x7f7d1067028b: pop rbx  reg(7, 7f7d0de84970) 
0x7f7d1065df5b: jmp 0x7f7d1065d980
0x7f7d1067028c: pop rbp
0x7f7d1067028d: pop r12  reg(15, 7f7d0de84980) 
0x7f7d1067028f: ret 
0x7f7d1066e063: mov rdi, qword ptr [rbp-0x130]  reg(3, ffffffff) 
0x7f7d1066e06a: lea rax, ptr [rbp-0x120]  reg(10, 7f7d0de84970) 
0x7f7d1066e071: cmp rdi, rax  reg(3, 7f7d08002d80)  reg(10, 7f7d0de84840) 
0x7f7d1066e074: jz 0x7f7d1066e07b
0x7f7d1066e076: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002d80 7f7d08000030 7f7d08002d40 6465646461207400	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
operator delete(void*)@plt: 4 7f7d08000a44 7 4000	recv
dlsym@plt: ffffffffffffffff 7f7d108f3dc2 7 4000	dlsym@plt
0x7f7d1066e07b: mov rdi, qword ptr [rbp-0x150]  reg(3, ffffffff) 
0x7f7d1066e082: lea rax, ptr [rbp-0x140]  reg(10, 0) 
0x7f7d1066e089: cmp rdi, rax  reg(3, 7f7d0de84820)  reg(10, 7f7d0de84820) 
0x7f7d1066e08c: jz 0x7f7d1066e1a0
0x7f7d1066e1a0: mov rdi, qword ptr [rbp-0x890]  reg(3, 7f7d0de84820) 
0x7f7d1066e1a7: lea rax, ptr [rbp-0x880]  reg(10, 7f7d0de84820) 
0x7f7d1066e1ae: cmp rdi, rax  reg(3, 7f7d0de840e0)  reg(10, 7f7d0de840e0) 
0x7f7d1066e1b1: jz 0x7f7d1066e556
0x7f7d1066e556: mov rax, r14  reg(10, 7f7d0de840e0)  reg(17, 7f7d0de84970) 
0x7f7d1066e559: mov rcx, qword ptr [rbp-0x28]  reg(9, 6465646461207400) 
0x7f7d1066e55d: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1066e566: jz 0x7f7d1066e56d
0x7f7d1066e56d: lea rsp, ptr [rbp-0x18]
0x7f7d1066e571: pop rbx  reg(7, 7f7d0de84e40) 
0x7f7d1066e572: pop r12  reg(15, 7f7d0de849c0) 
0x7f7d1066e574: pop r14  reg(17, 7f7d0de84970) 
0x7f7d1066e576: pop rbp
0x7f7d1066e577: ret 
0x7f7d10675fef: mov rbp, qword ptr [rsp]
0x7f7d10675ff3: mov rdx, rbx  reg(8, 0)  reg(7, 400) 
0x7f7d10675ff6: mov rsi, rbp  reg(4, 7f7d08000040) 
0x7f7d10675ff9: mov rdi, r12  reg(3, 7f7d0de840e0)  reg(15, 7f7d0de849c0) 
0x7f7d10675ffc: call 0x7f7d1065ee30
strncpy@plt: 7f7d0de849c0 7f7d08002dd0 400 0	strncpy@plt
0x7f7d1065ee30: jmp qword ptr [rip+0x221c32]
0x7f7d10676001: lea rax, ptr [rsp+0x10]  reg(10, 7f7d0de849c0) 
0x7f7d10676006: cmp rbp, rax
0x7f7d10676009: jz 0x7f7d10676013
0x7f7d1067600b: mov rdi, rbp  reg(3, 7f7d0de84dc0) 
0x7f7d1067600e: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002dd0 d 0 7f7d0fd49cf0	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d10676013: mov eax, 0x0  reg(56, 7f7d08002d70) 
0x7f7d10676018: mov rcx, qword ptr [rsp+0x28]  reg(9, 7f7d0fd49c00) 
0x7f7d1067601d: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d10676026: jz 0x7f7d10676043
0x7f7d10676043: add rsp, 0x30
0x7f7d10676047: pop rbx  reg(7, 400) 
0x7f7d10676048: pop rbp
0x7f7d10676049: pop r12  reg(15, 7f7d0de849c0) 
0x7f7d1067604b: ret 
0x404343: lea rax, ptr [rbx+0x10]  reg(10, 0) 
0x404347: mov qword ptr [rbx], rax  reg(10, 7f7d0de84e00)  mem(7f7d0de84df0, 0) 
0x40434a: mov eax, 0x0  reg(56, 7f7d0de84e00) 
0x40434f: mov rcx, 0xffffffffffffffff  reg(9, 0) 
0x404356: mov rdi, rsp  reg(3, ffffffff) 
fprintf@plt: 7f7d10068540 7f7d108f3dc8 4 7f7d08000a44	fprintf@plt
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x40435b: not rcx
0x40435e: lea rdx, ptr [rsp+rcx*1-0x1]  reg(8, 7f7d08002d70) 
0x404363: sub rsp, 0x8
0x404367: push 0x0 
0x404369: mov rsi, rbp  reg(4, 7f7d08000040) 
0x40436c: mov rdi, rbx  reg(3, 7f7d0de849ed)  reg(7, 7f7d0de84df0) 
0x40436f: call 0x4044b4
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag): 7f7d0de84df0 7f7d0de849c0 7f7d0de849ec 2d	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
0x4044b4: push r12  reg(15, 8) 
0x4044b6: push rbp
0x4044b7: push rbx  reg(7, 7f7d0de84df0) 
0x4044b8: sub rsp, 0x10
0x4044bc: mov rbp, rdi
0x4044bf: mov r12, rsi  reg(15, 8)  reg(4, 7f7d0de849c0) 
0x4044c2: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x4044cb: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84988, 0) 
0x4044d0: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x4044d2: cmp rsi, rdx  reg(4, 7f7d0de849c0)  reg(8, 7f7d0de849ec) 
0x4044d5: jz 0x4044e6
0x4044d7: test rsi, rsi  reg(4, 7f7d0de849c0)  reg(4, 7f7d0de849c0) 
0x4044da: jnz 0x4044e6
0x4044e6: mov rbx, rdx  reg(7, 7f7d0de84df0)  reg(8, 7f7d0de849ec) 
0x4044e9: sub rbx, r12  reg(7, 7f7d0de849ec)  reg(15, 7f7d0de849c0) 
0x4044ec: mov qword ptr [rsp], rbx  reg(7, 2c)  mem(7f7d0de84980, 40) 
0x4044f0: cmp rbx, 0xf  reg(7, 2c) 
0x4044f4: jbe 0x404512
0x4044f6: mov edx, 0x0  reg(54, 7f7d0de849ec) 
0x4044fb: mov rsi, rsp  reg(4, 7f7d0de849c0) 
0x4044fe: mov rdi, rbp  reg(3, 7f7d0de84df0) 
0x404501: call 0x403100
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0de84df0 7f7d0de84980 0 2d	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x403100: jmp qword ptr [rip+0x2032ca]
0x404506: mov qword ptr [rbp], rax  reg(10, 7f7d08002d10)  mem(7f7d0de84df0, 7f7d0de84e00) 
0x40450a: mov rax, qword ptr [rsp]  reg(10, 7f7d08002d10) 
0x40450e: mov qword ptr [rbp+0x10], rax  reg(10, 2c)  mem(7f7d0de84e00, 0) 
0x404512: mov rdi, qword ptr [rbp]  reg(3, 2) 
0x404516: cmp rbx, 0x1  reg(7, 2c) 
0x40451a: jnz 0x404525
0x404525: test rbx, rbx  reg(7, 2c)  reg(7, 2c) 
0x404528: jz 0x404535
0x40452a: mov rdx, rbx  reg(8, 7f7d08002d10)  reg(7, 2c) 
0x40452d: mov rsi, r12  reg(4, 7f7d08000030)  reg(15, 7f7d0de849c0) 
0x404530: call 0x402c30
memcpy@plt: 7f7d08002d10 7f7d0de849c0 2c 7f7d08000020	memcpy@plt
0x402c30: jmp qword ptr [rip+0x203532]
memcpy: 7f7d08002d10 7f7d0de849c0 2c 7f7d08000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 2c 7f7d08000020	dlsym@plt
0x404535: mov rax, qword ptr [rsp]  reg(10, 7f7d08002d10) 
0x404539: mov qword ptr [rbp+0x8], rax  reg(10, 2c)  mem(7f7d0de84df8, 0) 
0x40453d: mov rdx, qword ptr [rbp]  reg(8, 2c) 
0x404541: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d08002d3c, 8002d9000000000) 
0x404545: mov rax, qword ptr [rsp+0x8]  reg(10, 2c) 
0x40454a: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x404553: jz 0x40455a
0x40455a: add rsp, 0x10
0x40455e: pop rbx  reg(7, 2c) 
0x40455f: pop rbp
0x404560: pop r12  reg(15, 7f7d0de849c0) 
0x404562: ret 
0x404374: add rsp, 0x10
0x404378: mov rsi, qword ptr [rsp+0x408]  reg(4, 7f7d0de849c0) 
0x404380: xor rsi, qword ptr fs:[0x28]  reg(4, f4f60b3748f98f00) 
0x404389: jz 0x404390
0x404390: mov rax, rbx  reg(10, 0)  reg(7, 7f7d0de84df0) 
0x404393: add rsp, 0x418
0x40439a: pop rbx  reg(7, 7f7d0de84df0) 
0x7f7d106602bc: test eax, eax  reg(7, 7f7d0de84df0) 
0x7f7d106602be: jnz 0x7f7d106602c9
0x40439b: pop rbp
0x40439c: ret 
0x403343: mov rdi, qword ptr [rsp]  reg(3, 7f7d08002d10) 
0x403347: call 0x402f90
puts@plt: 7f7d08002d10 0 7f7d08002d10 7f7d08002d10	puts@plt
0x402f90: jmp qword ptr [rip+0x203382]
0x7f7d106602c9: test eax, eax  reg(56, 7)  reg(56, 7) 
0x7f7d106602cb: jns 0x7f7d106602e7
0x40334c: mov rdi, qword ptr [rsp]  reg(3, 2) 
0x403350: lea rax, ptr [rsp+0x10]  reg(10, 2d) 
0x403355: cmp rdi, rax  reg(3, 7f7d08002d10)  reg(10, 7f7d0de84e00) 
0x403358: jz 0x40337f
0x40335a: call 0x402d10
operator delete(void*)@plt: 7f7d08002d10 201d9d0 7f7d10069780 fbad2a84	_ZdlPv@plt
0x402d10: jmp qword ptr [rip+0x2034c2]
0x7f7d106602e7: mov eax, dword ptr [rbx+0x78]  reg(56, 7) 
0x40335f: jmp 0x40337f
0x40337f: mov rax, qword ptr [rsp+0x28]  reg(10, 0) 
0x403384: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x40338d: jz 0x403394
0x403394: add rsp, 0x30
0x403398: pop rbx  reg(7, 200dc40) 
0x403399: ret 
0x7f7d10660c53: test r15d, r15d  reg(82, 8)  reg(82, 8) 
0x7f7d10660c56: jz 0x7f7d10660c66
0x7f7d10660c58: lea rsi, ptr [rsp+0x10]  reg(4, 7f7d08000038) 
0x7f7d10660c5d: mov rdi, qword ptr [rbx+0x38]  reg(3, ffffffff) 
0x7f7d10660c61: call 0x7f7d1065e1a0
TMsgEventQueue::Insert(void*)@plt: 2013d90 7f7d0de84e40 0 fbad2a00	_ZN14TMsgEventQueue6InsertEPv@plt
0x7f7d1065e1a0: jmp qword ptr [rip+0x22227a]
0x7f7d106602ea: cmp eax, 0x68  reg(3, ffffffff) 
0x7f7d106602ed: jnz 0x7f7d106602f8
TMsgEventQueue::Insert(void*): 2013d90 7f7d0de84e40 0 fbad2a00	_ZN14TMsgEventQueue6InsertEPv
0x7f7d10660b36: push rbp
0x7f7d10660b37: push rbx  reg(7, 200dc40) 
0x7f7d10660b38: sub rsp, 0x8
0x7f7d10660b3c: mov rbx, rdi  reg(7, 200dc40)  reg(3, 2013d90) 
0x7f7d10660b3f: mov rbp, rsi
0x7f7d10660b42: call 0x7f7d1065dfb0
0x7f7d106602f8: pop rbx  reg(7, 7f7d080008c0) 
TMsgEventQueue::Full()@plt: 2013d90 7f7d0de84e40 0 fbad2a00	_ZN14TMsgEventQueue4FullEv@plt
0x7f7d1065dfb0: jmp qword ptr [rip+0x222372]
0x7f7d106602f9: pop rbp
0x7f7d106602fa: pop r12  reg(15, 7f7d08000a44) 
0x7f7d106602fc: ret 
TMsgEventQueue::Full(): 2013d90 7f7d0de84e40 0 fbad2a00	_ZN14TMsgEventQueue4FullEv
0x7f7d10660b16: mov edx, dword ptr [rdi+0x4]  reg(54, 0) 
0x7f7d10660b19: mov eax, dword ptr [rdi]  reg(56, 0) 
0x7f7d10660b1b: lea ecx, ptr [rax+0x1]  reg(55, fbad2a00) 
0x7f7d10660b1e: cmp edx, ecx  reg(54, 0)  reg(55, 2) 
0x7f7d10660b20: jz 0x7f7d10660b30
0x7f7d10660b22: cmp dword ptr [rdi+0x8], eax  reg(56, 1)  mem(2013d98, 5dc000005db) 
0x7f7d10660b25: setz cl  reg(30, 2) 
0x7f7d10660b28: test edx, edx  reg(54, 0)  reg(54, 0) 
0x7f7d10660b2a: setz al  reg(27, 1) 
0x7f7d10660b2d: and eax, ecx  reg(56, 1)  reg(55, 0) 
0x7f7d10660b2f: ret 
0x7f7d10662d13: cmp dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d10662d17: jnz 0x7f7d10662dcf
0x7f7d10662d1d: movzx ebp, byte ptr [rbx+0x189]
0x7f7d10662d24: cmp bpl, 0xe0 
0x7f7d10662d28: jz 0x7f7d10662d36
0x7f7d10662d2a: cmp bpl, 0xf0 
0x7f7d10662d2e: jz 0x7f7d10662d3d
0x7f7d10660b47: test al, al 
0x7f7d10660b49: jnz 0x7f7d10660b79
0x7f7d10660b4b: mov eax, dword ptr [rbx]  reg(56, 0) 
0x7f7d10660b4d: cmp eax, dword ptr [rbx+0x8]  reg(56, 1) 
0x7f7d10660b50: jnl 0x7f7d10660b59
0x7f7d10660b52: add eax, 0x1  reg(56, 1) 
0x7f7d10660b55: mov dword ptr [rbx], eax  reg(56, 2)  mem(2013d90, 1) 
0x7f7d10660b57: jmp 0x7f7d10660b5f
0x7f7d10660b5f: mov edx, dword ptr [rbx+0x18]  reg(54, 0) 
0x7f7d10660b62: mov edi, edx  reg(45, 2013d90)  reg(54, 1a) 
0x7f7d10660b64: imul edi, dword ptr [rbx]  reg(45, 1a) 
0x7f7d10660b67: movsxd rdi, edi  reg(3, 34)  reg(45, 34) 
0x7f7d10660b6a: add rdi, qword ptr [rbx+0x10]  reg(3, 34) 
0x7f7d10660b6e: movsxd rdx, edx  reg(8, 1a)  reg(54, 1a) 
0x7f7d10660b71: mov rsi, rbp  reg(4, 7f7d0de84e40) 
0x7f7d10660b74: call 0x7f7d1065f2a0
memcpy@plt: 2013df4 7f7d0de84e40 1a 0	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 2013df4 7f7d0de84e40 1a 0	memcpy
0x7f7d10662d3d: movzx eax, byte ptr [rbx+0x18a]  reg(4, 7f7d0de84e40) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1a 0	dlsym@plt
0x7f7d10660b79: add rsp, 0x8
0x7f7d10660b7d: pop rbx  reg(7, 2013d90) 
0x7f7d10660b7e: pop rbp
0x7f7d10660b7f: ret 
0x7f7d10662d44: shr al, 0x7  reg(27, 80) 
0x7f7d10660c66: mov rdi, qword ptr [rbx+0x58]  reg(3, 2013df4) 
0x7f7d10660c6a: call 0x7f7d1065f270
pthread_mutex_unlock@plt: 2013d60 7f7d0de84e40 1a 2013df4	pthread_mutex_unlock@plt
0x7f7d1065f270: jmp qword ptr [rip+0x221a12]
0x7f7d10662d47: mov byte ptr [r13], al  reg(27, 1)  mem(7f7d0cbeee43, f98f000000000000) 
0x7f7d10662d4b: jmp 0x7f7d10662d5f
0x7f7d10660c6f: jmp 0x7f7d10660c80
0x7f7d10660c80: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f7d10660c85: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10660c8e: jz 0x7f7d10660c95
0x7f7d10660c95: add rsp, 0x48
0x7f7d10660c99: pop rbx  reg(7, 200dc40) 
0x7f7d10660c9a: pop rbp
0x7f7d10660c9b: pop r12  reg(15, 8) 
0x7f7d10662d5f: mov rsi, r12  reg(16, 0) 
0x7f7d10660c9d: pop r13  reg(16, 0) 
0x7f7d10660c9f: pop r14  reg(17, 0) 
0x7f7d10660ca1: pop r15  reg(18, 8) 
0x7f7d10660ca3: ret 
0x7f7d10662d62: mov rdi, rbx  reg(3, 7f7d0cbec5b0)  reg(7, 7f7d080008c0) 
0x7f7d10662d65: call 0x7f7d1065e890
0x7f7d10660f4e: add rsp, 0x10
0x7f7d10660f52: jmp 0x7f7d10660f85
TIsoTcpSocket::PDUSize(void*)@plt: 7f7d080008c0 7f7d08000a44 0 2	_ZN13TIsoTcpSocket7PDUSizeEPv@plt
0x7f7d1065e890: jmp qword ptr [rip+0x221f02]
0x7f7d10660f85: mov rdi, rbx  reg(3, 2013d60)  reg(7, 200dc40) 
0x7f7d10660f88: call 0x7f7d1065eb80
0x7f7d1065e896: push 0xf0 
0x7f7d1065e89b: jmp 0x7f7d1065d980
TCustomMsgServer::UnlockList()@plt: 200dc40 0 2013d60 2013df4	_ZN16TCustomMsgServer10UnlockListEv@plt
0x7f7d1065eb80: jmp qword ptr [rip+0x221d8a]
TIsoTcpSocket::PDUSize(void*): 7f7d080008c0 7f7d08000a44 0 2	_ZN13TIsoTcpSocket7PDUSizeEPv
0x7f7d10662900: movzx eax, byte ptr [rsi+0x2]  reg(56, 1) 
0x7f7d1065eb86: push 0x11f 
0x7f7d1065eb8b: jmp 0x7f7d1065d980
0x7f7d10662904: shl eax, 0x8  reg(56, 0) 
0x7f7d10662907: movzx edx, byte ptr [rsi+0x3]  reg(54, 0) 
0x7f7d1066290b: add eax, edx  reg(56, 0)  reg(54, 1f) 
TCustomMsgServer::UnlockList(): 200dc40 0 2013d60 2013df4	_ZN16TCustomMsgServer10UnlockListEv
0x7f7d10660e5c: sub rsp, 0x8
0x7f7d10660e60: mov rdi, qword ptr [rdi+0x30]  reg(3, 200dc40) 
0x7f7d10660e64: call 0x7f7d1065f270
pthread_mutex_unlock@plt: 2013d30 0 2013d60 2013df4	pthread_mutex_unlock@plt
0x7f7d1065f270: jmp qword ptr [rip+0x221a12]
0x7f7d1066290d: ret 
0x7f7d10660e69: add rsp, 0x8
0x7f7d10660e6d: ret 
0x7f7d10662d6a: mov r13d, eax  reg(76, 7f7d0cbeee43)  reg(56, 1f) 
0x7f7d10660f8d: jmp 0x7f7d10660fd5
0x7f7d10662d6d: movzx edx, bpl  reg(54, 1f) 
0x7f7d10662d71: mov rsi, r12  reg(4, 7f7d08000a44)  reg(15, 7f7d08000a44) 
0x7f7d10662d74: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d10662d77: call 0x7f7d1065e810
0x7f7d10660fd5: add rsp, 0x8
0x7f7d10660fd9: pop rbx  reg(7, 200dc40) 
0x7f7d10660fda: pop rbp
0x7f7d10660fdb: pop r12  reg(15, 0) 
0x7f7d10660fdd: pop r13  reg(16, 7f7d080008c0) 
0x7f7d10660fdf: ret 
TIsoTcpSocket::CheckPDU(void*, unsigned char)@plt: 7f7d080008c0 7f7d08000a44 f0 2	_ZN13TIsoTcpSocket8CheckPDUEPvh@plt
0x7f7d1065e810: jmp qword ptr [rip+0x221f42]
0x7f7d106609f6: jmp 0x7f7d106609ba
0x7f7d1065e816: push 0xe8 
0x7f7d1065e81b: jmp 0x7f7d1065d980
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2013d30) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 0) 
0x7f7d106609c7: call 0x7f7d1065ee80
TIsoTcpSocket::CheckPDU(void*, unsigned char): 7f7d080008c0 7f7d08000a44 f0 2	_ZN13TIsoTcpSocket8CheckPDUEPvh
_ZN13TIsoTcpSocket8CheckPDUEPvh: 201d740 64 2013d30 2013df4	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
0x7f7d1066290e: push r12  reg(15, 7f7d08000a44) 
TMsgSocket::CanRead(int): 201d740 64 2013d30 2013df4	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d10662910: push rbp
0x7f7d10662911: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f9b9: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d10662912: mov rbp, rdi
0x7f7d10662915: mov rbx, rsi  reg(7, 7f7d080008c0)  reg(4, 7f7d08000a44) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(7, 7f7d080008c0)  reg(4, 7f7d08000a44) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d10662918: mov r12d, edx  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 2013d30) 
0x7f7d1066291b: call 0x7f7d1065e1b0
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
TIsoTcpSocket::ClrIsoError()@plt: 7f7d080008c0 7f7d08000a44 f0 2	_ZN13TIsoTcpSocket11ClrIsoErrorEv@plt
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065e1b0: jmp qword ptr [rip+0x222272]
TIsoTcpSocket::ClrIsoError(): 7f7d080008c0 7f7d08000a44 f0 2	_ZN13TIsoTcpSocket11ClrIsoErrorEv
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d106627b6: mov dword ptr [rdi+0x1198], 0x0  reg(8, 0)  mem(7f7d0de84e30, 100007f) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 100007f) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 2013df4) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d106627c0: mov dword ptr [rdi+0x78], 0x0  reg(3, 201d740) 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d106627c7: ret 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 0) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d10662920: test rbx, rbx  reg(4, 186a0) 
0x7f7d10662923: jz 0x7f7d1066295a
0x7f7d10662925: mov rsi, rbx  reg(4, 7f7d08000a44)  reg(7, 7f7d08000a44) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 7f7d08000a44)  reg(7, 7f7d08000a44) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d10662928: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d1066292b: call 0x7f7d1065e890
TIsoTcpSocket::PDUSize(void*)@plt: 7f7d080008c0 7f7d08000a44 f0 2	_ZN13TIsoTcpSocket7PDUSizeEPv@plt
0x7f7d1065e890: jmp qword ptr [rip+0x221f02]
TIsoTcpSocket::PDUSize(void*): 7f7d080008c0 7f7d08000a44 f0 2	_ZN13TIsoTcpSocket7PDUSizeEPv
0x7f7d10662900: movzx eax, byte ptr [rsi+0x2]  reg(56, 1f) 
0x7f7d10662904: shl eax, 0x8  reg(56, 0) 
0x7f7d10662907: movzx edx, byte ptr [rsi+0x3]  reg(54, f0) 
0x7f7d1066290b: add eax, edx  reg(56, 0)  reg(54, 1f) 
0x7f7d1066290d: ret 
0x7f7d10662930: sub eax, 0x7  reg(56, 1f) 
0x7f7d10662933: cmp eax, 0xff9  reg(56, 18) 
0x7f7d10662938: jnbe 0x7f7d1066294b
0x7f7d1066293a: cmp byte ptr [rbx+0x4], 0x1  mem(7f7d08000a48, 80f002) 
0x7f7d1066293e: jbe 0x7f7d1066294b
0x7f7d10662940: mov eax, 0x0  reg(56, 18) 
0x7f7d10662945: cmp byte ptr [rbx+0x5], r12b  reg(71, f0)  mem(7f7d08000a49, 80f0) 
0x7f7d10662949: jz 0x7f7d10662967
0x7f7d10662967: pop rbx  reg(7, 7f7d08000a44) 
0x7f7d10662968: pop rbp
0x7f7d10662969: pop r12  reg(15, f0) 
0x7f7d1066296b: ret 
0x7f7d10662d7c: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10662d7e: jz 0x7f7d10662d88
0x7f7d10662d88: sub r13d, 0x7  reg(76, 1f) 
0x7f7d10662d8c: test r13d, r13d  reg(76, 18)  reg(76, 18) 
0x7f7d10662d8f: jle 0x7f7d10662dde
0x7f7d10662d91: cmp r13d, r15d  reg(76, 18)  reg(82, 1000) 
0x7f7d10662d94: jnle 0x7f7d10662dc0
0x7f7d10662d96: mov edx, r13d  reg(54, 1f)  reg(76, 18) 
0x7f7d10662d99: mov rsi, qword ptr [rsp+0x8]  reg(4, 7f7d08000a44) 
0x7f7d10662d9e: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d10662da1: call 0x7f7d1065f220
TMsgSocket::RecvPacket(void*, int)@plt: 7f7d080008c0 7f7d08000a4b 18 2	_ZN10TMsgSocket10RecvPacketEPvi@plt
0x7f7d1065f220: jmp qword ptr [rip+0x221a3a]
TMsgSocket::RecvPacket(void*, int): 7f7d080008c0 7f7d08000a4b 18 2	_ZN10TMsgSocket10RecvPacketEPvi
0x7f7d1066028c: push r12  reg(15, 7f7d08000a44) 
0x7f7d1066028e: push rbp
0x7f7d1066028f: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10660290: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10660293: mov r12, rsi  reg(15, 7f7d08000a44)  reg(4, 7f7d08000a4b) 
0x7f7d10660296: mov ebp, edx
0x7f7d10660298: mov edx, dword ptr [rdi+0x70]  reg(54, 18) 
0x7f7d1066029b: mov esi, ebp  reg(47, 7f7d08000a4b) 
0x7f7d1066029d: call 0x7f7d1065f310
TMsgSocket::WaitForData(int, int)@plt: 7f7d080008c0 18 bb8 2	_ZN10TMsgSocket11WaitForDataEii@plt
0x7f7d1065f310: jmp qword ptr [rip+0x2219c2]
TMsgSocket::WaitForData(int, int): 7f7d080008c0 18 bb8 2	_ZN10TMsgSocket11WaitForDataEii
0x7f7d1065fba2: push r13  reg(16, 18) 
0x7f7d1065fba4: push r12  reg(15, 7f7d08000a4b) 
0x7f7d1065fba6: push rbp
0x7f7d1065fba7: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fba8: sub rsp, 0x18
0x7f7d1065fbac: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065fbaf: mov ebp, esi
0x7f7d1065fbb1: mov r12d, edx  reg(73, 7f7d08000a4b)  reg(54, bb8) 
0x7f7d1065fbb4: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065fbbd: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed78, 7f7d08000a44) 
0x7f7d1065fbc2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065fbc4: mov esi, 0x0  reg(47, 18) 
0x7f7d1065fbc9: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 7f7d080008c0 0 bb8 2	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 7f7d080008c0 0 bb8 2	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed48, 7f7d10b2b000) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, bb8) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 0) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 0) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 0) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 0)  reg(47, 0) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 0) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 0)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 0)  reg(47, 0) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 0)  reg(47, 0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 0)  mem(7f7d0cbeecb8, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0cbeecb0, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 2) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0cbeed40) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 4 0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 4) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 4) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 4) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 4)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 4) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 10)  mem(7f7d0cbeecc0, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 4) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0cbef700) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 4) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 10) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 5 7f7d0cbeecc0 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 1)  reg(56, 1) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 1) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065fa83: setnle al  reg(27, 1) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 7f7d080008c0) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d1065fbce: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d1065fbd0: jz 0x7f7d1065fbec
0x7f7d1065fbd2: mov rdi, rbx  reg(3, 2)  reg(7, 7f7d080008c0) 
0x7f7d1065fbd5: call 0x7f7d1065de40
TMsgSocket::WaitingData()@plt: 7f7d080008c0 7f7d0cbeecc0 1 0	_ZN10TMsgSocket11WaitingDataEv@plt
0x7f7d1065de40: jmp qword ptr [rip+0x22242a]
TMsgSocket::WaitingData(): 7f7d080008c0 7f7d0cbeecc0 1 0	_ZN10TMsgSocket11WaitingDataEv
0x7f7d1065f77a: sub rsp, 0x18
0x7f7d1065f77e: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f7d1065f787: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed58, 7f7d080008c0) 
0x7f7d1065f78c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f78e: mov qword ptr [rsp], 0x0  mem(7f7d0cbeed50, 0) 
0x7f7d1065f796: mov rdx, rsp  reg(8, 1) 
0x7f7d1065f799: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f79c: mov esi, 0x541b  reg(47, 7f7d0cbeecc0) 
0x7f7d1065f7a1: call 0x7f7d1065dbd0
ioctl@plt: 4 541b 7f7d0cbeed50 0	ioctl@plt
0x7f7d1065dbd0: jmp qword ptr [rip+0x222562]
0x7f7d1065f7a6: mov edx, 0x0  reg(54, 7f7d0cbeed50) 
0x7f7d1065f7ab: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f7ad: cmovz edx, dword ptr [rsp]  reg(54, 0) 
0x7f7d1065f7b1: cmp edx, 0x10000  reg(54, 18) 
0x7f7d1065f7b7: mov eax, 0x10000  reg(56, 0) 
0x7f7d1065f7bc: cmovle eax, edx  reg(56, 10000)  reg(54, 18) 
0x7f7d1065f7bf: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065f7c4: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065f7cd: jz 0x7f7d1065f7d4
0x7f7d1065f7d4: add rsp, 0x18
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065f7d8: ret 
0x7f7d1065fbda: test eax, eax  reg(56, 18)  reg(56, 18) 
0x7f7d1065fbdc: jnz 0x7f7d1065fbec
0x7f7d1065fbec: mov dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065fbf3: call 0x7f7d1065e9f0
SysGetTick()@plt: 4 541b 18 0	_Z10SysGetTickv@plt
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d1065e9f0: jmp qword ptr [rip+0x221e52]
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
SysGetTick(): 4 541b 18 0	_Z10SysGetTickv
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d106608c1: sub rsp, 0x28
0x7f7d106608c5: mov rax, qword ptr fs:[0x28]  reg(10, 18) 
0x7f7d1065fa48: shl rdx, cl  reg(10, 18) 
0x7f7d106608ce: mov qword ptr [rsp+0x18], rax  reg(8, 8)  mem(7f7d0de84e40, 0(7f7d0cbeed58, f4f60b3748f98f00) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d106608d3: xor eax, eax  reg(4, 186a0) 
0x7f7d106608d5: mov rsi, rsp  reg(4, 541b) 
0x7f7d106608d8: mov edi, 0x1  reg(45, 4) 
0x7f7d106608dd: call 0x7f7d1065f210
clock_gettime@plt: 1 7f7d0cbeed40 18 0	clock_gettime@plt
0x7f7d1065f210: jmp qword ptr [rip+0x221a42]
0x7f7d106608e2: imul esi, dword ptr [rsp], 0x3e8  reg(47, 7f7d0cbeed40) 
0x7f7d106608e9: mov rcx, qword ptr [rsp+0x8]  reg(9, 19) 
0x7f7d106608ee: mov rdx, 0x431bde82d7b634db  reg(8, 0) 
0x7f7d106608f8: mov rax, rcx  reg(10, 0)  reg(9, 1bc6d07f) 
0x7f7d106608fb: imul rdx  reg(8, 431bde82d7b634db)  reg(10, 1bc6d07f) 
0x7f7d106608fe: sar rdx, 0x12  reg(8, 7480ead) 
0x7f7d10660902: sar rcx, 0x3f  reg(9, 1bc6d07f) 
0x7f7d10660906: sub rdx, rcx  reg(8, 1d2)  reg(9, 0) 
0x7f7d10660909: lea eax, ptr [rsi+rdx*1]  reg(56, d590c0ad08b828a5) 
0x7f7d1066090c: mov rdi, qword ptr [rsp+0x18]  reg(3, 1) 
0x7f7d10660911: xor rdi, qword ptr fs:[0x28]  reg(3, f4f60b3748f98f00) 
0x7f7d1066091a: jz 0x7f7d10660921
0x7f7d10660921: add rsp, 0x28
0x7f7d10660925: ret 
0x7f7d1065fbf8: mov dword ptr [rsp+0x4], eax  reg(56, 98086ad2)  mem(7f7d0cbeed74, 48f98f0000000000) 
0x7f7d1065fbfc: lea r13, ptr [rsp+0x4]  reg(16, 18) 
0x7f7d1065fc01: mov rdi, rbx  reg(3, 0)  reg(7, 7f7d080008c0) 
0x7f7d1065fc04: call 0x7f7d1065de40
TMsgSocket::WaitingData()@plt: 7f7d080008c0 98086900 1d2 0	_ZN10TMsgSocket11WaitingDataEv@plt
0x7f7d1065de40: jmp qword ptr [rip+0x22242a]
TMsgSocket::WaitingData(): 7f7d080008c0 98086900 1d2 0	_ZN10TMsgSocket11WaitingDataEv
0x7f7d1065f77a: sub rsp, 0x18
0x7f7d1065f77e: mov rax, qword ptr fs:[0x28]  reg(10, 98086ad2) 
0x7f7d1065f787: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed58, f4f60b3748f98f00) 
0x7f7d1065f78c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f78e: mov qword ptr [rsp], 0x0  mem(7f7d0cbeed50, 18) 
0x7f7d1065f796: mov rdx, rsp  reg(8, 1d2) 
0x7f7d1065f799: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f79c: mov esi, 0x541b  reg(47, 98086900) 
0x7f7d1065f7a1: call 0x7f7d1065dbd0
ioctl@plt: 4 541b 7f7d0cbeed50 0	ioctl@plt
0x7f7d1065dbd0: jmp qword ptr [rip+0x222562]
0x7f7d1065f7a6: mov edx, 0x0  reg(54, 7f7d0cbeed50) 
0x7f7d1065f7ab: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f7ad: cmovz edx, dword ptr [rsp]  reg(54, 0) 
0x7f7d1065f7b1: cmp edx, 0x10000  reg(54, 18) 
0x7f7d1065f7b7: mov eax, 0x10000  reg(56, 0) 
0x7f7d1065f7bc: cmovle eax, edx  reg(56, 10000)  reg(54, 18) 
0x7f7d1065f7bf: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065f7c4: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065f7cd: jz 0x7f7d1065f7d4
0x7f7d1065f7d4: add rsp, 0x18
0x7f7d1065f7d8: ret 
0x7f7d1065fc09: cmp eax, ebp  reg(56, 18) 
0x7f7d1065fc0b: jnl 0x7f7d1065fc2a
0x7f7d1065fc2a: mov eax, dword ptr [rbx+0x78]  reg(56, 18) 
0x7f7d1065fc2d: cmp eax, 0x68  reg(56, 0) 
0x7f7d1065fc30: jnz 0x7f7d1065fc36
0x7f7d1065fc36: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065fc3b: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065fc44: jz 0x7f7d1065fc5c
0x7f7d1065fc5c: add rsp, 0x18
0x7f7d1065fc60: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fc61: pop rbp
0x7f7d1065fc62: pop r12  reg(15, bb8) 
0x7f7d1065fc64: pop r13  reg(16, 7f7d0cbeed74) 
0x7f7d1065fc66: ret 
0x7f7d106602a2: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d106602a5: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d106602a7: jnz 0x7f7d106602da
0x7f7d106602a9: movsxd rdx, ebp  reg(8, 18) 
0x7f7d106602ac: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d106602af: mov ecx, 0x4000  reg(55, 0) 
0x7f7d106602b4: mov rsi, r12  reg(4, 541b)  reg(15, 7f7d08000a4b) 
0x7f7d106602b7: call 0x7f7d1065df50
recv@plt: 4 7f7d08000a4b 18 4000	recv@plt
0x7f7d1065df50: jmp qword ptr [rip+0x2223a2]
recv: 4 7f7d08000a4b 18 4000	recv
dlsym@plt: ffffffffffffffff 7f7d108f3dc2 18 4000	dlsym@plt
fprintf@plt: 7f7d10068540 7f7d108f3dc8 4 7f7d08000a4b	fprintf@plt
0x7f7d106602bc: test eax, eax  reg(56, 18)  reg(56, 18) 
0x7f7d106602be: jnz 0x7f7d106602c9
0x7f7d106602c9: test eax, eax  reg(56, 18)  reg(56, 18) 
0x7f7d106602cb: jns 0x7f7d106602e7
0x7f7d106602e7: mov eax, dword ptr [rbx+0x78]  reg(56, 18) 
0x7f7d106602ea: cmp eax, 0x68  reg(56, 0) 
0x7f7d106602ed: jnz 0x7f7d106602f8
0x7f7d106602f8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106602f9: pop rbp
0x7f7d106602fa: pop r12  reg(15, 7f7d08000a4b) 
0x7f7d106602fc: ret 
0x7f7d10662da6: cmp dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d10662daa: jz 0x7f7d10662dbb
0x7f7d10662dbb: mov dword ptr [r14], r13d  reg(76, 18)  mem(7f7d0cbeee44, 48f98f0000000000) 
0x7f7d10662dbe: jmp 0x7f7d10662dde
0x7f7d10662dde: mov eax, dword ptr [rbx+0x1198]  reg(56, 0) 
0x7f7d10662de4: add rsp, 0x18
0x7f7d10662de8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10662de9: pop rbp
0x7f7d10662dea: pop r12  reg(15, 7f7d08000a44) 
0x7f7d10662dec: pop r13  reg(16, 18) 
0x7f7d10662dee: pop r14  reg(17, 7f7d0cbeee44) 
0x7f7d10662df0: pop r15  reg(18, 1000) 
0x7f7d10662df2: ret 
0x7f7d10662e6f: mov r12d, eax  reg(73, 7f7d08000a44)  reg(56, 0) 
0x7f7d10662e72: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d10662e74: jnz 0x7f7d10662ec1
0x7f7d10662e76: cmp byte ptr [rsp+0x23], 0x0  mem(7f7d0cbeee43, f98f000000001801) 
0x7f7d10662e7b: jnz 0x7f7d10662ec1
0x7f7d10662ec1: test r12d, r12d  reg(73, 0)  reg(73, 0) 
0x7f7d10662ec4: jnz 0x7f7d10662efe
0x7f7d10662ec6: mov edx, ebp  reg(54, 0) 
0x7f7d10662ec8: add edx, dword ptr [rsp+0x24]  reg(54, 0) 
0x7f7d10662ecc: add edx, 0x7  reg(54, 18) 
0x7f7d10662ecf: movzx eax, dh  reg(56, 0)  reg(34, 1f) 
0x7f7d10662ed2: mov byte ptr [r13+0x186], al  reg(27, 0)  mem(7f7d08000a46, 13280f0021f00) 
0x7f7d10662ed9: mov byte ptr [r13+0x187], dl  reg(33, 1f)  mem(7f7d08000a47, 13280f0021f) 
0x7f7d10662ee0: lea rsi, ptr [r13+0x184]  reg(4, 0) 
0x7f7d10662ee7: mov rax, qword ptr [rsp+0x18]  reg(10, 0) 
0x7f7d10662eec: cmp rsi, rax  reg(4, 7f7d08000a44)  reg(10, 7f7d08000a44) 
0x7f7d10662eef: jz 0x7f7d10662f0d
0x7f7d10662f0d: mov eax, r12d  reg(56, 7f7d08000a44)  reg(73, 0) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d10662f10: mov rcx, qword ptr [rsp+0x28]  reg(4, 186a0) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d10662f15: xor rcx, qword ptr fs:[0x28]  reg(4, 186a0) 
0x7f7d10662f1e: jz 0x7f7d10662f25
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d10662f25: add rsp, 0x38
0x7f7d10662f29: pop rbx  reg(7, 7f7d08000a4b) 
0x7f7d10662f2a: pop rbp
0x7f7d10662f2b: pop r12  reg(15, 0) 
0x7f7d10662f2d: pop r13  reg(16, 7f7d080008c0) 
0x7f7d10662f2f: pop r14  reg(17, 1000) 
0x7f7d10662f31: pop r15  reg(18, 7f7d0cbeee43) 
0x7f7d10662f33: ret 
0x7f7d1066530a: mov eax, dword ptr [rbx+0x78]  reg(56, 0) 
0x7f7d1066530d: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1066530f: jnz 0x7f7d106653bb
0x7f7d10665315: mov rdx, rsp  reg(8, 1f) 
0x7f7d10665318: mov rsi, r12  reg(4, 7f7d08000a44)  reg(15, 7f7d08000a44) 
0x7f7d1066531b: mov rdi, rbx  reg(3, 7f7d0cbec5b0)  reg(7, 7f7d080008c0) 
0x7f7d1066531e: call 0x7f7d1065ed40
TIsoTcpSocket::IsoPeek(void*, TPDUKind&)@plt: 7f7d080008c0 7f7d08000a44 7f7d0cbeee90 0	_ZN13TIsoTcpSocket7IsoPeekEPvR8TPDUKind@plt
0x7f7d1065ed40: jmp qword ptr [rip+0x221caa]
0x7f7d1065ed46: push 0x13b 
0x7f7d1065ed4b: jmp 0x7f7d1065d980
TIsoTcpSocket::IsoPeek(void*, TPDUKind&): 7f7d080008c0 7f7d08000a44 7f7d0cbeee90 0	_ZN13TIsoTcpSocket7IsoPeekEPvR8TPDUKind
0x7f7d10663008: push rbp
0x7f7d10663009: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1066300a: sub rsp, 0x8
0x7f7d1066300e: mov rbx, rsi  reg(7, 7f7d080008c0)  reg(4, 7f7d08000a44) 
0x7f7d10663011: mov rbp, rdx
0x7f7d10663014: call 0x7f7d1065e890
TIsoTcpSocket::PDUSize(void*)@plt: 7f7d080008c0 7f7d08000a44 7f7d0cbeee90 0	_ZN13TIsoTcpSocket7PDUSizeEPv@plt
0x7f7d1065e890: jmp qword ptr [rip+0x221f02]
TIsoTcpSocket::PDUSize(void*): 7f7d080008c0 7f7d08000a44 7f7d0cbeee90 0	_ZN13TIsoTcpSocket7PDUSizeEPv
0x7f7d10662900: movzx eax, byte ptr [rsi+0x2]  reg(56, 0) 
0x7f7d10662904: shl eax, 0x8  reg(56, 0) 
0x7f7d10662907: movzx edx, byte ptr [rsi+0x3]  reg(54, 7f7d0cbeee90) 
0x7f7d1066290b: add eax, edx  reg(56, 0)  reg(54, 1f) 
0x7f7d1066290d: ret 
0x7f7d10663019: cmp eax, 0x7  reg(56, 1f) 
0x7f7d1066301c: jnz 0x7f7d10663027
0x7f7d10663027: cmp eax, 0x6  reg(56, 1f) 
0x7f7d1066302a: jnbe 0x7f7d10663035
0x7f7d10663035: movzx eax, byte ptr [rbx+0x5]  reg(56, 1f) 
0x7f7d10663039: cmp al, 0xe0  reg(27, f0) 
0x7f7d1066303b: jz 0x7f7d10663052
0x7f7d1066303d: cmp al, 0xf0  reg(27, f0) 
0x7f7d1066303f: jz 0x7f7d1066305b
0x7f7d1066305b: mov dword ptr [rbp], 0x5  mem(7f7d0cbeee90, 7f7d0cbef700) 
0x7f7d10663062: add rsp, 0x8
0x7f7d10663066: pop rbx  reg(7, 7f7d08000a44) 
0x7f7d10663067: pop rbp
0x7f7d10663068: ret 
0x7f7d10665323: mov eax, dword ptr [rsp]  reg(56, f0) 
0x7f7d10665326: cmp eax, 0x5  reg(56, 5) 
0x7f7d10665329: jnz 0x7f7d1066534f
0x7f7d1066532b: mov rsi, r12  reg(4, 7f7d08000a44)  reg(15, 7f7d08000a44) 
0x7f7d1066532e: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d10665331: call 0x7f7d1065e890
TIsoTcpSocket::PDUSize(void*)@plt: 7f7d080008c0 7f7d08000a44 1f 0	_ZN13TIsoTcpSocket7PDUSizeEPv@plt
0x7f7d1065e890: jmp qword ptr [rip+0x221f02]
TIsoTcpSocket::PDUSize(void*): 7f7d080008c0 7f7d08000a44 1f 0	_ZN13TIsoTcpSocket7PDUSizeEPv
0x7f7d10662900: movzx eax, byte ptr [rsi+0x2]  reg(56, 5) 
0x7f7d10662904: shl eax, 0x8  reg(56, 0) 
0x7f7d10662907: movzx edx, byte ptr [rsi+0x3]  reg(54, 1f) 
0x7f7d1066290b: add eax, edx  reg(56, 0)  reg(54, 1f) 
0x7f7d1066290d: ret 
0x7f7d10665336: sub eax, 0x7  reg(56, 1f) 
0x7f7d10665339: mov dword ptr [rsp+0x4], eax  reg(56, 18)  mem(7f7d0cbeee94, 48f98f0000007f7d) 
0x7f7d1066533d: lea rsi, ptr [rsp+0x4]  reg(4, 7f7d08000a44) 
0x7f7d10665342: mov rax, qword ptr [rbx]  reg(10, 18) 
0x7f7d10665345: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d10665348: call qword ptr [rax+0x30]
TS7Worker::IsoPerformCommand(int&): 7f7d080008c0 7f7d0cbeee94 1f 0	_ZN9TS7Worker17IsoPerformCommandERi
0x7f7d10669d1a: push r12  reg(15, 7f7d08000a44) 
0x7f7d10669d1c: push rbp
0x7f7d10669d1d: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10669d1e: mov rbp, rdi
0x7f7d10669d21: mov r12, rsi  reg(15, 7f7d08000a44)  reg(4, 7f7d0cbeee94) 
0x7f7d10669d24: mov esi, dword ptr [rsi]  reg(47, 7f7d0cbeee94) 
0x7f7d10669d26: test esi, esi  reg(47, 18)  reg(47, 18) 
0x7f7d10669d28: jnz 0x7f7d10669d36
0x7f7d10669d36: call 0x7f7d1065df70
TS7Worker::CheckPDU_in(int)@plt: 7f7d080008c0 18 1f 0	_ZN9TS7Worker11CheckPDU_inEi@plt
0x7f7d1065df70: jmp qword ptr [rip+0x222392]
0x7f7d1065df76: push 0x5e 
0x7f7d1065df7b: jmp 0x7f7d1065d980
TS7Worker::CheckPDU_in(int): 7f7d080008c0 18 1f 0	_ZN9TS7Worker11CheckPDU_inEi
0x7f7d10665492: push r13  reg(16, 7f7d0de84dcf) 
0x7f7d10665494: push r12  reg(15, 7f7d0cbeee94) 
0x7f7d10665496: push rbp
0x7f7d10665497: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10665498: sub rsp, 0x8
0x7f7d1066549c: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1066549f: mov r12d, esi  reg(73, 7f7d0cbeee94)  reg(47, 18) 
0x7f7d106654a2: lea r13, ptr [rdi+0x8]  reg(16, 7f7d0de84dcf) 
0x7f7d106654a6: mov rax, qword ptr [rdi+0x11a0]  reg(10, 7f7d1087f768) 
0x7f7d106654ad: movzx esi, word ptr [rax+0x6]  reg(47, 18) 
0x7f7d106654b1: mov rdi, r13  reg(3, 7f7d080008c0)  reg(16, 7f7d080008c8) 
0x7f7d106654b4: call 0x7f7d1065e8a0
TSnapBase::SwapWord(unsigned short)@plt: 7f7d080008c8 e00 1f 0	_ZN9TSnapBase8SwapWordEt@plt
0x7f7d1065e8a0: jmp qword ptr [rip+0x221efa]
0x7f7d1065e8a6: push 0xf1 
0x7f7d1065e8ab: jmp 0x7f7d1065d980
TSnapBase::SwapWord(unsigned short): 7f7d080008c8 e00 1f 0	_ZN9TSnapBase8SwapWordEt
0x7f7d1065f56c: mov eax, esi  reg(56, 7f7d08000a4b)  reg(47, e00) 
0x7f7d1065f56e: rol ax, 0x8  reg(29, e00) 
0x7f7d1065f572: cmp byte ptr [rdi], 0x0  mem(7f7d080008c8, 1) 
0x7f7d1065f578: ret 
0x7f7d106654b9: mov ebp, eax
0x7f7d106654bb: mov rax, qword ptr [rbx+0x11a0]  reg(10, e) 
0x7f7d106654c2: movzx esi, word ptr [rax+0x8]  reg(47, e00) 
0x7f7d106654c6: mov rdi, r13  reg(3, 7f7d080008c8)  reg(16, 7f7d080008c8) 
0x7f7d106654c9: call 0x7f7d1065e8a0
TSnapBase::SwapWord(unsigned short)@plt: 7f7d080008c8 0 1f 0	_ZN9TSnapBase8SwapWordEt@plt
0x7f7d1065e8a0: jmp qword ptr [rip+0x221efa]
TSnapBase::SwapWord(unsigned short): 7f7d080008c8 0 1f 0	_ZN9TSnapBase8SwapWordEt
0x7f7d1065f56c: mov eax, esi  reg(56, 7f7d08000a4b)  reg(47, 0) 
0x7f7d1065f56e: rol ax, 0x8  reg(29, 0) 
0x7f7d1065f572: cmp byte ptr [rdi], 0x0  mem(7f7d080008c8, 1) 
0x7f7d1065f578: ret 
0x7f7d106654ce: movzx ebp, bp
0x7f7d106654d1: movzx edx, ax  reg(54, 1f)  reg(29, 0) 
0x7f7d106654d4: lea edx, ptr [rbp+rdx*1+0xa]  reg(54, 0) 
0x7f7d106654d8: mov eax, 0x0  reg(56, 0) 
0x7f7d106654dd: cmp edx, r12d  reg(54, 18)  reg(73, 18) 
0x7f7d106654e0: jnz 0x7f7d106654fe
0x7f7d106654e2: mov rax, qword ptr [rbx+0x11a0]  reg(10, 0) 
0x7f7d106654e9: movzx edx, byte ptr [rax+0x1]  reg(54, 18) 
0x7f7d106654ed: cmp dl, 0x1  reg(33, 1) 
0x7f7d106654f0: setnz cl  reg(30, 0) 
0x7f7d106654f3: cmp dl, 0x7  reg(33, 1) 
0x7f7d106654f6: setnz al  reg(27, 7f7d08000a4b) 
0x7f7d106654f9: and eax, ecx  reg(56, 7f7d08000a01)  reg(55, 0) 
0x7f7d106654fb: xor eax, 0x1  reg(56, 0) 
0x7f7d106654fe: add rsp, 0x8
0x7f7d10665502: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10665503: pop rbp
0x7f7d10665504: pop r12  reg(15, 18) 
0x7f7d10665506: pop r13  reg(16, 7f7d080008c8) 
0x7f7d10665508: ret 
0x7f7d10669d3b: mov ebx, eax  reg(53, 7f7d080008c0)  reg(56, 1) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
0x7f7d10669d3d: test al, al  reg(47, 7f7d0de84e40) 
0x7f7d10669d3f: jz 0x7f7d10669d74
0x7f7d10669d41: mov rax, qword ptr [rbp+0x11a0]  reg(10, 1) 
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d10669d48: movzx eax, byte ptr [rax+0x1]  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d10669d4c: cmp al, 0x1  reg(54, 10624dd3)  reg(56, 6440) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d10669d4e: jz 0x7f7d10669d56
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d10669d56: mov rsi, r12  reg(3, 201d740) 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d10669d59: mov rdi, rbp  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d10669d5c: call 0x7f7d1065e2f0
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
TS7Worker::PerformPDURequest(int&)@plt: 7f7d080008c0 7f7d0cbeee94 1 0	_ZN9TS7Worker17PerformPDURequestERi@plt
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065e2f0: jmp qword ptr [rip+0x2221d2]
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065e2f6: push 0x96 
0x7f7d1065e2fb: jmp 0x7f7d1065d980
TS7Worker::PerformPDURequest(int&): 7f7d080008c0 7f7d0cbeee94 1 0	_ZN9TS7Worker17PerformPDURequestERi
0x7f7d10669c88: sub rsp, 0x8
0x7f7d10669c8c: mov rax, qword ptr [rdi+0x11a0]  reg(10, 1) 
0x7f7d10669c93: movzx eax, byte ptr [rax+0xa]  reg(56, 7f7d08000a4b) 
0x7f7d10669c97: cmp al, 0x1f  reg(27, 4) 
0x7f7d10669c99: jnbe 0x7f7d10669cad
0x7f7d10669c9b: cmp al, 0x1d  reg(27, 4) 
0x7f7d10669c9d: jnb 0x7f7d10669cda
0x7f7d10669c9f: cmp al, 0x5  reg(27, 4) 
0x7f7d10669ca1: jz 0x7f7d10669cc2
0x7f7d10669ca3: cmp al, 0x1a  reg(27, 4) 
0x7f7d10669ca5: jz 0x7f7d10669ce1
0x7f7d10669ca7: cmp al, 0x4  reg(27, 4) 
0x7f7d10669ca9: jnz 0x7f7d10669ce8
0x7f7d10669cab: jmp 0x7f7d10669cbb
0x7f7d10669cbb: call 0x7f7d1065db20
TS7Worker::PerformFunctionRead()@plt: 7f7d080008c0 7f7d0cbeee94 1 0	_ZN9TS7Worker19PerformFunctionReadEv@plt
0x7f7d1065db20: jmp qword ptr [rip+0x2225ba]
0x7f7d1065db26: push 0x19 
0x7f7d1065db2b: jmp 0x7f7d1065d980
TS7Worker::PerformFunctionRead(): 7f7d080008c0 7f7d0cbeee94 1 0	_ZN9TS7Worker19PerformFunctionReadEv
0x7f7d106693f2: push r15  reg(18, 0) 
0x7f7d106693f4: push r14  reg(17, 7f7d0cbef9c0) 
0x7f7d106693f6: push r13  reg(16, 7f7d0de84dcf) 
0x7f7d106693f8: push r12  reg(15, 7f7d0cbeee94) 
0x7f7d106693fa: push rbp
0x7f7d106693fb: push rbx  reg(7, 1) 
0x7f7d106693fc: sub rsp, 0x1058
0x7f7d10669403: mov r14, rdi  reg(17, 7f7d0cbef9c0)  reg(3, 7f7d080008c0) 
0x7f7d10669406: mov rax, qword ptr fs:[0x28]  reg(10, 4) 
0x7f7d1066940f: mov qword ptr [rsp+0x1048], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee18, 7f7d0cbeee94) 
0x7f7d10669417: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10669419: mov eax, dword ptr [rdi+0x21e8]  reg(56, 0) 
0x7f7d1066941f: mov dword ptr [rsp+0x2c], eax  reg(56, 800)  mem(7f7d0cbeddfc, 0) 
0x7f7d10669423: mov rax, qword ptr [rdi+0x11a0]  reg(10, 800) 
0x7f7d1066942a: mov qword ptr [rsp+0x18], rax  reg(10, 7f7d08000a4b)  mem(7f7d0cbedde8, 0) 
0x7f7d1066942f: movzx r13d, byte ptr [rax+0xb]  reg(76, 7f7d0de84dcf) 
0x7f7d10669434: cmp r13b, 0x14  reg(74, 1) 
0x7f7d10669438: jbe 0x7f7d10669446
0x7f7d10669446: movzx r13d, r13b  reg(76, 1)  reg(74, 1) 
0x7f7d1066944a: test r13d, r13d  reg(76, 1)  reg(76, 1) 
0x7f7d1066944d: jle 0x7f7d106694ff
0x7f7d10669453: mov rax, qword ptr [rsp+0x18]  reg(10, 7f7d08000a4b) 
0x7f7d10669458: lea r12, ptr [rax+0xc]  reg(15, 7f7d0cbeee94) 
0x7f7d1066945c: mov ebx, 0x0  reg(53, 1) 
0x7f7d10669461: mov ebp, 0x2
0x7f7d10669466: lea rax, ptr [rsp+0x30]  reg(10, 7f7d08000a4b) 
0x7f7d1066946b: mov qword ptr [rsp], rax  reg(10, 7f7d0cbede00)  mem(7f7d0cbeddd0, 0) 
0x7f7d1066946f: lea rax, ptr [rsp+0x2c]  reg(10, 7f7d0cbede00) 
0x7f7d10669474: mov qword ptr [rsp+0x8], rax  reg(10, 7f7d0cbeddfc)  mem(7f7d0cbeddd8, 0) 
0x7f7d10669479: lea r15, ptr [rsp+0x4c]  reg(18, 0) 
0x7f7d1066947e: lea eax, ptr [r13-0x1]  reg(56, 7f7d0cbeddfc) 
0x7f7d10669482: mov dword ptr [rsp+0x14], eax  reg(56, 0)  mem(7f7d0cbedde4, 8000a4b00000000) 
0x7f7d10669486: lea rsi, ptr [r15+rbp*1]  reg(4, 7f7d0cbeee94) 
0x7f7d1066948a: mov r8, qword ptr [rsp]  reg(11, 7f7d0cbef700) 
0x7f7d1066948e: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d10669493: mov rdx, r12  reg(8, 1)  reg(15, 7f7d08000a57) 
0x7f7d10669496: mov rdi, r14  reg(3, 7f7d080008c0)  reg(17, 7f7d080008c0) 
0x7f7d10669499: call 0x7f7d1065e2b0
TS7Worker::ReadArea(TResFunReadItem*, TReqFunReadItem*, int&, TEv&)@plt: 7f7d080008c0 7f7d0cbede1e 7f7d08000a57 7f7d0cbeddfc	_ZN9TS7Worker8ReadAreaEP15TResFunReadItemP15TReqFunReadItemRiR3TEv@plt
0x7f7d1065e2b0: jmp qword ptr [rip+0x2221f2]
0x7f7d1065e2b6: push 0x92 
0x7f7d1065e2bb: jmp 0x7f7d1065d980
TS7Worker::ReadArea(TResFunReadItem*, TReqFunReadItem*, int&, TEv&): 7f7d080008c0 7f7d0cbede1e 7f7d08000a57 7f7d0cbeddfc	_ZN9TS7Worker8ReadAreaEP15TResFunReadItemP15TReqFunReadItemRiR3TEv
0x7f7d10668fac: push r15  reg(18, 7f7d0cbede1c) 
0x7f7d10668fae: push r14  reg(17, 7f7d080008c0) 
0x7f7d10668fb0: push r13  reg(16, 1) 
0x7f7d10668fb2: push r12  reg(15, 7f7d08000a57) 
0x7f7d10668fb4: push rbp
0x7f7d10668fb5: push rbx  reg(7, 0) 
0x7f7d10668fb6: sub rsp, 0x38
0x7f7d10668fba: mov r12, rdi  reg(15, 7f7d08000a57)  reg(3, 7f7d080008c0) 
0x7f7d10668fbd: mov r13, rsi  reg(16, 1)  reg(4, 7f7d0cbede1e) 
0x7f7d10668fc0: mov rbp, rdx
0x7f7d10668fc3: mov qword ptr [rsp], rcx  reg(9, 7f7d0cbeddfc)  mem(7f7d0cbedd60, 0) 
0x7f7d10668fc7: mov rbx, r8  reg(7, 0)  reg(11, 7f7d0cbede00) 
0x7f7d10668fca: mov word ptr [r8+0x6], 0x0  mem(7f7d0cbede06, 0) 
0x7f7d10668fd1: mov word ptr [r8+0x8], 0x0  mem(7f7d0cbede08, 0) 
0x7f7d10668fd8: mov word ptr [r8], 0x0  mem(7f7d0cbede00, 0) 
0x7f7d10668fde: mov word ptr [r8+0x4], 0x0  mem(7f7d0cbede04, 0) 
0x7f7d10668fe5: movzx eax, byte ptr [rdx+0x8]  reg(56, 0) 
0x7f7d10668fe9: mov word ptr [r8+0x2], ax  reg(29, 84)  mem(7f7d0cbede02, 0) 
0x7f7d10668fee: mov eax, 0x0  reg(56, 84) 
0x7f7d10668ff3: cmp byte ptr [rdx+0x8], 0x84  mem(7f7d08000a5f, 84) 
0x7f7d10668ff7: jnz 0x7f7d1066900a
0x7f7d10668ff9: movzx esi, word ptr [rdx+0x6]  reg(47, 7f7d0cbede1e) 
0x7f7d10668ffd: lea rdi, ptr [rdi+0x8]  reg(3, 7f7d080008c0) 
0x7f7d10669001: call 0x7f7d1065e8a0
TSnapBase::SwapWord(unsigned short)@plt: 7f7d080008c8 100 7f7d08000a57 7f7d0cbeddfc	_ZN9TSnapBase8SwapWordEt@plt
0x7f7d1065e8a0: jmp qword ptr [rip+0x221efa]
TSnapBase::SwapWord(unsigned short): 7f7d080008c8 100 7f7d08000a57 7f7d0cbeddfc	_ZN9TSnapBase8SwapWordEt
0x7f7d1065f56c: mov eax, esi  reg(56, 0)  reg(47, 100) 
0x7f7d1065f56e: rol ax, 0x8  reg(29, 100) 
0x7f7d1065f572: cmp byte ptr [rdi], 0x0  mem(7f7d080008c8, 1) 
0x7f7d1065f578: ret 
0x7f7d10669006: mov word ptr [rbx+0x4], ax  reg(29, 1)  mem(7f7d0cbede04, 0) 
0x7f7d1066900a: mov rdx, qword ptr [r12+0x21e0]  reg(8, 7f7d08000a57) 
0x7f7d10669012: cmp byte ptr [rdx+0x60d8], 0x0  mem(2013d18, 6400000000) 
0x7f7d10669019: jnz 0x7f7d10669048
0x7f7d1066901b: movzx edx, ax  reg(54, 200dc40)  reg(29, 1) 
0x7f7d1066901e: movzx esi, byte ptr [rbp+0x8]  reg(47, 100) 
0x7f7d10669022: mov rdi, r12  reg(3, 7f7d080008c8)  reg(15, 7f7d080008c0) 
0x7f7d10669025: call 0x7f7d1065e600
TS7Worker::GetArea(unsigned char, unsigned short)@plt: 7f7d080008c0 84 1 7f7d0cbeddfc	_ZN9TS7Worker7GetAreaEht@plt
0x7f7d1065e600: jmp qword ptr [rip+0x22204a]
0x7f7d1065e606: push 0xc7 
0x7f7d1065e60b: jmp 0x7f7d1065d980
TS7Worker::GetArea(unsigned char, unsigned short): 7f7d080008c0 84 1 7f7d0cbeddfc	_ZN9TS7Worker7GetAreaEht
0x7f7d1066849c: cmp sil, 0x81  reg(48, 84) 
0x7f7d106684a0: jz 0x7f7d106684ca
0x7f7d106684a2: cmp sil, 0x81  reg(48, 84) 
0x7f7d106684a6: jnbe 0x7f7d106684b6
0x7f7d106684b6: cmp sil, 0x83  reg(48, 84) 
0x7f7d106684ba: jz 0x7f7d106684e8
0x7f7d106684bc: cmp sil, 0x83  reg(48, 84) 
0x7f7d106684c0: jb 0x7f7d106684d9
0x7f7d106684c2: cmp sil, 0x84  reg(48, 84) 
0x7f7d106684c6: jz 0x7f7d10668515
0x7f7d10668515: sub rsp, 0x8
0x7f7d10668519: movzx esi, dx  reg(47, 84)  reg(35, 1) 
0x7f7d1066851c: mov rdi, qword ptr [rdi+0x21e0]  reg(3, 7f7d080008c0) 
0x7f7d10668523: call 0x7f7d1065deb0
TSnap7Server::FindDB(unsigned short)@plt: 200dc40 1 1 7f7d0cbeddfc	_ZN12TSnap7Server6FindDBEt@plt
0x7f7d1065deb0: jmp qword ptr [rip+0x2223f2]
TSnap7Server::FindDB(unsigned short): 200dc40 1 1 7f7d0cbeddfc	_ZN12TSnap7Server6FindDBEt
0x7f7d1066845a: mov eax, dword ptr [rdi+0x20ac]  reg(56, 1) 
0x7f7d10668460: lea edx, ptr [rax+0x1]  reg(54, 1) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(54, 3) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d10668463: test edx, edx  reg(54, 6) 
0x7f7d10668465: jle 0x7f7d10668494
0x7f7d10668467: lea rdx, ptr [rdi+0x20b0]  reg(8, 3) 
0x7f7d1066846e: mov eax, eax  reg(56, 2)  reg(56, 2) 
0x7f7d1065f9ea: sar edx, 0x6  reg(56, 2)  reg(56, 2) 
0x7f7d10668470: lea rcx, ptr [rdi+rax*8+0x20b8]  reg(56, 6666666c) 
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 2) 
0x7f7d1065f9ed: mov eax, esi  reg(10, 2) 
0x7f7d1066847b: test rax, rax  reg(56, 64) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668480: cmp word ptr [rax], si  reg(40, 1)  mem(201d650, 2000015) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(40, 1)  mem(201d650, 2000015) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d10668483: jz 0x7f7d10668499
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(8, 200fcf0g(45, 3) 
0x7f7d10668485: add rdx, 0x8  reg(8, 200fcf0) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fcf8)  reg(9, 200fd08) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 201d650) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1066847b: test rax, rax  reg(55, 3) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668480: cmp word ptr [rax], si  reg(40, 1)  mem(201d6a0, 5000067) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d10668483: jz 0x7f7d10668499
0x7f7d10668485: add rdx, 0x8  reg(8, 200fcf8) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fd00)  reg(9, 200fd08) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d10668478: mov rax, qword ptr [rdx]  reg(10, 201d6a0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1066847b: test rax, rax  reg(4, 186a0) 
0x7f7d1066847e: jz 0x7f7d10668485
0x7f7d10668480: cmp word ptr [rax], si  reg(40, 1)  mem(201d6f0, 4000003) 
0x7f7d10668483: jz 0x7f7d10668499
0x7f7d10668485: add rdx, 0x8  reg(8, 200fd00) 
0x7f7d10668489: cmp rdx, rcx  reg(8, 200fd08)  reg(9, 200fd08) 
0x7f7d1066848c: jnz 0x7f7d10668478
0x7f7d1066848e: mov eax, 0x0  reg(56, 201d6f0) 
0x7f7d10668493: ret 
0x7f7d10668528: jmp 0x7f7d10668530
0x7f7d10668530: add rsp, 0x8
0x7f7d10668534: ret 
0x7f7d1066902a: mov r15, rax  reg(18, 7f7d0cbede1c)  reg(10, 0) 
0x7f7d1066902d: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d10669030: jnz 0x7f7d1066904e
0x7f7d10669032: mov rdx, rbx  reg(8, 200fd08)  reg(7, 7f7d0cbede00) 
0x7f7d10669035: mov rsi, r13  reg(4, 1)  reg(16, 7f7d0cbede1e) 
0x7f7d10669038: mov rdi, r12  reg(3, 200dc40)  reg(15, 7f7d080008c0) 
0x7f7d1066903b: call 0x7f7d1065e250
TS7Worker::RA_NotFound(TResFunReadItem*, TEv&)@plt: 7f7d080008c0 7f7d0cbede1e 7f7d0cbede00 200fd08	_ZN9TS7Worker11RA_NotFoundEP15TResFunReadItemR3TEv@plt
0x7f7d1065e250: jmp qword ptr [rip+0x222222]
0x7f7d1065e256: push 0x8c 
0x7f7d1065e25b: jmp 0x7f7d1065d980
TS7Worker::RA_NotFound(TResFunReadItem*, TEv&): 7f7d080008c0 7f7d0cbede1e 7f7d0cbede00 200fd08	_ZN9TS7Worker11RA_NotFoundEP15TResFunReadItemR3TEv
0x7f7d10665676: push rbp
0x7f7d10665677: push rbx  reg(7, 7f7d0cbede00) 
0x7f7d10665678: sub rsp, 0x8
0x7f7d1066567c: mov rbx, rsi  reg(7, 7f7d0cbede00)  reg(4, 7f7d0cbede1e) 
0x7f7d1066567f: mov rbp, rdx
0x7f7d10665682: add rdi, 0x8  reg(3, 7f7d080008c0) 
0x7f7d10665686: mov esi, 0x4  reg(47, 7f7d0cbede1e) 
0x7f7d1066568b: call 0x7f7d1065e8a0
TSnapBase::SwapWord(unsigned short)@plt: 7f7d080008c8 4 7f7d0cbede00 200fd08	_ZN9TSnapBase8SwapWordEt@plt
0x7f7d1065e8a0: jmp qword ptr [rip+0x221efa]
TSnapBase::SwapWord(unsigned short): 7f7d080008c8 4 7f7d0cbede00 200fd08	_ZN9TSnapBase8SwapWordEt
0x7f7d1065f56c: mov eax, esi  reg(56, 0)  reg(47, 4) 
0x7f7d1065f56e: rol ax, 0x8  reg(29, 4) 
0x7f7d1065f572: cmp byte ptr [rdi], 0x0  mem(7f7d080008c8, 1) 
0x7f7d1065f578: ret 
0x7f7d10665690: mov word ptr [rbx+0x2], ax  reg(29, 400)  mem(7f7d0cbede20, 0) 
0x7f7d10665694: mov byte ptr [rbx], 0xa  mem(7f7d0cbede1e, 4000000) 
0x7f7d10665697: mov byte ptr [rbx+0x1], 0x0  mem(7f7d0cbede1f, 40000) 
0x7f7d1066569b: mov word ptr [rbp], 0x7  mem(7f7d0cbede00, 100840000) 
0x7f7d106656a1: mov eax, 0x0  reg(56, 400) 
0x7f7d106656a6: add rsp, 0x8
0x7f7d106656aa: pop rbx  reg(7, 7f7d0cbede1e) 
0x7f7d106656ab: pop rbp
0x7f7d106656ac: ret 
0x7f7d10669040: mov r14d, eax  reg(79, 7f7d080008c0)  reg(56, 0) 
0x7f7d10669043: jmp 0x7f7d106693df
0x7f7d106693df: mov eax, r14d  reg(56, 0)  reg(79, 0) 
0x7f7d106693e2: add rsp, 0x38
0x7f7d106693e6: pop rbx  reg(7, 7f7d0cbede00) 
0x7f7d106693e7: pop rbp
0x7f7d106693e8: pop r12  reg(15, 7f7d080008c0) 
0x7f7d106693ea: pop r13  reg(16, 7f7d0cbede1e) 
0x7f7d106693ec: pop r14  reg(17, 0) 
0x7f7d106693ee: pop r15  reg(18, 0) 
0x7f7d106693f0: ret 
0x7f7d1066949e: cmp dword ptr [rsp+0x14], ebx  reg(53, 0)  mem(7f7d0cbedde4, 8000a4b00000000) 
0x7f7d106694a2: jle 0x7f7d106694b2
0x7f7d106694b2: movzx eax, ax  reg(56, 0)  reg(29, 0) 
0x7f7d106694b5: lea rbp, ptr [rbp+rax*1+0x4]
0x7f7d106694ba: cmp r13d, 0x1  reg(76, 1) 
0x7f7d106694be: jle 0x7f7d106694f1
0x7f7d106694f1: add ebx, 0x1  reg(53, 0) 
0x7f7d106694f4: add r12, 0xc  reg(15, 7f7d08000a57) 
0x7f7d106694f8: cmp ebx, r13d  reg(53, 1)  reg(76, 1) 
0x7f7d106694fb: jl 0x7f7d10669486
0x7f7d106694fd: jmp 0x7f7d10669504
0x7f7d10669504: mov byte ptr [rsp+0x40], 0x32  mem(7f7d0cbede10, 0) 
0x7f7d10669509: mov byte ptr [rsp+0x41], 0x3  mem(7f7d0cbede11, 0) 
0x7f7d1066950e: mov word ptr [rsp+0x42], 0x0  mem(7f7d0cbede12, 0) 
0x7f7d10669515: mov rax, qword ptr [r14+0x11a0]  reg(10, 0) 
0x7f7d1066951c: movzx eax, word ptr [rax+0x4]  reg(56, 7f7d08000a4b) 
0x7f7d10669520: mov word ptr [rsp+0x44], ax  reg(29, 0)  mem(7f7d0cbede14, 0) 
0x7f7d10669525: lea rbx, ptr [r14+0x8]  reg(7, 1) 
0x7f7d10669529: mov esi, 0x2  reg(47, 4) 
0x7f7d1066952e: mov rdi, rbx  reg(3, 7f7d080008c8)  reg(7, 7f7d080008c8) 
0x7f7d10669531: call 0x7f7d1065e8a0
TSnapBase::SwapWord(unsigned short)@plt: 7f7d080008c8 2 7f7d0cbede00 200fd08	_ZN9TSnapBase8SwapWordEt@plt
0x7f7d1065e8a0: jmp qword ptr [rip+0x221efa]
TSnapBase::SwapWord(unsigned short): 7f7d080008c8 2 7f7d0cbede00 200fd08	_ZN9TSnapBase8SwapWordEt
0x7f7d1065f56c: mov eax, esi  reg(56, 0)  reg(47, 2) 
0x7f7d1065f56e: rol ax, 0x8  reg(29, 2) 
0x7f7d1065f572: cmp byte ptr [rdi], 0x0  mem(7f7d080008c8, 1) 
0x7f7d1065f578: ret 
0x7f7d10669536: mov word ptr [rsp+0x46], ax  reg(29, 200)  mem(7f7d0cbede16, 0) 
0x7f7d1066953b: mov word ptr [rsp+0x4a], 0x0  mem(7f7d0cbede1a, 400000a00000000) 
0x7f7d10669542: lea esi, ptr [rbp-0x2]  reg(47, 2) 
0x7f7d10669545: movzx esi, si  reg(47, 4)  reg(40, 4) 
0x7f7d10669548: mov rdi, rbx  reg(3, 7f7d080008c8)  reg(7, 7f7d080008c8) 
0x7f7d1066954b: call 0x7f7d1065e8a0
TSnapBase::SwapWord(unsigned short)@plt: 7f7d080008c8 4 7f7d0cbede00 200fd08	_ZN9TSnapBase8SwapWordEt@plt
0x7f7d1065e8a0: jmp qword ptr [rip+0x221efa]
TSnapBase::SwapWord(unsigned short): 7f7d080008c8 4 7f7d0cbede00 200fd08	_ZN9TSnapBase8SwapWordEt
0x7f7d1065f56c: mov eax, esi  reg(56, 200)  reg(47, 4) 
0x7f7d1065f56e: rol ax, 0x8  reg(29, 4) 
0x7f7d1065f572: cmp byte ptr [rdi], 0x0  mem(7f7d080008c8, 1) 
0x7f7d1065f578: ret 
0x7f7d10669550: mov word ptr [rsp+0x48], ax  reg(29, 400)  mem(7f7d0cbede18, a000000000000) 
0x7f7d10669555: mov rcx, qword ptr [rsp+0x18]  reg(9, 200fd08) 
0x7f7d1066955a: movzx eax, byte ptr [rcx+0xa]  reg(56, 400) 
0x7f7d1066955e: mov byte ptr [rsp+0x4c], al  reg(27, 4)  mem(7f7d0cbede1c, 400000a0000) 
0x7f7d10669562: movzx eax, byte ptr [rcx+0xb]  reg(56, 4) 
0x7f7d10669566: mov byte ptr [rsp+0x4d], al  reg(27, 1)  mem(7f7d0cbede1d, 400000a00) 
0x7f7d1066956a: lea edx, ptr [rbp+0xc]  reg(54, 7f7d0cbede00) 
0x7f7d1066956d: lea rsi, ptr [rsp+0x40]  reg(4, 4) 
0x7f7d10669572: mov rdi, r14  reg(3, 7f7d080008c8)  reg(17, 7f7d080008c0) 
0x7f7d10669575: call 0x7f7d1065ef20
TIsoTcpSocket::isoSendBuffer(void*, int)@plt: 7f7d080008c0 7f7d0cbede10 12 7f7d08000a4b	_ZN13TIsoTcpSocket13isoSendBufferEPvi@plt
0x7f7d1065ef20: jmp qword ptr [rip+0x221bba]
0x7f7d1065ef26: push 0x159 
0x7f7d1065ef2b: jmp 0x7f7d1065d980
TIsoTcpSocket::isoSendBuffer(void*, int): 7f7d080008c0 7f7d0cbede10 12 7f7d08000a4b	_ZN13TIsoTcpSocket13isoSendBufferEPvi
0x7f7d10662b04: push r13  reg(16, 1) 
0x7f7d10662b06: push r12  reg(15, 7f7d08000a63) 
0x7f7d10662b08: push rbp
0x7f7d10662b09: push rbx  reg(7, 7f7d080008c8) 
0x7f7d10662b0a: sub rsp, 0x8
0x7f7d10662b0e: mov rbx, rdi  reg(7, 7f7d080008c8)  reg(3, 7f7d080008c0) 
0x7f7d10662b11: mov r13, rsi  reg(16, 1)  reg(4, 7f7d0cbede10) 
0x7f7d10662b14: mov ebp, edx
0x7f7d10662b16: call 0x7f7d1065e1b0
TIsoTcpSocket::ClrIsoError()@plt: 7f7d080008c0 7f7d0cbede10 12 7f7d08000a4b	_ZN13TIsoTcpSocket11ClrIsoErrorEv@plt
0x7f7d1065e1b0: jmp qword ptr [rip+0x222272]
TIsoTcpSocket::ClrIsoError(): 7f7d080008c0 7f7d0cbede10 12 7f7d08000a4b	_ZN13TIsoTcpSocket11ClrIsoErrorEv
0x7f7d106627b6: mov dword ptr [rdi+0x1198], 0x0  mem(7f7d08001a58, 0) 
0x7f7d106627c0: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d106627c7: ret 
0x7f7d10662b1b: lea eax, ptr [rbp+0x6]  reg(56, 1) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d10662b1e: cmp eax, 0x1006  reg(10, 0) 
0x7f7d10662b23: jnbe 0x7f7d10662ba2
0x7f7d10662b25: lea r12d, ptr [rbp+0x7]  reg(73, 7f7d08000a63) 
0x7f7d10662b29: mov byte ptr [rbx+0x184], 0x3  mem(7f7d08000a44, 3280f0021f000003) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  mem(7f7d08000a44, 3280f0021f000003) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d10662b30: mov byte ptr [rbx+0x185], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d10662b37: mov rax, r12  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d10662b3a: movzx eax, ah  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10662b3d: mov byte ptr [rbx+0x186], al  reg(27, 0)  mem(7f7d08000a46, 13280f0021f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d10662b43: mov byte ptr [rbx+0x187], r12b  reg(54, 19)  mem(7f7d08000a47, 13280f0021f) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d10662b4a: mov byte ptr [rbx+0x188], 0x2  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d10662b51: mov byte ptr [rbx+0x189], 0xf0  mem(7f7d08000a49, 13280f0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d10662b58: mov byte ptr [rbx+0x18a], 0x80  mem(7f7d08000a4a, 13280) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d10662b5f: test r13, r13  reg(8, 07f7d0cbede10)  reg(16, 7f7d0cbede10) 
0x7f7d10662b62: jz 0x7f7d10662b76
0x7f7d10662b64: lea rdi, ptr [rbx+0x18b]  reg(3, 7f7d080008c0) 
0x7f7d10662b6b: movsxd rdx, ebp  reg(8, 12) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 12) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d10662b6e: mov rsi, r13  reg(45, 3) 
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d10662b71: call 0x7f7d1065f2a0
memcpy@plt: 7f7d08000a4b 7f7d0cbede10 12 7f7d08000a4b	memcpy@plt
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d08000a4b 7f7d0cbede10 12 7f7d08000a4b	memcpy
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
dlsym@plt: ffffffffffffffff 7f7d108f3d08 12 7f7d08000a4b	dlsym@plt
0x7f7d10662b76: lea rsi, ptr [rbx+0x184]  reg(4, 7f7d0cbede10) 
0x7f7d10662b7d: mov edx, r12d  reg(54, 12)  reg(73, 19) 
0x7f7d10662b80: mov rdi, rbx  reg(3, 7f7d08000a4b)  reg(7, 7f7d080008c0) 
0x7f7d10662b83: call 0x7f7d1065dc70
TMsgSocket::SendPacket(void*, int)@plt: 7f7d080008c0 7f7d08000a44 19 7f7d08000a4b	_ZN10TMsgSocket10SendPacketEPvi@plt
0x7f7d1065dc70: jmp qword ptr [rip+0x222512]
0x7f7d1065dc76: push 0x2e 
0x7f7d1065dc7b: jmp 0x7f7d1065d980
TMsgSocket::SendPacket(void*, int): 7f7d080008c0 7f7d08000a44 19 7f7d08000a4b	_ZN10TMsgSocket10SendPacketEPvi
0x7f7d10660182: push r12  reg(15, 19) 
0x7f7d10660184: push rbp
0x7f7d10660185: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10660186: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10660189: mov r12, rsi  reg(15, 19)  reg(4, 7f7d08000a44) 
0x7f7d1066018c: mov ebp, edx
0x7f7d1066018e: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d10660195: mov esi, dword ptr [rdi+0x74]  reg(47, 7f7d08000a44) 
0x7f7d10660198: test esi, esi  reg(47, a)  reg(47, a) 
0x7f7d1066019a: jle 0x7f7d106601b3
0x7f7d1066019c: call 0x7f7d1065f1d0
TMsgSocket::CanWrite(int)@plt: 7f7d080008c0 a 19 7f7d08000a4b	_ZN10TMsgSocket8CanWriteEi@plt
0x7f7d1065f1d0: jmp qword ptr [rip+0x221a62]
0x7f7d1065f1d6: push 0x184 
0x7f7d1065f1db: jmp 0x7f7d1065d980
TMsgSocket::CanWrite(int): 7f7d080008c0 a 19 7f7d08000a4b	_ZN10TMsgSocket8CanWriteEi
0x7f7d1065f8c0: push rbp
0x7f7d1065f8c1: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f8c2: sub rsp, 0xa8
0x7f7d1065f8c9: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d08000a4b) 
0x7f7d1065f8d2: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbedd58, 7f7d08000a44) 
0x7f7d1065f8da: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f8dc: cmp dword ptr [rdi+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f8e0: jz 0x7f7d1065f990
0x7f7d1065f8e6: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f8e9: mov edx, 0x10624dd3  reg(54, 19) 
0x7f7d1065f8ee: mov eax, esi  reg(56, 0)  reg(47, a) 
0x7f7d1065f8f0: imul edx  reg(54, 10624dd3)  reg(56, a) 
0x7f7d1065f8f2: sar edx, 0x6  reg(54, 0) 
0x7f7d1065f8f5: mov eax, esi  reg(56, a3d70a3e)  reg(47, a) 
0x7f7d1065f8f7: sar eax, 0x1f  reg(56, a) 
0x7f7d1065f8fa: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f8fc: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f902: sub esi, eax  reg(47, a)  reg(56, 0) 
0x7f7d1065f904: imul esi, esi, 0x3e8  reg(47, a)  reg(47, a) 
0x7f7d1065f90a: movsxd rsi, esi  reg(4, 2710)  reg(47, 2710) 
0x7f7d1065f90d: mov qword ptr [rsp+0x8], rsi  reg(4, 2710)  mem(7f7d0cbedcc8, 400000a01040000) 
0x7f7d1065f912: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065f915: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0cbedcc0, 400020000000000) 
0x7f7d1065f919: lea rbp, ptr [rsp+0x10]
0x7f7d1065f91e: mov ecx, 0x10  reg(55, 7f7d08000a4b) 
0x7f7d1065f923: mov eax, 0x0  reg(56, 0) 
0x7f7d1065f928: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d1065f92b: cld 
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92c: rep stosq qword ptr [rdi]
0x7f7d1065f92f: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0cbedd50) 
0x7f7d1065f933: call 0x7f7d1065f390
__fdelt_chk@plt: 4 2710 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065f938: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d1065f93b: mov edx, edi  reg(54, 0)  reg(45, 4) 
0x7f7d1065f93d: sar edx, 0x1f  reg(54, 4) 
0x7f7d1065f940: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065f943: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065f946: and ecx, 0x3f  reg(55, 4) 
0x7f7d1065f949: sub ecx, edx  reg(55, 4)  reg(54, 0) 
0x7f7d1065f94b: mov edx, 0x1  reg(54, 0) 
0x7f7d1065f950: shl rdx, cl  reg(8, 1)  reg(30, 4) 
0x7f7d1065f953: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 10)  mem(7f7d0cbedcd0, 0) 
0x7f7d1065f958: add edi, 0x1  reg(45, 4) 
0x7f7d1065f95b: mov r8, rsp  reg(11, 0) 
0x7f7d1065f95e: mov ecx, 0x0  reg(55, 4) 
0x7f7d1065f963: mov rdx, rbp  reg(8, 10) 
0x7f7d1065f966: mov esi, 0x0  reg(47, 2710) 
0x7f7d1065f96b: call 0x7f7d1065dda0
select@plt: 5 0 7f7d0cbedcd0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065f970: cdqe   reg(10, 1)  reg(56, 1) 
0x7f7d1065f972: cmp rax, 0xffffffffffffffff  reg(10, 1) 
0x7f7d1065f976: jnz 0x7f7d1065f988
0x7f7d1065f988: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065f98b: setnle al  reg(27, 1) 
0x7f7d1065f98e: jmp 0x7f7d1065f995
0x7f7d1065f995: mov rbx, qword ptr [rsp+0x98]  reg(7, 7f7d080008c0) 
0x7f7d1065f99d: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065f9a6: jz 0x7f7d1065f9ad
0x7f7d1065f9ad: add rsp, 0xa8
0x7f7d1065f9b4: pop rbx  reg(7, 0) 
0x7f7d1065f9b5: pop rbp
0x7f7d1065f9b6: ret 
0x7f7d106601a1: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106601a3: jnz 0x7f7d106601b3
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d106601b3: movsxd rbp, ebp
0x7f7d106601b6: mov edi, dword ptr [rbx+0x18]  reg(45, 2) 
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d106601b9: mov ecx, 0x4000  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f003748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d106601be: mov rdx, rbp  reg(8, 1) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d106601c1: mov rsi, r12  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d106601c4: call 0x7f7d1065eb90
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
send@plt: 4 7f7d08000a44 19 4000	send@plt
0x7f7d1065eb90: jmp qword ptr [rip+0x221d82]
0x7f7d1065eb96: push 0x120 
0x7f7d1065eb9b: jmp 0x7f7d1065d980
send: 4 7f7d08000a44 19 4000	send
dlsym@plt: ffffffffffffffff 7f7d108f3d76 19 4000	dlsym@plt
fprintf@plt: 7f7d10068540 7f7d108f3d80 4 7f7d08000a44	fprintf@plt
0x7f7d106601c9: mov rdx, rax  reg(8, 0)  reg(10, 19) 
0x7f7d106601cc: mov eax, 0x0  reg(56, 19) 
0x7f7d106601d1: cmp rdx, rbp  reg(8, 19) 
0x7f7d106601d4: jz 0x7f7d106601e8
0x7f7d106601e8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106601e9: pop rbp
0x7f7d106601ea: pop r12  reg(15, 7f7d08000a44) 
0x7f7d106601ec: ret 
0x7f7d10662b88: mov eax, 0x0  reg(56, 0) 
0x7f7d10662b8d: cmp dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d10662b91: jz 0x7f7d10662baf
0x7f7d10662baf: add rsp, 0x8
0x7f7d10662bb3: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10662bb4: pop rbp
0x7f7d10662bb5: pop r12  reg(15, 19) 
0x7f7d10662bb7: pop r13  reg(16, 7f7d0cbede10) 
0x7f7d10662bb9: ret 
0x7f7d1066957a: cmp r13d, 0x1  reg(76, 1) 
0x7f7d1066957e: jnz 0x7f7d106695b1
0x7f7d10669580: movzx ecx, word ptr [rsp+0x32]  reg(55, 2) 
0x7f7d10669585: movzx edx, word ptr [rsp+0x30]  reg(54, 19) 
0x7f7d1066958a: sub rsp, 0x8
0x7f7d1066958e: movzx eax, word ptr [rsp+0x40]  reg(56, 0) 
0x7f7d10669593: push rax  reg(10, 0) 
0x7f7d10669594: movzx r9d, word ptr [rsp+0x46]  reg(64, 4d) 
0x7f7d1066959a: movzx r8d, word ptr [rsp+0x44]  reg(61, 7f7d0cbef700) 
0x7f7d106695a0: mov esi, 0x20000  reg(47, 0) 
0x7f7d106695a5: mov rdi, r14  reg(3, 7f7d0cbeb580)  reg(17, 7f7d080008c0) 
0x7f7d106695a8: call 0x7f7d1065edf0
TS7Worker::DoEvent(unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt: 7f7d080008c0 20000 7 84	_ZN9TS7Worker7DoEventEjttttt@plt
0x7f7d1065edf0: jmp qword ptr [rip+0x221c52]
0x7f7d1065edf6: push 0x146 
0x7f7d1065edfb: jmp 0x7f7d1065d980
TS7Worker::DoEvent(unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 7f7d080008c0 20000 7 84	_ZN9TS7Worker7DoEventEjttttt
0x7f7d106655f8: sub rsp, 0x8
0x7f7d106655fc: mov r11d, esi  reg(70, 7f7d106655f8)  reg(47, 20000) 
0x7f7d106655ff: mov rax, qword ptr [rdi+0x21e0]  reg(10, 0) 
0x7f7d10665606: movzx edx, dx  reg(54, 7)  reg(35, 7) 
0x7f7d10665609: mov esi, dword ptr [rdi+0x3c]  reg(47, 20000) 
0x7f7d1066560c: mov r10, qword ptr [rax]  reg(13, 63) 
0x7f7d1066560f: movzx edi, word ptr [rsp+0x10]  reg(45, 7f7d080008c0) 
0x7f7d10665614: push rdi  reg(3, 0) 
0x7f7d10665615: movzx r9d, r9w  reg(64, 0)  reg(63, 0) 
0x7f7d10665619: push r9  reg(12, 0) 
0x7f7d1066561b: movzx r9d, r8w  reg(64, 0)  reg(60, 1) 
0x7f7d1066561f: movzx r8d, cx  reg(61, 1)  reg(32, 84) 
0x7f7d10665623: mov ecx, edx  reg(55, 84)  reg(54, 7) 
0x7f7d10665625: mov edx, r11d  reg(54, 7)  reg(70, 20000) 
0x7f7d10665628: mov rdi, rax  reg(3, 0)  reg(10, 200dc40) 
0x7f7d1066562b: call qword ptr [r10+0x18]
TCustomMsgServer::DoEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 200dc40 100007f 20000 7	_ZN16TCustomMsgServer7DoEventEijttttt
0x7f7d10660b80: push r15  reg(18, 7f7d0cbede1c) 
0x7f7d10660b82: push r14  reg(17, 7f7d080008c0) 
0x7f7d10660b84: push r13  reg(16, 1) 
0x7f7d10660b86: push r12  reg(15, 7f7d08000a63) 
0x7f7d10660b88: push rbp
0x7f7d10660b89: push rbx  reg(7, 7f7d080008c8) 
0x7f7d10660b8a: sub rsp, 0x48
0x7f7d10660b8e: mov dword ptr [rsp], esi  reg(47, 100007f)  mem(7f7d0cbedd20, 7f7d08000a44) 
0x7f7d10660b91: mov dword ptr [rsp+0x4], ecx  reg(55, 7)  mem(7f7d0cbedd24, 108f3a2900007f7d) 
0x7f7d10660b95: mov dword ptr [rsp+0x8], r8d  reg(61, 84)  mem(7f7d0cbedd28, 7f7d108f3a29) 
0x7f7d10660b9a: mov dword ptr [rsp+0xc], r9d  reg(64, 1)  mem(7f7d0cbedd2c, 1900007f7d) 
0x7f7d10660b9f: mov r14d, dword ptr [rsp+0x80]  reg(79, 7f7d080008c0) 
0x7f7d10660ba7: mov r13d, dword ptr [rsp+0x88]  reg(76, 1) 
0x7f7d10660baf: mov rax, qword ptr fs:[0x28]  reg(10, 200dc40) 
0x7f7d10660bb8: mov qword ptr [rsp+0x38], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbedd58, 400004000) 
0x7f7d10660bbd: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10660bbf: cmp byte ptr [rdi+0x50], 0x0  mem(200dc90, 0) 
0x7f7d10660bc3: jnz 0x7f7d10660c80
0x7f7d10660bc9: mov rbx, rdi  reg(7, 7f7d080008c8)  reg(3, 200dc40) 
0x7f7d10660bcc: mov ebp, edx
0x7f7d10660bce: mov r12d, edx  reg(73, 7f7d08000a63)  reg(54, 20000) 
0x7f7d10660bd1: and r12d, dword ptr [rdi+0x206c]  reg(73, 20000) 
0x7f7d10660bd8: mov r15d, edx  reg(82, 7f7d0cbede1c)  reg(54, 20000) 
0x7f7d10660bdb: and r15d, dword ptr [rdi+0x2068]  reg(82, 20000) 
0x7f7d10660be2: jnz 0x7f7d10660bed
0x7f7d10660bed: mov rdi, qword ptr [rbx+0x58]  reg(3, 200dc40) 
0x7f7d10660bf1: call 0x7f7d1065f050
pthread_mutex_lock@plt: 2013d60 100007f 20000 7	pthread_mutex_lock@plt
0x7f7d1065f050: jmp qword ptr [rip+0x221b22]
0x7f7d10660bf6: lea rdi, ptr [rsp+0x10]  reg(3, 1) 
0x7f7d10660bfb: call 0x7f7d1065f3a0
time@plt: 7f7d0cbedd30 0 0 0	time@plt
0x7f7d1065f3a0: jmp qword ptr [rip+0x22197a]
0x7f7d10660c00: mov eax, dword ptr [rsp]  reg(56, 5cc5a8ac) 
0x7f7d10660c03: mov dword ptr [rsp+0x18], eax  reg(56, 100007f)  mem(7f7d0cbedd38, 7f7d108f39ec) 
0x7f7d10660c07: mov dword ptr [rsp+0x1c], ebp  mem(7f7d0cbedd3c, 400007f7d) 
0x7f7d10660c0b: movzx eax, word ptr [rsp+0x4]  reg(56, 100007f) 
0x7f7d10660c10: mov word ptr [rsp+0x20], ax  reg(29, 7)  mem(7f7d0cbedd40, 4) 
0x7f7d10660c15: movzx eax, word ptr [rsp+0x8]  reg(56, 7) 
0x7f7d10660c1a: mov word ptr [rsp+0x22], ax  reg(29, 84)  mem(7f7d0cbedd42, 19000000000000) 
0x7f7d10660c1f: movzx eax, word ptr [rsp+0xc]  reg(56, 84) 
0x7f7d10660c24: mov word ptr [rsp+0x24], ax  reg(29, 1)  mem(7f7d0cbedd44, 1900000000) 
0x7f7d10660c29: mov word ptr [rsp+0x26], r14w  reg(78, 0)  mem(7f7d0cbedd46, 190000) 
0x7f7d10660c2f: mov word ptr [rsp+0x28], r13w  reg(75, 0)  mem(7f7d0cbedd48, 19) 
0x7f7d10660c35: test r12d, r12d  reg(73, 0)  reg(73, 0) 
0x7f7d10660c38: jz 0x7f7d10660c53
0x7f7d10660c53: test r15d, r15d  reg(82, 20000)  reg(82, 20000) 
0x7f7d10660c56: jz 0x7f7d10660c66
0x7f7d10660c58: lea rsi, ptr [rsp+0x10]  reg(4, 0) 
0x7f7d10660c5d: mov rdi, qword ptr [rbx+0x38]  reg(3, 7f7d0cbedd30) 
0x7f7d10660c61: call 0x7f7d1065e1a0
TMsgEventQueue::Insert(void*)@plt: 2013d90 7f7d0cbedd30 0 0	_ZN14TMsgEventQueue6InsertEPv@plt
0x7f7d1065e1a0: jmp qword ptr [rip+0x22227a]
TMsgEventQueue::Insert(void*): 2013d90 7f7d0cbedd30 0 0	_ZN14TMsgEventQueue6InsertEPv
0x7f7d10660b36: push rbp
0x7f7d10660b37: push rbx  reg(7, 200dc40) 
0x7f7d10660b38: sub rsp, 0x8
0x7f7d10660b3c: mov rbx, rdi  reg(7, 200dc40)  reg(3, 2013d90) 
0x7f7d10660b3f: mov rbp, rsi
0x7f7d10660b42: call 0x7f7d1065dfb0
TMsgEventQueue::Full()@plt: 2013d90 7f7d0cbedd30 0 0	_ZN14TMsgEventQueue4FullEv@plt
0x7f7d1065dfb0: jmp qword ptr [rip+0x222372]
TMsgEventQueue::Full(): 2013d90 7f7d0cbedd30 0 0	_ZN14TMsgEventQueue4FullEv
0x7f7d10660b16: mov edx, dword ptr [rdi+0x4]  reg(54, 0) 
0x7f7d10660b19: mov eax, dword ptr [rdi]  reg(56, 1) 
0x7f7d10660b1b: lea ecx, ptr [rax+0x1]  reg(55, 0) 
0x7f7d10660b1e: cmp edx, ecx  reg(54, 0)  reg(55, 3) 
0x7f7d10660b20: jz 0x7f7d10660b30
0x7f7d10660b22: cmp dword ptr [rdi+0x8], eax  reg(56, 2)  mem(2013d98, 5dc000005db) 
0x7f7d10660b25: setz cl  reg(30, 3) 
0x7f7d10660b28: test edx, edx  reg(54, 0)  reg(54, 0) 
0x7f7d10660b2a: setz al  reg(27, 2) 
0x7f7d10660b2d: and eax, ecx  reg(56, 1)  reg(55, 0) 
0x7f7d10660b2f: ret 
0x7f7d10660b47: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d10660b49: jnz 0x7f7d10660b79
0x7f7d10660b4b: mov eax, dword ptr [rbx]  reg(56, 0) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d10660b4d: cmp eax, dword ptr [rbx+0x8]  reg(56, 2) 
0x7f7d10660b50: jnl 0x7f7d10660b59
0x7f7d10660b52: add eax, 0x1  reg(56, 2) 
0x7f7d10660b55: mov dword ptr [rbx], eax  reg(56, 3)  mem(2013d90, 2) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(56, 3)  mem(2013d90, 2) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d10660b57: jmp 0x7f7d10660b5f
0x7f7d10660b5f: mov edx, dword ptr [rbx+0x18]  reg(54, 0) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d10660b62: mov edi, edx  reg(45, 2013d90)  reg(54, 1a) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d10660b64: imul edi, dword ptr [rbx]  reg(10, 0) 
0x7f7d10660b67: movsxd rdi, edi  reg(3, 4e)  reg(45, 4e) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(3, 4e)  reg(45, 4e) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d10660b6a: add rdi, qword ptr [rbx+0x10]  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d10660b6e: movsxd rdx, edx  reg(8, 1a)  reg(54, 1a) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d10660b71: mov rsi, rbp  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d10660b74: call 0x7f7d1065f2a0
memcpy@plt: 2013e0e 7f7d0cbedd30 1a 0	memcpy@plt
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
memcpy: 2013e0e 7f7d0cbedd30 1a 0	memcpy
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1a 0	dlsym@plt
0x7f7d10660b79: add rsp, 0x8
0x7f7d10660b7d: pop rbx  reg(7, 2013d90) 
0x7f7d1065fa48: shl rdx, cl  reg(7, 2013d90) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d10660b7e: pop rbp
0x7f7d10660b7f: ret 
0x7f7d10660c66: mov rdi, qword ptr [rbx+0x58]  reg(3, 2013e0e) 
0x7f7d10660c6a: call 0x7f7d1065f270
pthread_mutex_unlock@plt: 2013d60 7f7d0cbedd30 1a 2013e0e	pthread_mutex_unlock@plt
0x7f7d1065f270: jmp qword ptr [rip+0x221a12]
0x7f7d10660c6f: jmp 0x7f7d10660c80
0x7f7d10660c80: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f7d10660c85: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10660c8e: jz 0x7f7d10660c95
0x7f7d10660c95: add rsp, 0x48
0x7f7d10660c99: pop rbx  reg(7, 200dc40) 
0x7f7d10660c9a: pop rbp
0x7f7d10660c9b: pop r12  reg(15, 0) 
0x7f7d10660c9d: pop r13  reg(16, 0) 
0x7f7d10660c9f: pop r14  reg(17, 0) 
0x7f7d10660ca1: pop r15  reg(18, 20000) 
0x7f7d10660ca3: ret 
0x7f7d1066562f: add rsp, 0x18
0x7f7d10665633: ret 
0x7f7d106695ad: add rsp, 0x10
0x7f7d106695b1: mov eax, 0x1  reg(56, 0) 
0x7f7d106695b6: mov rcx, qword ptr [rsp+0x1048]  reg(9, 2013e0e) 
0x7f7d106695be: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d106695c7: jz 0x7f7d106695ce
0x7f7d106695ce: add rsp, 0x1058
0x7f7d106695d5: pop rbx  reg(7, 7f7d080008c8) 
0x7f7d106695d6: pop rbp
0x7f7d106695d7: pop r12  reg(15, 7f7d08000a63) 
0x7f7d106695d9: pop r13  reg(16, 1) 
0x7f7d106695db: pop r14  reg(17, 7f7d080008c0) 
0x7f7d106695dd: pop r15  reg(18, 7f7d0cbede1c) 
0x7f7d106695df: ret 
0x7f7d10669cc0: jmp 0x7f7d10669d15
0x7f7d10669d15: add rsp, 0x8
0x7f7d10669d19: ret 
0x7f7d10669d61: mov ebx, eax  reg(53, 1)  reg(56, 1) 
0x7f7d10669d63: jmp 0x7f7d10669da8
0x7f7d10669da8: mov eax, ebx  reg(56, 1)  reg(53, 1) 
0x7f7d10669daa: pop rbx  reg(7, 1) 
0x7f7d10669dab: pop rbp
0x7f7d10669dac: pop r12  reg(15, 7f7d0cbeee94) 
0x7f7d10669dae: ret 
0x7f7d1066534b: mov ebp, eax
0x7f7d1066534d: jmp 0x7f7d106653c4
0x7f7d106653c4: mov eax, ebp  reg(56, 1) 
0x7f7d106653c6: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d106653cb: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d106653d4: jz 0x7f7d106653db
0x7f7d106653db: add rsp, 0x10
0x7f7d106653df: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106653e0: pop rbp
0x7f7d106653e1: pop r12  reg(15, 7f7d08000a44) 
0x7f7d106653e3: ret 
0x7f7d106653fd: add rsp, 0x8
0x7f7d10665401: ret 
0x7f7d106652c1: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106652c2: ret 
0x7f7d1066129e: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106612a0: mov eax, 0x1  reg(56, 1) 
0x7f7d106612a8: jmp 0x7f7d10661276
0x7f7d10661276: cmp byte ptr [rbx+0x12], 0x0  mem(7f7d08002af2, dc40000000010000) 
0x7f7d1066127a: jnz 0x7f7d106612aa
0x7f7d1066127c: test r12b, r12b  reg(71, 0)  reg(71, 0) 
0x7f7d1066127f: jnz 0x7f7d106612aa
0x7f7d10661281: test bpl, bpl 
0x7f7d10661284: jnz 0x7f7d106612aa
0x7f7d10661286: mov rax, qword ptr [rbx+0x18]  reg(10, 1) 
0x7f7d1066128a: cmp byte ptr [rax+0x50], 0x0  mem(200dc90, 0) 
0x7f7d1066128e: jnz 0x7f7d10661354
0x7f7d10661294: mov rdi, qword ptr [rbx+0x20]  reg(3, 2013d60) 
0x7f7d10661298: mov rax, qword ptr [rdi]  reg(10, 200dc40) 
0x7f7d1066129b: call qword ptr [rax+0x10]
TIsoTcpWorker::Execute(): 7f7d080008c0 0 2013d60 0	_ZN13TIsoTcpWorker7ExecuteEv
0x7f7d106652aa: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d106652ab: mov rbx, rdi  reg(7, 7f7d08002ae0)  reg(3, 7f7d080008c0) 
0x7f7d106652ae: mov rax, qword ptr [rdi]  reg(10, 7f7d1087f768) 
0x7f7d106652b1: call qword ptr [rax+0x38]
TIsoTcpWorker::ExecuteSend(): 7f7d080008c0 0 2013d60 0	_ZN13TIsoTcpWorker11ExecuteSendEv
0x7f7d106652a4: mov eax, 0x1  reg(56, 7f7d1087f768) 
0x7f7d106652a9: ret 
0x7f7d106652b4: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106652b6: jz 0x7f7d106652c1
0x7f7d106652b8: mov rax, qword ptr [rbx]  reg(10, 1) 
0x7f7d106652bb: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d106652be: call qword ptr [rax+0x40]
TS7Worker::ExecuteRecv(): 7f7d080008c0 0 2013d60 0	_ZN9TS7Worker11ExecuteRecvEv
0x7f7d106653e4: sub rsp, 0x8
0x7f7d106653e8: mov rax, qword ptr [rdi+0x21e0]  reg(10, 7f7d1087f768) 
0x7f7d106653ef: mov eax, dword ptr [rax+0x60dc]  reg(56, 200dc40) 
0x7f7d106653f5: mov dword ptr [rdi+0x68], eax  reg(56, 64)  mem(7f7d08000928, 2ee00000064) 
0x7f7d106653f8: call 0x7f7d1065eb10
TIsoTcpWorker::ExecuteRecv()@plt: 7f7d080008c0 0 2013d60 0	_ZN13TIsoTcpWorker11ExecuteRecvEv@plt
0x7f7d1065eb10: jmp qword ptr [rip+0x221dc2]
TIsoTcpWorker::ExecuteRecv(): 7f7d080008c0 0 2013d60 0	_ZN13TIsoTcpWorker11ExecuteRecvEv
0x7f7d106652c6: push r12  reg(15, 0) 
0x7f7d106652c8: push rbp
0x7f7d106652c9: push rbx  reg(7, 7f7d080008c0) 
0x7f7d106652ca: sub rsp, 0x10
0x7f7d106652ce: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d106652d1: mov rax, qword ptr fs:[0x28]  reg(10, 64) 
0x7f7d106652da: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee98, f4f60b3748f98f00) 
0x7f7d106652df: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d106652e1: mov esi, dword ptr [rdi+0x68]  reg(47, 0) 
0x7f7d106652e4: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 7f7d080008c0 64 2013d60 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 7f7d080008c0 64 2013d60 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee68, 7f7d10669d61) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 2013d60) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0cbeedd8, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0cbeedd0, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d1065fa68: cdqe   reg(3, 7f7d080008c0) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0cbeee60) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(3, 7f7d0cbeee60) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 4 186a0 0 0	__fdelt_chk@plt
__fdelt_chk@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa33: mov edx, edi  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 4) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 4)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 4) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 10)  mem(7f7d0cbeede0, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 4) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 0) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(11, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa56: mov ecx, 0x0  reg(54, 8) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 10) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa5b: mov edx, 0x0  reg(4, 186a0) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 5 7f7d0cbeede0 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 1)  reg(56, 1) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 1) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065fa83: setnle al  reg(27, 1) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 7f7d080008c0) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106652e9: mov ebp, 0x1
0x7f7d106652ee: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d106652f0: jz 0x7f7d106653c4
0x7f7d106652f6: mov ebp, eax
0x7f7d106652f8: lea r12, ptr [rbx+0x184]  reg(15, 0) 
0x7f7d106652ff: mov rsi, r12  reg(4, 7f7d0cbeede0)  reg(15, 7f7d08000a44) 
0x7f7d10665302: mov rdi, rbx  reg(3, 2)  reg(7, 7f7d080008c0) 
0x7f7d10665305: call 0x7f7d1065f0f0
TIsoTcpSocket::isoRecvPDU(TIsoDataPDU*)@plt: 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket10isoRecvPDUEP11TIsoDataPDU@plt
0x7f7d1065f0f0: jmp qword ptr [rip+0x221ad2]
TIsoTcpSocket::isoRecvPDU(TIsoDataPDU*): 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket10isoRecvPDUEP11TIsoDataPDU
0x7f7d10662df4: push r15  reg(18, 0) 
0x7f7d10662df6: push r14  reg(17, 7f7d0cbef9c0) 
0x7f7d10662df8: push r13  reg(16, 7f7d0de84dcf) 
0x7f7d10662dfa: push r12  reg(15, 7f7d08000a44) 
0x7f7d10662dfc: push rbp
0x7f7d10662dfd: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10662dfe: sub rsp, 0x38
0x7f7d10662e02: mov r13, rdi  reg(16, 7f7d0de84dcf)  reg(3, 7f7d080008c0) 
0x7f7d10662e05: mov qword ptr [rsp+0x18], rsi  reg(4, 7f7d08000a44)  mem(7f7d0cbeee38, 0) 
0x7f7d10662e0a: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f7d10662e13: mov qword ptr [rsp+0x28], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee48, 0) 
0x7f7d10662e18: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10662e1a: mov byte ptr [rsp+0x23], 0x0  mem(7f7d0cbeee43, f98f000000000000) 
0x7f7d10662e1f: call 0x7f7d1065e1b0
TIsoTcpSocket::ClrIsoError()@plt: 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket11ClrIsoErrorEv@plt
0x7f7d1065e1b0: jmp qword ptr [rip+0x222272]
TIsoTcpSocket::ClrIsoError(): 7f7d080008c0 7f7d08000a44 1 0	_ZN13TIsoTcpSocket11ClrIsoErrorEv
0x7f7d106627b6: mov dword ptr [rdi+0x1198], 0x0  mem(7f7d08001a58, 0) 
0x7f7d106627c0: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d106627c7: ret 
0x7f7d10662e24: lea rbx, ptr [r13+0x18b]  reg(7, 7f7d080008c0) 
0x7f7d10662e2b: mov dword ptr [rsp+0x14], 0x1  mem(7f7d0cbeee34, 8000a4400000000) 
0x7f7d10662e33: mov ebp, 0x0
0x7f7d10662e38: mov r14d, 0x1000  reg(79, 7f7d0cbef9c0) 
0x7f7d10662e3e: lea r15, ptr [rsp+0x23]  reg(18, 0) 
0x7f7d10662e43: lea rax, ptr [rsp+0x24]  reg(10, 0) 
0x7f7d10662e48: mov qword ptr [rsp+0x8], rax  reg(10, 7f7d0cbeee44)  mem(7f7d0cbeee28, 0) 
0x7f7d10662e4d: movsxd rax, ebp  reg(10, 7f7d0cbeee44) 
0x7f7d10662e50: add rbx, rax  reg(7, 7f7d08000a4b)  reg(10, 0) 
0x7f7d10662e53: mov edx, r14d  reg(54, 1)  reg(79, 1000) 
0x7f7d10662e56: sub edx, ebp  reg(54, 1000) 
0x7f7d10662e58: test edx, edx  reg(54, 1000)  reg(54, 1000) 
0x7f7d10662e5a: jle 0x7f7d10662ea5
0x7f7d10662e5c: mov r8, r15  reg(11, 7f7d0cbeedd0)  reg(18, 7f7d0cbeee43) 
0x7f7d10662e5f: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d10662e64: mov rsi, rbx  reg(4, 7f7d08000a44)  reg(7, 7f7d08000a4b) 
0x7f7d10662e67: mov rdi, r13  reg(3, 7f7d080008c0)  reg(16, 7f7d080008c0) 
0x7f7d10662e6a: call 0x7f7d1065e0b0
TIsoTcpSocket::isoRecvFragment(void*, int, int&, bool&)@plt: 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket15isoRecvFragmentEPviRiRb@plt
0x7f7d1065e0b0: jmp qword ptr [rip+0x2222f2]
TIsoTcpSocket::isoRecvFragment(void*, int, int&, bool&): 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket15isoRecvFragmentEPviRiRb
0x7f7d10662cce: push r15  reg(18, 7f7d0cbeee43) 
0x7f7d10662cd0: push r14  reg(17, 1000) 
0x7f7d10662cd2: push r13  reg(16, 7f7d080008c0) 
0x7f7d10662cd4: push r12  reg(15, 7f7d08000a44) 
0x7f7d10662cd6: push rbp
0x7f7d10662cd7: push rbx  reg(7, 7f7d08000a4b) 
0x7f7d10662cd8: sub rsp, 0x18
0x7f7d10662cdc: mov rbx, rdi  reg(7, 7f7d08000a4b)  reg(3, 7f7d080008c0) 
0x7f7d10662cdf: mov qword ptr [rsp+0x8], rsi  reg(4, 7f7d08000a4b)  mem(7f7d0cbeedd8, 18695) 
0x7f7d10662ce4: mov r15d, edx  reg(82, 7f7d0cbeee43)  reg(54, 1000) 
0x7f7d10662ce7: mov r14, rcx  reg(17, 1000)  reg(9, 7f7d0cbeee44) 
0x7f7d10662cea: mov r13, r8  reg(16, 7f7d080008c0)  reg(11, 7f7d0cbeee43) 
0x7f7d10662ced: mov dword ptr [rcx], 0x0  mem(7f7d0cbeee44, 48f98f0000000000) 
0x7f7d10662cf3: mov byte ptr [r8], 0x0  mem(7f7d0cbeee43, f98f000000000000) 
0x7f7d10662cf7: call 0x7f7d1065e1b0
TIsoTcpSocket::ClrIsoError()@plt: 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket11ClrIsoErrorEv@plt
0x7f7d1065e1b0: jmp qword ptr [rip+0x222272]
TIsoTcpSocket::ClrIsoError(): 7f7d080008c0 7f7d08000a4b 1000 7f7d0cbeee44	_ZN13TIsoTcpSocket11ClrIsoErrorEv
0x7f7d106627b6: mov dword ptr [rdi+0x1198], 0x0  mem(7f7d08001a58, 0) 
0x7f7d106627c0: mov dword ptr [rdi+0x78], 0x0  mem(7f7d08000938, 100000000) 
0x7f7d106627c7: ret 
0x7f7d10662cfc: lea r12, ptr [rbx+0x184]  reg(15, 7f7d08000a44) 
0x7f7d10662d03: mov edx, 0x7  reg(54, 1000) 
0x7f7d10662d08: mov rsi, r12  reg(4, 7f7d08000a4b)  reg(15, 7f7d08000a44) 
0x7f7d10662d0b: mov rdi, rbx  reg(3, 7f7d080008c0)  reg(7, 7f7d080008c0) 
0x7f7d10662d0e: call 0x7f7d1065f220
TMsgSocket::RecvPacket(void*, int)@plt: 7f7d080008c0 7f7d08000a44 7 7f7d0cbeee44	_ZN10TMsgSocket10RecvPacketEPvi@plt
0x7f7d1065f220: jmp qword ptr [rip+0x221a3a]
TMsgSocket::RecvPacket(void*, int): 7f7d080008c0 7f7d08000a44 7 7f7d0cbeee44	_ZN10TMsgSocket10RecvPacketEPvi
0x7f7d1066028c: push r12  reg(15, 7f7d08000a44) 
0x7f7d1066028e: push rbp
0x7f7d1066028f: push rbx  reg(7, 7f7d080008c0) 
0x7f7d10660290: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d10660293: mov r12, rsi  reg(15, 7f7d08000a44)  reg(4, 7f7d08000a44) 
0x7f7d10660296: mov ebp, edx
0x7f7d10660298: mov edx, dword ptr [rdi+0x70]  reg(54, 7) 
0x7f7d1066029b: mov esi, ebp  reg(47, 7f7d08000a44) 
0x7f7d1066029d: call 0x7f7d1065f310
TMsgSocket::WaitForData(int, int)@plt: 7f7d080008c0 7 bb8 7f7d0cbeee44	_ZN10TMsgSocket11WaitForDataEii@plt
0x7f7d1065f310: jmp qword ptr [rip+0x2219c2]
TMsgSocket::WaitForData(int, int): 7f7d080008c0 7 bb8 7f7d0cbeee44	_ZN10TMsgSocket11WaitForDataEii
0x7f7d1065fba2: push r13  reg(16, 7f7d0cbeee43) 
0x7f7d1065fba4: push r12  reg(15, 7f7d08000a44) 
0x7f7d1065fba6: push rbp
0x7f7d1065fba7: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fba8: sub rsp, 0x18
0x7f7d1065fbac: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065fbaf: mov ebp, esi
0x7f7d1065fbb1: mov r12d, edx  reg(73, 7f7d08000a44)  reg(54, bb8) 
0x7f7d1065fbb4: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065fbbd: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed78, 0) 
0x7f7d1065fbc2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065fbc4: mov esi, 0x0  reg(47, 7) 
0x7f7d1065fbc9: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 7f7d080008c0 0 bb8 7f7d0cbeee44	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 7f7d080008c0 0 bb8 7f7d0cbeee44	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed48, ffffffffffffffff) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, bb8) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 0) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 0) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 0) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 0)  reg(47, 0) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 0) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 0)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 0)  reg(47, 0) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 0)  reg(47, 0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 0)  mem(7f7d0cbeecb8, 7f7d242f5923) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0cbeecb0, 7f7d0cbeee40) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 7f7d0cbeee44) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 7f7d080008c0) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0cbeed40) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 4 0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 4) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 4) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 4) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 4) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 4)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 4) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 10)  mem(7f7d0cbeecc0, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 4) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0cbeee43) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 4) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 10) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 5 7f7d0cbeecc0 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 1)  reg(56, 1) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 1) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 1)  reg(10, 1) 
0x7f7d1065fa83: setnle al  reg(27, 1) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 7f7d080008c0) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065faae: ret 
0x7f7d1065fbce: test al, al  reg(27, 1)  reg(27, 1) 
0x7f7d1065fbd0: jz 0x7f7d1065fbec
0x7f7d1065fbd2: mov rdi, rbx  reg(3, 2)  reg(7, 7f7d080008c0) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fbd5: call 0x7f7d1065de40
TMsgSocket::WaitingData()@plt: 7f7d080008c0 7f7d0cbeecc0 1 0	_ZN10TMsgSocket11WaitingDataEv@plt
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065de40: jmp qword ptr [rip+0x22242a]
TMsgSocket::WaitingData(): 7f7d080008c0 7f7d0cbeecc0 1 0	_ZN10TMsgSocket11WaitingDataEv
0x7f7d1065f77a: sub rsp, 0x18
0x7f7d1065f77e: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f7d1065f787: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeed58, 7f7d080008c0) 
0x7f7d1065f78c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f78e: mov qword ptr [rsp], 0x0  mem(7f7d0cbeed50, 0) 
0x7f7d1065f796: mov rdx, rsp  reg(8, 1) 
0x7f7d1065f799: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065f79c: mov esi, 0x541b  reg(47, 7f7d0cbeecc0) 
0x7f7d1065f7a1: call 0x7f7d1065dbd0
ioctl@plt: 4 541b 7f7d0cbeed50 0	ioctl@plt
0x7f7d1065dbd0: jmp qword ptr [rip+0x222562]
0x7f7d1065f7a6: mov edx, 0x0  reg(54, 7f7d0cbeed50) 
0x7f7d1065f7ab: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065f7ad: cmovz edx, dword ptr [rsp]  reg(54, 0) 
0x7f7d1065f7b1: cmp edx, 0x10000  reg(54, 0) 
0x7f7d1065f7b7: mov eax, 0x10000  reg(56, 0) 
0x7f7d1065f7bc: cmovle eax, edx  reg(56, 10000)  reg(54, 0) 
0x7f7d1065f7bf: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065f7c4: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065f7cd: jz 0x7f7d1065f7d4
0x7f7d1065f7d4: add rsp, 0x18
0x7f7d1065f7d8: ret 
0x7f7d1065fbda: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065fbdc: jnz 0x7f7d1065fbec
0x7f7d1065fbde: mov dword ptr [rbx+0x78], 0x68  mem(7f7d08000938, 100000000) 
0x7f7d1065fbe5: mov eax, 0x68  reg(56, 0) 
0x7f7d1065fbea: jmp 0x7f7d1065fc32
0x7f7d1065fc32: mov byte ptr [rbx+0x7c], 0x0  mem(7f7d0800093c, 1) 
0x7f7d1065fc36: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d1065fc3b: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1065fc44: jz 0x7f7d1065fc5c
0x7f7d1065fc5c: add rsp, 0x18
0x7f7d1065fc60: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fc61: pop rbp
0x7f7d1065fc62: pop r12  reg(15, bb8) 
0x7f7d1065fc64: pop r13  reg(16, 7f7d0cbeee43) 
0x7f7d1065fc66: ret 
0x7f7d106602a2: mov eax, dword ptr [rbx+0x78]  reg(56, 68) 
0x7f7d106602a5: test eax, eax  reg(56, 68)  reg(56, 68) 
0x7f7d106602a7: jnz 0x7f7d106602da
0x7f7d106602da: cmp eax, 0x6e  reg(56, 68) 
0x7f7d106602dd: jnz 0x7f7d106602e7
0x7f7d106602e7: mov eax, dword ptr [rbx+0x78]  reg(56, 68) 
0x7f7d106602ea: cmp eax, 0x68  reg(56, 68) 
0x7f7d106602ed: jnz 0x7f7d106602f8
0x7f7d106602ef: mov byte ptr [rbx+0x7c], 0x0  mem(7f7d0800093c, 0) 
0x7f7d106602f3: mov eax, 0x68  reg(56, 68) 
0x7f7d106602f8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106602f9: pop rbp
0x7f7d106602fa: pop r12  reg(15, 7f7d08000a44) 
0x7f7d106602fc: ret 
0x7f7d10662d13: cmp dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 68) 
0x7f7d10662d17: jnz 0x7f7d10662dcf
0x7f7d10662dcf: mov esi, 0xa0000  reg(47, 541b) 
0x7f7d10662dd4: mov rdi, rbx  reg(3, 4)  reg(7, 7f7d080008c0) 
0x7f7d10662dd7: call 0x7f7d1065e5e0
TIsoTcpSocket::SetIsoError(int)@plt: 7f7d080008c0 a0000 0 0	_ZN13TIsoTcpSocket11SetIsoErrorEi@plt
0x7f7d1065e5e0: jmp qword ptr [rip+0x22205a]
0x7f7d1065e5e6: push 0xc5 
0x7f7d1065e5eb: jmp 0x7f7d1065d980
TIsoTcpSocket::SetIsoError(int): 7f7d080008c0 a0000 0 0	_ZN13TIsoTcpSocket11SetIsoErrorEi
0x7f7d106627aa: mov eax, esi  reg(56, 68)  reg(47, a0000) 
0x7f7d106627ac: or eax, dword ptr [rdi+0x78]  reg(56, a0000) 
0x7f7d106627af: mov dword ptr [rdi+0x1198], eax  reg(56, a0068)  mem(7f7d08001a58, 0) 
0x7f7d106627b5: ret 
0x7f7d10662ddc: jmp 0x7f7d10662de4
0x7f7d10662de4: add rsp, 0x18
0x7f7d10662de8: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10662de9: pop rbp
0x7f7d10662dea: pop r12  reg(15, 7f7d08000a44) 
0x7f7d10662dec: pop r13  reg(16, 7f7d0cbeee43) 
0x7f7d10662dee: pop r14  reg(17, 7f7d0cbeee44) 
0x7f7d10662df0: pop r15  reg(18, 1000) 
0x7f7d10662df2: ret 
0x7f7d10662e6f: mov r12d, eax  reg(73, 7f7d08000a44)  reg(56, a0068) 
0x7f7d10662e72: test eax, eax  reg(56, a0068)  reg(56, a0068) 
0x7f7d10662e74: jnz 0x7f7d10662ec1
0x7f7d10662ec1: test r12d, r12d  reg(73, a0068)  reg(73, a0068) 
0x7f7d10662ec4: jnz 0x7f7d10662efe
0x7f7d10662efe: cmp dword ptr [r13+0x78], 0x68  mem(7f7d08000938, 68) 
0x7f7d10662f03: jz 0x7f7d10662f0d
0x7f7d10662f0d: mov eax, r12d  reg(56, a0068)  reg(73, a0068) 
0x7f7d10662f10: mov rcx, qword ptr [rsp+0x28]  reg(9, 0) 
0x7f7d10662f15: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d10662f1e: jz 0x7f7d10662f25
0x7f7d10662f25: add rsp, 0x38
0x7f7d10662f29: pop rbx  reg(7, 7f7d08000a4b) 
0x7f7d10662f2a: pop rbp
0x7f7d10662f2b: pop r12  reg(15, a0068) 
0x7f7d10662f2d: pop r13  reg(16, 7f7d080008c0) 
0x7f7d10662f2f: pop r14  reg(17, 1000) 
0x7f7d10662f31: pop r15  reg(18, 7f7d0cbeee43) 
0x7f7d10662f33: ret 
0x7f7d1066530a: mov eax, dword ptr [rbx+0x78]  reg(56, a0068) 
0x7f7d1066530d: test eax, eax  reg(56, 68)  reg(56, 68) 
0x7f7d1066530f: jnz 0x7f7d106653bb
0x7f7d106653bb: cmp eax, 0x68  reg(56, 68) 
0x7f7d106653be: setnz bpl 
0x7f7d106653c2: jmp 0x7f7d106653c4
0x7f7d106653c4: mov eax, ebp  reg(56, 68) 
0x7f7d106653c6: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f7d106653cb: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d106653d4: jz 0x7f7d106653db
0x7f7d106653db: add rsp, 0x10
0x7f7d106653df: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106653e0: pop rbp
0x7f7d106653e1: pop r12  reg(15, 7f7d08000a44) 
0x7f7d106653e3: ret 
0x7f7d106653fd: add rsp, 0x8
0x7f7d10665401: ret 
0x7f7d106652c1: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d106652c2: ret 
0x7f7d1066129e: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106612a0: mov eax, 0x1  reg(56, 0) 
0x7f7d106612a5: cmovz ebp, eax
0x7f7d106612a8: jmp 0x7f7d10661276
0x7f7d10661276: cmp byte ptr [rbx+0x12], 0x0  mem(7f7d08002af2, dc40000000010000) 
0x7f7d1066127a: jnz 0x7f7d106612aa
0x7f7d1066127c: test r12b, r12b  reg(71, 0)  reg(71, 0) 
0x7f7d1066127f: jnz 0x7f7d106612aa
0x7f7d10661281: test bpl, bpl 
0x7f7d10661284: jnz 0x7f7d106612aa
0x7f7d106612aa: mov rdi, qword ptr [rbx+0x18]  reg(3, 7f7d080008c0) 
0x7f7d106612ae: cmp byte ptr [rdi+0x50], 0x0  mem(200dc90, 0) 
0x7f7d106612b2: jnz 0x7f7d10661354
0x7f7d106612b8: test r12b, r12b  reg(71, 0)  reg(71, 0) 
0x7f7d106612bb: jz 0x7f7d106612f7
0x7f7d106612f7: test bpl, bpl 
0x7f7d106612fa: jz 0x7f7d10661329
0x7f7d106612fc: mov rax, qword ptr [rbx+0x20]  reg(10, 1) 
0x7f7d10661300: mov esi, dword ptr [rax+0x3c]  reg(47, a0000) 
0x7f7d10661303: mov rax, qword ptr [rdi]  reg(10, 7f7d080008c0) 
0x7f7d10661306: push 0x0 
0x7f7d10661308: push 0x0 
0x7f7d1066130a: mov r9d, 0x0  reg(64, 7f7d1061e4e8) 
0x7f7d10661310: mov r8d, 0x0  reg(61, 7f7d0cbeecb0) 
0x7f7d10661316: mov ecx, 0x0  reg(55, 0) 
0x7f7d1066131b: mov edx, 0x80  reg(54, 0) 
0x7f7d10661320: call qword ptr [rax+0x18]
TCustomMsgServer::DoEvent(int, unsigned int, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 200dc40 100007f 80 0	_ZN16TCustomMsgServer7DoEventEijttttt
0x7f7d10660b80: push r15  reg(18, 0) 
0x7f7d10660b82: push r14  reg(17, 7f7d0cbef9c0) 
0x7f7d10660b84: push r13  reg(16, 7f7d0de84dcf) 
0x7f7d10660b86: push r12  reg(15, 0) 
0x7f7d10660b88: push rbp
0x7f7d10660b89: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d10660b8a: sub rsp, 0x48
0x7f7d10660b8e: mov dword ptr [rsp], esi  reg(47, 100007f)  mem(7f7d0cbeee50, 0) 
0x7f7d10660b91: mov dword ptr [rsp+0x4], ecx  reg(55, 0)  mem(7f7d0cbeee54, 80008c000000000) 
0x7f7d10660b95: mov dword ptr [rsp+0x8], r8d  reg(61, 0)  mem(7f7d0cbeee58, 7f7d080008c0) 
0x7f7d10660b9a: mov dword ptr [rsp+0xc], r9d  reg(64, 0)  mem(7f7d0cbeee5c, 100007f7d) 
0x7f7d10660b9f: mov r14d, dword ptr [rsp+0x80]  reg(79, 7f7d0cbef9c0) 
0x7f7d10660ba7: mov r13d, dword ptr [rsp+0x88]  reg(76, 7f7d0de84dcf) 
0x7f7d10660baf: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d1087f7c0) 
0x7f7d10660bb8: mov qword ptr [rsp+0x38], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee88, 7f7d1066530a) 
0x7f7d10660bbd: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d10660bbf: cmp byte ptr [rdi+0x50], 0x0  mem(200dc90, 0) 
0x7f7d10660bc3: jnz 0x7f7d10660c80
0x7f7d10660bc9: mov rbx, rdi  reg(7, 7f7d08002ae0)  reg(3, 200dc40) 
0x7f7d10660bcc: mov ebp, edx
0x7f7d10660bce: mov r12d, edx  reg(73, 0)  reg(54, 80) 
0x7f7d10660bd1: and r12d, dword ptr [rdi+0x206c]  reg(73, 80) 
0x7f7d10660bd8: mov r15d, edx  reg(82, 0)  reg(54, 80) 
0x7f7d10660bdb: and r15d, dword ptr [rdi+0x2068]  reg(82, 80) 
0x7f7d10660be2: jnz 0x7f7d10660bed
0x7f7d10660bed: mov rdi, qword ptr [rbx+0x58]  reg(3, 200dc40) 
0x7f7d10660bf1: call 0x7f7d1065f050
pthread_mutex_lock@plt: 2013d60 100007f 80 0	pthread_mutex_lock@plt
0x7f7d1065f050: jmp qword ptr [rip+0x221b22]
0x7f7d10660bf6: lea rdi, ptr [rsp+0x10]  reg(3, 1) 
0x7f7d10660bfb: call 0x7f7d1065f3a0
time@plt: 7f7d0cbeee60 0 0 0	time@plt
0x7f7d1065f3a0: jmp qword ptr [rip+0x22197a]
0x7f7d10660c00: mov eax, dword ptr [rsp]  reg(56, 5cc5a8ad) 
0x7f7d10660c03: mov dword ptr [rsp+0x18], eax  reg(56, 100007f)  mem(7f7d0cbeee68, 7f7d08000a44) 
0x7f7d10660c07: mov dword ptr [rsp+0x1c], ebp  mem(7f7d0cbeee6c, de84dcf00007f7d) 
0x7f7d10660c0b: movzx eax, word ptr [rsp+0x4]  reg(56, 100007f) 
0x7f7d10660c10: mov word ptr [rsp+0x20], ax  reg(29, 0)  mem(7f7d0cbeee70, 7f7d0de84dcf) 
0x7f7d10660c15: movzx eax, word ptr [rsp+0x8]  reg(56, 0) 
0x7f7d10660c1a: mov word ptr [rsp+0x22], ax  reg(29, 0)  mem(7f7d0cbeee72, f9c000007f7d0de8) 
0x7f7d10660c1f: movzx eax, word ptr [rsp+0xc]  reg(56, 0) 
0x7f7d10660c24: mov word ptr [rsp+0x24], ax  reg(29, 0)  mem(7f7d0cbeee74, cbef9c000007f7d) 
0x7f7d10660c29: mov word ptr [rsp+0x26], r14w  reg(78, 0)  mem(7f7d0cbeee76, 7f7d0cbef9c00000) 
0x7f7d10660c2f: mov word ptr [rsp+0x28], r13w  reg(75, 0)  mem(7f7d0cbeee78, 7f7d0cbef9c0) 
0x7f7d10660c35: test r12d, r12d  reg(73, 80)  reg(73, 80) 
0x7f7d10660c38: jz 0x7f7d10660c53
0x7f7d10660c3a: mov rax, qword ptr [rbx+0x40]  reg(10, 0) 
0x7f7d10660c3e: test rax, rax  reg(10, 403326)  reg(10, 403326) 
0x7f7d10660c41: jz 0x7f7d10660c53
0x7f7d10660c43: lea rsi, ptr [rsp+0x10]  reg(4, 0) 
0x7f7d10660c48: mov rdi, qword ptr [rbx+0x48]  reg(3, 7f7d0cbeee60) 
0x7f7d10660c4c: mov edx, 0x1a  reg(54, 0) 
0x7f7d10660c51: call rax
EventCallBack(void*, TSrvEvent*, int): 0 7f7d0cbeee60 1a 0	_Z13EventCallBackPvP9TSrvEventi
0x403326: push rbx  reg(10, 0) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x403327: sub rsp, 0x30
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(10, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x40332b: mov rax, qword ptr fs:[0x28]  mem(201d802, d740000000000000) 
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x403334: mov qword ptr [rsp+0x28], rax  reg(47, 7f7d0de84e40) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x403339: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x40333b: mov rdi, rsp  reg(3, 0) 
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x40333e: call 0x404311
_Z12SrvEventTextB5cxx11P9TSrvEvent: 7f7d0cbeee10 7f7d0cbeee60 1a 0	_Z12SrvEventTextB5cxx11P9TSrvEvent
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x404311: push rbp
0x404312: push rbx  reg(7, 200dc40) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x404313: sub rsp, 0x418
0x40431a: mov rbx, rdi  reg(7, 200dc40)  reg(3, 7f7d0cbeee10) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(7, 200dc40)  reg(3, 7f7d0cbeee10) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x40431d: mov rdi, rsi  reg(4, 186a0) 
0x404320: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x404329: mov qword ptr [rsp+0x408], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeede8, 7f7d08000a4b) 
0x404331: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x404333: mov rbp, rsp
0x404336: mov edx, 0x400  reg(54, 1a) 
0x40433b: mov rsi, rsp  reg(4, 7f7d0cbeee60) 
0x40433e: call 0x402a00
Srv_EventText@plt: 7f7d0cbeee60 7f7d0cbee9e0 400 0	Srv_EventText@plt
0x402a00: jmp qword ptr [rip+0x20364a]
Srv_EventText: 7f7d0cbeee60 7f7d0cbee9e0 400 0	Srv_EventText
0x7f7d10675fc3: push r12  reg(15, 80) 
0x7f7d10675fc5: push rbp
0x7f7d10675fc6: push rbx  reg(7, 7f7d0cbeee10) 
0x7f7d10675fc7: sub rsp, 0x30
0x7f7d10675fcb: mov rax, rdi  reg(10, 0)  reg(3, 7f7d0cbeee60) 
0x7f7d10675fce: mov r12, rsi  reg(15, 80)  reg(4, 7f7d0cbee9e0) 
0x7f7d10675fd1: mov rcx, qword ptr fs:[0x28]  reg(9, 0) 
0x7f7d10675fda: mov qword ptr [rsp+0x28], rcx  reg(9, f4f60b3748f98f00)  mem(7f7d0cbee9b8, 7f7d242e864b) 
0x7f7d10675fdf: xor ecx, ecx  reg(55, f4f60b3748f98f00)  reg(55, f4f60b3748f98f00) 
0x7f7d10675fe1: movsxd rbx, edx  reg(7, 7f7d0cbeee10)  reg(54, 400) 
0x7f7d10675fe4: mov rdi, rsp  reg(3, 7f7d0cbeee60) 
0x7f7d10675fe7: mov rsi, rax  reg(4, 7f7d0cbee9e0)  reg(10, 7f7d0cbeee60) 
0x7f7d10675fea: call 0x7f7d1065df40
_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt: 7f7d0cbee990 7f7d0cbeee60 400 0	_Z10EvtSrvTextB5cxx11R9TSrvEvent@plt
0x7f7d1065df40: jmp qword ptr [rip+0x2223aa]
_Z10EvtSrvTextB5cxx11R9TSrvEvent: 7f7d0cbee990 7f7d0cbeee60 400 0	_Z10EvtSrvTextB5cxx11R9TSrvEvent
0x7f7d1066bc97: push rbp
0x7f7d1066bc98: mov rbp, rsp
0x7f7d1066bc9b: push r14  reg(17, 0) 
0x7f7d1066bc9d: push r12  reg(15, 7f7d0cbee9e0) 
0x7f7d1066bc9f: push rbx  reg(7, 400) 
0x7f7d1066bca0: sub rsp, 0x878
0x7f7d1066bca7: mov r14, rdi  reg(17, 0)  reg(3, 7f7d0cbee990) 
0x7f7d1066bcaa: mov rbx, rsi  reg(7, 400)  reg(4, 7f7d0cbeee60) 
0x7f7d1066bcad: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0cbeee60) 
0x7f7d1066bcb6: mov qword ptr [rbp-0x28], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbee958, 7f7d00000000) 
0x7f7d1066bcba: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066bcbc: lea rax, ptr [rbp-0x880]  reg(10, 0) 
0x7f7d1066bcc3: mov qword ptr [rbp-0x890], rax  reg(10, 7f7d0cbee100)  mem(7f7d0cbee0f0, 0) 
0x7f7d1066bcca: mov qword ptr [rbp-0x888], 0x0  mem(7f7d0cbee0f8, 0) 
0x7f7d1066bcd5: mov byte ptr [rbp-0x880], 0x0  mem(7f7d0cbee100, 0) 
0x7f7d1066bcdc: mov esi, dword ptr [rsi+0xc]  reg(47, 7f7d0cbeee60) 
0x7f7d1066bcdf: cmp esi, 0x8000  reg(47, 80) 
0x7f7d1066bce5: jbe 0x7f7d1066dc02
0x7f7d1066dc02: lea rax, ptr [rbp-0x140]  reg(10, 7f7d0cbee100) 
0x7f7d1066dc09: mov qword ptr [rbp-0x150], rax  reg(10, 7f7d0cbee840)  mem(7f7d0cbee830, 0) 
0x7f7d1066dc10: mov qword ptr [rbp-0x148], 0x0  mem(7f7d0cbee838, 0) 
0x7f7d1066dc1b: mov byte ptr [rbp-0x140], 0x0  mem(7f7d0cbee840, 0) 
0x7f7d1066dc22: cmp esi, 0x10  reg(47, 80) 
0x7f7d1066dc25: jz 0x7f7d1066dd7d
0x7f7d1066dc2b: cmp esi, 0x10  reg(47, 80) 
0x7f7d1066dc2e: jnbe 0x7f7d1066dc5f
0x7f7d1066dc5f: cmp esi, 0x80  reg(47, 80) 
0x7f7d1066dc65: jz 0x7f7d1066ddf5
0x7f7d1066ddf5: lea rdi, ptr [rbp-0x150]  reg(3, 7f7d0cbee990) 
0x7f7d1066ddfc: mov r8d, 0x1b  reg(61, 2013d60) 
0x7f7d1066de02: lea rcx, ptr [rip+0x9123]  reg(9, 0) 
0x7f7d1066de09: mov edx, 0x0  reg(54, 400) 
0x7f7d1066de0e: mov esi, 0x0  reg(47, 80) 
0x7f7d1066de13: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7f7d0cbee830 0 0 7f7d10676f2c	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
memcpy: 7f7d000008f0 7f7d10676f2c 1b 7f7d10676f2c	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1b 7f7d10676f2c	dlsym@plt
0x7f7d1066de18: jmp 0x7f7d1066e03e
0x7f7d1066e03e: lea rdi, ptr [rbp-0x130]  reg(3, 7f7d0cbee840) 
0x7f7d1066e045: mov rsi, rbx  reg(4, 7f7d10676f2c)  reg(7, 7f7d0cbeee60) 
0x7f7d1066e048: call 0x7f7d1066a34c
SenderText(TSrvEvent&): 7f7d0cbee850 7f7d0cbeee60 1b 7f7d000008f0	_ZL10SenderTextR9TSrvEvent
0x7f7d1066a34c: push rbp
0x7f7d1066a34d: mov rbp, rsp
0x7f7d1066a350: push r14  reg(17, 7f7d0cbee990) 
0x7f7d1066a352: push r12  reg(15, 7f7d0cbee9e0) 
0x7f7d1066a354: push rbx  reg(7, 7f7d0cbeee60) 
0x7f7d1066a355: sub rsp, 0x98
0x7f7d1066a35c: mov rbx, rdi  reg(7, 7f7d0cbeee60)  reg(3, 7f7d0cbee850) 
0x7f7d1066a35f: mov r12, rsi  reg(15, 7f7d0cbee9e0)  reg(4, 7f7d0cbeee60) 
0x7f7d1066a362: mov rcx, qword ptr fs:[0x28]  reg(9, 7f7d000008f0) 
0x7f7d1066a36b: mov qword ptr [rbp-0x28], rcx  reg(9, f4f60b3748f98f00)  mem(7f7d0cbee0b8, 0) 
0x7f7d1066a36f: xor ecx, ecx  reg(55, f4f60b3748f98f00)  reg(55, f4f60b3748f98f00) 
0x7f7d1066a371: mov esi, dword ptr [rsi+0x8]  reg(47, 7f7d0cbeee60) 
0x7f7d1066a374: test esi, esi  reg(47, 100007f)  reg(47, 100007f) 
0x7f7d1066a376: jz 0x7f7d1066a508
0x7f7d1066a37c: lea rdi, ptr [rbp-0x70]  reg(3, 7f7d0cbee850) 
0x7f7d1066a380: call 0x7f7d1065dae0
_Z17IpAddressToStringB5cxx11i@plt: 7f7d0cbee070 100007f 1b 0	_Z17IpAddressToStringB5cxx11i@plt
0x7f7d1065dae0: jmp qword ptr [rip+0x2225da]
_Z17IpAddressToStringB5cxx11i: 7f7d0cbee070 100007f 1b 0	_Z17IpAddressToStringB5cxx11i
0x7f7d10669e2b: push r12  reg(15, 7f7d0cbeee60) 
0x7f7d10669e2d: push rbp
0x7f7d10669e2e: push rbx  reg(7, 7f7d0cbee850) 
0x7f7d10669e2f: mov rbx, rdi  reg(7, 7f7d0cbee850)  reg(3, 7f7d0cbee070) 
0x7f7d10669e32: lea rbp, ptr [rdi+0x10]
0x7f7d10669e36: mov qword ptr [rdi], rbp  mem(7f7d0cbee070, 0) 
0x7f7d10669e39: mov qword ptr [rdi+0x8], 0x0  mem(7f7d0cbee078, 7f7d0cbee830) 
0x7f7d10669e41: mov byte ptr [rdi+0x10], 0x0  mem(7f7d0cbee080, 0) 
0x7f7d10669e45: mov edi, esi  reg(45, 7f7d0cbee070)  reg(47, 100007f) 
0x7f7d10669e47: call 0x7f7d1065e960
inet_ntoa@plt: 100007f 100007f 1b 0	inet_ntoa@plt
0x7f7d1065e960: jmp qword ptr [rip+0x221e9a]
0x7f7d10669e4c: mov rsi, rax  reg(4, 0)  reg(10, 7f7d0cbef6b8) 
0x7f7d10669e4f: mov eax, 0x0  reg(56, 7f7d0cbef6b8) 
0x7f7d10669e54: mov rcx, 0xffffffffffffffff  reg(9, 7ffffff6) 
0x7f7d10669e5b: mov rdi, rsi  reg(3, 7f7d0cbeddb0)  reg(4, 7f7d0cbef6b8) 
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e5e: repne scasb byte ptr [rdi]
0x7f7d10669e60: not rcx
0x7f7d10669e63: mov rdx, qword ptr [rbx+0x8]  reg(8, 7f7d0cbee830) 
0x7f7d10669e67: lea r8, ptr [rcx-0x1]  reg(11, 0) 
0x7f7d10669e6b: mov rcx, rsi  reg(9, a)  reg(4, 7f7d0cbef6b8) 
0x7f7d10669e6e: mov esi, 0x0  reg(47, 7f7d0cbef6b8) 
0x7f7d10669e73: mov rdi, rbx  reg(3, 7f7d0cbef6c2)  reg(7, 7f7d0cbee070) 
0x7f7d10669e76: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7f7d0cbee070 0 0 7f7d0cbef6b8	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
memcpy: 7f7d0cbee080 7f7d0cbef6b8 9 7f7d0cbef6b8	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 9 7f7d0cbef6b8	dlsym@plt
0x7f7d10669e7b: jmp 0x7f7d10669e95
0x7f7d10669e95: mov rax, rbx  reg(10, 7f7d0cbee070)  reg(7, 7f7d0cbee070) 
0x7f7d10669e98: pop rbx  reg(7, 7f7d0cbee070) 
0x7f7d10669e99: pop rbp
0x7f7d10669e9a: pop r12  reg(15, 7f7d0cbeee60) 
0x7f7d10669e9c: ret 
0x7f7d1066a385: lea rdi, ptr [rbp-0xb0]  reg(3, 7f7d0cbee080) 
0x7f7d1066a38c: mov rsi, qword ptr [r12]  reg(4, 2e302e302e373231) 
0x7f7d1066a390: call 0x7f7d1065f000
_Z12TimeToStringB5cxx11l@plt: 7f7d0cbee030 5cc5a8ad 9 312e302e302e3732	_Z12TimeToStringB5cxx11l@plt
0x7f7d1065f000: jmp qword ptr [rip+0x221b4a]
_Z12TimeToStringB5cxx11l: 7f7d0cbee030 5cc5a8ad 9 312e302e302e3732	_Z12TimeToStringB5cxx11l
0x7f7d1066a223: push rbp
0x7f7d1066a224: mov rbp, rsp
0x7f7d1066a227: push r14  reg(17, 7f7d0cbee990) 
0x7f7d1066a229: push rbx  reg(7, 7f7d0cbee850) 
0x7f7d1066a22a: sub rsp, 0x70
0x7f7d1066a22e: mov rbx, rdi  reg(7, 7f7d0cbee850)  reg(3, 7f7d0cbee030) 
0x7f7d1066a231: mov qword ptr [rbp-0x78], rsi  reg(4, 5cc5a8ad)  mem(7f7d0cbedfa8, 7f7d0cbee080) 
0x7f7d1066a235: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0cbee070) 
0x7f7d1066a23e: mov qword ptr [rbp-0x18], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbee008, 7f7d10669e7b) 
0x7f7d1066a242: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1066a244: lea rax, ptr [rbp-0x60]  reg(10, 0) 
0x7f7d1066a248: mov qword ptr [rbp-0x70], rax  reg(10, 7f7d0cbedfc0)  mem(7f7d0cbedfb0, 0) 
0x7f7d1066a24c: mov qword ptr [rbp-0x68], 0x0  mem(7f7d0cbedfb8, 7f7d0fdf09b0) 
0x7f7d1066a254: mov byte ptr [rbp-0x60], 0x0  mem(7f7d0cbedfc0, 0) 
0x7f7d1066a258: lea rdi, ptr [rbp-0x78]  reg(3, 7f7d0cbee030) 
0x7f7d1066a25c: call 0x7f7d1065f0d0
localtime@plt: 7f7d0cbedfa8 5cc5a8ad 9 312e302e302e3732	localtime@plt
0x7f7d1065f0d0: jmp qword ptr [rip+0x221ae2]
0x7f7d1066a261: test rax, rax  reg(10, 7f7d1006c4a0)  reg(10, 7f7d1006c4a0) 
0x7f7d1066a264: jz 0x7f7d1066a2d8
0x7f7d1066a266: lea rdi, ptr [rbp-0x50]  reg(3, 1c) 
0x7f7d1066a26a: mov r14, rdi  reg(17, 7f7d0cbee990)  reg(3, 7f7d0cbedfd0) 
0x7f7d1066a26d: mov rcx, rax  reg(9, 7f7d0fe2b620)  reg(10, 7f7d1006c4a0) 
0x7f7d1066a270: lea rdx, ptr [rip+0xc640]  reg(8, 5a) 
0x7f7d1066a277: mov esi, 0x32  reg(47, 3) 
0x7f7d1066a27c: call 0x7f7d1065f1a0
strftime@plt: 7f7d0cbedfd0 32 7f7d106768b7 7f7d1006c4a0	strftime@plt
0x7f7d1065f1a0: jmp qword ptr [rip+0x221a7a]
0x7f7d1066a281: mov eax, 0x0  reg(56, 13) 
0x7f7d1066a286: mov rcx, 0xffffffffffffffff  reg(9, 2) 
0x7f7d1066a28d: mov qword ptr [rbp-0x80], r14  reg(17, 7f7d0cbedfd0)  mem(7f7d0cbedfa0, 7f7d0cbef6b8) 
0x7f7d1066a291: mov rdi, r14  reg(3, 7f7d0cbedfe3)  reg(17, 7f7d0cbedfd0) 
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a294: repne scasb byte ptr [rdi]
0x7f7d1066a296: not rcx
0x7f7d1066a299: lea rdi, ptr [rbp-0x70]  reg(3, 7f7d0cbedfe4) 
0x7f7d1066a29d: lea r8, ptr [rcx-0x1]  reg(11, 2) 
0x7f7d1066a2a1: mov rcx, r14  reg(9, 14)  reg(17, 7f7d0cbedfd0) 
0x7f7d1066a2a4: mov rdx, qword ptr [rbp-0x68]  reg(8, 0) 
0x7f7d1066a2a8: mov esi, 0x0  reg(47, 7f7d0cbedef6) 
0x7f7d1066a2ad: call 0x7f7d1065e190
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt: 7f7d0cbedfb0 0 0 7f7d0cbedfd0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt
0x7f7d1065e190: jmp qword ptr [rip+0x222282]
memcpy: 7f7d00000940 7f7d0cbedfd0 13 7f7d0cbedfd0	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d0cbedfd0	dlsym@plt
0x7f7d1066a2b2: lea rax, ptr [rbx+0x10]  reg(10, 7f7d0cbedfb0) 
0x7f7d1066a2b6: mov qword ptr [rbx], rax  reg(10, 7f7d0cbee040)  mem(7f7d0cbee030, 1b) 
0x7f7d1066a2b9: mov rsi, qword ptr [rbp-0x70]  reg(4, 7f7d0cbedfd0) 
0x7f7d1066a2bd: mov rdx, rsi  reg(8, 13)  reg(4, 7f7d00000940) 
0x7f7d1066a2c0: add rdx, qword ptr [rbp-0x68]  reg(8, 7f7d00000940) 
0x7f7d1066a2c4: sub rsp, 0x8
0x7f7d1066a2c8: push 0x0 
0x7f7d1066a2ca: mov rdi, rbx  reg(3, 7f7d0cbedfc0)  reg(7, 7f7d0cbee030) 
0x7f7d1066a2cd: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0cbee030 7f7d00000940 7f7d00000953 7f7d00000940	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0cbee030 7f7d00000940 7f7d00000953 7f7d00000940	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0cbeee60) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0cbee030) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0cbeee60)  reg(4, 7f7d00000940) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0cbee040) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbedf68, 7f7d0cbedfd0) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d00000940)  reg(8, 7f7d00000953) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d00000940)  reg(4, 7f7d00000940) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0cbee030)  reg(8, 7f7d00000953) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d00000953)  reg(15, 7f7d00000940) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 13)  mem(7f7d0cbedf60, 0) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d106701be: cmp rbx, 0xf  reg(10, 0) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d00000940) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d106701c7: mov edx, 0x0  reg(10, 0)  reg(1053) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0cbee030) 
0x7f7d1065fa80: test rax, rax  reg(3, 7f7d0cbee030) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0cbee030 7f7d0cbedf60 0 7f7d00000940	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d00000970)  mem(7f7d0cbee030, 7f7d0cbee040) 
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(10, 7f7d00000970)  mem(7f7d0cbee030, 7f7d0cbee040) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d00000970) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(7, 0) 
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106701e0: mov rdi, qword ptr [rbp]  mem(201d802, d740000000000000) 
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 13) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 13)  reg(7, 13) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d00000970)  reg(7, 13) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106701fb: mov rsi, r12  reg(47, 7f7d0de84e40) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d00000970 7f7d00000940 13 7f7d00000020	memcpy@plt
memcpy@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d00000970 7f7d00000940 13 7f7d00000020	memcpy
memcpy: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d00000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d00000970) 
0x7f7d1065f9b9: push rbx  reg(10, 7f7d00000970) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 0) 
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  reg(54, 0) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(54, 10624dd3) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(56, 6666666c48f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 13) 
0x7f7d1065f9ed: mov eax, esi  reg(7, 13) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d00000940) 
0x7f7d1065fa02: movsxd rsi, esi  reg(15, 7f7d00000940) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d10670230: ret 
0x7f7d1066a2d2: add rsp, 0x10
0x7f7d1066a2d6: jmp 0x7f7d1066a2fb
0x7f7d1066a2fb: mov rdi, qword ptr [rbp-0x70]  reg(3, 7f7d00000970) 
0x7f7d1066a2ff: lea rax, ptr [rbp-0x60]  reg(10, 0) 
0x7f7d1066a303: cmp rdi, rax  reg(3, 7f7d00000940)  reg(10, 7f7d0cbedfc0) 
0x7f7d1066a306: jz 0x7f7d1066a32c
0x7f7d1066a308: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d00000940 7f7d00000940 7f7d00000970 7f7d00000970	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066a30d: jmp 0x7f7d1066a32c
0x7f7d1066a32c: mov rax, rbx  reg(10, 0)  reg(7, 7f7d0cbee030) 
0x7f7d1066a32f: mov rbx, qword ptr [rbp-0x18]  reg(7, 7f7d0cbee030) 
0x7f7d1066a333: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1066a33c: jz 0x7f7d1066a343
0x7f7d1066a343: lea rsp, ptr [rbp-0x10]
0x7f7d1066a347: pop rbx  reg(7, 0) 
0x7f7d1066a348: pop r14  reg(17, 7f7d0cbedfd0) 
0x7f7d1066a34a: pop rbp
0x7f7d1066a34b: ret 
0x7f7d1066a395: lea rdi, ptr [rbp-0x90]  reg(3, ffffffff) 
0x7f7d1066a39c: lea rax, ptr [rdi+0x10]  reg(10, 7f7d0cbee030) 
0x7f7d1066a3a0: mov qword ptr [rbp-0x90], rax  reg(10, 7f7d0cbee060)  mem(7f7d0cbee050, 0) 
0x7f7d1066a3a7: mov rsi, qword ptr [rbp-0xb0]  reg(4, 7f7d00000030) 
0x7f7d1066a3ae: mov rdx, rsi  reg(8, 0)  reg(4, 7f7d00000970) 
0x7f7d1066a3b1: add rdx, qword ptr [rbp-0xa8]  reg(8, 7f7d00000970) 
0x7f7d1066a3b8: sub rsp, 0x8
0x7f7d1066a3bc: push 0x0 
0x7f7d1066a3be: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0cbee050 7f7d00000970 7f7d00000983 7f7d00000900	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0cbee050 7f7d00000970 7f7d00000983 7f7d00000900	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0cbeee60) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0cbee850) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0cbeee60)  reg(4, 7f7d00000970) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0cbee060) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbedff8, 0) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d00000970)  reg(8, 7f7d00000983) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d00000970)  reg(4, 7f7d00000970) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0cbee850)  reg(8, 7f7d00000983) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d00000983)  reg(15, 7f7d00000970) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 13)  mem(7f7d0cbedff0, 7f7d0cbeee60) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 13) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d00000970) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d00000983) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0cbee050) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0cbee050 7f7d0cbedff0 0 7f7d00000900	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d00000990)  mem(7f7d0cbee050, 7f7d0cbee060) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d00000990) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 13)  mem(7f7d0cbee060, 1e) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 13) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 13)  reg(7, 13) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d00000990)  reg(7, 13) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d000009a0)  reg(15, 7f7d00000970) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d00000990 7f7d00000970 13 7f7d00000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d00000990 7f7d00000970 13 7f7d00000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d00000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d00000990) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 13)  mem(7f7d0cbee058, 7f7d10676f2c) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 13) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d000009a3, 206610000000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 13) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 13) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d00000970) 
0x7f7d10670230: ret 
0x7f7d1066a3c3: add rsp, 0x10
0x7f7d1066a3c7: mov rax, 0x7fffffffffffffff  reg(10, 0) 
0x7f7d1066a3d1: sub rax, qword ptr [rbp-0x88]  reg(10, 7fffffffffffffff) 
0x7f7d1066a3d8: cmp rax, 0x1  reg(10, 7fffffffffffffec) 
0x7f7d1066a3dc: jnbe 0x7f7d1066a3ea
0x7f7d1066a3ea: lea rdi, ptr [rbp-0x90]  reg(3, 7f7d00000990) 
0x7f7d1066a3f1: mov edx, 0x2  reg(54, 7f7d00000990) 
0x7f7d1066a3f6: lea rsi, ptr [rip+0xc4cc]  reg(4, 7f7d00000970) 
0x7f7d1066a3fd: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0cbee050 7f7d106768c9 2 7f7d00000990	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d00000940 7f7d00000990 13 7f7d106768c9	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 13 7f7d106768c9	dlsym@plt
memcpy: 7f7d00000953 7f7d106768c9 2 7f7d106768c9	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 2 7f7d106768c9	dlsym@plt
0x7f7d1066a402: lea rdi, ptr [rbp-0x50]  reg(3, ffffffff) 
0x7f7d1066a406: lea rdx, ptr [rbp-0x70]  reg(8, 0) 
0x7f7d1066a40a: lea rsi, ptr [rbp-0x90]  reg(4, 7f7d00000028) 
0x7f7d1066a411: call 0x7f7d1065de70
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt: 7f7d0cbee090 7f7d0cbee050 7f7d0cbee070 7f7d00005b00	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_@plt
0x7f7d1065de70: jmp qword ptr [rip+0x222412]
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&): 7f7d0cbee090 7f7d0cbee050 7f7d0cbee070 7f7d00005b00	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
0x7f7d10670231: push r12  reg(15, 7f7d0cbeee60) 
0x7f7d10670233: push rbp
0x7f7d10670234: push rbx  reg(7, 7f7d0cbee850) 
0x7f7d10670235: mov rbx, rdi  reg(7, 7f7d0cbee850)  reg(3, 7f7d0cbee090) 
0x7f7d10670238: mov rbp, rdx
0x7f7d1067023b: lea r12, ptr [rdi+0x10]  reg(15, 7f7d0cbeee60) 
0x7f7d1067023f: mov qword ptr [rdi], r12  reg(15, 7f7d0cbee0a0)  mem(7f7d0cbee090, 0) 
0x7f7d10670242: mov rax, qword ptr [rsi]  reg(10, 7f7d0cbee050) 
0x7f7d10670245: mov rdx, rax  reg(8, 7f7d0cbee070)  reg(10, 7f7d00000940) 
0x7f7d10670248: add rdx, qword ptr [rsi+0x8]  reg(8, 7f7d00000940) 
0x7f7d1067024c: sub rsp, 0x8
0x7f7d10670250: push 0x0 
0x7f7d10670252: mov rsi, rax  reg(4, 7f7d0cbee050)  reg(10, 7f7d00000940) 
0x7f7d10670255: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0cbee090 7f7d00000940 7f7d00000955 7f7d00005b00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0cbee090 7f7d00000940 7f7d00000955 7f7d00005b00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0cbee0a0) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0cbee090) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0cbee0a0)  reg(4, 7f7d00000940) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d00000940) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbedfd8, 7f7d0cbee050) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d00000940)  reg(8, 7f7d00000955) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d00000940)  reg(4, 7f7d00000940) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0cbee090)  reg(8, 7f7d00000955) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d00000955)  reg(15, 7f7d00000940) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 15)  mem(7f7d0cbedfd0, 7f7d0cbee050) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 15) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d00000940) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d00000955) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0cbee090) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0cbee090 7f7d0cbedfd0 0 7f7d00005b00	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d00000990)  mem(7f7d0cbee090, 7f7d0cbee0a0) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d00000990) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 15)  mem(7f7d0cbee0a0, 80) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 0) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 15) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 15)  reg(7, 15) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d00000990)  reg(7, 15) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d00000020)  reg(15, 7f7d00000940) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d00000990 7f7d00000940 15 7f7d00000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d00000990 7f7d00000940 15 7f7d00000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 15 7f7d00000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d00000990) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 15)  mem(7f7d0cbee098, 7f7d0cbee990) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 15) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d000009a5, 20661000000) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 15) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 15) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d00000940) 
0x7f7d10670230: ret 
0x7f7d1067025a: add rsp, 0x10
0x7f7d1067025e: mov rdx, qword ptr [rbp+0x8]  reg(8, 7f7d00000990) 
0x7f7d10670262: mov rsi, qword ptr [rbp]  reg(4, 7f7d00000940) 
0x7f7d10670266: mov rdi, rbx  reg(3, 7f7d00000990)  reg(7, 7f7d0cbee090) 
0x7f7d10670269: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0cbee090 7f7d0cbee080 9 7f7d00000990	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d000009b0 7f7d00000990 15 7f7d0cbee080	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 15 7f7d0cbee080	dlsym@plt
memcpy: 7f7d000009c5 7f7d0cbee080 9 7f7d0cbee080	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 9 7f7d0cbee080	dlsym@plt
0x7f7d1067026e: jmp 0x7f7d10670288
0x7f7d10670288: mov rax, rbx  reg(10, 7f7d0cbee090)  reg(7, 7f7d0cbee090) 
0x7f7d1067028b: pop rbx  reg(7, 7f7d0cbee090) 
0x7f7d1067028c: pop rbp
0x7f7d1067028d: pop r12  reg(15, 7f7d0cbee0a0) 
0x7f7d1067028f: ret 
0x7f7d1066a416: jmp 0x7f7d1066a439
0x7f7d1066a439: lea rax, ptr [rbx+0x10]  reg(10, 7f7d0cbee090) 
0x7f7d1066a43d: mov r14, rax  reg(17, 7f7d0cbee990)  reg(10, 7f7d0cbee860) 
0x7f7d1066a440: mov qword ptr [rbx], rax  reg(10, 7f7d0cbee860)  mem(7f7d0cbee850, 0) 
0x7f7d1066a443: mov rsi, qword ptr [rbp-0x50]  reg(4, 7f7d00000028) 
0x7f7d1066a447: mov rdx, rsi  reg(8, 0)  reg(4, 7f7d000009b0) 
0x7f7d1066a44a: add rdx, qword ptr [rbp-0x48]  reg(8, 7f7d000009b0) 
0x7f7d1066a44e: sub rsp, 0x8
0x7f7d1066a452: push 0x0 
0x7f7d1066a454: mov rdi, rbx  reg(3, ffffffff)  reg(7, 7f7d0cbee850) 
0x7f7d1066a457: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0cbee850 7f7d000009b0 7f7d000009ce 312e302e302e3700	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0cbee850 7f7d000009b0 7f7d000009ce 312e302e302e3700	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0cbeee60) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0cbee850) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0cbeee60)  reg(4, 7f7d000009b0) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d0cbee860) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbedff8, 7f7d0cbee090) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d000009b0)  reg(8, 7f7d000009ce) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d000009b0)  reg(4, 7f7d000009b0) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0cbee850)  reg(8, 7f7d000009ce) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d000009ce)  reg(15, 7f7d000009b0) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 1e)  mem(7f7d0cbedff0, 7f7d0cbee0a0) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 1e) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d000009b0) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d000009ce) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0cbee850) 
0x7f7d1065fa68: cdqe   reg(3, 7f7d0cbee850) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0cbee850 7f7d0cbedff0 0 312e302e302e3700	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d000009f0)  mem(7f7d0cbee850, 7f7d0cbee860) 
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d106701e4: cmp rbx, 0x1  reg(54, 8) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 1e)  reg(7, 1e) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d000009f0)  reg(7, 1e) 
0x7f7d1065fa60: mov rsi, rbp  reg(8, 7f7d000009f0)  reg(7, 1e) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d00000a10)  reg(15, 7f7d000009b0) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d000009f0 7f7d000009b0 1e 7f7d00000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d000009f0 7f7d000009b0 1e 7f7d00000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1e 7f7d00000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d000009f0) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 1e)  mem(7f7d0cbee858, 0) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 1e) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d00000a0e, 0) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 1e) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 1e) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d000009b0) 
0x7f7d10670230: ret 
0x7f7d1066a45c: add rsp, 0x10
0x7f7d1066a460: mov rax, 0x7fffffffffffffff  reg(10, 0) 
0x7f7d1066a46a: sub rax, qword ptr [rbx+0x8]  reg(10, 7fffffffffffffff) 
0x7f7d1066a46e: cmp rax, 0x1  reg(10, 7fffffffffffffe1) 
0x7f7d1066a472: jnbe 0x7f7d1066a480
0x7f7d1066a480: mov edx, 0x2  reg(54, 7f7d000009f0) 
0x7f7d1066a485: lea rsi, ptr [rip+0xc440]  reg(4, 7f7d000009b0) 
0x7f7d1066a48c: mov rdi, rbx  reg(3, 7f7d000009f0)  reg(7, 7f7d0cbee850) 
0x7f7d1066a48f: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0cbee850 7f7d106768cc 2 7f7d000009f0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d00000a20 7f7d000009f0 1e 7f7d106768cc	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1e 7f7d106768cc	dlsym@plt
memcpy: 7f7d00000a3e 7f7d106768cc 2 7f7d106768cc	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 2 7f7d106768cc	dlsym@plt
0x7f7d1066a494: mov rdi, qword ptr [rbp-0x50]  reg(3, ffffffff) 
0x7f7d1066a498: lea rax, ptr [rbp-0x40]  reg(10, 7f7d0cbee850) 
0x7f7d1066a49c: cmp rdi, rax  reg(3, 7f7d000009b0)  reg(10, 7f7d0cbee0a0) 
0x7f7d1066a49f: jnz 0x7f7d1066a4bb
0x7f7d1066a4bb: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d000009b0 7f7d00000030 0 7f7d00002000	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066a4c0: mov rdi, qword ptr [rbp-0x90]  reg(3, ffffffff) 
0x7f7d1066a4c7: lea rax, ptr [rbp-0x80]  reg(10, 0) 
0x7f7d1066a4cb: cmp rdi, rax  reg(3, 7f7d00000940)  reg(10, 7f7d0cbee060) 
0x7f7d1066a4ce: jz 0x7f7d1066a4d5
0x7f7d1066a4d0: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d00000940 7f7d00000038 0 7f7d00002000	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066a4d5: mov rdi, qword ptr [rbp-0xb0]  reg(3, ffffffff) 
0x7f7d1066a4dc: lea rax, ptr [rbp-0xa0]  reg(10, 7f7d000009e0) 
0x7f7d1066a4e3: cmp rdi, rax  reg(3, 7f7d00000970)  reg(10, 7f7d0cbee040) 
0x7f7d1066a4e6: jz 0x7f7d1066a4ed
0x7f7d1066a4e8: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d00000970 7f7d00000030 7f7d000009e0 7f7d00002000	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066a4ed: mov rdi, qword ptr [rbp-0x70]  reg(3, ffffffff) 
0x7f7d1066a4f1: lea rax, ptr [rbp-0x60]  reg(10, 7f7d00000980) 
0x7f7d1066a4f5: cmp rdi, rax  reg(3, 7f7d0cbee080)  reg(10, 7f7d0cbee080) 
0x7f7d1066a4f8: jz 0x7f7d1066a629
0x7f7d1066a629: mov rax, rbx  reg(10, 7f7d0cbee080)  reg(7, 7f7d0cbee850) 
0x7f7d1066a62c: mov rcx, qword ptr [rbp-0x28]  reg(9, 7f7d00002000) 
0x7f7d1066a630: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1066a639: jz 0x7f7d1066a640
0x7f7d1066a640: lea rsp, ptr [rbp-0x18]
0x7f7d1066a644: pop rbx  reg(7, 7f7d0cbee850) 
0x7f7d1066a645: pop r12  reg(15, 7f7d0cbeee60) 
0x7f7d1066a647: pop r14  reg(17, 7f7d0cbee860) 
0x7f7d1066a649: pop rbp
0x7f7d1066a64a: ret 
0x7f7d1066e04d: lea rdx, ptr [rbp-0x150]  reg(8, 7f7d00000980) 
0x7f7d1066e054: lea rsi, ptr [rbp-0x130]  reg(4, 7f7d00000028) 
0x7f7d1066e05b: mov rdi, r14  reg(3, 7f7d0cbee080)  reg(17, 7f7d0cbee990) 
0x7f7d1066e05e: call 0x7f7d1065de70
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt: 7f7d0cbee990 7f7d0cbee850 7f7d0cbee830 0	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_@plt
0x7f7d1065de70: jmp qword ptr [rip+0x222412]
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&): 7f7d0cbee990 7f7d0cbee850 7f7d0cbee830 0	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
0x7f7d10670231: push r12  reg(15, 7f7d0cbee9e0) 
0x7f7d10670233: push rbp
0x7f7d10670234: push rbx  reg(7, 7f7d0cbeee60) 
0x7f7d10670235: mov rbx, rdi  reg(7, 7f7d0cbeee60)  reg(3, 7f7d0cbee990) 
0x7f7d10670238: mov rbp, rdx
0x7f7d1067023b: lea r12, ptr [rdi+0x10]  reg(15, 7f7d0cbee9e0) 
0x7f7d1067023f: mov qword ptr [rdi], r12  reg(15, 7f7d0cbee9a0)  mem(7f7d0cbee990, 7f7d0cbeeae0) 
0x7f7d10670242: mov rax, qword ptr [rsi]  reg(10, 7f7d0cbee850) 
0x7f7d10670245: mov rdx, rax  reg(8, 7f7d0cbee830)  reg(10, 7f7d00000a20) 
0x7f7d10670248: add rdx, qword ptr [rsi+0x8]  reg(8, 7f7d00000a20) 
0x7f7d1067024c: sub rsp, 0x8
0x7f7d10670250: push 0x0 
0x7f7d10670252: mov rsi, rax  reg(4, 7f7d0cbee850)  reg(10, 7f7d00000a20) 
0x7f7d10670255: call 0x7f7d1065e020
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@plt: 7f7d0cbee990 7f7d00000a20 7f7d00000a40 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag@plt
0x7f7d1065e020: jmp qword ptr [rip+0x22233a]
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag): 7f7d0cbee990 7f7d00000a20 7f7d00000a40 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
0x7f7d10670180: push r12  reg(15, 7f7d0cbee9a0) 
0x7f7d10670182: push rbp
0x7f7d10670183: push rbx  reg(7, 7f7d0cbee990) 
0x7f7d10670184: sub rsp, 0x10
0x7f7d10670188: mov rbp, rdi
0x7f7d1067018b: mov r12, rsi  reg(15, 7f7d0cbee9a0)  reg(4, 7f7d00000a20) 
0x7f7d1067018e: mov rax, qword ptr fs:[0x28]  reg(10, 7f7d00000a20) 
0x7f7d10670197: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbee098, 1e) 
0x7f7d1067019c: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1067019e: cmp rsi, rdx  reg(4, 7f7d00000a20)  reg(8, 7f7d00000a40) 
0x7f7d106701a1: jz 0x7f7d106701b4
0x7f7d106701a3: test rsi, rsi  reg(4, 7f7d00000a20)  reg(4, 7f7d00000a20) 
0x7f7d106701a6: jnz 0x7f7d106701b4
0x7f7d106701b4: mov rbx, rdx  reg(7, 7f7d0cbee990)  reg(8, 7f7d00000a40) 
0x7f7d106701b7: sub rbx, r12  reg(7, 7f7d00000a40)  reg(15, 7f7d00000a20) 
0x7f7d106701ba: mov qword ptr [rsp], rbx  reg(7, 20)  mem(7f7d0cbee090, 7f7d000009b0) 
0x7f7d106701be: cmp rbx, 0xf  reg(7, 20) 
0x7f7d106701c2: jbe 0x7f7d106701e0
0x7f7d106701c4: mov rsi, rsp  reg(4, 7f7d00000a20) 
0x7f7d106701c7: mov edx, 0x0  reg(54, 7f7d00000a40) 
0x7f7d106701cc: mov rdi, rbp  reg(3, 7f7d0cbee990) 
0x7f7d106701cf: call 0x7f7d1065de10
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0cbee990 7f7d0cbee090 0 0	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x7f7d1065de10: jmp qword ptr [rip+0x222442]
0x7f7d106701d4: mov qword ptr [rbp], rax  reg(10, 7f7d00000940)  mem(7f7d0cbee990, 7f7d0cbee9a0) 
0x7f7d106701d8: mov rax, qword ptr [rsp]  reg(10, 7f7d00000940) 
0x7f7d106701dc: mov qword ptr [rbp+0x10], rax  reg(10, 20)  mem(7f7d0cbee9a0, 7f7d10b2b548) 
0x7f7d106701e0: mov rdi, qword ptr [rbp]  reg(3, 1) 
0x7f7d106701e4: cmp rbx, 0x1  reg(7, 20) 
0x7f7d106701e8: jnz 0x7f7d106701f3
0x7f7d106701f3: test rbx, rbx  reg(7, 20)  reg(7, 20) 
0x7f7d106701f6: jz 0x7f7d10670203
0x7f7d106701f8: mov rdx, rbx  reg(8, 7f7d00000940)  reg(7, 20) 
0x7f7d106701fb: mov rsi, r12  reg(4, 7f7d00000028)  reg(15, 7f7d00000a20) 
0x7f7d106701fe: call 0x7f7d1065f2a0
memcpy@plt: 7f7d00000940 7f7d00000a20 20 7f7d00000020	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 7f7d00000940 7f7d00000a20 20 7f7d00000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 20 7f7d00000020	dlsym@plt
0x7f7d10670203: mov rax, qword ptr [rsp]  reg(10, 7f7d00000940) 
0x7f7d10670207: mov qword ptr [rbp+0x8], rax  reg(10, 20)  mem(7f7d0cbee998, 25c) 
0x7f7d1067020b: mov rdx, qword ptr [rbp]  reg(8, 20) 
0x7f7d1067020f: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d00000960, 0) 
0x7f7d10670213: mov rax, qword ptr [rsp+0x8]  reg(10, 20) 
0x7f7d10670218: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10670221: jz 0x7f7d10670228
0x7f7d10670228: add rsp, 0x10
0x7f7d1067022c: pop rbx  reg(7, 20) 
0x7f7d1067022d: pop rbp
0x7f7d1067022e: pop r12  reg(15, 7f7d00000a20) 
0x7f7d10670230: ret 
0x7f7d1067025a: add rsp, 0x10
0x7f7d1067025e: mov rdx, qword ptr [rbp+0x8]  reg(8, 7f7d00000940) 
0x7f7d10670262: mov rsi, qword ptr [rbp]  reg(4, 7f7d00000a20) 
0x7f7d10670266: mov rdi, rbx  reg(3, 7f7d00000940)  reg(7, 7f7d0cbee990) 
0x7f7d10670269: call 0x7f7d1065edb0
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt: 7f7d0cbee990 7f7d000008f0 1b 7f7d00000940	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt
0x7f7d1065edb0: jmp qword ptr [rip+0x221c72]
memcpy: 7f7d00000a70 7f7d00000940 20 7f7d000008f0	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 20 7f7d000008f0	dlsym@plt
memcpy: 7f7d00000a90 7f7d000008f0 1b 7f7d000008f0	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1b 7f7d000008f0	dlsym@plt
0x7f7d1067026e: jmp 0x7f7d10670288
0x7f7d10670288: mov rax, rbx  reg(10, 7f7d0cbee990)  reg(7, 7f7d0cbee990) 
0x7f7d1067028b: pop rbx  reg(7, 7f7d0cbee990) 
0x7f7d1067028c: pop rbp
0x7f7d1067028d: pop r12  reg(15, 7f7d0cbee9a0) 
0x7f7d1067028f: ret 
0x7f7d1066e063: mov rdi, qword ptr [rbp-0x130]  reg(3, ffffffff) 
0x7f7d1066e06a: lea rax, ptr [rbp-0x120]  reg(10, 7f7d0cbee990) 
0x7f7d1066e071: cmp rdi, rax  reg(3, 7f7d00000a20)  reg(10, 7f7d0cbee860) 
0x7f7d1066e074: jz 0x7f7d1066e07b
0x7f7d1066e076: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d00000a20 7f7d00000030 7f7d000009e0 7f7d00000a00	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066e07b: mov rdi, qword ptr [rbp-0x150]  reg(3, ffffffff) 
0x7f7d1066e082: lea rax, ptr [rbp-0x140]  reg(10, 0) 
0x7f7d1066e089: cmp rdi, rax  reg(3, 7f7d000008f0)  reg(10, 7f7d0cbee840) 
0x7f7d1066e08c: jz 0x7f7d1066e1a0
0x7f7d1066e092: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d000008f0 7f7d00000040 0 7f7d00000a00	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066e097: jmp 0x7f7d1066e1a0
0x7f7d1066e1a0: mov rdi, qword ptr [rbp-0x890]  reg(3, ffffffff) 
0x7f7d1066e1a7: lea rax, ptr [rbp-0x880]  reg(10, 7f7d00000930) 
0x7f7d1066e1ae: cmp rdi, rax  reg(3, 7f7d0cbee100)  reg(10, 7f7d0cbee100) 
0x7f7d1066e1b1: jz 0x7f7d1066e556
0x7f7d1066e556: mov rax, r14  reg(10, 7f7d0cbee100)  reg(17, 7f7d0cbee990) 
0x7f7d1066e559: mov rcx, qword ptr [rbp-0x28]  reg(9, 7f7d00000a00) 
0x7f7d1066e55d: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d1066e566: jz 0x7f7d1066e56d
0x7f7d1066e56d: lea rsp, ptr [rbp-0x18]
0x7f7d1066e571: pop rbx  reg(7, 7f7d0cbeee60) 
0x7f7d1066e572: pop r12  reg(15, 7f7d0cbee9e0) 
0x7f7d1066e574: pop r14  reg(17, 7f7d0cbee990) 
0x7f7d1066e576: pop rbp
0x7f7d1066e577: ret 
0x7f7d10675fef: mov rbp, qword ptr [rsp]
0x7f7d10675ff3: mov rdx, rbx  reg(8, 7f7d00000930)  reg(7, 400) 
0x7f7d10675ff6: mov rsi, rbp  reg(4, 7f7d00000030) 
0x7f7d10675ff9: mov rdi, r12  reg(3, 7f7d0cbee100)  reg(15, 7f7d0cbee9e0) 
0x7f7d10675ffc: call 0x7f7d1065ee30
strncpy@plt: 7f7d0cbee9e0 7f7d00000a70 400 0	strncpy@plt
0x7f7d1065ee30: jmp qword ptr [rip+0x221c32]
0x7f7d10676001: lea rax, ptr [rsp+0x10]  reg(10, 7f7d0cbee9e0) 
0x7f7d10676006: cmp rbp, rax
0x7f7d10676009: jz 0x7f7d10676013
0x7f7d1067600b: mov rdi, rbp  reg(3, 7f7d0cbeede0) 
0x7f7d1067600e: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d00000a70 c 0 7f7d0fd49cf0	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d10676013: mov eax, 0x0  reg(56, 7f7d00000a10) 
0x7f7d10676018: mov rcx, qword ptr [rsp+0x28]  reg(9, 7f7d0fd49c00) 
0x7f7d1067601d: xor rcx, qword ptr fs:[0x28]  reg(9, f4f60b3748f98f00) 
0x7f7d10676026: jz 0x7f7d10676043
0x7f7d10676043: add rsp, 0x30
0x7f7d10676047: pop rbx  reg(7, 400) 
0x7f7d10676048: pop rbp
0x7f7d10676049: pop r12  reg(15, 7f7d0cbee9e0) 
0x7f7d1067604b: ret 
0x404343: lea rax, ptr [rbx+0x10]  reg(10, 0) 
0x404347: mov qword ptr [rbx], rax  reg(10, 7f7d0cbeee20)  mem(7f7d0cbeee10, 7f7d0cbeee43) 
0x40434a: mov eax, 0x0  reg(56, 7f7d0cbeee20) 
0x40434f: mov rcx, 0xffffffffffffffff  reg(9, 0) 
0x404356: mov rdi, rsp  reg(3, ffffffff) 
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x404359: repne scasb byte ptr [rdi]
0x40435b: not rcx
0x40435e: lea rdx, ptr [rsp+rcx*1-0x1]  reg(8, 7f7d00000a10) 
0x404363: sub rsp, 0x8
0x404367: push 0x0 
0x404369: mov rsi, rbp  reg(4, 7f7d00000040) 
0x40436c: mov rdi, rbx  reg(3, 7f7d0cbeea1c)  reg(7, 7f7d0cbeee10) 
0x40436f: call 0x4044b4
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag): 7f7d0cbeee10 7f7d0cbee9e0 7f7d0cbeea1b 3c	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
0x4044b4: push r12  reg(15, 80) 
0x4044b6: push rbp
0x4044b7: push rbx  reg(7, 7f7d0cbeee10) 
0x4044b8: sub rsp, 0x10
0x4044bc: mov rbp, rdi
0x4044bf: mov r12, rsi  reg(15, 80)  reg(4, 7f7d0cbee9e0) 
0x4044c2: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x4044cb: mov qword ptr [rsp+0x8], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbee9a8, 7f7d1064dab0) 
0x4044d0: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x4044d2: cmp rsi, rdx  reg(4, 7f7d0cbee9e0)  reg(8, 7f7d0cbeea1b) 
0x4044d5: jz 0x4044e6
0x4044d7: test rsi, rsi  reg(4, 7f7d0cbee9e0)  reg(4, 7f7d0cbee9e0) 
0x4044da: jnz 0x4044e6
0x4044e6: mov rbx, rdx  reg(7, 7f7d0cbeee10)  reg(8, 7f7d0cbeea1b) 
0x4044e9: sub rbx, r12  reg(7, 7f7d0cbeea1b)  reg(15, 7f7d0cbee9e0) 
0x4044ec: mov qword ptr [rsp], rbx  reg(7, 3b)  mem(7f7d0cbee9a0, 40) 
0x4044f0: cmp rbx, 0xf  reg(7, 3b) 
0x4044f4: jbe 0x404512
0x4044f6: mov edx, 0x0  reg(54, 7f7d0cbeea1b) 
0x4044fb: mov rsi, rsp  reg(4, 7f7d0cbee9e0) 
0x4044fe: mov rdi, rbp  reg(3, 7f7d0cbeee10) 
0x404501: call 0x403100
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt: 7f7d0cbeee10 7f7d0cbee9a0 0 3c	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt
0x403100: jmp qword ptr [rip+0x2032ca]
0x404506: mov qword ptr [rbp], rax  reg(10, 7f7d00000a70)  mem(7f7d0cbeee10, 7f7d0cbeee20) 
0x40450a: mov rax, qword ptr [rsp]  reg(10, 7f7d00000a70) 
0x40450e: mov qword ptr [rbp+0x10], rax  reg(10, 3b)  mem(7f7d0cbeee20, 0) 
0x404512: mov rdi, qword ptr [rbp]  reg(3, 3) 
0x404516: cmp rbx, 0x1  reg(7, 3b) 
0x40451a: jnz 0x404525
0x404525: test rbx, rbx  reg(7, 3b)  reg(7, 3b) 
0x404528: jz 0x404535
0x40452a: mov rdx, rbx  reg(8, 7f7d00000a70)  reg(7, 3b) 
0x40452d: mov rsi, r12  reg(4, 7f7d00000038)  reg(15, 7f7d0cbee9e0) 
0x404530: call 0x402c30
memcpy@plt: 7f7d00000a70 7f7d0cbee9e0 3b 7f7d00000020	memcpy@plt
0x402c30: jmp qword ptr [rip+0x203532]
memcpy: 7f7d00000a70 7f7d0cbee9e0 3b 7f7d00000020	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 3b 7f7d00000020	dlsym@plt
0x404535: mov rax, qword ptr [rsp]  reg(10, 7f7d00000a70) 
0x404539: mov qword ptr [rbp+0x8], rax  reg(10, 3b)  mem(7f7d0cbeee18, 7f7d10662e6f) 
0x40453d: mov rdx, qword ptr [rbp]  reg(8, 3b) 
0x404541: mov byte ptr [rdx+rax*1], 0x0  mem(7f7d00000aab, 0) 
0x404545: mov rax, qword ptr [rsp+0x8]  reg(10, 3b) 
0x40454a: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x404553: jz 0x40455a
0x40455a: add rsp, 0x10
0x40455e: pop rbx  reg(7, 3b) 
0x40455f: pop rbp
0x404560: pop r12  reg(15, 7f7d0cbee9e0) 
0x404562: ret 
0x404374: add rsp, 0x10
0x404378: mov rsi, qword ptr [rsp+0x408]  reg(4, 7f7d0cbee9e0) 
0x404380: xor rsi, qword ptr fs:[0x28]  reg(4, f4f60b3748f98f00) 
0x404389: jz 0x404390
0x404390: mov rax, rbx  reg(10, 0)  reg(7, 7f7d0cbeee10) 
0x404393: add rsp, 0x418
0x40439a: pop rbx  reg(7, 7f7d0cbeee10) 
0x40439b: pop rbp
0x40439c: ret 
0x403343: mov rdi, qword ptr [rsp]  reg(3, 7f7d00000a70) 
0x403347: call 0x402f90
puts@plt: 7f7d00000a70 0 7f7d00000a70 7f7d00000a70	puts@plt
0x402f90: jmp qword ptr [rip+0x203382]
0x40334c: mov rdi, qword ptr [rsp]  reg(3, 2) 
0x403350: lea rax, ptr [rsp+0x10]  reg(10, 3c) 
0x403355: cmp rdi, rax  reg(3, 7f7d00000a70)  reg(10, 7f7d0cbeee20) 
0x403358: jz 0x40337f
0x40335a: call 0x402d10
operator delete(void*)@plt: 7f7d00000a70 201d9d0 7f7d10069780 fbad2a84	_ZdlPv@plt
0x402d10: jmp qword ptr [rip+0x2034c2]
0x40335f: jmp 0x40337f
0x40337f: mov rax, qword ptr [rsp+0x28]  reg(10, 7f7d00000a10) 
0x403384: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x40338d: jz 0x403394
0x403394: add rsp, 0x30
0x403398: pop rbx  reg(7, 200dc40) 
0x403399: ret 
0x7f7d10660c53: test r15d, r15d  reg(82, 80)  reg(82, 80) 
0x7f7d10660c56: jz 0x7f7d10660c66
0x7f7d10660c58: lea rsi, ptr [rsp+0x10]  reg(4, 7f7d00000040) 
0x7f7d10660c5d: mov rdi, qword ptr [rbx+0x38]  reg(3, ffffffff) 
0x7f7d10660c61: call 0x7f7d1065e1a0
TMsgEventQueue::Insert(void*)@plt: 2013d90 7f7d0cbeee60 7f7d00000a10 fbad2a00	_ZN14TMsgEventQueue6InsertEPv@plt
0x7f7d1065e1a0: jmp qword ptr [rip+0x22227a]
TMsgEventQueue::Insert(void*): 2013d90 7f7d0cbeee60 7f7d00000a10 fbad2a00	_ZN14TMsgEventQueue6InsertEPv
0x7f7d10660b36: push rbp
0x7f7d10660b37: push rbx  reg(7, 200dc40) 
0x7f7d10660b38: sub rsp, 0x8
0x7f7d10660b3c: mov rbx, rdi  reg(7, 200dc40)  reg(3, 2013d90) 
0x7f7d10660b3f: mov rbp, rsi
0x7f7d10660b42: call 0x7f7d1065dfb0
TMsgEventQueue::Full()@plt: 2013d90 7f7d0cbeee60 7f7d00000a10 fbad2a00	_ZN14TMsgEventQueue4FullEv@plt
0x7f7d1065dfb0: jmp qword ptr [rip+0x222372]
TMsgEventQueue::Full(): 2013d90 7f7d0cbeee60 7f7d00000a10 fbad2a00	_ZN14TMsgEventQueue4FullEv
0x7f7d10660b16: mov edx, dword ptr [rdi+0x4]  reg(54, 7f7d00000a10) 
0x7f7d10660b19: mov eax, dword ptr [rdi]  reg(56, 0) 
0x7f7d10660b1b: lea ecx, ptr [rax+0x1]  reg(55, fbad2a00) 
0x7f7d10660b1e: cmp edx, ecx  reg(54, 0)  reg(55, 4) 
0x7f7d10660b20: jz 0x7f7d10660b30
0x7f7d10660b22: cmp dword ptr [rdi+0x8], eax  reg(56, 3)  mem(2013d98, 5dc000005db) 
0x7f7d10660b25: setz cl  reg(30, 4) 
0x7f7d10660b28: test edx, edx  reg(54, 0)  reg(54, 0) 
0x7f7d10660b2a: setz al  reg(27, 3) 
0x7f7d10660b2d: and eax, ecx  reg(56, 1)  reg(55, 0) 
0x7f7d10660b2f: ret 
0x7f7d10660b47: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d10660b49: jnz 0x7f7d10660b79
0x7f7d10660b4b: mov eax, dword ptr [rbx]  reg(56, 0) 
0x7f7d10660b4d: cmp eax, dword ptr [rbx+0x8]  reg(56, 3) 
0x7f7d10660b50: jnl 0x7f7d10660b59
0x7f7d10660b52: add eax, 0x1  reg(56, 3) 
0x7f7d10660b55: mov dword ptr [rbx], eax  reg(56, 4)  mem(2013d90, 3) 
0x7f7d10660b57: jmp 0x7f7d10660b5f
0x7f7d10660b5f: mov edx, dword ptr [rbx+0x18]  reg(54, 0) 
0x7f7d10660b62: mov edi, edx  reg(45, 2013d90)  reg(54, 1a) 
0x7f7d10660b64: imul edi, dword ptr [rbx]  reg(45, 1a) 
0x7f7d10660b67: movsxd rdi, edi  reg(3, 68)  reg(45, 68) 
0x7f7d10660b6a: add rdi, qword ptr [rbx+0x10]  reg(3, 68) 
0x7f7d10660b6e: movsxd rdx, edx  reg(8, 1a)  reg(54, 1a) 
0x7f7d10660b71: mov rsi, rbp  reg(4, 7f7d0cbeee60) 
0x7f7d10660b74: call 0x7f7d1065f2a0
memcpy@plt: 2013e28 7f7d0cbeee60 1a 0	memcpy@plt
0x7f7d1065f2a0: jmp qword ptr [rip+0x2219fa]
memcpy: 2013e28 7f7d0cbeee60 1a 0	memcpy
dlsym@plt: ffffffffffffffff 7f7d108f3d08 1a 0	dlsym@plt
0x7f7d10660b79: add rsp, 0x8
0x7f7d10660b7d: pop rbx  reg(7, 2013d90) 
0x7f7d10660b7e: pop rbp
0x7f7d10660b7f: ret 
0x7f7d10660c66: mov rdi, qword ptr [rbx+0x58]  reg(3, 2013e28) 
0x7f7d10660c6a: call 0x7f7d1065f270
pthread_mutex_unlock@plt: 2013d60 7f7d0cbeee60 1a 2013e28	pthread_mutex_unlock@plt
0x7f7d1065f270: jmp qword ptr [rip+0x221a12]
0x7f7d10660c6f: jmp 0x7f7d10660c80
0x7f7d10660c80: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f7d10660c85: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d10660c8e: jz 0x7f7d10660c95
0x7f7d10660c95: add rsp, 0x48
0x7f7d10660c99: pop rbx  reg(7, 200dc40) 
0x7f7d10660c9a: pop rbp
0x7f7d10660c9b: pop r12  reg(15, 80) 
0x7f7d10660c9d: pop r13  reg(16, 0) 
0x7f7d10660c9f: pop r14  reg(17, 0) 
0x7f7d10660ca1: pop r15  reg(18, 80) 
0x7f7d10660ca3: ret 
0x7f7d10661323: add rsp, 0x10
0x7f7d10661327: jmp 0x7f7d10661354
0x7f7d10661354: mov rdi, qword ptr [rbx+0x20]  reg(3, 2013d60) 
0x7f7d10661358: test rdi, rdi  reg(3, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1066135b: jz 0x7f7d10661363
0x7f7d1066135d: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f7d10661360: call qword ptr [rax+0x8]
TS7Worker::~TS7Worker(): 7f7d080008c0 0 2013d60 2013e28	_ZN9TS7WorkerD0Ev
0x7f7d10669e0a: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d10669e0b: mov rbx, rdi  reg(7, 7f7d08002ae0)  reg(3, 7f7d080008c0) 
0x7f7d10669e0e: mov rax, qword ptr [rip+0x215cb3]  reg(10, 7f7d1087f768) 
0x7f7d10669e15: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f700) 
0x7f7d10669e19: mov qword ptr [rdi], rax  reg(10, 7f7d1087f710)  mem(7f7d080008c0, 7f7d1087f768) 
0x7f7d10669e1c: call 0x7f7d1065e5a0
TIsoTcpSocket::~TIsoTcpSocket()@plt: 7f7d080008c0 0 2013d60 2013e28	_ZN13TIsoTcpSocketD2Ev@plt
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065e5a0: jmp qword ptr [rip+0x22207a]
0x7f7d1065e5a6: push 0xc1 
0x7f7d1065e5ab: jmp 0x7f7d1065d980
TIsoTcpSocket::~TIsoTcpSocket(): 7f7d080008c0 0 2013d60 2013e28	_ZN13TIsoTcpSocketD2Ev
0x7f7d10662724: sub rsp, 0x8
0x7f7d10662728: mov rax, qword ptr [rip+0x21d6c9]  reg(10, 7f7d1087f710) 
0x7f7d1066272f: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f548) 
0x7f7d10662733: mov qword ptr [rdi], rax  reg(10, 7f7d1087f558)  mem(7f7d080008c0, 7f7d1087f710) 
0x7f7d10662736: call 0x7f7d1065e370
TMsgSocket::~TMsgSocket()@plt: 7f7d080008c0 0 2013d60 2013e28	_ZN10TMsgSocketD2Ev@plt
0x7f7d1065e370: jmp qword ptr [rip+0x222192]
0x7f7d1065e376: push 0x9e 
0x7f7d1065e37b: jmp 0x7f7d1065d980
TMsgSocket::~TMsgSocket(): 7f7d080008c0 0 2013d60 2013e28	_ZN10TMsgSocketD2Ev
0x7f7d1066072a: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1066072b: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1066072e: mov rax, qword ptr [rip+0x21f60b]  reg(10, 7f7d1087f558) 
0x7f7d10660735: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f320) 
0x7f7d10660739: mov qword ptr [rdi], rax  reg(10, 7f7d1087f330)  mem(7f7d080008c0, 7f7d1087f558) 
0x7f7d1066073c: call 0x7f7d1065f040
TMsgSocket::DestroySocket()@plt: 7f7d080008c0 0 2013d60 2013e28	_ZN10TMsgSocket13DestroySocketEv@plt
0x7f7d1065f040: jmp qword ptr [rip+0x221b2a]
TMsgSocket::DestroySocket(): 7f7d080008c0 0 2013d60 2013e28	_ZN10TMsgSocket13DestroySocketEv
0x7f7d1065fb24: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fb25: mov rbx, rdi  reg(7, 7f7d080008c0)  reg(3, 7f7d080008c0) 
0x7f7d1065fb28: mov edi, dword ptr [rdi+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065fb2b: cmp edi, 0xffffffff  reg(45, 4) 
0x7f7d1065fb2e: jz 0x7f7d1065fb55
0x7f7d1065fb30: mov esi, 0x1  reg(47, 0) 
0x7f7d1065fb35: call 0x7f7d1065db40
shutdown@plt: 4 1 2013d60 2013e28	shutdown@plt
0x7f7d1065db40: jmp qword ptr [rip+0x2225aa]
0x7f7d1065db46: push 0x1b 
0x7f7d1065db4b: jmp 0x7f7d1065d980
0x7f7d1065fb3a: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f7d1065fb3c: jnz 0x7f7d1065fb46
0x7f7d1065fb3e: mov rdi, rbx  reg(3, 4)  reg(7, 7f7d080008c0) 
0x7f7d1065fb41: call 0x7f7d1065e070
TMsgSocket::Purge()@plt: 7f7d080008c0 1 2013d60 2013e28	_ZN10TMsgSocket5PurgeEv@plt
0x7f7d1065e070: jmp qword ptr [rip+0x222312]
0x7f7d1065e076: push 0x6e 
0x7f7d1065e07b: jmp 0x7f7d1065d980
TMsgSocket::Purge(): 7f7d080008c0 1 2013d60 2013e28	_ZN10TMsgSocket5PurgeEv
0x7f7d1065fab0: push rbp
0x7f7d1065fab1: push rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fab2: sub rsp, 0x218
0x7f7d1065fab9: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065fac2: mov qword ptr [rsp+0x208], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0cbeee78, 0) 
0x7f7d1065faca: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065facc: cmp dword ptr [rdi+0x78], 0x68  mem(7f7d08000938, 68) 
0x7f7d1065fad0: jz 0x7f7d1065fb02
0x7f7d1065fb02: mov rax, qword ptr [rsp+0x208]  reg(10, 0) 
0x7f7d1065fb0a: xor rax, qword ptr fs:[0x28]  reg(10, f4f60b3748f98f00) 
0x7f7d1065fb13: jz 0x7f7d1065fb1a
0x7f7d1065fb1a: add rsp, 0x218
0x7f7d1065fb21: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fb22: pop rbp
0x7f7d1065fb23: ret 
0x7f7d1065fb46: mov edi, dword ptr [rbx+0x18]  reg(45, 7f7d080008c0) 
0x7f7d1065fb49: call 0x7f7d1065dbb0
close@plt: 4 1 2013d60 2013e28	close@plt
0x7f7d1065dbb0: jmp qword ptr [rip+0x222572]
0x7f7d1065fb4e: mov dword ptr [rbx+0x18], 0xffffffff  mem(7f7d080008d8, 6600000200000004) 
0x7f7d1065fb55: mov dword ptr [rbx+0x78], 0x0  mem(7f7d08000938, 68) 
0x7f7d1065fb5c: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d1065fb5d: ret 
0x7f7d10660741: mov rbx, qword ptr [rbx+0x10]  reg(7, 7f7d080008c0) 
0x7f7d10660745: test rbx, rbx  reg(7, 7f7d08002ac0)  reg(7, 7f7d08002ac0) 
0x7f7d10660748: jz 0x7f7d1066075a
0x7f7d1066074a: mov rdi, rbx  reg(3, 2)  reg(7, 7f7d08002ac0) 
0x7f7d1066074d: call 0x7f7d1065e030
TPinger::~TPinger()@plt: 7f7d08002ac0 1 0 2013e28	_ZN7TPingerD1Ev@plt
0x7f7d1065e030: jmp qword ptr [rip+0x222332]
0x7f7d1065e036: push 0x6a 
0x7f7d1065e03b: jmp 0x7f7d1065d980
TPinger::~TPinger(): 7f7d08002ac0 1 0 2013e28	_ZN7TPingerD1Ev
0x7f7d10660728: ret 
0x7f7d10660752: mov rdi, rbx  reg(3, 7f7d08002ac0)  reg(7, 7f7d08002ac0) 
0x7f7d10660755: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002ac0 1 0 2013e28	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066075a: pop rbx  reg(7, 7f7d08002ac0) 
0x7f7d1066075b: ret 
0x7f7d1066273b: add rsp, 0x8
0x7f7d1066273f: ret 
0x7f7d10669e21: mov rdi, rbx  reg(3, ffffffff)  reg(7, 7f7d080008c0) 
0x7f7d10669e24: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d080008c0 7f7d08000028 7f7d08002c70 2013e00	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d10669e29: pop rbx  reg(7, 7f7d080008c0) 
0x7f7d10669e2a: ret 
0x7f7d10661363: mov esi, dword ptr [rbx+0x28]  reg(47, 0) 
0x7f7d10661366: mov rdi, qword ptr [rbx+0x18]  reg(3, 7f7d08000020) 
0x7f7d1066136a: call 0x7f7d1065e350
TCustomMsgServer::Delete(int)@plt: 200dc40 0 0 2013e00	_ZN16TCustomMsgServer6DeleteEi@plt
0x7f7d1065e350: jmp qword ptr [rip+0x2221a2]
0x7f7d1065e356: push 0x9c 
0x7f7d1065e35b: jmp 0x7f7d1065d980
TCustomMsgServer::Delete(int): 200dc40 0 0 2013e00	_ZN16TCustomMsgServer6DeleteEi
0x7f7d10661232: push rbp
0x7f7d10661233: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d10661234: sub rsp, 0x8
0x7f7d10661238: mov rbx, rdi  reg(7, 7f7d08002ae0)  reg(3, 200dc40) 
0x7f7d1066123b: mov ebp, esi
0x7f7d1066123d: call 0x7f7d1065f2f0
TCustomMsgServer::LockList()@plt: 200dc40 0 0 2013e00	_ZN16TCustomMsgServer8LockListEv@plt
0x7f7d1065f2f0: jmp qword ptr [rip+0x2219d2]
TCustomMsgServer::LockList(): 200dc40 0 0 2013e00	_ZN16TCustomMsgServer8LockListEv
0x7f7d10660e4a: sub rsp, 0x8
0x7f7d10660e4e: mov rdi, qword ptr [rdi+0x30]  reg(3, 200dc40) 
0x7f7d10660e52: call 0x7f7d1065f050
pthread_mutex_lock@plt: 2013d30 0 0 2013e00	pthread_mutex_lock@plt
0x7f7d1065f050: jmp qword ptr [rip+0x221b22]
0x7f7d10660e57: add rsp, 0x8
0x7f7d10660e5b: ret 
0x7f7d10661242: movsxd rbp, ebp
0x7f7d10661245: mov qword ptr [rbx+rbp*8+0x60], 0x0  mem(200dca0, 7f7d08002ae0) 
0x7f7d1066124e: sub dword ptr [rbx+0x2074], 0x1  mem(200fcb4, 40000000001) 
0x7f7d10661255: mov rdi, rbx  reg(3, 1)  reg(7, 200dc40) 
0x7f7d10661258: call 0x7f7d1065eb80
TCustomMsgServer::UnlockList()@plt: 200dc40 0 0 0	_ZN16TCustomMsgServer10UnlockListEv@plt
0x7f7d1065eb80: jmp qword ptr [rip+0x221d8a]
TCustomMsgServer::UnlockList(): 200dc40 0 0 0	_ZN16TCustomMsgServer10UnlockListEv
0x7f7d10660e5c: sub rsp, 0x8
0x7f7d10660e60: mov rdi, qword ptr [rdi+0x30]  reg(3, 200dc40) 
0x7f7d10660e64: call 0x7f7d1065f270
pthread_mutex_unlock@plt: 2013d30 0 0 0	pthread_mutex_unlock@plt
0x7f7d1065f270: jmp qword ptr [rip+0x221a12]
0x7f7d10660e69: add rsp, 0x8
0x7f7d10660e6d: ret 
0x7f7d1066125d: add rsp, 0x8
0x7f7d10661261: pop rbx  reg(7, 200dc40) 
0x7f7d10661262: pop rbp
0x7f7d10661263: ret 
0x7f7d1066136f: jmp 0x7f7d10661389
0x7f7d10661389: pop rbx  reg(7, 7f7d08002ae0) 
0x7f7d1066138a: pop rbp
0x7f7d1066138b: pop r12  reg(15, 0) 
0x7f7d1066138d: ret 
0x7f7d10661785: mov byte ptr [rbx+0x13], 0x1  mem(7f7d08002af3, dc400000000100) 
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d10661789: cmp byte ptr [rbx+0x14], 0x0  reg(4, 186a0) 
0x7f7d1066178d: jz 0x7f7d1066179d
0x7f7d1066178f: test rbx, rbx  reg(7, 7f7d08002ae0)  reg(7, 7f7d08002ae0) 
0x7f7d10661792: jz 0x7f7d1066179d
0x7f7d10661794: mov rax, qword ptr [rbx]  reg(10, 0) 
0x7f7d10661797: mov rdi, rbx  reg(3, 2013d30)  reg(7, 7f7d08002ae0) 
0x7f7d1066179a: call qword ptr [rax+0x8]
TMsgWorkerThread::~TMsgWorkerThread(): 7f7d08002ae0 0 2013d30 0	_ZN16TMsgWorkerThreadD0Ev
0x7f7d10661720: push rbx  reg(7, 7f7d08002ae0) 
0x7f7d10661721: mov rbx, rdi  reg(7, 7f7d08002ae0)  reg(3, 7f7d08002ae0) 
0x7f7d10661724: mov rax, qword ptr [rip+0x21e4ad]  reg(10, 7f7d1087f3d8) 
0x7f7d1066172b: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f3c8) 
0x7f7d1066172f: mov qword ptr [rdi], rax  reg(10, 7f7d1087f3d8)  mem(7f7d08002ae0, 7f7d1087f3d8) 
0x7f7d10661732: call 0x7f7d1065eee0
TSnapThread::~TSnapThread()@plt: 7f7d08002ae0 0 2013d30 0	_ZN11TSnapThreadD2Ev@plt
0x7f7d1065eee0: jmp qword ptr [rip+0x221bda]
0x7f7d1065eee6: push 0x155 
0x7f7d1065eeeb: jmp 0x7f7d1065d980
TSnapThread::~TSnapThread(): 7f7d08002ae0 0 2013d30 0	_ZN11TSnapThreadD1Ev
0x7f7d10661898: mov rax, qword ptr [rip+0x21e1e9]  reg(10, 7f7d1087f3d8) 
0x7f7d1066189f: lea rax, ptr [rax+0x10]  reg(10, 7f7d1087f470) 
0x7f7d106618a3: mov qword ptr [rdi], rax  reg(10, 7f7d1087f480)  mem(7f7d08002ae0, 7f7d1087f3d8) 
0x7f7d106618a6: cmp byte ptr [rdi+0x11], 0x0  mem(7f7d08002af1, 4000000001010001) 
0x7f7d106618aa: jz 0x7f7d106618c4
0x7f7d106618ac: cmp byte ptr [rdi+0x13], 0x0  mem(7f7d08002af3, dc400000000101) 
0x7f7d106618b0: jnz 0x7f7d106618c4
0x7f7d106618c4: ret 
0x7f7d10661737: mov rdi, rbx  reg(3, 7f7d08002ae0)  reg(7, 7f7d08002ae0) 
0x7f7d1066173a: call 0x7f7d1065dd80
operator delete(void*)@plt: 7f7d08002ae0 0 2013d30 0	_ZdlPv@plt
0x7f7d1065dd80: jmp qword ptr [rip+0x22248a]
0x7f7d1066173f: pop rbx  reg(7, 7f7d08002ae0) 
0x7f7d10661740: ret 
0x7f7d1066179d: mov edi, 0x0  reg(45, ffffffff) 
0x7f7d106617a2: call 0x7f7d1065e6a0
pthread_exit@plt: 0 7f7d08000038 7f7d08002d00 0	pthread_exit@plt
0x7f7d1065e6a0: jmp qword ptr [rip+0x221ffa]
0x7f7d1065e6a6: push 0xd1 
0x7f7d1065e6ab: jmp 0x7f7d1065d980
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
__gxx_personality_v0@plt: 1 a 0 7f7d0cbefd70	__gxx_personality_v0@plt
0x403020: jmp qword ptr [rip+0x20333a]
0x403026: push 0x69 
0x40302b: jmp 0x402980
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
0x7f7d1065fa68: cdqe   reg(10, 0)  reg(56, 0) 
0x7f7d1065fa6a: cmp rax, 0xffffffffffffffff  reg(10, 0) 
0x7f7d1065fa6e: jnz 0x7f7d1065fa80
0x7f7d1065fa80: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f7d1065fa83: setnle al  reg(27, 0) 
0x7f7d1065fa86: jmp 0x7f7d1065fa8d
0x7f7d1065fa8d: mov rbx, qword ptr [rsp+0x98]  reg(7, 201d740) 
0x7f7d1065fa95: xor rbx, qword ptr fs:[0x28]  reg(7, f4f60b3748f98f00) 
0x7f7d1065fa9e: jz 0x7f7d1065faa5
0x7f7d1065faa5: add rsp, 0xa8
0x7f7d1065faac: pop rbx  reg(7, 0) 
0x7f7d1065faad: pop rbp
0x7f7d1065faae: ret 
0x7f7d106609cc: test al, al  reg(27, 0)  reg(27, 0) 
0x7f7d106609ce: jz 0x7f7d106609ba
0x7f7d106609ba: cmp byte ptr [rbx+0x12], 0x0  mem(201d802, d740000000000000) 
0x7f7d106609be: jnz 0x7f7d10660a06
0x7f7d106609c0: mov rdi, qword ptr [rbx+0x18]  reg(3, 2) 
0x7f7d106609c4: mov esi, dword ptr [rdi+0x68]  reg(47, 7f7d0de84e40) 
0x7f7d106609c7: call 0x7f7d1065ee80
TMsgSocket::CanRead(int)@plt: 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi@plt
0x7f7d1065ee80: jmp qword ptr [rip+0x221c0a]
TMsgSocket::CanRead(int): 201d740 64 0 0	_ZN10TMsgSocket7CanReadEi
0x7f7d1065f9b8: push rbp
0x7f7d1065f9b9: push rbx  reg(7, 201d7f0) 
0x7f7d1065f9ba: sub rsp, 0xa8
0x7f7d1065f9c1: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f7d1065f9ca: mov qword ptr [rsp+0x98], rax  reg(10, f4f60b3748f98f00)  mem(7f7d0de84ec8, f4f60b3748f98f00) 
0x7f7d1065f9d2: xor eax, eax  reg(56, f4f60b3748f98f00)  reg(56, f4f60b3748f98f00) 
0x7f7d1065f9d4: cmp dword ptr [rdi+0x18], 0xffffffff  mem(201d758, 6600000200000003) 
0x7f7d1065f9d8: jz 0x7f7d1065fa88
0x7f7d1065f9de: mov rbx, rdi  reg(7, 201d7f0)  reg(3, 201d740) 
0x7f7d1065f9e1: mov edx, 0x10624dd3  reg(54, 0) 
0x7f7d1065f9e6: mov eax, esi  reg(56, 0)  reg(47, 64) 
0x7f7d1065f9e8: imul edx  reg(54, 10624dd3)  reg(56, 64) 
0x7f7d1065f9ea: sar edx, 0x6  reg(54, 6) 
0x7f7d1065f9ed: mov eax, esi  reg(56, 6666666c)  reg(47, 64) 
0x7f7d1065f9ef: sar eax, 0x1f  reg(56, 64) 
0x7f7d1065f9f2: sub edx, eax  reg(54, 0)  reg(56, 0) 
0x7f7d1065f9f4: imul eax, edx, 0x3e8  reg(56, 0)  reg(54, 0) 
0x7f7d1065f9fa: sub esi, eax  reg(47, 64)  reg(56, 0) 
0x7f7d1065f9fc: imul esi, esi, 0x3e8  reg(47, 64)  reg(47, 64) 
0x7f7d1065fa02: movsxd rsi, esi  reg(4, 186a0)  reg(47, 186a0) 
0x7f7d1065fa05: mov qword ptr [rsp+0x8], rsi  reg(4, 186a0)  mem(7f7d0de84e38, 0) 
0x7f7d1065fa0a: movsxd rdx, edx  reg(8, 0)  reg(54, 0) 
0x7f7d1065fa0d: mov qword ptr [rsp], rdx  reg(8, 0)  mem(7f7d0de84e30, 0) 
0x7f7d1065fa11: lea rbp, ptr [rsp+0x10]
0x7f7d1065fa16: mov ecx, 0x10  reg(55, 0) 
0x7f7d1065fa1b: mov eax, 0x0  reg(56, 0) 
0x7f7d1065fa20: mov rdi, rbp  reg(3, 201d740) 
0x7f7d1065fa23: cld 
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa24: rep stosq qword ptr [rdi]
0x7f7d1065fa27: movsxd rdi, dword ptr [rbx+0x18]  reg(3, 7f7d0de84ec0) 
0x7f7d1065fa2b: call 0x7f7d1065f390
__fdelt_chk@plt: 3 186a0 0 0	__fdelt_chk@plt
0x7f7d1065f390: jmp qword ptr [rip+0x221982]
0x7f7d1065fa30: mov edi, dword ptr [rbx+0x18]  reg(45, 3) 
0x7f7d1065fa33: mov edx, edi  reg(54, 0)  reg(45, 3) 
0x7f7d1065fa35: sar edx, 0x1f  reg(54, 3) 
0x7f7d1065fa38: shr edx, 0x1a  reg(54, 0) 
0x7f7d1065fa3b: lea ecx, ptr [rdi+rdx*1]  reg(55, 0) 
0x7f7d1065fa3e: and ecx, 0x3f  reg(55, 3) 
0x7f7d1065fa41: sub ecx, edx  reg(55, 3)  reg(54, 0) 
0x7f7d1065fa43: mov edx, 0x1  reg(54, 0) 
0x7f7d1065fa48: shl rdx, cl  reg(8, 1)  reg(30, 3) 
0x7f7d1065fa4b: or qword ptr [rsp+rax*8+0x10], rdx  reg(8, 8)  mem(7f7d0de84e40, 0) 
0x7f7d1065fa50: add edi, 0x1  reg(45, 3) 
0x7f7d1065fa53: mov r8, rsp  reg(11, 7f7d0de84e30) 
0x7f7d1065fa56: mov ecx, 0x0  reg(55, 3) 
0x7f7d1065fa5b: mov edx, 0x0  reg(54, 8) 
0x7f7d1065fa60: mov rsi, rbp  reg(4, 186a0) 
0x7f7d1065fa63: call 0x7f7d1065dda0
select@plt: 4 7f7d0de84e40 0 0	select@plt
0x7f7d1065dda0: jmp qword ptr [rip+0x22247a]
