image: /home/hao/share/protocol-test/dnp3/automatak/build/outstation-demo
sec: 
sec: .interp
sec: .note.ABI-tag
sec: .note.gnu.build-id
sec: .gnu.hash
sec: .dynsym
sec: .dynstr
sec: .gnu.version
sec: .gnu.version_r
sec: .rela.dyn
sec: .rela.plt
sec: .init
function _init	_init
sec: .plt
function _Znam@plt	operator new[](unsigned long)@plt
function _ZNSo3putEc@plt	std::ostream::put(char)@plt
function _ZN8asiodnp313UpdateBuilder6UpdateERKN8opendnp37CounterEtNS1_9EventModeE@plt	asiodnp3::UpdateBuilder::Update(opendnp3::Counter const&, unsigned short, opendnp3::EventMode)@plt
function _ZN8asiodnp313UpdateBuilder6UpdateERKN8opendnp36BinaryEtNS1_9EventModeE@plt	asiodnp3::UpdateBuilder::Update(opendnp3::Binary const&, unsigned short, opendnp3::EventMode)@plt
function _ZN7openpal12TimeDuration7MinutesEl@plt	openpal::TimeDuration::Minutes(long)@plt
function _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt
function _ZN8asiodnp311DNP3ManagerD1Ev@plt	asiodnp3::DNP3Manager::~DNP3Manager()@plt
function strlen@plt	strlen@plt
function _ZN7openpal12TimeDuration12MillisecondsEl@plt	openpal::TimeDuration::Milliseconds(long)@plt
function _ZN8asiodnp311DNP3ManagerC1EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES7_@plt	asiodnp3::DNP3Manager::DNP3Manager(unsigned int, std::shared_ptr<openpal::ILogHandler>, std::function<void ()>, std::function<void ()>)@plt
function _ZN8opendnp317EventBufferConfigC1Etttttttt@plt	opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt
function _ZNSo5flushEv@plt	std::ostream::flush()@plt
function _ZN8asiodnp313UpdateBuilder6UpdateERKN8opendnp311OctetStringEtNS1_9EventModeE@plt	asiodnp3::UpdateBuilder::Update(opendnp3::OctetString const&, unsigned short, opendnp3::EventMode)@plt
function _ZSt19__throw_logic_errorPKc@plt	std::__throw_logic_error(char const*)@plt
function _ZN8asiodnp311DNP3Manager12AddTCPServerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjN8opendnp316ServerAcceptModeES8_tSt10shared_ptrINS_16IChannelListenerEE@plt	asiodnp3::DNP3Manager::AddTCPServer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, opendnp3::ServerAcceptMode, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned short, std::shared_ptr<asiodnp3::IChannelListener>)@plt
function _ZN8opendnp315DoubleBitBinaryC1ENS_9DoubleBitE@plt	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::DoubleBit)@plt
function memcpy@plt	memcpy@plt
function _ZN8opendnp310ClassField4NoneEv@plt	opendnp3::ClassField::None()@plt
function __cxa_atexit@plt	__cxa_atexit@plt
function _ZN8opendnp317EventBufferConfig8AllTypesEt@plt	opendnp3::EventBufferConfig::AllTypes(unsigned short)@plt
function _ZdlPv@plt	operator delete(void*)@plt
function _Znwm@plt	operator new(unsigned long)@plt
function _ZdlPvm@plt	operator delete(void*, unsigned long)@plt
function _ZN8asiodnp313UpdateBuilder6UpdateERKN8opendnp315DoubleBitBinaryEtNS1_9EventModeE@plt	asiodnp3::UpdateBuilder::Update(opendnp3::DoubleBitBinary const&, unsigned short, opendnp3::EventMode)@plt
function _ZN8opendnp320ChannelStateToStringENS_12ChannelStateE@plt	opendnp3::ChannelStateToString(opendnp3::ChannelState)@plt
function __stack_chk_fail@plt	__stack_chk_fail@plt
function _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt	std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt
function _ZNKSt5ctypeIcE13_M_widen_initEv@plt	std::ctype<char>::_M_widen_init() const@plt
function _ZSt16__throw_bad_castv@plt	std::__throw_bad_cast()@plt
function _ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt	std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt
function _ZdaPv@plt	operator delete[](void*)@plt
function _ZN8asiodnp313UpdateBuilder6UpdateERKN8opendnp36AnalogEtNS1_9EventModeE@plt	asiodnp3::UpdateBuilder::Update(opendnp3::Analog const&, unsigned short, opendnp3::EventMode)@plt
function _ZN7openpal12TimeDuration3MaxEv@plt	openpal::TimeDuration::Max()@plt
function _ZN8opendnp320SimpleCommandHandlerC2ENS_13CommandStatusE@plt	opendnp3::SimpleCommandHandler::SimpleCommandHandler(opendnp3::CommandStatus)@plt
function _ZNK8asiodnp313UpdateBuilder5BuildEv@plt	asiodnp3::UpdateBuilder::Build() const@plt
function _ZNSt8ios_base4InitC1Ev@plt	std::ios_base::Init::Init()@plt
function _ZN8opendnp37CounterC1Ej@plt	opendnp3::Counter::Counter(unsigned int)@plt
function _ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt
function _Unwind_Resume@plt	_Unwind_Resume@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt
function _ZN7openpal12TimeDuration7SecondsEl@plt	openpal::TimeDuration::Seconds(long)@plt
function _ZN8opendnp36BinaryC1Eb@plt	opendnp3::Binary::Binary(bool)@plt
function _ZN8opendnp39OctetDataC2ERKN7openpal6RSliceE@plt	opendnp3::OctetData::OctetData(openpal::RSlice const&)@plt
function _ZN7openpal6RSliceC1EPKhj@plt	openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt
function __libc_start_main@plt	__libc_start_main@plt
function _ZN8opendnp36AnalogC1Ed@plt	opendnp3::Analog::Analog(double)@plt
sec: .plt.got
sec: .text
function main	main
function _GLOBAL__sub_I_main.cpp	_GLOBAL__sub_I_main.cpp
function _start	_start
function deregister_tm_clones	deregister_tm_clones
function register_tm_clones	register_tm_clones
function __do_global_dtors_aux	__do_global_dtors_aux
function frame_dummy	frame_dummy
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.37	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) (.isra.37)
function _Z17ConfigureDatabaseRN8asiodnp314DatabaseConfigE	ConfigureDatabase(asiodnp3::DatabaseConfig&)
function _Z10AddUpdatesRN8asiodnp313UpdateBuilderER5StateRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE	AddUpdates(asiodnp3::UpdateBuilder&, State&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
function _ZN8opendnp313ILinkListener13OnStateChangeENS_10LinkStatusE	opendnp3::ILinkListener::OnStateChange(opendnp3::LinkStatus)
function _ZN8opendnp313ILinkListener27OnUnknownDestinationAddressEt	opendnp3::ILinkListener::OnUnknownDestinationAddress(unsigned short)
function _ZN8opendnp313ILinkListener22OnUnknownSourceAddressEt	opendnp3::ILinkListener::OnUnknownSourceAddress(unsigned short)
function _ZN8opendnp313ILinkListener20OnKeepAliveInitiatedEv	opendnp3::ILinkListener::OnKeepAliveInitiated()
function _ZN8opendnp313ILinkListener18OnKeepAliveFailureEv	opendnp3::ILinkListener::OnKeepAliveFailure()
function _ZN8opendnp313ILinkListener18OnKeepAliveSuccessEv	opendnp3::ILinkListener::OnKeepAliveSuccess()
function _ZN8opendnp322IOutstationApplication25SupportsWriteAbsoluteTimeEv	opendnp3::IOutstationApplication::SupportsWriteAbsoluteTime()
function _ZN8opendnp322IOutstationApplication17WriteAbsoluteTimeERKN7openpal12UTCTimestampE	opendnp3::IOutstationApplication::WriteAbsoluteTime(openpal::UTCTimestamp const&)
function _ZN8opendnp322IOutstationApplication28SupportsWriteTimeAndIntervalEv	opendnp3::IOutstationApplication::SupportsWriteTimeAndInterval()
function _ZN8opendnp322IOutstationApplication20WriteTimeAndIntervalERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE	opendnp3::IOutstationApplication::WriteTimeAndInterval(opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)
function _ZN8opendnp322IOutstationApplication19SupportsAssignClassEv	opendnp3::IOutstationApplication::SupportsAssignClass()
function _ZN8opendnp322IOutstationApplication21RecordClassAssignmentENS_15AssignClassTypeENS_10PointClassEtt	opendnp3::IOutstationApplication::RecordClassAssignment(opendnp3::AssignClassType, opendnp3::PointClass, unsigned short, unsigned short)
function _ZNK8opendnp322IOutstationApplication17GetApplicationIINEv	opendnp3::IOutstationApplication::GetApplicationIIN() const
function _ZNK8opendnp322IOutstationApplication18ColdRestartSupportEv	opendnp3::IOutstationApplication::ColdRestartSupport() const
function _ZNK8opendnp322IOutstationApplication18WarmRestartSupportEv	opendnp3::IOutstationApplication::WarmRestartSupport() const
function _ZN8opendnp322IOutstationApplication11ColdRestartEv	opendnp3::IOutstationApplication::ColdRestart()
function _ZN8opendnp322IOutstationApplication11WarmRestartEv	opendnp3::IOutstationApplication::WarmRestart()
function _ZN8opendnp322IOutstationApplicationD1Ev	opendnp3::IOutstationApplication::~IOutstationApplication()
function _ZNKSt5ctypeIcE8do_widenEc	std::ctype<char>::do_widen(char) const
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_23ControlRelayOutputBlockEt	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_23ControlRelayOutputBlockEtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::ControlRelayOutputBlock const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_17AnalogOutputInt16Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_17AnalogOutputInt16EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputInt16 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_17AnalogOutputInt32Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_17AnalogOutputInt32EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputInt32 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_19AnalogOutputFloat32Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_19AnalogOutputFloat32EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputFloat32 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_20AnalogOutputDouble64Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_20AnalogOutputDouble64EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputDouble64 const&, unsigned short, opendnp3::OperateType)
function _ZN7openpal12StaticBufferILj255EED1Ev	openpal::StaticBuffer<255u>::~StaticBuffer()
function _ZNSt17_Function_handlerIFvvEZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIS0_ES8_Ed0_UlvE_E9_M_invokeERKSt9_Any_data	_ZNSt17_Function_handlerIFvvEZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIS0_ES8_Ed0_UlvE_E9_M_invokeERKSt9_Any_data
function _ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
function _ZNSt17_Function_handlerIFvvEZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIS0_ES8_Ed_NUlvE_EE9_M_invokeERKSt9_Any_data	_ZNSt17_Function_handlerIFvvEZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIS0_ES8_Ed_NUlvE_EE9_M_invokeERKSt9_Any_data
function _ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
function _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZN8opendnp321SuccessCommandHandlerD2Ev	opendnp3::SuccessCommandHandler::~SuccessCommandHandler()
function _ZN8asiodnp323PrintingChannelListenerD1Ev	asiodnp3::PrintingChannelListener::~PrintingChannelListener()
function _ZN8opendnp328DefaultOutstationApplicationD1Ev	opendnp3::DefaultOutstationApplication::~DefaultOutstationApplication()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321SuccessCommandHandlerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::SuccessCommandHandler, std::allocator<opendnp3::SuccessCommandHandler>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321SuccessCommandHandlerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::SuccessCommandHandler, std::allocator<opendnp3::SuccessCommandHandler>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp313ConsoleLoggerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<asiodnp3::ConsoleLogger, std::allocator<asiodnp3::ConsoleLogger>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp313ConsoleLoggerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<asiodnp3::ConsoleLogger, std::allocator<asiodnp3::ConsoleLogger>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp323PrintingChannelListenerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<asiodnp3::PrintingChannelListener, std::allocator<asiodnp3::PrintingChannelListener>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp323PrintingChannelListenerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<asiodnp3::PrintingChannelListener, std::allocator<asiodnp3::PrintingChannelListener>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp328DefaultOutstationApplicationESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::DefaultOutstationApplication, std::allocator<opendnp3::DefaultOutstationApplication>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp328DefaultOutstationApplicationESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::DefaultOutstationApplication, std::allocator<opendnp3::DefaultOutstationApplication>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp328DefaultOutstationApplicationESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::DefaultOutstationApplication, std::allocator<opendnp3::DefaultOutstationApplication>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp323PrintingChannelListenerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<asiodnp3::PrintingChannelListener, std::allocator<asiodnp3::PrintingChannelListener>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp313ConsoleLoggerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<asiodnp3::ConsoleLogger, std::allocator<asiodnp3::ConsoleLogger>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321SuccessCommandHandlerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::SuccessCommandHandler, std::allocator<opendnp3::SuccessCommandHandler>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZN8opendnp322IOutstationApplicationD0Ev	opendnp3::IOutstationApplication::~IOutstationApplication()
function _ZN8opendnp328DefaultOutstationApplicationD0Ev	opendnp3::DefaultOutstationApplication::~DefaultOutstationApplication()
function _ZN7openpal12StaticBufferILj255EED0Ev	openpal::StaticBuffer<255u>::~StaticBuffer()
function _ZN8opendnp321SuccessCommandHandlerD0Ev	opendnp3::SuccessCommandHandler::~SuccessCommandHandler()
function _ZN8asiodnp323PrintingChannelListenerD0Ev	asiodnp3::PrintingChannelListener::~PrintingChannelListener()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp328DefaultOutstationApplicationESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::DefaultOutstationApplication, std::allocator<opendnp3::DefaultOutstationApplication>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp323PrintingChannelListenerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<asiodnp3::PrintingChannelListener, std::allocator<asiodnp3::PrintingChannelListener>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp313ConsoleLoggerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<asiodnp3::ConsoleLogger, std::allocator<asiodnp3::ConsoleLogger>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321SuccessCommandHandlerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::SuccessCommandHandler, std::allocator<opendnp3::SuccessCommandHandler>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321SuccessCommandHandlerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::SuccessCommandHandler, std::allocator<opendnp3::SuccessCommandHandler>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp313ConsoleLoggerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<asiodnp3::ConsoleLogger, std::allocator<asiodnp3::ConsoleLogger>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp323PrintingChannelListenerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<asiodnp3::PrintingChannelListener, std::allocator<asiodnp3::PrintingChannelListener>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp328DefaultOutstationApplicationESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::DefaultOutstationApplication, std::allocator<opendnp3::DefaultOutstationApplication>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZN7openpal5ArrayIN8opendnp312BinaryConfigEtED1Ev	openpal::Array<opendnp3::BinaryConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp312BinaryConfigEtED0Ev	openpal::Array<opendnp3::BinaryConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp321DoubleBitBinaryConfigEtED1Ev	openpal::Array<opendnp3::DoubleBitBinaryConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp321DoubleBitBinaryConfigEtED0Ev	openpal::Array<opendnp3::DoubleBitBinaryConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp312AnalogConfigEtED1Ev	openpal::Array<opendnp3::AnalogConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp312AnalogConfigEtED0Ev	openpal::Array<opendnp3::AnalogConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp313CounterConfigEtED1Ev	openpal::Array<opendnp3::CounterConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp313CounterConfigEtED0Ev	openpal::Array<opendnp3::CounterConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp319FrozenCounterConfigEtED2Ev	openpal::Array<opendnp3::FrozenCounterConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp319FrozenCounterConfigEtED0Ev	openpal::Array<opendnp3::FrozenCounterConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp314BOStatusConfigEtED1Ev	openpal::Array<opendnp3::BOStatusConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp314BOStatusConfigEtED0Ev	openpal::Array<opendnp3::BOStatusConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp314AOStatusConfigEtED1Ev	openpal::Array<opendnp3::AOStatusConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp314AOStatusConfigEtED0Ev	openpal::Array<opendnp3::AOStatusConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp321TimeAndIntervalConfigEtED2Ev	openpal::Array<opendnp3::TimeAndIntervalConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp321TimeAndIntervalConfigEtED0Ev	openpal::Array<opendnp3::TimeAndIntervalConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp317OctetStringConfigEtED1Ev	openpal::Array<opendnp3::OctetStringConfig, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp317OctetStringConfigEtED0Ev	openpal::Array<opendnp3::OctetStringConfig, unsigned short>::~Array()
function _ZN8asiodnp323PrintingChannelListener13OnStateChangeEN8opendnp312ChannelStateE	asiodnp3::PrintingChannelListener::OnStateChange(opendnp3::ChannelState)
function _ZN8asiodnp314DatabaseConfigD1Ev	asiodnp3::DatabaseConfig::~DatabaseConfig()
function _ZN8asiodnp321OutstationStackConfigC2ERKN8opendnp313DatabaseSizesE	asiodnp3::OutstationStackConfig::OutstationStackConfig(opendnp3::DatabaseSizes const&)
function _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
function __libc_csu_init	__libc_csu_init
function __libc_csu_fini	__libc_csu_fini
sec: .fini
function _fini	_fini
sec: .rodata
sec: .eh_frame_hdr
sec: .eh_frame
sec: .gcc_except_table
sec: .init_array
sec: .fini_array
sec: .jcr
sec: .data.rel.ro
sec: .dynamic
sec: .got
sec: .got.plt
sec: .data
sec: .bss
sec: .comment
sec: .shstrtab
sec: .symtab
sec: .strtab
image: /lib64/ld-linux-x86-64.so.2
image: [vdso]
image: /home/hao/share/protocol-test/libx.so
sec: 
sec: .note.gnu.build-id
sec: .gnu.hash
sec: .dynsym
sec: .dynstr
sec: .gnu.version
sec: .gnu.version_r
sec: .rela.dyn
sec: .rela.plt
sec: .init
function _init	_init
sec: .plt
function fprintf@plt	fprintf@plt
function dlsym@plt	dlsym@plt
sec: .plt.got
sec: .text
function deregister_tm_clones	deregister_tm_clones
function register_tm_clones	register_tm_clones
function __do_global_dtors_aux	__do_global_dtors_aux
function frame_dummy	frame_dummy
function memcpy	memcpy
function memmove	memmove
function read	read
function send	send
function recv	recv
function sendto	sendto
function recvfrom	recvfrom
function sendmsg	sendmsg
function recvmsg	recvmsg
sec: .fini
function _fini	_fini
sec: .rodata
sec: .eh_frame_hdr
sec: .eh_frame
sec: .init_array
sec: .fini_array
sec: .jcr
sec: .dynamic
sec: .got
sec: .got.plt
sec: .data
sec: .bss
sec: .comment
sec: .shstrtab
sec: .symtab
sec: .strtab
image: /usr/lib/libasiodnp3.so.2
image: /lib/x86_64-linux-gnu/libpthread.so.0
image: /usr/lib/libopendnp3.so.2
sec: 
sec: .note.gnu.build-id
sec: .gnu.hash
sec: .dynsym
sec: .dynstr
sec: .gnu.version
sec: .gnu.version_r
sec: .rela.dyn
sec: .rela.plt
sec: .init
function _init	_init
sec: .plt
function _ZN8opendnp315LinkLayerParser12ParseOneStepEv@plt	opendnp3::LinkLayerParser::ParseOneStep()@plt
function _ZN8opendnp310EventLists7GetListINS_11CounterSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::CounterSpec> >& opendnp3::EventLists::GetList<opendnp3::CounterSpec>()@plt
function _ZNK8opendnp312Group120Var94SizeEv@plt	opendnp3::Group120Var9::Size() const@plt
function _ZN8opendnp320GroupVariationRecord14GetEnumAndTypeEhh@plt	opendnp3::GroupVariationRecord::GetEnumAndType(unsigned char, unsigned char)@plt
function _Znam@plt	operator new[](unsigned long)@plt
function _ZN8opendnp311Group41Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group41Var3::Write(opendnp3::Group41Var3 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group42Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var1::Read(openpal::RSlice&, opendnp3::Group42Var1&)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_17FrozenCounterSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::FrozenCounterSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>, bool, opendnp3::FrozenCounterSpec::static_variation_t)@plt
function _ZN8opendnp38OContext23HandleRecordCurrentTimeEv@plt	opendnp3::OContext::HandleRecordCurrentTime()@plt
function _ZNK7openpal6Buffer8ToRSliceEv@plt	openpal::Buffer::ToRSlice() const@plt
function _ZN8opendnp310Group4Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group4Var1::Read(openpal::RSlice&, opendnp3::Group4Var1&)@plt
function _ZNSt6vectorIN8opendnp322MasterSchedulerBackend6RecordESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_@plt	std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> >::_M_erase(__gnu_cxx::__normal_iterator<opendnp3::MasterSchedulerBackend::Record*, std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> > >, __gnu_cxx::__normal_iterator<opendnp3::MasterSchedulerBackend::Record*, std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> > >)@plt
function _ZNK8opendnp312EventStorage13IsAnyTypeFullEv@plt	opendnp3::EventStorage::IsAnyTypeFull() const@plt
function _ZN8opendnp320AnalogOutputDouble64C1Ev@plt	opendnp3::AnalogOutputDouble64::AnalogOutputDouble64()@plt
function _ZN8opendnp313StaticWriters3GetENS_22StaticCounterVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticCounterVariation)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_20EventAnalogVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventAnalogVariation, unsigned int)@plt
function _ZN8opendnp38MContext26ProcessUnsolicitedResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::MContext::ProcessUnsolicitedResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp315LinkLayerParser9PushFrameERNS_10IFrameSinkE@plt	opendnp3::LinkLayerParser::PushFrame(opendnp3::IFrameSink&)@plt
function _ZN8opendnp311Group32Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var5::Read(openpal::RSlice&, opendnp3::Group32Var5&)@plt
function _ZN8opendnp311Group21Var9C1Ev@plt	opendnp3::Group21Var9::Group21Var9()@plt
function _ZN8opendnp321QualifierCodeToStringENS_13QualifierCodeE@plt	opendnp3::QualifierCodeToString(opendnp3::QualifierCode)@plt
function _ZN8opendnp38OContext21HandleNonReadResponseERKNS_10APDUHeaderERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleNonReadResponse(opendnp3::APDUHeader const&, openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZN8opendnp311Group50Var4C1Ev@plt	opendnp3::Group50Var4::Group50Var4()@plt
function _ZN8opendnp311RangeParser19ParseRangeOfObjectsERN7openpal6RSliceERKNS_12HeaderRecordERKNS_5RangeEPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::RangeParser::ParseRangeOfObjects(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_11CounterSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::CounterSpec>()@plt
function _ZN8opendnp311CommandTaskC1ERKSt10shared_ptrINS_11TaskContextEEONS_10CommandSetENS_18IndexQualifierModeERNS_18IMasterApplicationERKSt8functionIFvRKNS_18ICommandTaskResultEEERKN7openpal18MonotonicTimestampERKNS_10TaskConfigENSJ_6LoggerE@plt	opendnp3::CommandTask::CommandTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::CommandSet&&, opendnp3::IndexQualifierMode, opendnp3::IMasterApplication&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, openpal::MonotonicTimestamp const&, opendnp3::TaskConfig const&, openpal::Logger)@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_11CounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::CounterSpec>()@plt
function _ZN8opendnp311TaskContext11RemoveBlockERKNS_11IMasterTaskE@plt	opendnp3::TaskContext::RemoveBlock(opendnp3::IMasterTask const&)@plt
function _ZN8opendnp316ClearRestartTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationEN7openpal6LoggerE@plt	opendnp3::ClearRestartTask::ClearRestartTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::Logger)@plt
function _ZN8opendnp310APDUParser14ParseAndLogAllERKN7openpal6RSliceEPNS1_6LoggerENS_14ParserSettingsE@plt	opendnp3::APDUParser::ParseAndLogAll(openpal::RSlice const&, openpal::Logger*, opendnp3::ParserSettings)@plt
function _ZN8opendnp310Group3Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group3Var2::Read(openpal::RSlice&, opendnp3::Group3Var2&)@plt
function _ZN8opendnp311IMasterTask17ValidateNoObjectsERKN7openpal6RSliceE@plt	opendnp3::IMasterTask::ValidateNoObjects(openpal::RSlice const&)@plt
function _ZN8opendnp319AnalogOutputFloat32C1EfNS_13CommandStatusE@plt	opendnp3::AnalogOutputFloat32::AnalogOutputFloat32(float, opendnp3::CommandStatus)@plt
function _ZN8opendnp38OContext10HandleReadERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleRead(openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZN8opendnp311Group11Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group11Var1::Read(openpal::RSlice&, opendnp3::Group11Var1&)@plt
function _ZNK8opendnp312Group120Var74SizeEv@plt	opendnp3::Group120Var7::Size() const@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_12Group121Var1EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group121Var1> > const&)@plt
function _ZN8opendnp38MContext26OnResponse_WaitForResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::MContext::OnResponse_WaitForResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp311Group32Var4C1Ev@plt	opendnp3::Group32Var4::Group32Var4()@plt
function _ZNK8opendnp314ApplicationIIN5ToIINEv@plt	opendnp3::ApplicationIIN::ToIIN() const@plt
function _ZN8opendnp311TransportRx13ClearRxBufferEv@plt	opendnp3::TransportRx::ClearRxBuffer()@plt
function _ZN8opendnp318BinaryOutputStatusC1ENS_5FlagsE@plt	opendnp3::BinaryOutputStatus::BinaryOutputStatus(opendnp3::Flags)@plt
function _ZN8opendnp312Group120Var8C1Ev@plt	opendnp3::Group120Var8::Group120Var8()@plt
function _ZN8opendnp311Group43Var810ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var8::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN8opendnp313Group120Var154ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var15::Read(openpal::RSlice const&)@plt
function _ZN8opendnp311Group51Var2C1Ev@plt	opendnp3::Group51Var2::Group51Var2()@plt
function _ZN8opendnp312SecurityStatC1EhtjN7openpal10UInt48TypeE@plt	opendnp3::SecurityStat::SecurityStat(unsigned char, unsigned short, unsigned int, openpal::UInt48Type)@plt
function _ZN8opendnp311IMasterTaskD1Ev@plt	opendnp3::IMasterTask::~IMasterTask()@plt
function _ZN8opendnp313StaticWriters3GetENS_27StaticDoubleBinaryVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticDoubleBinaryVariation)@plt
function _ZN8opendnp317AnalogOutputInt32C1Ev@plt	opendnp3::AnalogOutputInt32::AnalogOutputInt32()@plt
function _ZN8opendnp322MasterSchedulerBackend15CheckForTaskRunEv@plt	opendnp3::MasterSchedulerBackend::CheckForTaskRun()@plt
function _ZN8opendnp311Group11Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group11Var1::Write(opendnp3::Group11Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group42Var1C1Ev@plt	opendnp3::Group42Var1::Group42Var1()@plt
function _ZN7openpal8TimerRefC1ERNS_9IExecutorE@plt	openpal::TimerRef::TimerRef(openpal::IExecutor&)@plt
function _ZN7openpal6Buffer9GetWSliceEv@plt	openpal::Buffer::GetWSlice()@plt
function _ZN8opendnp311Group23Var5C1Ev@plt	opendnp3::Group23Var5::Group23Var5()@plt
function _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt	std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogCommandEventEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent> > const&)@plt
function _ZN8opendnp311Group51Var1C1Ev@plt	opendnp3::Group51Var1::Group51Var1()@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERf@plt	openpal::Parse::Read(openpal::RSlice&, float&)@plt
function _ZN8opendnp322MasterSchedulerBackend3AddERKSt10shared_ptrINS_11IMasterTaskEERNS_17IMasterTaskRunnerE@plt	opendnp3::MasterSchedulerBackend::Add(std::shared_ptr<opendnp3::IMasterTask> const&, opendnp3::IMasterTaskRunner&)@plt
function _ZN8opendnp311Group12Var1C1Ev@plt	opendnp3::Group12Var1::Group12Var1()@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKf@plt	openpal::Format::Write(openpal::WSlice&, float const&)@plt
function _ZN8opendnp311IMasterTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorERKN7openpal6LoggerENS_10TaskConfigE@plt	opendnp3::IMasterTask::IMasterTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, openpal::Logger const&, opendnp3::TaskConfig)@plt
function _ZN8opendnp318MeasurementHandler12ModeFromTypeENS_14GroupVariationE@plt	opendnp3::MeasurementHandler::ModeFromType(opendnp3::GroupVariation)@plt
function _ZN8opendnp311Group10Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group10Var2::Read(openpal::RSlice&, opendnp3::Group10Var2&)@plt
function _ZNK8opendnp318BinaryCommandEvent8GetFlagsEv@plt	opendnp3::BinaryCommandEvent::GetFlags() const@plt
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@plt	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group51Var1EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group51Var1> const&)@plt
function _ZN8opendnp311Group30Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group30Var6::Write(opendnp3::Group30Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp33CRC7CalcCrcEPKhj@plt	opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int)@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_22AnalogOutputStatusSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::AnalogOutputStatusSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp311Group42Var3C1Ev@plt	opendnp3::Group42Var3::Group42Var3()@plt
function _ZN8opendnp311Group43Var85WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var8::Write(opendnp3::Group43Var8 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&)@plt
function _ZN8opendnp311APDUWrapperC2ERKN7openpal6WSliceE@plt	opendnp3::APDUWrapper::APDUWrapper(openpal::WSlice const&)@plt
function _ZN8opendnp324KeyWrapAlgorithmFromTypeEh@plt	opendnp3::KeyWrapAlgorithmFromType(unsigned char)@plt
function _ZN8opendnp312Group121Var1C1Ev@plt	opendnp3::Group121Var1::Group121Var1()@plt
function _ZN8opendnp311Group43Var610ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var6::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN8opendnp311Group32Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var3::Write(opendnp3::Group32Var3 const&, openpal::WSlice&)@plt
function _ZN8opendnp310ClassField3SetENS_10PointClassE@plt	opendnp3::ClassField::Set(opendnp3::PointClass)@plt
function _ZN8opendnp315LinkLayerParser18ParseUntilCompleteEv@plt	opendnp3::LinkLayerParser::ParseUntilComplete()@plt
function _ZN8opendnp311Group20Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group20Var6::Read(openpal::RSlice&, opendnp3::Group20Var6&)@plt
function _ZN8opendnp311Group41Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group41Var1::Read(openpal::RSlice&, opendnp3::Group41Var1&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var2ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var2 const&, openpal::RSlice const&)@plt
function _ZN8opendnp310Group2Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group2Var3::Write(opendnp3::Group2Var3 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group23Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group23Var5::Read(openpal::RSlice&, opendnp3::Group23Var5&)@plt
function _ZN8opendnp312Group120Var3C1Ev@plt	opendnp3::Group120Var3::Group120Var3()@plt
function _ZN8opendnp311Group32Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var6::Write(opendnp3::Group32Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp310APDUHeader7ConfirmEhb@plt	opendnp3::APDUHeader::Confirm(unsigned char, bool)@plt
function _ZN8opendnp312Group122Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group122Var1::Write(opendnp3::Group122Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_10BinarySpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::BinarySpec>()@plt
function _ZN8opendnp311Group40Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group40Var3::Write(opendnp3::Group40Var3 const&, openpal::WSlice&)@plt
function _ZNK8opendnp315AppControlField6ToByteEv@plt	opendnp3::AppControlField::ToByte() const@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_17FrozenCounterSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::FrozenCounterSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp311Group13Var1C1Ev@plt	opendnp3::Group13Var1::Group13Var1()@plt
function _ZN8opendnp39LinkFrame16FormatLinkStatusERN7openpal6WSliceEbbttPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatLinkStatus(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)@plt
function _ZN8opendnp38OContext18HandleDelayMeasureERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleDelayMeasure(openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZN8opendnp313FrozenCounterC1EjNS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::FrozenCounter::FrozenCounter(unsigned int, opendnp3::Flags, openpal::UInt48Type)@plt
function _ZN8opendnp35build12MeasureDelayERNS_11APDURequestEh@plt	opendnp3::build::MeasureDelay(opendnp3::APDURequest&, unsigned char)@plt
function _ZN8opendnp315AppControlFieldC1Ebbbbh@plt	opendnp3::AppControlField::AppControlField(bool, bool, bool, bool, unsigned char)@plt
function _ZN8opendnp38OContext17HandleAssignClassERKN7openpal6RSliceE@plt	opendnp3::OContext::HandleAssignClass(openpal::RSlice const&)@plt
function _ZN8opendnp310Group4Var2C1Ev@plt	opendnp3::Group4Var2::Group4Var2()@plt
function _ZN8opendnp311Group51Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group51Var1::Write(opendnp3::Group51Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group32Var84ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var8::Read(openpal::RSlice&, opendnp3::Group32Var8&)@plt
function _ZN8opendnp311Group32Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var1::Read(openpal::RSlice&, opendnp3::Group32Var1&)@plt
function _ZNK8opendnp310ClassField9HasClass3Ev@plt	opendnp3::ClassField::HasClass3() const@plt
function _ZN8opendnp311Group41Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group41Var3::Read(openpal::RSlice&, opendnp3::Group41Var3&)@plt
function _ZN8opendnp318AssignClassHandler29NotifyApplicationOfAssignmentENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE@plt	opendnp3::AssignClassHandler::NotifyApplicationOfAssignment(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)@plt
function _ZN8opendnp313Group120Var124ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var12::Read(openpal::RSlice const&)@plt
function _ZN8opendnp310Group1Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group1Var2::Read(openpal::RSlice&, opendnp3::Group1Var2&)@plt
function _ZN8opendnp318MeasurementHandlerD1Ev@plt	opendnp3::MeasurementHandler::~MeasurementHandler()@plt
function _ZN8opendnp311MasterTasks15DemandEventScanEv@plt	opendnp3::MasterTasks::DemandEventScan()@plt
function _ZN8opendnp312TaskBehavior33SingleImmediateExecutionWithRetryERKN7openpal12TimeDurationES4_@plt	opendnp3::TaskBehavior::SingleImmediateExecutionWithRetry(openpal::TimeDuration const&, openpal::TimeDuration const&)@plt
function _ZN8opendnp311Group40Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group40Var1::Read(openpal::RSlice&, opendnp3::Group40Var1&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var14ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var14 const&, openpal::RSlice const&)@plt
function _ZN8opendnp311Group42Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var2::Read(openpal::RSlice&, opendnp3::Group42Var2&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogOutputStatusEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus> > const&)@plt
function _ZN7openpal6LogHexERNS_6LoggerERKNS_10LogFiltersERKNS_6RSliceEjj@plt	openpal::LogHex(openpal::Logger&, openpal::LogFilters const&, openpal::RSlice const&, unsigned int, unsigned int)@plt
function _ZN8opendnp322DisableUnsolicitedTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorEN7openpal6LoggerE@plt	opendnp3::DisableUnsolicitedTask::DisableUnsolicitedTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, openpal::Logger)@plt
function _ZN8opendnp38OContext12HandleSelectERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleSelect(openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZNK8opendnp312Group120Var14SizeEv@plt	opendnp3::Group120Var1::Size() const@plt
function _ZN8opendnp318AnalogOutputStatusC1EdNS_5FlagsE@plt	opendnp3::AnalogOutputStatus::AnalogOutputStatus(double, opendnp3::Flags)@plt
function _ZN8opendnp311Group42Var75WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var7::Write(opendnp3::Group42Var7 const&, openpal::WSlice&)@plt
function _ZN8opendnp317DoubleBitFromTypeEh@plt	opendnp3::DoubleBitFromType(unsigned char)@plt
function _ZN8opendnp311Group52Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group52Var2::Write(opendnp3::Group52Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp315DeferredRequest5ResetEv@plt	opendnp3::DeferredRequest::Reset()@plt
function _ZNK7openpal6RSlice6EqualsERKS0_@plt	openpal::RSlice::Equals(openpal::RSlice const&) const@plt
function _ZN8opendnp310Group3Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group3Var2::Write(opendnp3::Group3Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group41Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group41Var1::Write(opendnp3::Group41Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp316FreeFormatParser11ParseHeaderERN7openpal6RSliceERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::FreeFormatParser::ParseHeader(openpal::RSlice&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)@plt
function _ZN8opendnp313Group120Var14C1Ev@plt	opendnp3::Group120Var14::Group120Var14()@plt
function _ZN8opendnp311APDUWrapper9GetWriterEv@plt	opendnp3::APDUWrapper::GetWriter()@plt
function _ZN8opendnp311Group32Var1C1Ev@plt	opendnp3::Group32Var1::Group32Var1()@plt
function _ZN8opendnp312TaskBehavior17OnResponseTimeoutERKN7openpal18MonotonicTimestampE@plt	opendnp3::TaskBehavior::OnResponseTimeout(openpal::MonotonicTimestamp const&)@plt
function _ZN8opendnp311LinkContext21CompleteSendOperationEv@plt	opendnp3::LinkContext::CompleteSendOperation()@plt
function _ZN8opendnp36AnalogC1Ev@plt	opendnp3::Analog::Analog()@plt
function _ZNK8opendnp39NumParser10ParseRangeERN7openpal6RSliceERNS_5RangeEPNS1_6LoggerE@plt	opendnp3::NumParser::ParseRange(openpal::RSlice&, opendnp3::Range&, openpal::Logger*) const@plt
function _ZNK8opendnp313StaticBuffers7GetViewEv@plt	opendnp3::StaticBuffers::GetView() const@plt
function _ZN8opendnp311Group21Var94ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group21Var9::Read(openpal::RSlice&, opendnp3::Group21Var9&)@plt
function _ZN8opendnp312WriteHandlerC1ERNS_22IOutstationApplicationERNS_13TimeSyncStateEN7openpal11SequenceNumIhLh16EEENS5_18MonotonicTimestampEPNS_8IINFieldE@plt	opendnp3::WriteHandler::WriteHandler(opendnp3::IOutstationApplication&, opendnp3::TimeSyncState&, openpal::SequenceNum<unsigned char, (unsigned char)16>, openpal::MonotonicTimestamp, opendnp3::IINField*)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_21EventCounterVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventCounterVariation, unsigned int)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var6ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var6 const&, openpal::RSlice const&)@plt
function _ZN7openpal6WSlice7AdvanceEj@plt	openpal::WSlice::Advance(unsigned int)@plt
function _ZN8opendnp318AnalogCommandEventC1EdNS_13CommandStatusEN7openpal10UInt48TypeE@plt	opendnp3::AnalogCommandEvent::AnalogCommandEvent(double, opendnp3::CommandStatus, openpal::UInt48Type)@plt
function _ZSt17__throw_bad_allocv@plt	std::__throw_bad_alloc()@plt
function _ZNK8opendnp315DeferredRequest5IsSetEv@plt	opendnp3::DeferredRequest::IsSet() const@plt
function _ZN8opendnp38MContext7AddScanEN7openpal12TimeDurationERKSt8functionIFbRNS_12HeaderWriterEEENS_10TaskConfigE@plt	opendnp3::MContext::AddScan(openpal::TimeDuration, std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskConfig)@plt
function _ZSt25__throw_bad_function_callv@plt	std::__throw_bad_function_call()@plt
function _ZN8opendnp311Group43Var510ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var5::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN8opendnp315DeferredRequest3SetERKNS_13ParsedRequestE@plt	opendnp3::DeferredRequest::Set(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp38OContext22ProcessDeferredRequestERKNS_13ParsedRequestE@plt	opendnp3::OContext::ProcessDeferredRequest(opendnp3::ParsedRequest const&)@plt
function _ZNK8opendnp313Group120Var124SizeEv@plt	opendnp3::Group120Var12::Size() const@plt
function _ZNK8opendnp312Group120Var24SizeEv@plt	opendnp3::Group120Var2::Size() const@plt
function _ZN8opendnp37logging9LogHeaderERN7openpal6LoggerEiRKNS_18APDUResponseHeaderE@plt	opendnp3::logging::LogHeader(openpal::Logger&, int, opendnp3::APDUResponseHeader const&)@plt
function _ZN8opendnp315LinkLayerParser9FailFrameEv@plt	opendnp3::LinkLayerParser::FailFrame()@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_22AnalogOutputStatusSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::AnalogOutputStatusSpec>()@plt
function _ZN8opendnp312Group120Var7C1Ev@plt	opendnp3::Group120Var7::Group120Var7()@plt
function _ZN8opendnp316CountIndexParser19ParseCountOfObjectsERN7openpal6RSliceERKNS_12HeaderRecordERKNS_9NumParserEtPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::CountIndexParser::ParseCountOfObjects(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::NumParser const&, unsigned short, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp315DatabaseBuffersC1ERKNS_13DatabaseSizesENS_18StaticTypeBitFieldENS_9IndexModeE@plt	opendnp3::DatabaseBuffers::DatabaseBuffers(opendnp3::DatabaseSizes const&, opendnp3::StaticTypeBitField, opendnp3::IndexMode)@plt
function _ZN8opendnp311Group23Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group23Var2::Write(opendnp3::Group23Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp311IMasterTask20ValidateNullResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::IMasterTask::ValidateNullResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp311LinkContext13FailKeepAliveEb@plt	opendnp3::LinkContext::FailKeepAlive(bool)@plt
function _ZN8opendnp315DatabaseBuffers17CheckForPromotionINS_10BinarySpecEEENT_18static_variation_tERKNS3_6meas_tES4_@plt	opendnp3::BinarySpec::static_variation_t opendnp3::DatabaseBuffers::CheckForPromotion<opendnp3::BinarySpec>(opendnp3::BinarySpec::meas_t const&, opendnp3::BinarySpec::static_variation_t)@plt
function __cxa_begin_catch@plt	__cxa_begin_catch@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_15OctetStringSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::OctetStringSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp311Group42Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var3::Read(openpal::RSlice&, opendnp3::Group42Var3&)@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERi@plt	openpal::Parse::Read(openpal::RSlice&, int&)@plt
function _ZN8opendnp311MasterTasks15GetTimeSyncTaskERKSt10shared_ptrINS_11TaskContextEENS_12TimeSyncModeERKN7openpal6LoggerERNS_18IMasterApplicationE@plt	opendnp3::MasterTasks::GetTimeSyncTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::TimeSyncMode, openpal::Logger const&, opendnp3::IMasterApplication&)@plt
function _ZN8opendnp322KeyWrapAlgorithmToTypeENS_16KeyWrapAlgorithmE@plt	opendnp3::KeyWrapAlgorithmToType(opendnp3::KeyWrapAlgorithm)@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_22BinaryOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinaryOutputStatusSpec>()@plt
function _ZN8opendnp311Group21Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group21Var6::Write(opendnp3::Group21Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var1ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var1 const&, openpal::RSlice const&)@plt
function _ZN8opendnp319AuthErrorCodeToTypeENS_13AuthErrorCodeE@plt	opendnp3::AuthErrorCodeToType(opendnp3::AuthErrorCode)@plt
function _ZN8opendnp318SerialTimeSyncTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationEN7openpal6LoggerE@plt	opendnp3::SerialTimeSyncTask::SerialTimeSyncTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::Logger)@plt
function _ZN8opendnp313Group120Var15C1Ev@plt	opendnp3::Group120Var15::Group120Var15()@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKi@plt	openpal::Format::Write(openpal::WSlice&, int const&)@plt
function _ZN8opendnp311Group22Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group22Var6::Read(openpal::RSlice&, opendnp3::Group22Var6&)@plt
function _ZN8opendnp312Group122Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group122Var2::Read(openpal::RSlice&, opendnp3::Group122Var2&)@plt
function _ZN8opendnp312UserPollTaskC1ERKSt10shared_ptrINS_11TaskContextEERKSt8functionIFbRNS_12HeaderWriterEEERKNS_12TaskBehaviorEbRNS_18IMasterApplicationERNS_11ISOEHandlerEN7openpal6LoggerENS_10TaskConfigE@plt	opendnp3::UserPollTask::UserPollTask(std::shared_ptr<opendnp3::TaskContext> const&, std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskBehavior const&, bool, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, openpal::Logger, opendnp3::TaskConfig)@plt
function strlen@plt	strlen@plt
function _ZN8opendnp315AppControlField7RequestEh@plt	opendnp3::AppControlField::Request(unsigned char)@plt
function _ZN8opendnp311Group43Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var1::Write(opendnp3::Group43Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp310Group2Var1C1Ev@plt	opendnp3::Group2Var1::Group2Var1()@plt
function _ZN8opendnp311LinkContext34FormatPrimaryBufferWithUnconfirmedERKNS_9AddressesERKN7openpal6RSliceE@plt	opendnp3::LinkContext::FormatPrimaryBufferWithUnconfirmed(opendnp3::Addresses const&, openpal::RSlice const&)@plt
function _ZN8opendnp315DatabaseBuffers7RangeOfEt@plt	opendnp3::DatabaseBuffers::RangeOf(unsigned short)@plt
function _ZN8opendnp312Group120Var5C1Ev@plt	opendnp3::Group120Var5::Group120Var5()@plt
function _ZN8opendnp311CommandTask17LoadDirectOperateEv@plt	opendnp3::CommandTask::LoadDirectOperate()@plt
function _ZN8opendnp319UserOperationToTypeENS_13UserOperationE@plt	opendnp3::UserOperationToType(opendnp3::UserOperation)@plt
function _ZN8opendnp310EventLists7GetListINS_19DoubleBitBinarySpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::DoubleBitBinarySpec> >& opendnp3::EventLists::GetList<opendnp3::DoubleBitBinarySpec>()@plt
function _ZN8opendnp311LinkContext14OnLowerLayerUpEv@plt	opendnp3::LinkContext::OnLowerLayerUp()@plt
function _ZN8opendnp39LinkFrame12ReadUserDataEPKhPhj@plt	opendnp3::LinkFrame::ReadUserData(unsigned char const*, unsigned char*, unsigned int)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_27EventFrozenCounterVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventFrozenCounterVariation, unsigned int)@plt
function _ZN8opendnp311Group20Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group20Var2::Write(opendnp3::Group20Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_13FrozenCounterEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::FrozenCounter> > const&)@plt
function _ZN8opendnp311Group42Var74ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var7::Read(openpal::RSlice&, opendnp3::Group42Var7&)@plt
function _ZN8opendnp313CommandSetOps21ProcessSelectResponseERNS_10CommandSetERKN7openpal6RSliceEPNS3_6LoggerE@plt	opendnp3::CommandSetOps::ProcessSelectResponse(opendnp3::CommandSet&, openpal::RSlice const&, openpal::Logger*)@plt
function _ZN8opendnp312IAPDUHandlerC2Ev@plt	opendnp3::IAPDUHandler::IAPDUHandler()@plt
function _ZNK8opendnp311APDUWrapper8ToRSliceEv@plt	opendnp3::APDUWrapper::ToRSlice() const@plt
function _ZNK8opendnp312EventStorage11NumSelectedEv@plt	opendnp3::EventStorage::NumSelected() const@plt
function _ZN8opendnp320GroupVariationRecord11GetGroupVarEhh@plt	opendnp3::GroupVariationRecord::GetGroupVar(unsigned char, unsigned char)@plt
function _ZN8opendnp38MContext12QueueConfirmERKNS_10APDUHeaderE@plt	opendnp3::MContext::QueueConfirm(opendnp3::APDUHeader const&)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_11CounterSpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::CounterSpec> const&)@plt
function _ZN8opendnp321CertificateTypeToTypeENS_15CertificateTypeE@plt	opendnp3::CertificateTypeToType(opendnp3::CertificateType)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var10ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var10 const&, openpal::RSlice const&)@plt
function _ZN8opendnp314RequestHistory5ResetEv@plt	opendnp3::RequestHistory::Reset()@plt
function _ZN8opendnp310Group2Var2C1Ev@plt	opendnp3::Group2Var2::Group2Var2()@plt
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@plt	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@plt
function _ZN8opendnp318AnalogCommandEventC1EdNS_13CommandStatusE@plt	opendnp3::AnalogCommandEvent::AnalogCommandEvent(double, opendnp3::CommandStatus)@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_15OctetStringSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::OctetStringSpec>()@plt
function _ZN8opendnp315LANTimeSyncTask27OnResponseRecordCurrentTimeERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::LANTimeSyncTask::OnResponseRecordCurrentTime(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp312Group122Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group122Var2::Write(opendnp3::Group122Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp315HasAbsoluteTimeENS_14GroupVariationE@plt	opendnp3::HasAbsoluteTime(opendnp3::GroupVariation)@plt
function _ZN8opendnp313StaticBuffersD1Ev@plt	opendnp3::StaticBuffers::~StaticBuffers()@plt
function _ZN8opendnp311Group43Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var2::Read(openpal::RSlice&, opendnp3::Group43Var2&)@plt
function _ZN8opendnp311MasterTasks17OnRestartDetectedEv@plt	opendnp3::MasterTasks::OnRestartDetected()@plt
function _ZN8opendnp310LinkHeaderC1EhttbbbNS_12LinkFunctionE@plt	opendnp3::LinkHeader::LinkHeader(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryOutputStatusEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus> > const&)@plt
function _ZN8opendnp311Group41Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group41Var4::Write(opendnp3::Group41Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp310CommandSetC1EOS0_@plt	opendnp3::CommandSet::CommandSet(opendnp3::CommandSet&&)@plt
function _ZN8opendnp35build12ClassRequestERNS_11APDURequestENS_12FunctionCodeERKNS_10ClassFieldEh@plt	opendnp3::build::ClassRequest(opendnp3::APDURequest&, opendnp3::FunctionCode, opendnp3::ClassField const&, unsigned char)@plt
function _ZN8opendnp311Group50Var3C1Ev@plt	opendnp3::Group50Var3::Group50Var3()@plt
function _ZNK8opendnp39NumParser4ReadERtRN7openpal6RSliceE@plt	opendnp3::NumParser::Read(unsigned short&, openpal::RSlice&) const@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var1EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var1> const&)@plt
function _ZN8opendnp311LinkContext18OnKeepAliveTimeoutEv@plt	opendnp3::LinkContext::OnKeepAliveTimeout()@plt
function _ZN8opendnp38OContext12BeginUnsolTxERKNS_15AppControlFieldERKN7openpal6RSliceE@plt	opendnp3::OContext::BeginUnsolTx(opendnp3::AppControlField const&, openpal::RSlice const&)@plt
function _ZNK8opendnp310ClassField13HasEventClassEv@plt	opendnp3::ClassField::HasEventClass() const@plt
function _ZN8opendnp314TransportLayerC1ERKN7openpal6LoggerEj@plt	opendnp3::TransportLayer::TransportLayer(openpal::Logger const&, unsigned int)@plt
function _ZN8opendnp317ControlCodeToTypeENS_11ControlCodeE@plt	opendnp3::ControlCodeToType(opendnp3::ControlCode)@plt
function _ZNK8opendnp310LinkHeader5WriteEPh@plt	opendnp3::LinkHeader::Write(unsigned char*) const@plt
function _ZN8opendnp312GetDoubleBitERKN7openpal6RSliceEj@plt	opendnp3::GetDoubleBit(openpal::RSlice const&, unsigned int)@plt
function _ZN8opendnp311Group11Var1C1Ev@plt	opendnp3::Group11Var1::Group11Var1()@plt
function _ZN8opendnp311Group42Var7C1Ev@plt	opendnp3::Group42Var7::Group42Var7()@plt
function _ZN8opendnp312Group120Var4C1Ev@plt	opendnp3::Group120Var4::Group120Var4()@plt
function _ZN8opendnp311Group43Var2C1Ev@plt	opendnp3::Group43Var2::Group43Var2()@plt
function _ZN8opendnp311Group20Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group20Var2::Read(openpal::RSlice&, opendnp3::Group20Var2&)@plt
function _ZN8opendnp311Group30Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group30Var2::Write(opendnp3::Group30Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp312TaskBehavior9OnSuccessERKN7openpal18MonotonicTimestampE@plt	opendnp3::TaskBehavior::OnSuccess(openpal::MonotonicTimestamp const&)@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_10AnalogSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::AnalogSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE@plt	opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const@plt
function _ZN8opendnp310EventLists7GetListINS_15OctetStringSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::OctetStringSpec> >& opendnp3::EventLists::GetList<opendnp3::OctetStringSpec>()@plt
function _ZN8opendnp311Group42Var2C1Ev@plt	opendnp3::Group42Var2::Group42Var2()@plt
function _ZN8opendnp311Group43Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var6::Read(openpal::RSlice&, opendnp3::Group43Var6&)@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_19TimeAndIntervalSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::TimeAndIntervalSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp318DatabaseConfigViewC1EN7openpal9ArrayViewINS_4CellINS_10BinarySpecEEEtEENS2_INS3_INS_19DoubleBitBinarySpecEEEtEENS2_INS3_INS_10AnalogSpecEEEtEENS2_INS3_INS_11CounterSpecEEEtEENS2_INS3_INS_17FrozenCounterSpecEEEtEENS2_INS3_INS_22BinaryOutputStatusSpecEEEtEENS2_INS3_INS_22AnalogOutputStatusSpecEEEtEENS2_INS3_INS_19TimeAndIntervalSpecEEEtEENS2_INS3_INS_15OctetStringSpecEEEtEE@plt	opendnp3::DatabaseConfigView::DatabaseConfigView(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>)@plt
function _ZN8opendnp312Group120Var6C1Ev@plt	opendnp3::Group120Var6::Group120Var6()@plt
function _ZN7openpal12TimeDuration12MillisecondsEl@plt	openpal::TimeDuration::Milliseconds(long)@plt
function _ZN8opendnp311LinkContext15QueueLinkStatusEt@plt	opendnp3::LinkContext::QueueLinkStatus(unsigned short)@plt
function _ZN7openpal8TimerRef6CancelEv@plt	openpal::TimerRef::Cancel()@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_32EventAnalogOutputStatusVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventAnalogOutputStatusVariation, unsigned int)@plt
function _ZN8opendnp311Group32Var74ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var7::Read(openpal::RSlice&, opendnp3::Group32Var7&)@plt
function _ZN8opendnp315ShiftableBuffer5ShiftEv@plt	opendnp3::ShiftableBuffer::Shift()@plt
function _ZN8opendnp311TaskContext8AddBlockERKNS_11IMasterTaskE@plt	opendnp3::TaskContext::AddBlock(opendnp3::IMasterTask const&)@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_17FrozenCounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::FrozenCounterSpec>()@plt
function _ZN8opendnp311Group43Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var2::Write(opendnp3::Group43Var2 const&, openpal::WSlice&)@plt
function _ZN7openpal8TimerRef13RestartActionERKNS_12TimeDurationERKSt8functionIFvvEE@plt	openpal::TimerRef::RestartAction(openpal::TimeDuration const&, std::function<void ()> const&)@plt
function _ZNK8opendnp310ClassField9HasClass1Ev@plt	opendnp3::ClassField::HasClass1() const@plt
function _ZN8opendnp33CRC7CalcCrcERKN7openpal6RSliceE@plt	opendnp3::CRC::CalcCrc(openpal::RSlice const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var3EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var3> const&)@plt
function _ZN8opendnp311Group43Var5C1Ev@plt	opendnp3::Group43Var5::Group43Var5()@plt
function _ZN7openpal8TimerRefD1Ev@plt	openpal::TimerRef::~TimerRef()@plt
function _ZN8opendnp36BinaryC1ENS_5FlagsE@plt	opendnp3::Binary::Binary(opendnp3::Flags)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&)@plt
function _ZN8opendnp317KeyStatusFromTypeEh@plt	opendnp3::KeyStatusFromType(unsigned char)@plt
function _ZN8opendnp311Group20Var2C1Ev@plt	opendnp3::Group20Var2::Group20Var2()@plt
function _ZNK7openpal6WSlice4SkipEj@plt	openpal::WSlice::Skip(unsigned int) const@plt
function _ZN8opendnp36HeaderC1Ehhhh@plt	opendnp3::Header::Header(unsigned char, unsigned char, unsigned char, unsigned char)@plt
function _ZN8opendnp311Group43Var710ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var7::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN8opendnp311CountParser11ParseHeaderERN7openpal6RSliceERKNS_9NumParserERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::CountParser::ParseHeader(openpal::RSlice&, opendnp3::NumParser const&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp311Group13Var110ReadTargetERN7openpal6RSliceERNS_18BinaryCommandEventE@plt	opendnp3::Group13Var1::ReadTarget(openpal::RSlice&, opendnp3::BinaryCommandEvent&)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_19DoubleBitBinarySpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::DoubleBitBinarySpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>, bool, opendnp3::DoubleBitBinarySpec::static_variation_t)@plt
function _ZNK8opendnp310ClassField9HasClass2Ev@plt	opendnp3::ClassField::HasClass2() const@plt
function _ZNK8opendnp314SelectedRanges15HasAnySelectionEv@plt	opendnp3::SelectedRanges::HasAnySelection() const@plt
function _ZN8opendnp310ClassFieldC1Ebbbb@plt	opendnp3::ClassField::ClassField(bool, bool, bool, bool)@plt
function _ZN7openpal6Logger3LogERKNS_10LogFiltersEPKcS5_@plt	openpal::Logger::Log(openpal::LogFilters const&, char const*, char const*)@plt
function _ZN8opendnp37logging9LogHeaderERN7openpal6LoggerEiRKNS_10APDUHeaderE@plt	opendnp3::logging::LogHeader(openpal::Logger&, int, opendnp3::APDUHeader const&)@plt
function _ZNK8opendnp316CountIndexParser7ProcessERKNS_12HeaderRecordERN7openpal6RSliceEPNS_12IAPDUHandlerEPNS4_6LoggerE@plt	opendnp3::CountIndexParser::Process(opendnp3::HeaderRecord const&, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*) const@plt
function _ZNK8opendnp313Group120Var154SizeEv@plt	opendnp3::Group120Var15::Size() const@plt
function _ZN8opendnp314RequestHistoryC1Ev@plt	opendnp3::RequestHistory::RequestHistory()@plt
function _ZN8opendnp315DatabaseBuffers18SelectVirtualRangeINS_11CounterSpecEEENS_8IINFieldERKNS_5RangeEbNT_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::SelectVirtualRange<opendnp3::CounterSpec>(opendnp3::Range const&, bool, opendnp3::CounterSpec::static_variation_t)@plt
function _ZNK8opendnp311APDUWrapper4SizeEv@plt	opendnp3::APDUWrapper::Size() const@plt
function _ZN8opendnp316APDUHeaderParser13ParseResponseERKN7openpal6RSliceEPNS1_6LoggerE@plt	opendnp3::APDUHeaderParser::ParseResponse(openpal::RSlice const&, openpal::Logger*)@plt
function _ZNK8opendnp310ClassField9HasClass0Ev@plt	opendnp3::ClassField::HasClass0() const@plt
function _ZN8opendnp35flags14GetBinaryValueENS_5FlagsE@plt	opendnp3::flags::GetBinaryValue(opendnp3::Flags)@plt
function _ZN8opendnp38OContext14ProcessRequestERKNS_13ParsedRequestE@plt	opendnp3::OContext::ProcessRequest(opendnp3::ParsedRequest const&)@plt
function _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@plt	std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt
function __snprintf_chk@plt	__snprintf_chk@plt
function _ZN7openpal5ArrayIN8opendnp34CellINS1_15OctetStringSpecEEEtED1Ev@plt	openpal::Array<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>::~Array()@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_11CounterSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::CounterSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>, bool, opendnp3::CounterSpec::static_variation_t)@plt
function _ZN8opendnp318IINFromParseResultENS_11ParseResultE@plt	opendnp3::IINFromParseResult(opendnp3::ParseResult)@plt
function _ZN8opendnp37CounterC1Ev@plt	opendnp3::Counter::Counter()@plt
function _ZNK8opendnp317EventBufferConfig11TotalEventsEv@plt	opendnp3::EventBufferConfig::TotalEvents() const@plt
function _ZN8opendnp318AssignClassHandler21IsExpectingAssignmentEv@plt	opendnp3::AssignClassHandler::IsExpectingAssignment()@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_17FrozenCounterSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::FrozenCounterSpec>()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var8ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var8 const&, openpal::RSlice const&)@plt
function _ZN8opendnp311Group32Var7C1Ev@plt	opendnp3::Group32Var7::Group32Var7()@plt
function _ZN8opendnp39LinkFrame15ValidateBodyCRCEPKhj@plt	opendnp3::LinkFrame::ValidateBodyCRC(unsigned char const*, unsigned int)@plt
function _ZN8opendnp311CommandTask20LoadSelectAndOperateEv@plt	opendnp3::CommandTask::LoadSelectAndOperate()@plt
function _ZN8opendnp33CRC6AddCrcEPhj@plt	opendnp3::CRC::AddCrc(unsigned char*, unsigned int)@plt
function _ZN8opendnp315ShiftableBuffer11AdvanceReadEj@plt	opendnp3::ShiftableBuffer::AdvanceRead(unsigned int)@plt
function _ZN8opendnp321IntervalUnitsFromTypeEh@plt	opendnp3::IntervalUnitsFromType(unsigned char)@plt
function _ZN8opendnp311Group30Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group30Var5::Write(opendnp3::Group30Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp38MContext33OnResponseTimeout_WaitForResponseEv@plt	opendnp3::MContext::OnResponseTimeout_WaitForResponse()@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERh@plt	openpal::Parse::Read(openpal::RSlice&, unsigned char&)@plt
function _ZN8opendnp33CRC12IsCorrectCRCEPKhj@plt	opendnp3::CRC::IsCorrectCRC(unsigned char const*, unsigned int)@plt
function _ZNK8opendnp311CountParser7ProcessERKNS_12HeaderRecordERN7openpal6RSliceEPNS_12IAPDUHandlerEPNS4_6LoggerE@plt	opendnp3::CountParser::Process(opendnp3::HeaderRecord const&, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*) const@plt
function _ZNK8opendnp38IINField5IsSetENS_6IINBitE@plt	opendnp3::IINField::IsSet(opendnp3::IINBit) const@plt
function _ZN7openpal6WSliceC1EPhj@plt	openpal::WSlice::WSlice(unsigned char*, unsigned int)@plt
function _ZN8opendnp312TaskBehaviorC1ERKN7openpal12TimeDurationERKNS1_18MonotonicTimestampES4_S4_S7_@plt	opendnp3::TaskBehavior::TaskBehavior(openpal::TimeDuration const&, openpal::MonotonicTimestamp const&, openpal::TimeDuration const&, openpal::TimeDuration const&, openpal::MonotonicTimestamp const&)@plt
function _ZN8opendnp317EventBufferConfigC1Etttttttt@plt	opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt
function _ZN8opendnp39LinkFrame23FormatRequestLinkStatusERN7openpal6WSliceEbttPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatRequestLinkStatus(openpal::WSlice&, bool, unsigned short, unsigned short, openpal::Logger*)@plt
function _ZN8opendnp310CommandSet20StartHeaderAOFloat32Ev@plt	opendnp3::CommandSet::StartHeaderAOFloat32()@plt
function _ZN8opendnp311Group40Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group40Var3::Read(openpal::RSlice&, opendnp3::Group40Var3&)@plt
function _ZNK8opendnp312HeaderWriter9RemainingEv@plt	opendnp3::HeaderWriter::Remaining() const@plt
function _ZNK8opendnp310ClassField16OnlyEventClassesEv@plt	opendnp3::ClassField::OnlyEventClasses() const@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKh@plt	openpal::Format::Write(openpal::WSlice&, unsigned char const&)@plt
function _ZN8opendnp311Group30Var6C1Ev@plt	opendnp3::Group30Var6::Group30Var6()@plt
function _ZNK8opendnp310EventLists13IsAnyTypeFullEv@plt	opendnp3::EventLists::IsAnyTypeFull() const@plt
function _ZN8opendnp311Group32Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var3::Read(openpal::RSlice&, opendnp3::Group32Var3&)@plt
function _ZN8opendnp311IMasterTask14OnStartTimeoutEN7openpal18MonotonicTimestampE@plt	opendnp3::IMasterTask::OnStartTimeout(openpal::MonotonicTimestamp)@plt
function _ZN8opendnp321LoadWithRangeIteratorINS_11CounterSpecEN7openpal11UInt8SimpleEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS6_6meas_tEEERNS_5RangeE@plt	bool opendnp3::LoadWithRangeIterator<opendnp3::CounterSpec, openpal::UInt8Simple>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::CounterSpec::meas_t>&, opendnp3::Range&)@plt
function _ZN8opendnp311Group20Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group20Var5::Read(openpal::RSlice&, opendnp3::Group20Var5&)@plt
function _ZN8opendnp311Group30Var5C1Ev@plt	opendnp3::Group30Var5::Group30Var5()@plt
function _ZN7openpal6RSlice5EmptyEv@plt	openpal::RSlice::Empty()@plt
function _ZN8opendnp311Group22Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group22Var5::Read(openpal::RSlice&, opendnp3::Group22Var5&)@plt
function _ZN8opendnp318MeasurementHandler7ConvertERKNS_12Group121Var1E@plt	opendnp3::MeasurementHandler::Convert(opendnp3::Group121Var1 const&)@plt
function _ZN8opendnp311IMasterTask12CompleteTaskENS_14TaskCompletionEN7openpal18MonotonicTimestampE@plt	opendnp3::IMasterTask::CompleteTask(opendnp3::TaskCompletion, openpal::MonotonicTimestamp)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)@plt
function _ZN8opendnp312Group122Var1C1Ev@plt	opendnp3::Group122Var1::Group122Var1()@plt
function _ZN8opendnp38IINField6SetBitENS_6IINBitE@plt	opendnp3::IINField::SetBit(opendnp3::IINBit)@plt
function _ZN8opendnp320NumBytesInDoubleBitsEj@plt	opendnp3::NumBytesInDoubleBits(unsigned int)@plt
function _ZN8opendnp316CountIndexParser27ParseIndexPrefixedOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_9NumParserEjPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::CountIndexParser::ParseIndexPrefixedOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::NumParser const&, unsigned int, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp310Group2Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group2Var3::Read(openpal::RSlice&, opendnp3::Group2Var3&)@plt
function _ZN8opendnp311Group30Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group30Var4::Read(openpal::RSlice&, opendnp3::Group30Var4&)@plt
function _ZN8opendnp319CommandStatusToTypeENS_13CommandStatusE@plt	opendnp3::CommandStatusToType(opendnp3::CommandStatus)@plt
function _ZN8opendnp310Group4Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group4Var1::Write(opendnp3::Group4Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group21Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group21Var2::Read(openpal::RSlice&, opendnp3::Group21Var2&)@plt
function _ZN8opendnp312ObjectHeaderC1Ev@plt	opendnp3::ObjectHeader::ObjectHeader()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_8IINValueEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::IINValue> > const&)@plt
function _ZN8opendnp313StaticWriters3GetENS_33StaticBinaryOutputStatusVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticBinaryOutputStatusVariation)@plt
function _ZSt19__throw_logic_errorPKc@plt	std::__throw_logic_error(char const*)@plt
function _ZN8opendnp312EventWriting16FindNextSelectedERNS_4ListINS_11EventRecordEE8IteratorENS_9EventTypeE@plt	opendnp3::EventWriting::FindNextSelected(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventType)@plt
function _ZN8opendnp312Group21Var10C1Ev@plt	opendnp3::Group21Var10::Group21Var10()@plt
function _ZN8opendnp39LinkFrame16CalcUserDataSizeEh@plt	opendnp3::LinkFrame::CalcUserDataSize(unsigned char)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_19TimeAndIntervalSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::TimeAndIntervalSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>, bool, opendnp3::TimeAndIntervalSpec::static_variation_t)@plt
function _ZN8opendnp310EventLists7GetListINS_22BinaryOutputStatusSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::BinaryOutputStatusSpec> >& opendnp3::EventLists::GetList<opendnp3::BinaryOutputStatusSpec>()@plt
function _ZN8opendnp312HeaderWriter22WriteHeaderWithReserveENS_16GroupVariationIDENS_13QualifierCodeEj@plt	opendnp3::HeaderWriter::WriteHeaderWithReserve(opendnp3::GroupVariationID, opendnp3::QualifierCode, unsigned int)@plt
function _ZN8opendnp311Group21Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group21Var5::Write(opendnp3::Group21Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp38OContext13HandleOperateERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleOperate(openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZN8opendnp320CommandActionAdapterC1EPNS_15ICommandHandlerEbNS_11OperateTypeE@plt	opendnp3::CommandActionAdapter::CommandActionAdapter(opendnp3::ICommandHandler*, bool, opendnp3::OperateType)@plt
function _ZN8opendnp310EventLists7GetListINS_17FrozenCounterSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::FrozenCounterSpec> >& opendnp3::EventLists::GetList<opendnp3::FrozenCounterSpec>()@plt
function _ZN8opendnp320LinkFunctionFromTypeEh@plt	opendnp3::LinkFunctionFromType(unsigned char)@plt
function _ZN8opendnp38MContext17ScheduleAdhocTaskERKSt10shared_ptrINS_11IMasterTaskEE@plt	opendnp3::MContext::ScheduleAdhocTask(std::shared_ptr<opendnp3::IMasterTask> const&)@plt
function _ZN8opendnp38OContext24HandleDisableUnsolicitedERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleDisableUnsolicited(openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZN8opendnp311Group42Var4C1Ev@plt	opendnp3::Group42Var4::Group42Var4()@plt
function _ZN8opendnp311IMasterTask7OnStartEv@plt	opendnp3::IMasterTask::OnStart()@plt
function _ZN8opendnp315LinkLayerParser9ParseSyncEv@plt	opendnp3::LinkLayerParser::ParseSync()@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKs@plt	openpal::Format::Write(openpal::WSlice&, short const&)@plt
function _ZN8opendnp323ChallengeReasonFromTypeEh@plt	opendnp3::ChallengeReasonFromType(unsigned char)@plt
function _ZN8opendnp311LinkContext5RetryEv@plt	opendnp3::LinkContext::Retry()@plt
function _ZN8opendnp321OctetStringSerializerC1Ebh@plt	opendnp3::OctetStringSerializer::OctetStringSerializer(bool, unsigned char)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryOutputStatusEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus> > const&)@plt
function _ZN8opendnp315LinkLayerParser12ValidateBodyEv@plt	opendnp3::LinkLayerParser::ValidateBody()@plt
function _ZN8opendnp38Database6ModifyINS_11CounterSpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::CounterSpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp312EventStorage13SelectByClassERKNS_10ClassFieldE@plt	opendnp3::EventStorage::SelectByClass(opendnp3::ClassField const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_6BinaryEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)@plt
function _ZN8opendnp311LinkContext7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE@plt	opendnp3::LinkContext::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&)@plt
function _ZN8opendnp38OContext13GetDynamicIINEv@plt	opendnp3::OContext::GetDynamicIIN()@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_22AnalogOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogOutputStatusSpec>()@plt
function _ZN8opendnp317AnalogOutputInt16C1Ev@plt	opendnp3::AnalogOutputInt16::AnalogOutputInt16()@plt
function _ZN8opendnp311LinkContextC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERNS_12ILinkSessionERKNS_15LinkLayerConfigE@plt	opendnp3::LinkContext::LinkContext(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::ILinkSession&, opendnp3::LinkLayerConfig const&)@plt
function _ZN8opendnp312APDUResponse6SetIINERKNS_8IINFieldE@plt	opendnp3::APDUResponse::SetIIN(opendnp3::IINField const&)@plt
function _ZN8opendnp311Group12Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group12Var1::Write(opendnp3::Group12Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp38MContext18OnTransmitCompleteEv@plt	opendnp3::MContext::OnTransmitComplete()@plt
function _ZNK8opendnp38OContext11CanTransmitEv@plt	opendnp3::OContext::CanTransmit() const@plt
function _ZZNK8opendnp321TransformedCollectionINS_7IndexedINS_6BinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EEENKUlSH_E_clESH_@plt	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Binary>, opendnp3::Indexed<opendnp3::Binary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)::operator()(opendnp3::Indexed<opendnp3::Binary> const&) const@plt
function _ZN8opendnp36HeaderC1Ehhh@plt	opendnp3::Header::Header(unsigned char, unsigned char, unsigned char)@plt
function _ZN8opendnp311Group43Var6C1Ev@plt	opendnp3::Group43Var6::Group43Var6()@plt
function _ZN8opendnp310Group2Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group2Var2::Write(opendnp3::Group2Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp315DoubleBitBinaryC1ENS_9DoubleBitE@plt	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::DoubleBit)@plt
function _ZN8opendnp311TransportRx12GetAvailableEv@plt	opendnp3::TransportRx::GetAvailable()@plt
function _ZN8opendnp311Group52Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group52Var1::Read(openpal::RSlice&, opendnp3::Group52Var1&)@plt
function _ZNK8opendnp39NumParser10ParseCountERN7openpal6RSliceERtPNS1_6LoggerE@plt	opendnp3::NumParser::ParseCount(openpal::RSlice&, unsigned short&, openpal::Logger*) const@plt
function _ZN8opendnp310LinkHeader4ReadEPKh@plt	opendnp3::LinkHeader::Read(unsigned char const*)@plt
function _ZN8opendnp313StaticWriters3GetENS_26StaticOctetStringVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticOctetStringVariation)@plt
function _ZN8opendnp316CountIndexParser11ParseHeaderERN7openpal6RSliceERKNS_9NumParserERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::CountIndexParser::ParseHeader(openpal::RSlice&, opendnp3::NumParser const&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp311Group22Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group22Var2::Write(opendnp3::Group22Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp310EventLists7GetListINS_10AnalogSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::AnalogSpec> >& opendnp3::EventLists::GetList<opendnp3::AnalogSpec>()@plt
function _ZN8opendnp311LinkContext10ResetRetryEv@plt	opendnp3::LinkContext::ResetRetry()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_13FrozenCounterEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::FrozenCounter> > const&)@plt
function _ZN8opendnp36BinaryC1Ev@plt	opendnp3::Binary::Binary()@plt
function _ZN8opendnp310Group4Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group4Var3::Write(opendnp3::Group4Var3 const&, openpal::WSlice&)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_19DoubleBitBinarySpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::DoubleBitBinarySpec> const&)@plt
function _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv@plt	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()@plt
function _ZN8opendnp320AnalogOutputDouble64C1EdNS_13CommandStatusE@plt	opendnp3::AnalogOutputDouble64::AnalogOutputDouble64(double, opendnp3::CommandStatus)@plt
function _ZN8opendnp320FunctionCodeToStringENS_12FunctionCodeE@plt	opendnp3::FunctionCodeToString(opendnp3::FunctionCode)@plt
function _ZN8opendnp313StaticBuffersC1ERKNS_13DatabaseSizesE@plt	opendnp3::StaticBuffers::StaticBuffers(opendnp3::DatabaseSizes const&)@plt
function _ZN8opendnp315ShiftableBuffer5ResetEv@plt	opendnp3::ShiftableBuffer::Reset()@plt
function _ZN8opendnp315AppControlFieldC1Eh@plt	opendnp3::AppControlField::AppControlField(unsigned char)@plt
function _ZN8opendnp311Group32Var3C1Ev@plt	opendnp3::Group32Var3::Group32Var3()@plt
function _ZN8opendnp318AnalogCommandEventC1Ev@plt	opendnp3::AnalogCommandEvent::AnalogCommandEvent()@plt
function _ZN8opendnp310ClassField15AllEventClassesEv@plt	opendnp3::ClassField::AllEventClasses()@plt
function memcpy@plt	memcpy@plt
function _ZN8opendnp311Group42Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var2::Write(opendnp3::Group42Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp313CommandSetOps14InvokeCallbackERKNS_10CommandSetENS_14TaskCompletionERKSt8functionIFvRKNS_18ICommandTaskResultEEE@plt	opendnp3::CommandSetOps::InvokeCallback(opendnp3::CommandSet const&, opendnp3::TaskCompletion, std::function<void (opendnp3::ICommandTaskResult const&)> const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_12Group120Var4EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group120Var4> const&)@plt
function _ZNK8opendnp310ClassField10IntersectsERKS0_@plt	opendnp3::ClassField::Intersects(opendnp3::ClassField const&) const@plt
function _ZNK7openpal6RSlice4SkipEj@plt	openpal::RSlice::Skip(unsigned int) const@plt
function _ZN8opendnp35build15NullUnsolicitedERNS_12APDUResponseEhRKNS_8IINFieldE@plt	opendnp3::build::NullUnsolicited(opendnp3::APDUResponse&, unsigned char, opendnp3::IINField const&)@plt
function _ZN8opendnp311Group21Var910ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE@plt	opendnp3::Group21Var9::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_19TimeAndIntervalSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::TimeAndIntervalSpec>()@plt
function _ZN8opendnp311Group30Var3C1Ev@plt	opendnp3::Group30Var3::Group30Var3()@plt
function _ZN8opendnp311Group23Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group23Var5::Write(opendnp3::Group23Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_12Group122Var1EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var1> > const&)@plt
function _ZN8opendnp322MasterSchedulerBackend16GetBestTaskToRunERKN7openpal18MonotonicTimestampERKNS0_6RecordES7_@plt	opendnp3::MasterSchedulerBackend::GetBestTaskToRun(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)@plt
function _ZN8opendnp311Group42Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var3::Write(opendnp3::Group42Var3 const&, openpal::WSlice&)@plt
function _ZN8opendnp313FrozenCounterC1Ev@plt	opendnp3::FrozenCounter::FrozenCounter()@plt
function _ZN8opendnp311TransportTxC1ERKN7openpal6LoggerE@plt	opendnp3::TransportTx::TransportTx(openpal::Logger const&)@plt
function _ZN8opendnp311Group50Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group50Var4::Read(openpal::RSlice&, opendnp3::Group50Var4&)@plt
function _ZN8opendnp311MasterTasks8BindTaskERKSt10shared_ptrINS_11IMasterTaskEE@plt	opendnp3::MasterTasks::BindTask(std::shared_ptr<opendnp3::IMasterTask> const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_15DoubleBitBinaryEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)@plt
function _ZNK8opendnp312Group120Var84SizeEv@plt	opendnp3::Group120Var8::Size() const@plt
function _ZN8opendnp312Group120Var74ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var7::Read(openpal::RSlice const&)@plt
function _ZNSt6vectorISt10shared_ptrIN8opendnp314ICommandHeaderEESaIS3_EE19_M_emplace_back_auxIJS3_EEEvDpOT_@plt	void std::vector<std::shared_ptr<opendnp3::ICommandHeader>, std::allocator<std::shared_ptr<opendnp3::ICommandHeader> > >::_M_emplace_back_aux<std::shared_ptr<opendnp3::ICommandHeader> >(std::shared_ptr<opendnp3::ICommandHeader>&&)@plt
function _ZN8opendnp311LinkContext9OnTxReadyEv@plt	opendnp3::LinkContext::OnTxReady()@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKNS_10UInt48TypeE@plt	openpal::Format::Write(openpal::WSlice&, openpal::UInt48Type const&)@plt
function _ZN8opendnp36BinaryC1ENS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::Binary::Binary(opendnp3::Flags, openpal::UInt48Type)@plt
function _ZN8opendnp311Group13Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group13Var1::Read(openpal::RSlice&, opendnp3::Group13Var1&)@plt
function _ZN8opendnp312Group120Var9C1Ev@plt	opendnp3::Group120Var9::Group120Var9()@plt
function _ZN8opendnp311Group43Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var4::Write(opendnp3::Group43Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group41Var2C1Ev@plt	opendnp3::Group41Var2::Group41Var2()@plt
function _ZN8opendnp315LinkLayerParser9ParseBodyEv@plt	opendnp3::LinkLayerParser::ParseBody()@plt
function _ZNK8opendnp314RequestHistory17EqualsLastObjectsERKN7openpal6RSliceE@plt	opendnp3::RequestHistory::EqualsLastObjects(openpal::RSlice const&) const@plt
function _ZN8opendnp315TransportHeaderC1Eh@plt	opendnp3::TransportHeader::TransportHeader(unsigned char)@plt
function _ZN8opendnp313Group120Var12C1Ev@plt	opendnp3::Group120Var12::Group120Var12()@plt
function _ZN8opendnp311MasterTasksD1Ev@plt	opendnp3::MasterTasks::~MasterTasks()@plt
function _ZN8opendnp38MContext14OnParsedHeaderERKN7openpal6RSliceERKNS_18APDUResponseHeaderES4_@plt	opendnp3::MContext::OnParsedHeader(openpal::RSlice const&, opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp311Group22Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group22Var2::Read(openpal::RSlice&, opendnp3::Group22Var2&)@plt
function _ZN8opendnp36AnalogC1EdNS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::Analog::Analog(double, opendnp3::Flags, openpal::UInt48Type)@plt
function _ZN8opendnp320FunctionCodeFromTypeEh@plt	opendnp3::FunctionCodeFromType(unsigned char)@plt
function __cxa_atexit@plt	__cxa_atexit@plt
function _ZN8opendnp311Group22Var6C1Ev@plt	opendnp3::Group22Var6::Group22Var6()@plt
function _ZN8opendnp38OContext19OnReceiveSolRequestERKNS_13ParsedRequestE@plt	opendnp3::OContext::OnReceiveSolRequest(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp36Header10AllObjectsEhh@plt	opendnp3::Header::AllObjects(unsigned char, unsigned char)@plt
function _ZN8opendnp310Group4Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group4Var2::Read(openpal::RSlice&, opendnp3::Group4Var2&)@plt
function _ZN8opendnp311Group32Var85WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var8::Write(opendnp3::Group32Var8 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group41Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group41Var2::Read(openpal::RSlice&, opendnp3::Group41Var2&)@plt
function _ZN8opendnp311Group51Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group51Var2::Read(openpal::RSlice&, opendnp3::Group51Var2&)@plt
function _ZN8opendnp315ResponseContextC1ERNS_15IResponseLoaderES2_@plt	opendnp3::ResponseContext::ResponseContext(opendnp3::IResponseLoader&, opendnp3::IResponseLoader&)@plt
function _ZN8opendnp311LinkContext11CancelTimerEv@plt	opendnp3::LinkContext::CancelTimer()@plt
function _ZN8opendnp313Group120Var11C1Ev@plt	opendnp3::Group120Var11::Group120Var11()@plt
function _ZN8opendnp311Group22Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group22Var1::Write(opendnp3::Group22Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp318BinaryOutputStatusC1Ev@plt	opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt
function _ZN8opendnp321LoadWithRangeIteratorINS_10AnalogSpecEN7openpal7Bit16LEItEEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS7_6meas_tEEERNS_5RangeE@plt	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogSpec, openpal::Bit16LE<unsigned short> >(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogSpec::meas_t>&, opendnp3::Range&)@plt
function _ZN8opendnp311Group41Var1C1Ev@plt	opendnp3::Group41Var1::Group41Var1()@plt
function _ZN8opendnp311Group42Var5C1Ev@plt	opendnp3::Group42Var5::Group42Var5()@plt
function _ZN8opendnp322MasterSchedulerBackend19RestartTimeoutTimerEv@plt	opendnp3::MasterSchedulerBackend::RestartTimeoutTimer()@plt
function _ZN8opendnp311LinkContext18StartResponseTimerEv@plt	opendnp3::LinkContext::StartResponseTimer()@plt
function _ZN8opendnp315LinkLayerParser11ParseHeaderEv@plt	opendnp3::LinkLayerParser::ParseHeader()@plt
function _ZN8opendnp311APDUWrapper10SetControlENS_15AppControlFieldE@plt	opendnp3::APDUWrapper::SetControl(opendnp3::AppControlField)@plt
function _ZN8opendnp36HeaderC1Ehh@plt	opendnp3::Header::Header(unsigned char, unsigned char)@plt
function _ZN8opendnp314HMACTypeToTypeENS_8HMACTypeE@plt	opendnp3::HMACTypeToType(opendnp3::HMACType)@plt
function _ZN8opendnp315TimeAndIntervalC1EN7openpal10UInt48TypeEjh@plt	opendnp3::TimeAndInterval::TimeAndInterval(openpal::UInt48Type, unsigned int, unsigned char)@plt
function _ZN7openpal18MonotonicTimestampC1Ev@plt	openpal::MonotonicTimestamp::MonotonicTimestamp()@plt
function _ZN8opendnp38MContext15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::MContext::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp317AnalogOutputInt16C1EsNS_13CommandStatusE@plt	opendnp3::AnalogOutputInt16::AnalogOutputInt16(short, opendnp3::CommandStatus)@plt
function _ZN7openpal6WSlice5EmptyEv@plt	openpal::WSlice::Empty()@plt
function _ZN8opendnp311Group30Var4C1Ev@plt	opendnp3::Group30Var4::Group30Var4()@plt
function _ZN8opendnp38Database6ModifyINS_17FrozenCounterSpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::FrozenCounterSpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_12Group122Var2EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var2> > const&)@plt
function _ZN8opendnp312PollTaskBaseC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERNS_11ISOEHandlerERKNS_12TaskBehaviorEN7openpal6LoggerENS_10TaskConfigE@plt	opendnp3::PollTaskBase::PollTaskBase(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, opendnp3::TaskBehavior const&, openpal::Logger, opendnp3::TaskConfig)@plt
function _ZdlPv@plt	operator delete(void*)@plt
function _ZN8opendnp39LinkFrame13WriteUserDataEPKhPhh@plt	opendnp3::LinkFrame::WriteUserData(unsigned char const*, unsigned char*, unsigned char)@plt
function _ZN8opendnp311Group51Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group51Var1::Read(openpal::RSlice&, opendnp3::Group51Var1&)@plt
function _ZN8opendnp313Group120Var104ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var10::Read(openpal::RSlice const&)@plt
function _ZN8opendnp310Group1Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group1Var2::Write(opendnp3::Group1Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_22BinaryOutputStatusSpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::BinaryOutputStatusSpec> const&)@plt
function _ZN8opendnp311Group43Var8C1Ev@plt	opendnp3::Group43Var8::Group43Var8()@plt
function _ZN8opendnp321QualifierCodeFromTypeEh@plt	opendnp3::QualifierCodeFromType(unsigned char)@plt
function _ZN8opendnp313CommandSetOps5WriteERKNS_10CommandSetERNS_12HeaderWriterENS_18IndexQualifierModeE@plt	opendnp3::CommandSetOps::Write(opendnp3::CommandSet const&, opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)@plt
function _ZN7openpal8TimerRef13RestartActionERKNS_18MonotonicTimestampERKSt8functionIFvvEE@plt	openpal::TimerRef::RestartAction(openpal::MonotonicTimestamp const&, std::function<void ()> const&)@plt
function _ZN8opendnp311Group12Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group12Var1::Read(openpal::RSlice&, opendnp3::Group12Var1&)@plt
function _ZN8opendnp311IMasterTask17OnResponseTimeoutEN7openpal18MonotonicTimestampE@plt	opendnp3::IMasterTask::OnResponseTimeout(openpal::MonotonicTimestamp)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_22AnalogOutputStatusSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::AnalogOutputStatusSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>, bool, opendnp3::AnalogOutputStatusSpec::static_variation_t)@plt
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_@plt	void std::vector<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record>(opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record&&)@plt
function _ZN8opendnp311Group40Var4C1Ev@plt	opendnp3::Group40Var4::Group40Var4()@plt
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@plt	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@plt
function _ZN8opendnp39Functions15IsNoAckFuncCodeENS_12FunctionCodeE@plt	opendnp3::Functions::IsNoAckFuncCode(opendnp3::FunctionCode)@plt
function _ZN8opendnp310CommandSet18StartHeaderAOInt32Ev@plt	opendnp3::CommandSet::StartHeaderAOInt32()@plt
function _ZN8opendnp38OContext15BeginResponseTxEtRKN7openpal6RSliceERKNS_15AppControlFieldE@plt	opendnp3::OContext::BeginResponseTx(unsigned short, openpal::RSlice const&, opendnp3::AppControlField const&)@plt
function _ZN8opendnp312TaskBehavior7DisableEv@plt	opendnp3::TaskBehavior::Disable()@plt
function _ZN8opendnp311Group32Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var4::Read(openpal::RSlice&, opendnp3::Group32Var4&)@plt
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_@plt	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record&&)@plt
function _Znwm@plt	operator new(unsigned long)@plt
function _ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt	opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt
function _ZN8opendnp310EventListsD1Ev@plt	opendnp3::EventLists::~EventLists()@plt
function _ZN8opendnp311Group43Var310ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var3::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERs@plt	openpal::Parse::Read(openpal::RSlice&, short&)@plt
function _ZN7openpal6RSliceC1Ev@plt	openpal::RSlice::RSlice()@plt
function _ZN8opendnp313Group120Var114ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var11::Read(openpal::RSlice const&)@plt
function _ZNK8opendnp39NumParser7ReadNumERN7openpal6RSliceE@plt	opendnp3::NumParser::ReadNum(openpal::RSlice&) const@plt
function _ZN8opendnp312HeaderWriter8RollbackEv@plt	opendnp3::HeaderWriter::Rollback()@plt
function _ZNSt6vectorIN8opendnp322MasterSchedulerBackend6RecordESaIS2_EED1Ev@plt	std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> >::~vector()@plt
function _ZN8opendnp312TaskBehavior22SingleExecutionNoRetryEN7openpal18MonotonicTimestampE@plt	opendnp3::TaskBehavior::SingleExecutionNoRetry(openpal::MonotonicTimestamp)@plt
function _ZN8opendnp310APDUParser22HandleAllObjectsHeaderEPN7openpal6LoggerERKNS_12HeaderRecordERKNS_14ParserSettingsEPNS_12IAPDUHandlerE@plt	opendnp3::APDUParser::HandleAllObjectsHeader(openpal::Logger*, opendnp3::HeaderRecord const&, opendnp3::ParserSettings const&, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp311CommandTask19CreateDirectOperateERKSt10shared_ptrINS_11TaskContextEEONS_10CommandSetENS_18IndexQualifierModeERNS_18IMasterApplicationERKSt8functionIFvRKNS_18ICommandTaskResultEEERKN7openpal18MonotonicTimestampERKNS_10TaskConfigENSJ_6LoggerE@plt	opendnp3::CommandTask::CreateDirectOperate(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::CommandSet&&, opendnp3::IndexQualifierMode, opendnp3::IMasterApplication&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, openpal::MonotonicTimestamp const&, opendnp3::TaskConfig const&, openpal::Logger)@plt
function _ZdlPvm@plt	operator delete(void*, unsigned long)@plt
function _ZN8opendnp311LinkContext32FormatPrimaryBufferWithConfirmedERKNS_9AddressesERKN7openpal6RSliceEb@plt	opendnp3::LinkContext::FormatPrimaryBufferWithConfirmed(opendnp3::Addresses const&, openpal::RSlice const&, bool)@plt
function _ZN7openpal6LoggerD1Ev@plt	openpal::Logger::~Logger()@plt
function _ZN8opendnp311Group32Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var2::Read(openpal::RSlice&, opendnp3::Group32Var2&)@plt
function _ZN8opendnp310APDUParser11ParseHeaderERN7openpal6RSliceEPNS1_6LoggerEjRKNS_14ParserSettingsEPNS_12IAPDUHandlerEPNS_10IWhiteListE@plt	opendnp3::APDUParser::ParseHeader(openpal::RSlice&, openpal::Logger*, unsigned int, opendnp3::ParserSettings const&, opendnp3::IAPDUHandler*, opendnp3::IWhiteList*)@plt
function _ZN8opendnp311Group43Var4C1Ev@plt	opendnp3::Group43Var4::Group43Var4()@plt
function _ZN8opendnp310Group4Var1C1Ev@plt	opendnp3::Group4Var1::Group4Var1()@plt
function _ZN8opendnp310CommandSetD1Ev@plt	opendnp3::CommandSet::~CommandSet()@plt
function _ZN8opendnp311MasterTasksC1ERKNS_12MasterParamsERKN7openpal6LoggerERNS_18IMasterApplicationERNS_11ISOEHandlerE@plt	opendnp3::MasterTasks::MasterTasks(opendnp3::MasterParams const&, openpal::Logger const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&)@plt
function _ZN8opendnp318MeasurementHandler7ConvertERKNS_12Group122Var2E@plt	opendnp3::MeasurementHandler::Convert(opendnp3::Group122Var2 const&)@plt
function _ZN8opendnp311MasterTasks19GetDisableUnsolTaskERKSt10shared_ptrINS_11TaskContextEERKNS_12MasterParamsERKN7openpal6LoggerERNS_18IMasterApplicationE@plt	opendnp3::MasterTasks::GetDisableUnsolTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::MasterParams const&, openpal::Logger const&, opendnp3::IMasterApplication&)@plt
function _ZN8opendnp321UserOperationFromTypeEh@plt	opendnp3::UserOperationFromType(unsigned char)@plt
function _ZN8opendnp318MeasurementHandler15CheckForTxStartEv@plt	opendnp3::MeasurementHandler::CheckForTxStart()@plt
function _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt	std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt
function _ZN8opendnp318AnalogOutputStatusC1EdNS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::AnalogOutputStatus::AnalogOutputStatus(double, opendnp3::Flags, openpal::UInt48Type)@plt
function _ZN8opendnp311LinkContext12TryPendingTxERN7openpal8SettableINS1_6RSliceEEEb@plt	opendnp3::LinkContext::TryPendingTx(openpal::Settable<openpal::RSlice>&, bool)@plt
function _ZN8opendnp38MContext10ProcessIINERKNS_8IINFieldE@plt	opendnp3::MContext::ProcessIIN(opendnp3::IINField const&)@plt
function _ZN8opendnp318ObjectHeaderParser17ParseObjectHeaderERNS_12ObjectHeaderERN7openpal6RSliceEPNS3_6LoggerE@plt	opendnp3::ObjectHeaderParser::ParseObjectHeader(opendnp3::ObjectHeader&, openpal::RSlice&, openpal::Logger*)@plt
function _ZN8opendnp311LinkContext20TryStartTransmissionEv@plt	opendnp3::LinkContext::TryStartTransmission()@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_10BinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinarySpec>()@plt
function _ZN8opendnp38Database6ModifyINS_10BinarySpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::BinarySpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp312Group120Var14ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var1::Read(openpal::RSlice const&)@plt
function _ZN8opendnp318BinaryCommandEvent18GetStatusFromFlagsENS_5FlagsE@plt	opendnp3::BinaryCommandEvent::GetStatusFromFlags(opendnp3::Flags)@plt
function _ZN8opendnp311LinkContext13QueueTransmitERKN7openpal6RSliceEb@plt	opendnp3::LinkContext::QueueTransmit(openpal::RSlice const&, bool)@plt
function _ZN8opendnp311Group43Var75WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var7::Write(opendnp3::Group43Var7 const&, openpal::WSlice&)@plt
function _ZN8opendnp38Database6ModifyINS_19DoubleBitBinarySpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::DoubleBitBinarySpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp311EventBuffer16SelectAllByClassERKNS_10ClassFieldE@plt	opendnp3::EventBuffer::SelectAllByClass(opendnp3::ClassField const&)@plt
function _ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt	opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)@plt
function _ZN8opendnp310LinkHeaderC1Ev@plt	opendnp3::LinkHeader::LinkHeader()@plt
function _ZN8opendnp322GroupVariationToStringENS_14GroupVariationE@plt	opendnp3::GroupVariationToString(opendnp3::GroupVariation)@plt
function _ZN8opendnp312Group120Var94ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var9::Read(openpal::RSlice const&)@plt
function _ZN8opendnp311Group21Var610ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE@plt	opendnp3::Group21Var6::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)@plt
function _ZN8opendnp321LoadWithRangeIteratorINS_22AnalogOutputStatusSpecEN7openpal11UInt8SimpleEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS6_6meas_tEEERNS_5RangeE@plt	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogOutputStatusSpec, openpal::UInt8Simple>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputStatusSpec::meas_t>&, opendnp3::Range&)@plt
function _ZN8opendnp311Group20Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group20Var1::Read(openpal::RSlice&, opendnp3::Group20Var1&)@plt
function _ZN8opendnp311ReadHandlerC1ERNS_15IStaticSelectorERNS_14IEventSelectorE@plt	opendnp3::ReadHandler::ReadHandler(opendnp3::IStaticSelector&, opendnp3::IEventSelector&)@plt
function _ZN8opendnp35build15ClearRestartIINERNS_11APDURequestEh@plt	opendnp3::build::ClearRestartIIN(opendnp3::APDURequest&, unsigned char)@plt
function _ZN8opendnp310Group1Var2C1Ev@plt	opendnp3::Group1Var2::Group1Var2()@plt
function _ZN8opendnp313Group120Var10C1Ev@plt	opendnp3::Group120Var10::Group120Var10()@plt
function _ZN8opendnp322MasterSchedulerBackend19PostCheckForTaskRunEv@plt	opendnp3::MasterSchedulerBackend::PostCheckForTaskRun()@plt
function _ZN8opendnp318MeasurementHandlerC1ERKN7openpal6LoggerEPNS_11ISOEHandlerE@plt	opendnp3::MeasurementHandler::MeasurementHandler(openpal::Logger const&, opendnp3::ISOEHandler*)@plt
function _ZN8opendnp323KeyChangeMethodFromTypeEh@plt	opendnp3::KeyChangeMethodFromType(unsigned char)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var1EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)@plt
function _ZN8opendnp315DatabaseBuffers8UnselectEv@plt	opendnp3::DatabaseBuffers::Unselect()@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERNS_10UInt48TypeE@plt	openpal::Parse::Read(openpal::RSlice&, openpal::UInt48Type&)@plt
function _ZN8opendnp310Group2Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group2Var1::Read(openpal::RSlice&, opendnp3::Group2Var1&)@plt
function _ZN7openpal18MonotonicTimestamp3MinEv@plt	openpal::MonotonicTimestamp::Min()@plt
function _ZN7openpal18MonotonicTimestamp3MaxEv@plt	openpal::MonotonicTimestamp::Max()@plt
function _ZN8opendnp312Group121Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group121Var1::Write(opendnp3::Group121Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_19TimeAndIntervalSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::TimeAndIntervalSpec>()@plt
function _ZN8opendnp315ShiftableBufferC1EPhj@plt	opendnp3::ShiftableBuffer::ShiftableBuffer(unsigned char*, unsigned int)@plt
function _ZN8opendnp311TransportTx9ConfigureERKNS_7MessageE@plt	opendnp3::TransportTx::Configure(opendnp3::Message const&)@plt
function _ZN8opendnp312Group122Var2C1Ev@plt	opendnp3::Group122Var2::Group122Var2()@plt
function _ZN8opendnp312HeaderWriter4MarkEv@plt	opendnp3::HeaderWriter::Mark()@plt
function _ZN8opendnp311Group21Var210ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE@plt	opendnp3::Group21Var2::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)@plt
function _ZN7openpal8MinValueIiEET_v@plt	int openpal::MinValue<int>()@plt
function _ZN8opendnp310ClassFieldC1ENS_10EventClassE@plt	opendnp3::ClassField::ClassField(opendnp3::EventClass)@plt
function __stack_chk_fail@plt	__stack_chk_fail@plt
function _ZN8opendnp38MContext18StartResponseTimerEv@plt	opendnp3::MContext::StartResponseTimer()@plt
function _ZN8opendnp310APDUParser5ParseERKN7openpal6RSliceERNS_12IAPDUHandlerEPNS1_6LoggerENS_14ParserSettingsE@plt	opendnp3::APDUParser::Parse(openpal::RSlice const&, opendnp3::IAPDUHandler&, openpal::Logger*, opendnp3::ParserSettings)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_15OctetStringSpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::OctetStringSpec> const&)@plt
function _ZN8opendnp322MasterSchedulerBackend15ComparePriorityERKNS0_6RecordES3_@plt	opendnp3::MasterSchedulerBackend::ComparePriority(opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)@plt
function _ZN8opendnp39NumParser7OneByteEv@plt	opendnp3::NumParser::OneByte()@plt
function _ZN8opendnp322MasterSchedulerBackend20CompareEnabledStatusERKNS0_6RecordES3_@plt	opendnp3::MasterSchedulerBackend::CompareEnabledStatus(opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)@plt
function _ZN8opendnp311Group40Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group40Var1::Write(opendnp3::Group40Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311LinkContext8QueueAckEt@plt	opendnp3::LinkContext::QueueAck(unsigned short)@plt
function _ZN8opendnp310ClassField5ClearERKS0_@plt	opendnp3::ClassField::Clear(opendnp3::ClassField const&)@plt
function _ZN8opendnp310ClassFieldC1Eh@plt	opendnp3::ClassField::ClassField(unsigned char)@plt
function _ZN8opendnp312HeaderWriterC1EPN7openpal6WSliceE@plt	opendnp3::HeaderWriter::HeaderWriter(openpal::WSlice*)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)@plt
function _ZN8opendnp315ShiftableBuffer12AdvanceWriteEj@plt	opendnp3::ShiftableBuffer::AdvanceWrite(unsigned int)@plt
function _ZNSt6vectorIN8opendnp322MasterSchedulerBackend6RecordESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_@plt	void std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> >::_M_emplace_back_aux<opendnp3::MasterSchedulerBackend::Record>(opendnp3::MasterSchedulerBackend::Record&&)@plt
function _ZN8opendnp35build17EnableUnsolicitedERNS_11APDURequestERKNS_10ClassFieldEh@plt	opendnp3::build::EnableUnsolicited(opendnp3::APDURequest&, opendnp3::ClassField const&, unsigned char)@plt
function _ZN8opendnp35flags14GetBinaryFlagsENS_5FlagsEb@plt	opendnp3::flags::GetBinaryFlags(opendnp3::Flags, bool)@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKj@plt	openpal::Format::Write(openpal::WSlice&, unsigned int const&)@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERj@plt	openpal::Parse::Read(openpal::RSlice&, unsigned int&)@plt
function _ZNK8opendnp39OctetData8ToRSliceEv@plt	opendnp3::OctetData::ToRSlice() const@plt
function _ZN8opendnp315LinkLayerParser10ReadHeaderEv@plt	opendnp3::LinkLayerParser::ReadHeader()@plt
function _ZN8opendnp311Group43Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var1::Read(openpal::RSlice&, opendnp3::Group43Var1&)@plt
function _ZN8opendnp311Group43Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var5::Read(openpal::RSlice&, opendnp3::Group43Var5&)@plt
function _ZN8opendnp311IMasterTask16SetMinExpirationEv@plt	opendnp3::IMasterTask::SetMinExpiration()@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_10BinarySpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::BinarySpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>, bool, opendnp3::BinarySpec::static_variation_t)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)@plt
function _ZN8opendnp311CommandTask15ProcessResponseERKN7openpal6RSliceE@plt	opendnp3::CommandTask::ProcessResponse(openpal::RSlice const&)@plt
function _ZN7openpal8MinValueIfEET_v@plt	float openpal::MinValue<float>()@plt
function _ZN8opendnp311Group30Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group30Var1::Read(openpal::RSlice&, opendnp3::Group30Var1&)@plt
function _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@plt	std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt
function _ZN8opendnp312Group120Var1C1Ev@plt	opendnp3::Group120Var1::Group120Var1()@plt
function _ZN8opendnp315LANTimeSyncTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationEN7openpal6LoggerE@plt	opendnp3::LANTimeSyncTask::LANTimeSyncTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::Logger)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)@plt
function _ZN8opendnp38Database6ModifyINS_10AnalogSpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::AnalogSpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp35build13ReadIntegrityERNS_11APDURequestERKNS_10ClassFieldEh@plt	opendnp3::build::ReadIntegrity(opendnp3::APDURequest&, opendnp3::ClassField const&, unsigned char)@plt
function _ZN8opendnp323ControlRelayOutputBlockC1ENS_11ControlCodeEhjjNS_13CommandStatusE@plt	opendnp3::ControlRelayOutputBlock::ControlRelayOutputBlock(opendnp3::ControlCode, unsigned char, unsigned int, unsigned int, opendnp3::CommandStatus)@plt
function _ZN8opendnp311Group10Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group10Var2::Write(opendnp3::Group10Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_17FrozenCounterSpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::FrozenCounterSpec> const&)@plt
function _ZN8opendnp313Group120Var13C1Ev@plt	opendnp3::Group120Var13::Group120Var13()@plt
function _ZN8opendnp311Group13Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group13Var2::Write(opendnp3::Group13Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_26EventDoubleBinaryVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventDoubleBinaryVariation, unsigned int)@plt
function _ZN8opendnp38OContext13HandleRestartERKN7openpal6RSliceEbPNS_12HeaderWriterE@plt	opendnp3::OContext::HandleRestart(openpal::RSlice const&, bool, opendnp3::HeaderWriter*)@plt
function _ZN8opendnp38DatabaseC1ERKNS_13DatabaseSizesERNS_14IEventReceiverENS_9IndexModeENS_18StaticTypeBitFieldE@plt	opendnp3::Database::Database(opendnp3::DatabaseSizes const&, opendnp3::IEventReceiver&, opendnp3::IndexMode, opendnp3::StaticTypeBitField)@plt
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@plt	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_10AnalogSpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::AnalogSpec> const&)@plt
function _ZN8opendnp311Group20Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group20Var1::Write(opendnp3::Group20Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group40Var1C1Ev@plt	opendnp3::Group40Var1::Group40Var1()@plt
function _ZN8opendnp311Group32Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var5::Write(opendnp3::Group32Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp313StaticWriters3GetENS_28StaticFrozenCounterVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticFrozenCounterVariation)@plt
function _ZN8opendnp35build17RecordCurrentTimeERNS_11APDURequestEh@plt	opendnp3::build::RecordCurrentTime(opendnp3::APDURequest&, unsigned char)@plt
function _ZN8opendnp311Group43Var84ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var8::Read(openpal::RSlice&, opendnp3::Group43Var8&)@plt
function _ZN8opendnp311Group30Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group30Var3::Read(openpal::RSlice&, opendnp3::Group30Var3&)@plt
function _ZN7openpal8TimerRef11StartActionERKNS_18MonotonicTimestampERKSt8functionIFvvEE@plt	openpal::TimerRef::StartAction(openpal::MonotonicTimestamp const&, std::function<void ()> const&)@plt
function _ZN8opendnp320RestartOperationTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKN7openpal18MonotonicTimestampENS_11RestartTypeERKSt8functionIFvRKNS_22RestartOperationResultEEENS8_6LoggerERKNS_10TaskConfigE@plt	opendnp3::RestartOperationTask::RestartOperationTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::MonotonicTimestamp const&, opendnp3::RestartType, std::function<void (opendnp3::RestartOperationResult const&)> const&, openpal::Logger, opendnp3::TaskConfig const&)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_10AnalogSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::AnalogSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>, bool, opendnp3::AnalogSpec::static_variation_t)@plt
function _ZN7openpal8UInt48LE5WriteEPhNS_10UInt48TypeE@plt	openpal::UInt48LE::Write(unsigned char*, openpal::UInt48Type)@plt
function _ZN8opendnp311Group21Var1C1Ev@plt	opendnp3::Group21Var1::Group21Var1()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var15ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var15 const&, openpal::RSlice const&)@plt
function _ZN8opendnp321AuthErrorCodeFromTypeEh@plt	opendnp3::AuthErrorCodeFromType(unsigned char)@plt
function _ZN7openpal8MinValueIsEET_v@plt	short openpal::MinValue<short>()@plt
function _ZN8opendnp318BinaryCommandEventC1Ev@plt	opendnp3::BinaryCommandEvent::BinaryCommandEvent()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_7CounterEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Counter> > const&)@plt
function _ZN8opendnp311MasterTasks14DemandTimeSyncEv@plt	opendnp3::MasterTasks::DemandTimeSync()@plt
function _ZN8opendnp313FrozenCounterC1EjNS_5FlagsE@plt	opendnp3::FrozenCounter::FrozenCounter(unsigned int, opendnp3::Flags)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_32EventBinaryOutputStatusVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventBinaryOutputStatusVariation, unsigned int)@plt
function _ZNK7openpal6RSlice4TakeEj@plt	openpal::RSlice::Take(unsigned int) const@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_22BinaryOutputStatusSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::BinaryOutputStatusSpec>()@plt
function _ZN8opendnp312TaskBehavior15ReactsToIINOnlyEv@plt	opendnp3::TaskBehavior::ReactsToIINOnly()@plt
function _ZN8opendnp313CommandSetOps22ProcessOperateResponseERNS_10CommandSetERKN7openpal6RSliceEPNS3_6LoggerE@plt	opendnp3::CommandSetOps::ProcessOperateResponse(opendnp3::CommandSet&, openpal::RSlice const&, openpal::Logger*)@plt
function _ZN8opendnp315DoubleBitToTypeENS_9DoubleBitE@plt	opendnp3::DoubleBitToType(opendnp3::DoubleBit)@plt
function _ZN8opendnp311Group40Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group40Var4::Read(openpal::RSlice&, opendnp3::Group40Var4&)@plt
function _ZN8opendnp38MContext15OnResponseEventERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::MContext::OnResponseEvent(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp311APDUWrapperC1ERKN7openpal6WSliceE@plt	opendnp3::APDUWrapper::APDUWrapper(openpal::WSlice const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group51Var2EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group51Var2> const&)@plt
function _ZN8opendnp311Group30Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group30Var3::Write(opendnp3::Group30Var3 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var7ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var7 const&, openpal::RSlice const&)@plt
function _ZN8opendnp311APDURequestC1ERKN7openpal6WSliceE@plt	opendnp3::APDURequest::APDURequest(openpal::WSlice const&)@plt
function _ZN8opendnp318SerialTimeSyncTask19OnResponseWriteTimeERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::SerialTimeSyncTask::OnResponseWriteTime(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp39OctetDataC1ERKN7openpal6RSliceE@plt	opendnp3::OctetData::OctetData(openpal::RSlice const&)@plt
function _ZN8opendnp311Group42Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var4::Write(opendnp3::Group42Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp310ClassField3SetERKS0_@plt	opendnp3::ClassField::Set(opendnp3::ClassField const&)@plt
function _ZN8opendnp312Group122Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group122Var1::Read(openpal::RSlice&, opendnp3::Group122Var1&)@plt
function _ZN8opendnp320StartupIntegrityPollC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERNS_11ISOEHandlerENS_10ClassFieldERKNS_12TaskBehaviorEN7openpal6LoggerE@plt	opendnp3::StartupIntegrityPoll::StartupIntegrityPoll(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, opendnp3::ClassField, opendnp3::TaskBehavior const&, openpal::Logger)@plt
function _ZN8opendnp314TransportLayer12SetLinkLayerERNS_10ILinkLayerE@plt	opendnp3::TransportLayer::SetLinkLayer(opendnp3::ILinkLayer&)@plt
function _ZN8opendnp310Group4Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group4Var3::Read(openpal::RSlice&, opendnp3::Group4Var3&)@plt
function _ZN8opendnp311Group52Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group52Var1::Write(opendnp3::Group52Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp315DatabaseBuffers18SelectVirtualRangeINS_10AnalogSpecEEENS_8IINFieldERKNS_5RangeEbNT_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::SelectVirtualRange<opendnp3::AnalogSpec>(opendnp3::Range const&, bool, opendnp3::AnalogSpec::static_variation_t)@plt
function _ZN8opendnp315AssignClassTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorEN7openpal6LoggerE@plt	opendnp3::AssignClassTask::AssignClassTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, openpal::Logger)@plt
function _ZN8opendnp39LinkLayerC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERKNS_15LinkLayerConfigE@plt	opendnp3::LinkLayer::LinkLayer(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::LinkLayerConfig const&)@plt
function _ZN8opendnp311Group22Var1C1Ev@plt	opendnp3::Group22Var1::Group22Var1()@plt
function _ZN8opendnp311Group43Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var6::Write(opendnp3::Group43Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp38Database6ModifyINS_22AnalogOutputStatusSpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::AnalogOutputStatusSpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp315DatabaseBuffers18SelectVirtualRangeINS_17FrozenCounterSpecEEENS_8IINFieldERKNS_5RangeEbNT_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::SelectVirtualRange<opendnp3::FrozenCounterSpec>(opendnp3::Range const&, bool, opendnp3::FrozenCounterSpec::static_variation_t)@plt
function _ZN8opendnp39LinkFrame23FormatConfirmedUserDataERN7openpal6WSliceEbbttPKhhPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatConfirmedUserData(openpal::WSlice&, bool, bool, unsigned short, unsigned short, unsigned char const*, unsigned char, openpal::Logger*)@plt
function _ZN8opendnp38MContext20CheckConfirmTransmitEv@plt	opendnp3::MContext::CheckConfirmTransmit()@plt
function _ZN8opendnp313StaticWriters3GetENS_33StaticAnalogOutputStatusVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticAnalogOutputStatusVariation)@plt
function _ZdaPv@plt	operator delete[](void*)@plt
function _ZNK7openpal18MonotonicTimestamp3AddERKNS_12TimeDurationE@plt	openpal::MonotonicTimestamp::Add(openpal::TimeDuration const&) const@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_10BinarySpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::BinarySpec> const&)@plt
function _ZN8opendnp313EventScanTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERNS_11ISOEHandlerENS_10ClassFieldEN7openpal6LoggerE@plt	opendnp3::EventScanTask::EventScanTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, opendnp3::ClassField, openpal::Logger)@plt
function _ZN8opendnp311TransportRxD1Ev@plt	opendnp3::TransportRx::~TransportRx()@plt
function _ZN8opendnp311EventBuffer4LoadERNS_12HeaderWriterE@plt	opendnp3::EventBuffer::Load(opendnp3::HeaderWriter&)@plt
function _ZN8opendnp38Database6ModifyINS_22BinaryOutputStatusSpecEEEbtth@plt	bool opendnp3::Database::Modify<opendnp3::BinaryOutputStatusSpec>(unsigned short, unsigned short, unsigned char)@plt
function _ZN8opendnp311RangeParser11ParseHeaderERN7openpal6RSliceERKNS_9NumParserERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::RangeParser::ParseHeader(openpal::RSlice&, opendnp3::NumParser const&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp311Group50Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group50Var1::Write(opendnp3::Group50Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp312Group120Var54ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var5::Read(openpal::RSlice const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_6BinaryEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)@plt
function _ZN8opendnp37CounterC1EjNS_5FlagsE@plt	opendnp3::Counter::Counter(unsigned int, opendnp3::Flags)@plt
function _ZN8opendnp311Group50Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group50Var3::Read(openpal::RSlice&, opendnp3::Group50Var3&)@plt
function _ZN8opendnp311Group20Var5C1Ev@plt	opendnp3::Group20Var5::Group20Var5()@plt
function _ZN8opendnp311LinkContext15QueueResetLinksEt@plt	opendnp3::LinkContext::QueueResetLinks(unsigned short)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var2EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var2> const&)@plt
function _ZN7openpal12TimeDurationC1Ev@plt	openpal::TimeDuration::TimeDuration()@plt
function _ZN8opendnp311Group40Var2C1Ev@plt	opendnp3::Group40Var2::Group40Var2()@plt
function _ZN8opendnp314EventSelection13SelectByClassERNS_10EventListsERKNS_10ClassFieldEj@plt	opendnp3::EventSelection::SelectByClass(opendnp3::EventLists&, opendnp3::ClassField const&, unsigned int)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)@plt
function _ZN8opendnp311Group22Var5C1Ev@plt	opendnp3::Group22Var5::Group22Var5()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var9ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var9 const&, openpal::RSlice const&)@plt
function _ZN8opendnp311IMasterTask27ValidateInternalIndicationsERKNS_18APDUResponseHeaderE@plt	opendnp3::IMasterTask::ValidateInternalIndications(opendnp3::APDUResponseHeader const&)@plt
function _ZNK8opendnp312Group120Var54SizeEv@plt	opendnp3::Group120Var5::Size() const@plt
function _ZN7openpal8MaxValueIfEET_v@plt	float openpal::MaxValue<float>()@plt
function _ZNK8opendnp36Header7WriteToERNS_12HeaderWriterE@plt	opendnp3::Header::WriteTo(opendnp3::HeaderWriter&) const@plt
function _ZN8opendnp38Database19ConvertToEventClassENS_10PointClassERNS_10EventClassE@plt	opendnp3::Database::ConvertToEventClass(opendnp3::PointClass, opendnp3::EventClass&)@plt
function _ZN8opendnp311Group20Var6C1Ev@plt	opendnp3::Group20Var6::Group20Var6()@plt
function _ZN8opendnp38OContext25ContinueMultiFragResponseERKNS_9AddressesERKN7openpal11SequenceNumIhLh16EEE@plt	opendnp3::OContext::ContinueMultiFragResponse(opendnp3::Addresses const&, openpal::SequenceNum<unsigned char, (unsigned char)16> const&)@plt
function _ZN8opendnp315LinkLayerParser16TransferUserDataEv@plt	opendnp3::LinkLayerParser::TransferUserData()@plt
function _ZN8opendnp320GroupVariationRecord9GetRecordEhh@plt	opendnp3::GroupVariationRecord::GetRecord(unsigned char, unsigned char)@plt
function _ZN8opendnp315DoubleBitBinaryC1ENS_5FlagsE@plt	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::Flags)@plt
function _ZN8opendnp315DeferredRequestC1Ej@plt	opendnp3::DeferredRequest::DeferredRequest(unsigned int)@plt
function _ZN8opendnp311RangeParser21ParseRangeOfOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_5RangeEPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::RangeParser::ParseRangeOfOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZNK7openpal6WSlice8ToRSliceEv@plt	openpal::WSlice::ToRSlice() const@plt
function _ZN8opendnp311Group43Var1C1Ev@plt	opendnp3::Group43Var1::Group43Var1()@plt
function _ZN8opendnp322GroupVariationFromTypeEt@plt	opendnp3::GroupVariationFromType(unsigned short)@plt
function _ZN8opendnp321ChallengeReasonToTypeENS_15ChallengeReasonE@plt	opendnp3::ChallengeReasonToType(opendnp3::ChallengeReason)@plt
function _ZN8opendnp311LinkContext17CompleteKeepAliveEv@plt	opendnp3::LinkContext::CompleteKeepAlive()@plt
function _ZN8opendnp311Group43Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var3::Write(opendnp3::Group43Var3 const&, openpal::WSlice&)@plt
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_@plt	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Record&&)@plt
function _ZN8opendnp315LinkLayerParser24ValidateHeaderParametersEv@plt	opendnp3::LinkLayerParser::ValidateHeaderParameters()@plt
function _ZN8opendnp38OContext11HandleWriteERKN7openpal6RSliceE@plt	opendnp3::OContext::HandleWrite(openpal::RSlice const&)@plt
function _ZN8opendnp313CommandSetOpsC1ENS0_4ModeERNS_10CommandSetE@plt	opendnp3::CommandSetOps::CommandSetOps(opendnp3::CommandSetOps::Mode, opendnp3::CommandSet&)@plt
function _ZN8opendnp36AnalogC1EdNS_5FlagsE@plt	opendnp3::Analog::Analog(double, opendnp3::Flags)@plt
function _ZN8opendnp311Group21Var510ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE@plt	opendnp3::Group21Var5::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)@plt
function _ZN8opendnp311Group41Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group41Var2::Write(opendnp3::Group41Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp38MContext16ResumeActiveTaskEv@plt	opendnp3::MContext::ResumeActiveTask()@plt
function _ZN8opendnp311Group42Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var6::Read(openpal::RSlice&, opendnp3::Group42Var6&)@plt
function _ZN7openpal12TimeDuration3MaxEv@plt	openpal::TimeDuration::Max()@plt
function _ZN7openpal12TimeDuration3MinEv@plt	openpal::TimeDuration::Min()@plt
function _ZN8opendnp319QualifierCodeToTypeENS_13QualifierCodeE@plt	opendnp3::QualifierCodeToType(opendnp3::QualifierCode)@plt
function _ZN8opendnp312TaskBehavior17ImmediatePeriodicERKN7openpal12TimeDurationES4_S4_@plt	opendnp3::TaskBehavior::ImmediatePeriodic(openpal::TimeDuration const&, openpal::TimeDuration const&, openpal::TimeDuration const&)@plt
function _ZNK7openpal18MonotonicTimestamp5IsMaxEv@plt	openpal::MonotonicTimestamp::IsMax() const@plt
function _ZN8opendnp311Group20Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group20Var6::Write(opendnp3::Group20Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group30Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group30Var5::Read(openpal::RSlice&, opendnp3::Group30Var5&)@plt
function _ZN8opendnp312Group21Var105WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group21Var10::Write(opendnp3::Group21Var10 const&, openpal::WSlice&)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_20EventBinaryVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventBinaryVariation, unsigned int)@plt
function _ZN8opendnp312TaskBehavior5ResetEv@plt	opendnp3::TaskBehavior::Reset()@plt
function _ZN8opendnp38OContext23RespondToNonReadRequestERKNS_13ParsedRequestE@plt	opendnp3::OContext::RespondToNonReadRequest(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp38MContext11ProcessAPDUERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::MContext::ProcessAPDU(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp39LinkFrame12FormatHeaderERN7openpal6WSliceEhbbbNS_12LinkFunctionEttPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatHeader(openpal::WSlice&, unsigned char, bool, bool, bool, opendnp3::LinkFunction, unsigned short, unsigned short, openpal::Logger*)@plt
function _ZN8opendnp310Group2Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group2Var1::Write(opendnp3::Group2Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311LinkContext17OnResponseTimeoutEv@plt	opendnp3::LinkContext::OnResponseTimeout()@plt
function _ZN8opendnp312Group21Var104ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group21Var10::Read(openpal::RSlice&, opendnp3::Group21Var10&)@plt
function _ZN8opendnp315DoubleBitBinary8GetValueENS_5FlagsE@plt	opendnp3::DoubleBitBinary::GetValue(opendnp3::Flags)@plt
function _ZN8opendnp318AssignClassHandler16ProcessAssignAllENS_15AssignClassTypeENS_10PointClassE@plt	opendnp3::AssignClassHandler::ProcessAssignAll(opendnp3::AssignClassType, opendnp3::PointClass)@plt
function _ZNK8opendnp313Group120Var134SizeEv@plt	opendnp3::Group120Var13::Size() const@plt
function _ZN8opendnp311Group32Var2C1Ev@plt	opendnp3::Group32Var2::Group32Var2()@plt
function _ZN8opendnp311Group42Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var5::Write(opendnp3::Group42Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryCommandEventEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent> > const&)@plt
function _ZN8opendnp311Group32Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var1::Write(opendnp3::Group32Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp35build17WriteClassHeadersERNS_12HeaderWriterERKNS_10ClassFieldE@plt	opendnp3::build::WriteClassHeaders(opendnp3::HeaderWriter&, opendnp3::ClassField const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var13ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var13 const&, openpal::RSlice const&)@plt
function _ZN7openpal8MaxValueIsEET_v@plt	short openpal::MaxValue<short>()@plt
function _ZN8opendnp311Group32Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var2::Write(opendnp3::Group32Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)@plt
function _ZN8opendnp311EventBuffer8UnselectEv@plt	opendnp3::EventBuffer::Unselect()@plt
function _ZN8opendnp315TimeAndIntervalC1Ev@plt	opendnp3::TimeAndInterval::TimeAndInterval()@plt
function _ZN8opendnp318PLLS_ResetLinkWait7FailureERNS_11LinkContextE@plt	opendnp3::PLLS_ResetLinkWait::Failure(opendnp3::LinkContext&)@plt
function _ZN8opendnp315DatabaseBuffers18AssignClassToRangeENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE@plt	opendnp3::DatabaseBuffers::AssignClassToRange(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)@plt
function _ZN8opendnp311Group13Var2C1Ev@plt	opendnp3::Group13Var2::Group13Var2()@plt
function _ZN8opendnp311Group40Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group40Var4::Write(opendnp3::Group40Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp312measurements7IsEventERKNS_16TypedMeasurementIdEES4_d@plt	opendnp3::measurements::IsEvent(opendnp3::TypedMeasurement<double> const&, opendnp3::TypedMeasurement<double> const&, double)@plt
function _ZN8opendnp38OContext23CheckForDeferredRequestEv@plt	opendnp3::OContext::CheckForDeferredRequest()@plt
function _ZN7openpal8UInt48LE4ReadEPKh@plt	openpal::UInt48LE::Read(unsigned char const*)@plt
function _ZN8opendnp318AssignClassHandler11RecordClassENS_14GroupVariationE@plt	opendnp3::AssignClassHandler::RecordClass(opendnp3::GroupVariation)@plt
function _ZN8opendnp315KeyStatusToTypeENS_9KeyStatusE@plt	opendnp3::KeyStatusToType(opendnp3::KeyStatus)@plt
function _ZN8opendnp312HeaderRecordC1ERKNS_20GroupVariationRecordEhj@plt	opendnp3::HeaderRecord::HeaderRecord(opendnp3::GroupVariationRecord const&, unsigned char, unsigned int)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var5ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var5 const&, openpal::RSlice const&)@plt
function _ZN8opendnp311LinkContext16OnLowerLayerDownEv@plt	opendnp3::LinkContext::OnLowerLayerDown()@plt
function _ZN8opendnp311Group30Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group30Var4::Write(opendnp3::Group30Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp322MasterSchedulerBackend20CompareBlockedStatusERKNS0_6RecordES3_@plt	opendnp3::MasterSchedulerBackend::CompareBlockedStatus(opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)@plt
function _ZN8opendnp316APDUHeaderParser12ParseRequestERKN7openpal6RSliceEPNS1_6LoggerE@plt	opendnp3::APDUHeaderParser::ParseRequest(openpal::RSlice const&, openpal::Logger*)@plt
function _ZN8opendnp312Group120Var2C1Ev@plt	opendnp3::Group120Var2::Group120Var2()@plt
function _ZN8opendnp317EmptyResponseTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_12FunctionCodeERKSt8functionIFbRNS_12HeaderWriterEEEN7openpal18MonotonicTimestampENSO_6LoggerERKNS_10TaskConfigE@plt	opendnp3::EmptyResponseTask::EmptyResponseTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, opendnp3::FunctionCode, std::function<bool (opendnp3::HeaderWriter&)> const&, openpal::MonotonicTimestamp, openpal::Logger, opendnp3::TaskConfig const&)@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKt@plt	openpal::Format::Write(openpal::WSlice&, unsigned short const&)@plt
function _ZN8opendnp311Group43Var210ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var2::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZNK8opendnp313Group120Var114SizeEv@plt	opendnp3::Group120Var11::Size() const@plt
function _ZN8opendnp312EventStorage13SelectByClassERKNS_10EventClassEj@plt	opendnp3::EventStorage::SelectByClass(opendnp3::EventClass const&, unsigned int)@plt
function _ZN7openpalltERKNS_18MonotonicTimestampES2_@plt	openpal::operator<(openpal::MonotonicTimestamp const&, openpal::MonotonicTimestamp const&)@plt
function _ZN8opendnp318FunctionCodeToTypeENS_12FunctionCodeE@plt	opendnp3::FunctionCodeToType(opendnp3::FunctionCode)@plt
function _ZN8opendnp38OContext14GetResponseIINEv@plt	opendnp3::OContext::GetResponseIIN()@plt
function __cxa_rethrow@plt	__cxa_rethrow@plt
function _ZN8opendnp39NumParserC1EPFtRN7openpal6RSliceEEh@plt	opendnp3::NumParser::NumParser(unsigned short (*)(openpal::RSlice&), unsigned char)@plt
function _ZN8opendnp39LinkFrame13CalcFrameSizeEh@plt	opendnp3::LinkFrame::CalcFrameSize(unsigned char)@plt
function _ZN8opendnp311LinkContext12SetTxSegmentERNS_17ITransportSegmentE@plt	opendnp3::LinkContext::SetTxSegment(opendnp3::ITransportSegment&)@plt
function _ZN8opendnp311Group11Var2C1Ev@plt	opendnp3::Group11Var2::Group11Var2()@plt
function _ZN8opendnp311EventBuffer14SelectMaxCountENS_14GroupVariationEj@plt	opendnp3::EventBuffer::SelectMaxCount(opendnp3::GroupVariation, unsigned int)@plt
function _ZN7openpal6Format5WriteERNS_6WSliceERKd@plt	openpal::Format::Write(openpal::WSlice&, double const&)@plt
function _ZN7openpal8MaxValueItEET_v@plt	unsigned short openpal::MaxValue<unsigned short>()@plt
function _ZN8opendnp310Group3Var2C1Ev@plt	opendnp3::Group3Var2::Group3Var2()@plt
function _ZN8opendnp311Group32Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group32Var6::Read(openpal::RSlice&, opendnp3::Group32Var6&)@plt
function _ZN8opendnp316LinkHeaderFieldsC1ENS_12LinkFunctionEbbbtt@plt	opendnp3::LinkHeaderFields::LinkHeaderFields(opendnp3::LinkFunction, bool, bool, bool, unsigned short, unsigned short)@plt
function _ZN8opendnp316HMACTypeFromTypeEh@plt	opendnp3::HMACTypeFromType(unsigned char)@plt
function _ZN8opendnp312EventWriters5WriteEhRNS_12HeaderWriterERNS_16IEventCollectionINS_11OctetStringEEE@plt	opendnp3::EventWriters::Write(unsigned char, opendnp3::HeaderWriter&, opendnp3::IEventCollection<opendnp3::OctetString>&)@plt
function _ZN8opendnp311Group42Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var1::Write(opendnp3::Group42Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311IMasterTaskD2Ev@plt	opendnp3::IMasterTask::~IMasterTask()@plt
function _ZN7openpal8MaxValueIjEET_v@plt	unsigned int openpal::MaxValue<unsigned int>()@plt
function _ZN8opendnp313Group120Var134ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var13::Read(openpal::RSlice const&)@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_10AnalogSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::AnalogSpec>()@plt
function _ZN8opendnp312EventStorage5WriteERNS_18IEventWriteHandlerE@plt	opendnp3::EventStorage::Write(opendnp3::IEventWriteHandler&)@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_19DoubleBitBinarySpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::DoubleBitBinarySpec>()@plt
function _ZN8opendnp315DoubleBitBinaryC1Ev@plt	opendnp3::DoubleBitBinary::DoubleBitBinary()@plt
function _ZN8opendnp321EnableUnsolicitedTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorENS_10ClassFieldEN7openpal6LoggerE@plt	opendnp3::EnableUnsolicitedTask::EnableUnsolicitedTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, opendnp3::ClassField, openpal::Logger)@plt
function _ZN8opendnp311Group21Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group21Var6::Read(openpal::RSlice&, opendnp3::Group21Var6&)@plt
function _ZN8opendnp38MContext19StartTask_TaskReadyEv@plt	opendnp3::MContext::StartTask_TaskReady()@plt
function _ZN8opendnp311Group11Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group11Var2::Read(openpal::RSlice&, opendnp3::Group11Var2&)@plt
function _ZN8opendnp310LinkHeader11ControlByteEbbbNS_12LinkFunctionE@plt	opendnp3::LinkHeader::ControlByte(bool, bool, bool, opendnp3::LinkFunction)@plt
function _ZN8opendnp39LinkFrame9FormatAckERN7openpal6WSliceEbbttPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatAck(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)@plt
function _ZN8opendnp310EventLists7GetListINS_10BinarySpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::BinarySpec> >& opendnp3::EventLists::GetList<opendnp3::BinarySpec>()@plt
function _ZN8opendnp310CommandSet18StartHeaderAOInt16Ev@plt	opendnp3::CommandSet::StartHeaderAOInt16()@plt
function _ZN8opendnp311Group23Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group23Var6::Write(opendnp3::Group23Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp312Group120Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group120Var3::Read(openpal::RSlice&, opendnp3::Group120Var3&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var12ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var12 const&, openpal::RSlice const&)@plt
function _ZN8opendnp39LinkFrame25FormatUnconfirmedUserDataERN7openpal6WSliceEbttPKhhPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatUnconfirmedUserData(openpal::WSlice&, bool, unsigned short, unsigned short, unsigned char const*, unsigned char, openpal::Logger*)@plt
function _ZN8opendnp311Group42Var8C1Ev@plt	opendnp3::Group42Var8::Group42Var8()@plt
function _ZN8opendnp310APDUHeader18UnsolicitedConfirmEh@plt	opendnp3::APDUHeader::UnsolicitedConfirm(unsigned char)@plt
function _ZN8opendnp311Group43Var74ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var7::Read(openpal::RSlice&, opendnp3::Group43Var7&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_7CounterEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Counter> > const&)@plt
function _ZN8opendnp311MasterTasks18GetEnableUnsolTaskERKSt10shared_ptrINS_11TaskContextEERKNS_12MasterParamsERKN7openpal6LoggerERNS_18IMasterApplicationE@plt	opendnp3::MasterTasks::GetEnableUnsolTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::MasterParams const&, openpal::Logger const&, opendnp3::IMasterApplication&)@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_10AnalogSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogSpec>()@plt
function _ZN8opendnp310CommandSet21StartHeaderAODouble64Ev@plt	opendnp3::CommandSet::StartHeaderAODouble64()@plt
function _ZN8opendnp312Group120Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group120Var4::Read(openpal::RSlice&, opendnp3::Group120Var4&)@plt
function _ZNK8opendnp312IAPDUHandler6ErrorsEv@plt	opendnp3::IAPDUHandler::Errors() const@plt
function _ZNSt8ios_base4InitC1Ev@plt	std::ios_base::Init::Init()@plt
function _ZN8opendnp323ControlRelayOutputBlockC1EhhjjNS_13CommandStatusE@plt	opendnp3::ControlRelayOutputBlock::ControlRelayOutputBlock(unsigned char, unsigned char, unsigned int, unsigned int, opendnp3::CommandStatus)@plt
function _ZN8opendnp322CommandResponseHandlerC1EhPNS_14ICommandActionEPNS_12HeaderWriterE@plt	opendnp3::CommandResponseHandler::CommandResponseHandler(unsigned char, opendnp3::ICommandAction*, opendnp3::HeaderWriter*)@plt
function _ZN8opendnp38OContext19ProcessRequestNoAckERKNS_13ParsedRequestE@plt	opendnp3::OContext::ProcessRequestNoAck(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp311Group30Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group30Var1::Write(opendnp3::Group30Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group21Var95WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group21Var9::Write(opendnp3::Group21Var9 const&, openpal::WSlice&)@plt
function _ZN8opendnp38MContext22OnResponseTimeoutEventEv@plt	opendnp3::MContext::OnResponseTimeoutEvent()@plt
function _ZN8opendnp311Group42Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var4::Read(openpal::RSlice&, opendnp3::Group42Var4&)@plt
function _ZN8opendnp310Group2Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group2Var2::Read(openpal::RSlice&, opendnp3::Group2Var2&)@plt
function _ZN8opendnp312Group120Var24ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var2::Read(openpal::RSlice const&)@plt
function _ZN8opendnp38MContext25ScheduleRecurringPollTaskERKSt10shared_ptrINS_11IMasterTaskEE@plt	opendnp3::MContext::ScheduleRecurringPollTask(std::shared_ptr<opendnp3::IMasterTask> const&)@plt
function _ZN8opendnp311CountParserC1EtjPFvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEE@plt	opendnp3::CountParser::CountParser(unsigned short, unsigned int, void (*)(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&))@plt
function _ZN8opendnp38OContext17CheckForTaskStartEv@plt	opendnp3::OContext::CheckForTaskStart()@plt
function _ZN8opendnp37IsEventENS_14GroupVariationE@plt	opendnp3::IsEvent(opendnp3::GroupVariation)@plt
function _ZN8opendnp315LANTimeSyncTask19OnResponseWriteTimeERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::LANTimeSyncTask::OnResponseWriteTime(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)@plt
function _ZN8opendnp38OContext19RestartConfirmTimerEv@plt	opendnp3::OContext::RestartConfirmTimer()@plt
function _ZNSt6vectorISt10shared_ptrIN8opendnp314ICommandHeaderEESaIS3_EED1Ev@plt	std::vector<std::shared_ptr<opendnp3::ICommandHeader>, std::allocator<std::shared_ptr<opendnp3::ICommandHeader> > >::~vector()@plt
function _ZN8opendnp318BinaryCommandEventC1ENS_5FlagsE@plt	opendnp3::BinaryCommandEvent::BinaryCommandEvent(opendnp3::Flags)@plt
function _ZN8opendnp311MasterTasks15DemandIntegrityEv@plt	opendnp3::MasterTasks::DemandIntegrity()@plt
function _ZN8opendnp311EventBuffer11IsOverflownEv@plt	opendnp3::EventBuffer::IsOverflown()@plt
function _ZN8opendnp320CommandActionAdapter10CheckStartEv@plt	opendnp3::CommandActionAdapter::CheckStart()@plt
function _ZN8opendnp310Group4Var3C1Ev@plt	opendnp3::Group4Var3::Group4Var3()@plt
function _ZN8opendnp310EventListsC1ERKNS_17EventBufferConfigE@plt	opendnp3::EventLists::EventLists(opendnp3::EventBufferConfig const&)@plt
function _ZNK8opendnp311IMasterTask14ExpirationTimeEv@plt	opendnp3::IMasterTask::ExpirationTime() const@plt
function _ZN8opendnp321KeyChangeMethodToTypeENS_15KeyChangeMethodE@plt	opendnp3::KeyChangeMethodToType(opendnp3::KeyChangeMethod)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16AllObjectsHeaderE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::AllObjectsHeader const&)@plt
function _ZN8opendnp311IMasterTask10OnResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceENS4_18MonotonicTimestampE@plt	opendnp3::IMasterTask::OnResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&, openpal::MonotonicTimestamp)@plt
function _ZN8opendnp311Group13Var210ReadTargetERN7openpal6RSliceERNS_18BinaryCommandEventE@plt	opendnp3::Group13Var2::ReadTarget(openpal::RSlice&, opendnp3::BinaryCommandEvent&)@plt
function _ZN8opendnp310EventLists7GetListINS_22AnalogOutputStatusSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv@plt	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::AnalogOutputStatusSpec> >& opendnp3::EventLists::GetList<opendnp3::AnalogOutputStatusSpec>()@plt
function _ZN8opendnp323CertificateTypeFromTypeEh@plt	opendnp3::CertificateTypeFromType(unsigned char)@plt
function _ZN8opendnp319ControlCodeFromTypeEh@plt	opendnp3::ControlCodeFromType(unsigned char)@plt
function _ZN8opendnp318BinaryOutputStatusC1ENS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::BinaryOutputStatus::BinaryOutputStatus(opendnp3::Flags, openpal::UInt48Type)@plt
function _ZN8opendnp318LinkFunctionToTypeENS_12LinkFunctionE@plt	opendnp3::LinkFunctionToType(opendnp3::LinkFunction)@plt
function _ZN8opendnp311Group50Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group50Var1::Read(openpal::RSlice&, opendnp3::Group50Var1&)@plt
function _ZN8opendnp37CounterC1Ej@plt	opendnp3::Counter::Counter(unsigned int)@plt
function _ZN8opendnp312EventWriting5WriteERNS_10EventListsERNS_18IEventWriteHandlerE@plt	opendnp3::EventWriting::Write(opendnp3::EventLists&, opendnp3::IEventWriteHandler&)@plt
function _ZN8opendnp320GroupVariationRecordC1EhhNS_14GroupVariationENS_18GroupVariationTypeE@plt	opendnp3::GroupVariationRecord::GroupVariationRecord(unsigned char, unsigned char, opendnp3::GroupVariation, opendnp3::GroupVariationType)@plt
function _ZN8opendnp38OContext17ProcessNewRequestERKNS_13ParsedRequestE@plt	opendnp3::OContext::ProcessNewRequest(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp311IMasterTask17OnLowerLayerCloseEN7openpal18MonotonicTimestampE@plt	opendnp3::IMasterTask::OnLowerLayerClose(openpal::MonotonicTimestamp)@plt
function _ZN8opendnp310ClassFieldC1Ev@plt	opendnp3::ClassField::ClassField()@plt
function _ZN8opendnp311Group20Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group20Var5::Write(opendnp3::Group20Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group43Var34ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var3::Read(openpal::RSlice&, opendnp3::Group43Var3&)@plt
function _ZN8opendnp311TransportRx5ResetEv@plt	opendnp3::TransportRx::Reset()@plt
function _ZN8opendnp39NumParser7TwoByteEv@plt	opendnp3::NumParser::TwoByte()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)@plt
function _ZN8opendnp311Group13Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group13Var2::Read(openpal::RSlice&, opendnp3::Group13Var2&)@plt
function _ZN8opendnp312SecurityStatC1Ehtj@plt	opendnp3::SecurityStat::SecurityStat(unsigned char, unsigned short, unsigned int)@plt
function _ZN8opendnp38HasFlagsENS_14GroupVariationE@plt	opendnp3::HasFlags(opendnp3::GroupVariation)@plt
function _ZN8opendnp311Group23Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group23Var6::Read(openpal::RSlice&, opendnp3::Group23Var6&)@plt
function _ZN8opendnp312Group120Var64ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var6::Read(openpal::RSlice const&)@plt
function _ZN8opendnp311Group32Var5C1Ev@plt	opendnp3::Group32Var5::Group32Var5()@plt
function _ZNK8opendnp311EventBuffer19UnwrittenClassFieldEv@plt	opendnp3::EventBuffer::UnwrittenClassField() const@plt
function _ZN8opendnp312PollTaskBase19ProcessMeasurementsERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::PollTaskBase::ProcessMeasurements(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)@plt
function _ZN8opendnp312EventStorage8UnselectEv@plt	opendnp3::EventStorage::Unselect()@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERd@plt	openpal::Parse::Read(openpal::RSlice&, double&)@plt
function _ZN7openpal6RSlice7AdvanceEj@plt	openpal::RSlice::Advance(unsigned int)@plt
function _ZN7openpal6BufferC1Ej@plt	openpal::Buffer::Buffer(unsigned int)@plt
function _ZN8opendnp37logging20ParseAndLogRequestTxERN7openpal6LoggerERKNS1_6RSliceE@plt	opendnp3::logging::ParseAndLogRequestTx(openpal::Logger&, openpal::RSlice const&)@plt
function _ZN8opendnp311CountParser19ParseCountOfObjectsERN7openpal6RSliceERKNS_12HeaderRecordEtPNS1_6LoggerEPNS_12IAPDUHandlerE@plt	opendnp3::CountParser::ParseCountOfObjects(openpal::RSlice&, opendnp3::HeaderRecord const&, unsigned short, openpal::Logger*, opendnp3::IAPDUHandler*)@plt
function _ZN8opendnp38MContext18CompleteActiveTaskEv@plt	opendnp3::MContext::CompleteActiveTask()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_6AnalogEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Analog> > const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_25EventOctetStringVariationEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventOctetStringVariation, unsigned int)@plt
function _ZN8opendnp38OContext25HandleCommandWithConstantERKN7openpal6RSliceERNS_12HeaderWriterENS_13CommandStatusE@plt	opendnp3::OContext::HandleCommandWithConstant(openpal::RSlice const&, opendnp3::HeaderWriter&, opendnp3::CommandStatus)@plt
function _ZN8opendnp314NumBytesInBitsEj@plt	opendnp3::NumBytesInBits(unsigned int)@plt
function memmove@plt	memmove@plt
function _ZN8opendnp311Group20Var1C1Ev@plt	opendnp3::Group20Var1::Group20Var1()@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_10BinarySpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::BinarySpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp311Group30Var64ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group30Var6::Read(openpal::RSlice&, opendnp3::Group30Var6&)@plt
function _ZN8opendnp311Group21Var6C1Ev@plt	opendnp3::Group21Var6::Group21Var6()@plt
function _ZNK7openpal6RSlice6CopyToERNS_6WSliceE@plt	openpal::RSlice::CopyTo(openpal::WSlice&) const@plt
function __cxa_end_catch@plt	__cxa_end_catch@plt
function _ZN8opendnp321LoadWithRangeIteratorINS_10AnalogSpecEN7openpal11UInt8SimpleEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS6_6meas_tEEERNS_5RangeE@plt	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogSpec, openpal::UInt8Simple>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::AnalogSpec::meas_t>&, opendnp3::Range&)@plt
function _ZN8opendnp313StaticWriters3GetENS_30StaticTimeAndIntervalVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticTimeAndIntervalVariation)@plt
function _ZN8opendnp315ResponseContext5ResetEv@plt	opendnp3::ResponseContext::Reset()@plt
function _ZN8opendnp313StaticWriters3GetENS_21StaticAnalogVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticAnalogVariation)@plt
function _ZN8opendnp318MeasurementHandler19ProcessMeasurementsERKN7openpal6RSliceERNS1_6LoggerEPNS_11ISOEHandlerE@plt	opendnp3::MeasurementHandler::ProcessMeasurements(openpal::RSlice const&, openpal::Logger&, opendnp3::ISOEHandler*)@plt
function _ZNK8opendnp312TaskBehavior20CalcNextRetryTimeoutEv@plt	opendnp3::TaskBehavior::CalcNextRetryTimeout() const@plt
function _ZN8opendnp312EventStorage12ClearWrittenEv@plt	opendnp3::EventStorage::ClearWritten()@plt
function _ZN8opendnp311Group43Var7C1Ev@plt	opendnp3::Group43Var7::Group43Var7()@plt
function _ZN8opendnp311EventUpdate6UpdateINS_15OctetStringSpecEEEbRNS_10EventListsERKNS_5EventIT_EE@plt	bool opendnp3::EventUpdate::Update<opendnp3::OctetStringSpec>(opendnp3::EventLists&, opendnp3::Event<opendnp3::OctetStringSpec> const&)@plt
function _ZN8opendnp312EventStorage12SelectByTypeENS_9EventTypeEj@plt	opendnp3::EventStorage::SelectByType(opendnp3::EventType, unsigned int)@plt
function _ZN8opendnp311Group43Var410ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var4::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_22AnalogOutputStatusSpecEEE@plt	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::AnalogOutputStatusSpec> const&)@plt
function _ZN8opendnp311Group50Var1C1Ev@plt	opendnp3::Group50Var1::Group50Var1()@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_12Group120Var3EEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group120Var3> const&)@plt
function _ZN8opendnp313Group120Var144ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var14::Read(openpal::RSlice const&)@plt
function _ZN8opendnp311Group52Var2C1Ev@plt	opendnp3::Group52Var2::Group52Var2()@plt
function _ZNK8opendnp39NumParser8NumBytesEv@plt	opendnp3::NumParser::NumBytes() const@plt
function _ZNSt5dequeIN8opendnp312FunctionCodeESaIS1_EE12emplace_backIJS1_EEEvDpOT_@plt	void std::deque<opendnp3::FunctionCode, std::allocator<opendnp3::FunctionCode> >::emplace_back<opendnp3::FunctionCode>(opendnp3::FunctionCode&&)@plt
function _ZN8opendnp35build18DisableUnsolicitedERNS_11APDURequestEh@plt	opendnp3::build::DisableUnsolicited(opendnp3::APDURequest&, unsigned char)@plt
function _ZN8opendnp317CommandTaskResultC1ENS_14TaskCompletionERKSt6vectorISt10shared_ptrINS_14ICommandHeaderEESaIS5_EE@plt	opendnp3::CommandTaskResult::CommandTaskResult(opendnp3::TaskCompletion, std::vector<std::shared_ptr<opendnp3::ICommandHeader>, std::allocator<std::shared_ptr<opendnp3::ICommandHeader> > > const&)@plt
function _ZN8opendnp311CommandTask22CreateSelectAndOperateERKSt10shared_ptrINS_11TaskContextEEONS_10CommandSetENS_18IndexQualifierModeERNS_18IMasterApplicationERKSt8functionIFvRKNS_18ICommandTaskResultEEERKN7openpal18MonotonicTimestampERKNS_10TaskConfigENSJ_6LoggerE@plt	opendnp3::CommandTask::CreateSelectAndOperate(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::CommandSet&&, opendnp3::IndexQualifierMode, opendnp3::IMasterApplication&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, openpal::MonotonicTimestamp const&, opendnp3::TaskConfig const&, openpal::Logger)@plt
function _ZN8opendnp321LoadWithRangeIteratorINS_11CounterSpecEN7openpal7Bit16LEItEEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS7_6meas_tEEERNS_5RangeE@plt	bool opendnp3::LoadWithRangeIterator<opendnp3::CounterSpec, openpal::Bit16LE<unsigned short> >(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::CounterSpec::meas_t>&, opendnp3::Range&)@plt
function _ZN8opendnp311EventBufferC1ERKNS_17EventBufferConfigE@plt	opendnp3::EventBuffer::EventBuffer(opendnp3::EventBufferConfig const&)@plt
function _ZN8opendnp311Group23Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group23Var1::Write(opendnp3::Group23Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_22BinaryOutputStatusSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::BinaryOutputStatusSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>, bool, opendnp3::BinaryOutputStatusSpec::static_variation_t)@plt
function _ZN8opendnp38OContext19HandleDirectOperateERKN7openpal6RSliceENS_11OperateTypeEPNS_12HeaderWriterE@plt	opendnp3::OContext::HandleDirectOperate(openpal::RSlice const&, opendnp3::OperateType, opendnp3::HeaderWriter*)@plt
function _ZN8opendnp311TransportRxC1ERKN7openpal6LoggerEj@plt	opendnp3::TransportRx::TransportRx(openpal::Logger const&, unsigned int)@plt
function _ZN8opendnp311Group42Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var5::Read(openpal::RSlice&, opendnp3::Group42Var5&)@plt
function _ZN8opendnp311LinkContext19StartKeepAliveTimerERKN7openpal18MonotonicTimestampE@plt	opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)@plt
function _ZN8opendnp311Group32Var6C1Ev@plt	opendnp3::Group32Var6::Group32Var6()@plt
function _ZN8opendnp315DoubleBitBinary8GetFlagsENS_5FlagsENS_9DoubleBitE@plt	opendnp3::DoubleBitBinary::GetFlags(opendnp3::Flags, opendnp3::DoubleBit)@plt
function _ZN8opendnp311MasterTasks10InitializeERNS_16IMasterSchedulerERNS_17IMasterTaskRunnerE@plt	opendnp3::MasterTasks::Initialize(opendnp3::IMasterScheduler&, opendnp3::IMasterTaskRunner&)@plt
function _ZN8opendnp311Group42Var84ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group42Var8::Read(openpal::RSlice&, opendnp3::Group42Var8&)@plt
function _ZN7openpalgtERKNS_18MonotonicTimestampES2_@plt	openpal::operator>(openpal::MonotonicTimestamp const&, openpal::MonotonicTimestamp const&)@plt
function _ZN8opendnp311Group52Var1C1Ev@plt	opendnp3::Group52Var1::Group52Var1()@plt
function _ZN8opendnp311Group23Var1C1Ev@plt	opendnp3::Group23Var1::Group23Var1()@plt
function _ZN7openpal8MaxValueIiEET_v@plt	int openpal::MaxValue<int>()@plt
function _ZN8opendnp37logging21ParseAndLogResponseTxERN7openpal6LoggerERKNS1_6RSliceE@plt	opendnp3::logging::ParseAndLogResponseTx(openpal::Logger&, openpal::RSlice const&)@plt
function _ZN8opendnp319AnalogOutputFloat32C1Ev@plt	opendnp3::AnalogOutputFloat32::AnalogOutputFloat32()@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_19DoubleBitBinarySpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::DoubleBitBinarySpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp312Group120Var84ReadERKN7openpal6RSliceE@plt	opendnp3::Group120Var8::Read(openpal::RSlice const&)@plt
function _ZN8opendnp38OContext20RespondToReadRequestERKNS_13ParsedRequestE@plt	opendnp3::OContext::RespondToReadRequest(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp310APDUParser15ParseSinglePassERKN7openpal6RSliceEPNS1_6LoggerEPNS_12IAPDUHandlerEPNS_10IWhiteListERKNS_14ParserSettingsE@plt	opendnp3::APDUParser::ParseSinglePass(openpal::RSlice const&, openpal::Logger*, opendnp3::IAPDUHandler*, opendnp3::IWhiteList*, opendnp3::ParserSettings const&)@plt
function _ZN8opendnp315LinkLayerParser20ValidateFunctionCodeEv@plt	opendnp3::LinkLayerParser::ValidateFunctionCode()@plt
function _ZN7openpal5Parse4ReadERNS_6RSliceERt@plt	openpal::Parse::Read(openpal::RSlice&, unsigned short&)@plt
function _ZN8opendnp317AnalogOutputInt32C1EiNS_13CommandStatusE@plt	opendnp3::AnalogOutputInt32::AnalogOutputInt32(int, opendnp3::CommandStatus)@plt
function _ZN8opendnp311Group23Var6C1Ev@plt	opendnp3::Group23Var6::Group23Var6()@plt
function _ZN8opendnp310LinkHeader3SetEhttbbbNS_12LinkFunctionE@plt	opendnp3::LinkHeader::Set(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction)@plt
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_15OctetStringSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE@plt	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::OctetStringSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>, bool, opendnp3::OctetStringSpec::static_variation_t)@plt
function _ZN8opendnp311Group10Var2C1Ev@plt	opendnp3::Group10Var2::Group10Var2()@plt
function _ZN8opendnp38OContext14ProcessConfirmERKNS_13ParsedRequestE@plt	opendnp3::OContext::ProcessConfirm(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp38OContext19CheckForUnsolicitedEv@plt	opendnp3::OContext::CheckForUnsolicited()@plt
function _ZN8opendnp311Group11Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group11Var2::Write(opendnp3::Group11Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp311IMasterTask22ValidateSingleResponseERKNS_18APDUResponseHeaderE@plt	opendnp3::IMasterTask::ValidateSingleResponse(opendnp3::APDUResponseHeader const&)@plt
function _ZN8opendnp311Group52Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group52Var2::Read(openpal::RSlice&, opendnp3::Group52Var2&)@plt
function _ZN8opendnp311Group30Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group30Var2::Read(openpal::RSlice&, opendnp3::Group30Var2&)@plt
function _ZN8opendnp311Group22Var2C1Ev@plt	opendnp3::Group22Var2::Group22Var2()@plt
function _ZN8opendnp310Group4Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group4Var2::Write(opendnp3::Group4Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp38OContext14ProcessObjectsERKNS_13ParsedRequestE@plt	opendnp3::OContext::ProcessObjects(opendnp3::ParsedRequest const&)@plt
function _ZN8opendnp37CounterC1EjNS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::Counter::Counter(unsigned int, opendnp3::Flags, openpal::UInt48Type)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)@plt
function _ZN8opendnp311LinkContext22QueueRequestLinkStatusEt@plt	opendnp3::LinkContext::QueueRequestLinkStatus(unsigned short)@plt
function _ZN8opendnp318BinaryCommandEventC1ENS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::BinaryCommandEvent::BinaryCommandEvent(opendnp3::Flags, openpal::UInt48Type)@plt
function _ZNK8opendnp313Group120Var144SizeEv@plt	opendnp3::Group120Var14::Size() const@plt
function _ZN8opendnp312EventWriting9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE@plt	opendnp3::EventWriting::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&)@plt
function _ZN8opendnp311RangeParserC1ERKNS_5RangeEjPFvRKNS_12HeaderRecordES3_RKN7openpal6RSliceERNS_12IAPDUHandlerEE@plt	opendnp3::RangeParser::RangeParser(opendnp3::Range const&, unsigned int, void (*)(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&))@plt
function _ZN8opendnp311Group41Var3C1Ev@plt	opendnp3::Group41Var3::Group41Var3()@plt
function _ZN8opendnp311Group50Var35WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group50Var3::Write(opendnp3::Group50Var3 const&, openpal::WSlice&)@plt
function _ZNK8opendnp314RequestHistory22FullyEqualsLastRequestERKNS_10APDUHeaderERKN7openpal6RSliceE@plt	opendnp3::RequestHistory::FullyEqualsLastRequest(opendnp3::APDUHeader const&, openpal::RSlice const&) const@plt
function _ZN8opendnp312APDUResponseC1ERKN7openpal6WSliceE@plt	opendnp3::APDUResponse::APDUResponse(openpal::WSlice const&)@plt
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311TaskContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@plt	std::_Sp_counted_ptr_inplace<opendnp3::TaskContext, std::allocator<opendnp3::TaskContext>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@plt
function _ZN8opendnp311Group23Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group23Var2::Read(openpal::RSlice&, opendnp3::Group23Var2&)@plt
function _Unwind_Resume@plt	_Unwind_Resume@plt
function _ZN8opendnp311Group22Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group22Var1::Read(openpal::RSlice&, opendnp3::Group22Var1&)@plt
function _ZN8opendnp39OctetData7ToSliceEPKc@plt	opendnp3::OctetData::ToSlice(char const*)@plt
function _ZN8opendnp315DoubleBitBinaryC1ENS_5FlagsEN7openpal10UInt48TypeE@plt	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::Flags, openpal::UInt48Type)@plt
function _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt	std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt
function _ZNSt8_Rb_treeIPKN8opendnp311IMasterTaskES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E@plt	std::_Rb_tree<opendnp3::IMasterTask const*, opendnp3::IMasterTask const*, std::_Identity<opendnp3::IMasterTask const*>, std::less<opendnp3::IMasterTask const*>, std::allocator<opendnp3::IMasterTask const*> >::_M_erase(std::_Rb_tree_node<opendnp3::IMasterTask const*>*)@plt
function _ZN8opendnp310CommandSet15StartHeaderCROBEv@plt	opendnp3::CommandSet::StartHeaderCROB()@plt
function _ZN8opendnp322MasterSchedulerBackend11CompareTimeERKN7openpal18MonotonicTimestampERKNS0_6RecordES7_@plt	opendnp3::MasterSchedulerBackend::CompareTime(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)@plt
function _ZN8opendnp38OContext14ProcessMessageERKNS_7MessageE@plt	opendnp3::OContext::ProcessMessage(opendnp3::Message const&)@plt
function _ZN8opendnp316FreeFormatParser15ParseFreeFormatERFbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerEES3_tRS5_S9_PNS4_6LoggerE@plt	opendnp3::FreeFormatParser::ParseFreeFormat(bool (&)(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*), opendnp3::FreeFormatHeader const&, unsigned short, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*)@plt
function _ZN8opendnp311Group30Var1C1Ev@plt	opendnp3::Group30Var1::Group30Var1()@plt
function _ZN8opendnp39OctetDataC2Ev@plt	opendnp3::OctetData::OctetData()@plt
function _ZN8opendnp311Group50Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group50Var4::Write(opendnp3::Group50Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp318AssignClassHandlerC1ERN7openpal9IExecutorERNS_22IOutstationApplicationERNS_14IClassAssignerE@plt	opendnp3::AssignClassHandler::AssignClassHandler(openpal::IExecutor&, opendnp3::IOutstationApplication&, opendnp3::IClassAssigner&)@plt
function _ZN8opendnp313FrozenCounterC1Ej@plt	opendnp3::FrozenCounter::FrozenCounter(unsigned int)@plt
function _ZN8opendnp311Group42Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var6::Write(opendnp3::Group42Var6 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_15DoubleBitBinaryEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)@plt
function _ZN8opendnp36GetBitERKN7openpal6RSliceEj@plt	opendnp3::GetBit(openpal::RSlice const&, unsigned int)@plt
function _ZN7openpal12TimeDuration7SecondsEl@plt	openpal::TimeDuration::Seconds(long)@plt
function _ZN8opendnp321CommandStatusFromTypeEh@plt	opendnp3::CommandStatusFromType(unsigned char)@plt
function _ZN8opendnp38MContext8TransmitERKN7openpal6RSliceE@plt	opendnp3::MContext::Transmit(openpal::RSlice const&)@plt
function _ZN8opendnp310Group2Var3C1Ev@plt	opendnp3::Group2Var3::Group2Var3()@plt
function _ZZNK8opendnp321TransformedCollectionINS_7IndexedINS_15DoubleBitBinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EEENKUlSH_E_clESH_@plt	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)::operator()(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&) const@plt
function _ZN8opendnp318MeasurementHandler7ConvertERKNS_12Group122Var1E@plt	opendnp3::MeasurementHandler::Convert(opendnp3::Group122Var1 const&)@plt
function _ZN8opendnp314RequestHistory26RecordLastProcessedRequestERKNS_10APDUHeaderERKN7openpal6RSliceE@plt	opendnp3::RequestHistory::RecordLastProcessedRequest(opendnp3::APDUHeader const&, openpal::RSlice const&)@plt
function _ZNSt6vectorISt10shared_ptrIN8opendnp311IMasterTaskEESaIS3_EE19_M_emplace_back_auxIJRKS3_EEEvDpOT_@plt	void std::vector<std::shared_ptr<opendnp3::IMasterTask>, std::allocator<std::shared_ptr<opendnp3::IMasterTask> > >::_M_emplace_back_aux<std::shared_ptr<opendnp3::IMasterTask> const&>(std::shared_ptr<opendnp3::IMasterTask> const&&&)@plt
function _ZN8opendnp315ResponseContext12LoadResponseERNS_12HeaderWriterE@plt	opendnp3::ResponseContext::LoadResponse(opendnp3::HeaderWriter&)@plt
function _ZN8opendnp36BinaryC1Eb@plt	opendnp3::Binary::Binary(bool)@plt
function _ZN8opendnp321LoadWithRangeIteratorINS_22AnalogOutputStatusSpecEN7openpal7Bit16LEItEEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS7_6meas_tEEERNS_5RangeE@plt	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogOutputStatusSpec, openpal::Bit16LE<unsigned short> >(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputStatusSpec::meas_t>&, opendnp3::Range&)@plt
function _ZN8opendnp311Group30Var2C1Ev@plt	opendnp3::Group30Var2::Group30Var2()@plt
function _ZN8opendnp317PLLS_ConfDataWait7FailureERNS_11LinkContextE@plt	opendnp3::PLLS_ConfDataWait::Failure(opendnp3::LinkContext&)@plt
function _ZN8opendnp311Group32Var45WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var4::Write(opendnp3::Group32Var4 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group21Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group21Var2::Write(opendnp3::Group21Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group42Var6C1Ev@plt	opendnp3::Group42Var6::Group42Var6()@plt
function _ZNK8opendnp310ClassField11HasAnyClassEv@plt	opendnp3::ClassField::HasAnyClass() const@plt
function _ZN8opendnp311IMasterTask20OnMessageFormatErrorEN7openpal18MonotonicTimestampE@plt	opendnp3::IMasterTask::OnMessageFormatError(openpal::MonotonicTimestamp)@plt
function _ZN8opendnp39OctetDataC2ERKN7openpal6RSliceE@plt	opendnp3::OctetData::OctetData(openpal::RSlice const&)@plt
function _ZN7openpal6RSliceC1EPKhj@plt	openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt
function _ZN8opendnp311Group43Var3C1Ev@plt	opendnp3::Group43Var3::Group43Var3()@plt
function _ZN8opendnp38OContext7BeginTxEtRKN7openpal6RSliceE@plt	opendnp3::OContext::BeginTx(unsigned short, openpal::RSlice const&)@plt
function _ZN8opendnp311EventBuffer12ClearWrittenEv@plt	opendnp3::EventBuffer::ClearWritten()@plt
function _ZN8opendnp38MContext17OnResponseTimeoutEv@plt	opendnp3::MContext::OnResponseTimeout()@plt
function _ZN8opendnp318BinaryCommandEvent17GetValueFromFlagsENS_5FlagsE@plt	opendnp3::BinaryCommandEvent::GetValueFromFlags(opendnp3::Flags)@plt
function _ZN8opendnp311Group21Var5C1Ev@plt	opendnp3::Group21Var5::Group21Var5()@plt
function _ZN8opendnp311TransportRx14ProcessReceiveERKNS_7MessageE@plt	opendnp3::TransportRx::ProcessReceive(opendnp3::Message const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_6AnalogEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Analog> > const&)@plt
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_15OctetStringSpecEEERNS_5RangeEv@plt	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::OctetStringSpec>()@plt
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_19DoubleBitBinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt	openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::DoubleBitBinarySpec>()@plt
function _ZN8opendnp311Group43Var110ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE@plt	opendnp3::Group43Var1::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)@plt
function _ZN8opendnp310APDUParser14ParseQualifierERN7openpal6RSliceEPNS1_6LoggerERKNS_12HeaderRecordERKNS_14ParserSettingsEPNS_12IAPDUHandlerE@plt	opendnp3::APDUParser::ParseQualifier(openpal::RSlice&, openpal::Logger*, opendnp3::HeaderRecord const&, opendnp3::ParserSettings const&, opendnp3::IAPDUHandler*)@plt
function _ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt	openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)@plt
function _ZN8opendnp318SerialTimeSyncTask19OnResponseDelayMeasERKNS_18APDUResponseHeaderERKN7openpal6RSliceE@plt	opendnp3::SerialTimeSyncTask::OnResponseDelayMeas(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)@plt
function _ZN8opendnp311Group32Var8C1Ev@plt	opendnp3::Group32Var8::Group32Var8()@plt
function _ZN8opendnp311Group41Var4C1Ev@plt	opendnp3::Group41Var4::Group41Var4()@plt
function _ZN8opendnp311Group23Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group23Var1::Read(openpal::RSlice&, opendnp3::Group23Var1&)@plt
function _ZN7openpal8TimerRef11StartActionERKNS_12TimeDurationERKSt8functionIFvvEE@plt	openpal::TimerRef::StartAction(openpal::TimeDuration const&, std::function<void ()> const&)@plt
function _ZN8opendnp312Group121Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group121Var1::Read(openpal::RSlice&, opendnp3::Group121Var1&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_11OctetStringEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::OctetString> > const&)@plt
function _ZN8opendnp320GroupVariationRecord7GetTypeEhh@plt	opendnp3::GroupVariationRecord::GetType(unsigned char, unsigned char)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_11OctetStringEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::OctetString> > const&)@plt
function _ZN8opendnp322MasterSchedulerBackend12TimeoutTasksEv@plt	opendnp3::MasterSchedulerBackend::TimeoutTasks()@plt
function _ZN8opendnp311Group40Var3C1Ev@plt	opendnp3::Group40Var3::Group40Var3()@plt
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_@plt	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record&&)@plt
function _ZN8opendnp318AnalogOutputStatusC1Ev@plt	opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt
function _ZN8opendnp311Group21Var14ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group21Var1::Read(openpal::RSlice&, opendnp3::Group21Var1&)@plt
function _ZN8opendnp312EventStorageC1ERKNS_17EventBufferConfigE@plt	opendnp3::EventStorage::EventStorage(opendnp3::EventBufferConfig const&)@plt
function _ZN8opendnp312HeaderWriter11WriteHeaderENS_16GroupVariationIDENS_13QualifierCodeE@plt	opendnp3::HeaderWriter::WriteHeader(opendnp3::GroupVariationID, opendnp3::QualifierCode)@plt
function _ZN8opendnp39LinkFrame21FormatResetLinkStatesERN7openpal6WSliceEbttPNS1_6LoggerE@plt	opendnp3::LinkFrame::FormatResetLinkStates(openpal::WSlice&, bool, unsigned short, unsigned short, openpal::Logger*)@plt
function _ZN8opendnp318AssignClassHandler18ProcessAssignRangeENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE@plt	opendnp3::AssignClassHandler::ProcessAssignRange(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogOutputStatusEEEEE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus> > const&)@plt
function _ZN8opendnp320LinkFunctionToStringENS_12LinkFunctionE@plt	opendnp3::LinkFunctionToString(opendnp3::LinkFunction)@plt
function _ZN8opendnp310APDUHeader16SolicitedConfirmEh@plt	opendnp3::APDUHeader::SolicitedConfirm(unsigned char)@plt
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE@plt	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)@plt
function _ZN8opendnp311Group41Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group41Var4::Read(openpal::RSlice&, opendnp3::Group41Var4&)@plt
function _ZN8opendnp311EventRecordC1EtNS_10EventClassE@plt	opendnp3::EventRecord::EventRecord(unsigned short, opendnp3::EventClass)@plt
function _ZN8opendnp313StaticWriters3GetENS_21StaticBinaryVariationE@plt	opendnp3::StaticWriters::Get(opendnp3::StaticBinaryVariation)@plt
function _ZN8opendnp39OctetData3SetERKN7openpal6RSliceE@plt	opendnp3::OctetData::Set(openpal::RSlice const&)@plt
function _ZNK8opendnp311APDUWrapper10GetControlEv@plt	opendnp3::APDUWrapper::GetControl() const@plt
function _ZN8opendnp315TransportHeader6ToByteEbbh@plt	opendnp3::TransportHeader::ToByte(bool, bool, unsigned char)@plt
function _ZN8opendnp316CountIndexParserC1EtjRKNS_9NumParserEPFvRKNS_12HeaderRecordEtS3_RKN7openpal6RSliceERNS_12IAPDUHandlerEE@plt	opendnp3::CountIndexParser::CountIndexParser(unsigned short, unsigned int, opendnp3::NumParser const&, void (*)(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&))@plt
function _ZN8opendnp36HeaderC1Ehht@plt	opendnp3::Header::Header(unsigned char, unsigned char, unsigned short)@plt
function _ZNK8opendnp311RangeParser7ProcessERKNS_12HeaderRecordERN7openpal6RSliceEPNS_12IAPDUHandlerEPNS4_6LoggerE@plt	opendnp3::RangeParser::Process(opendnp3::HeaderRecord const&, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*) const@plt
function _ZN8opendnp36HeaderC1Ehhtt@plt	opendnp3::Header::Header(unsigned char, unsigned char, unsigned short, unsigned short)@plt
function _ZN8opendnp36AnalogC1Ed@plt	opendnp3::Analog::Analog(double)@plt
function _ZNK8opendnp313Group120Var104SizeEv@plt	opendnp3::Group120Var10::Size() const@plt
function _ZN8opendnp38MContext4ScanERKSt8functionIFbRNS_12HeaderWriterEEENS_10TaskConfigE@plt	opendnp3::MContext::Scan(std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskConfig)@plt
function _ZN8opendnp311Group23Var2C1Ev@plt	opendnp3::Group23Var2::Group23Var2()@plt
function _ZN8opendnp311Group13Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group13Var1::Write(opendnp3::Group13Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp315ShiftableBuffer4SyncERj@plt	opendnp3::ShiftableBuffer::Sync(unsigned int&)@plt
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_@plt	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record&&)@plt
function _ZN8opendnp311Group21Var15WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group21Var1::Write(opendnp3::Group21Var1 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group21Var2C1Ev@plt	opendnp3::Group21Var2::Group21Var2()@plt
function _ZNK8opendnp311TaskContext9IsBlockedERKNS_11IMasterTaskE@plt	opendnp3::TaskContext::IsBlocked(opendnp3::IMasterTask const&) const@plt
function _ZNK8opendnp311IMasterTask19StartExpirationTimeEv@plt	opendnp3::IMasterTask::StartExpirationTime() const@plt
function _ZN8opendnp311APDUWrapper11SetFunctionENS_12FunctionCodeE@plt	opendnp3::APDUWrapper::SetFunction(opendnp3::FunctionCode)@plt
function _ZN8opendnp311Group32Var75WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group32Var7::Write(opendnp3::Group32Var7 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group43Var44ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group43Var4::Read(openpal::RSlice&, opendnp3::Group43Var4&)@plt
function _ZNK8opendnp310ClassField12HasEventTypeENS_10EventClassE@plt	opendnp3::ClassField::HasEventType(opendnp3::EventClass) const@plt
function _ZN8opendnp320CommandActionAdapterD1Ev@plt	opendnp3::CommandActionAdapter::~CommandActionAdapter()@plt
function _ZdaPvm@plt	operator delete[](void*, unsigned long)@plt
function _ZN8opendnp38OContext23HandleEnableUnsolicitedERKN7openpal6RSliceERNS_12HeaderWriterE@plt	opendnp3::OContext::HandleEnableUnsolicited(openpal::RSlice const&, opendnp3::HeaderWriter&)@plt
function _ZN8opendnp312Group21Var1010ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE@plt	opendnp3::Group21Var10::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)@plt
function _ZN8opendnp318BinaryOutputStatusC1Eb@plt	opendnp3::BinaryOutputStatus::BinaryOutputStatus(bool)@plt
function _ZN8opendnp311LinkContext10PushDataUpERKNS_7MessageE@plt	opendnp3::LinkContext::PushDataUp(opendnp3::Message const&)@plt
function _ZNK8opendnp312HeaderRecord16GetQualifierCodeEv@plt	opendnp3::HeaderRecord::GetQualifierCode() const@plt
function _ZNK8opendnp315ResponseContext12HasSelectionEv@plt	opendnp3::ResponseContext::HasSelection() const@plt
function _ZN8opendnp311Group22Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group22Var5::Write(opendnp3::Group22Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group21Var54ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group21Var5::Read(openpal::RSlice&, opendnp3::Group21Var5&)@plt
function _ZNK8opendnp312Group120Var64SizeEv@plt	opendnp3::Group120Var6::Size() const@plt
function _ZN7openpal6WSliceC1Ev@plt	openpal::WSlice::WSlice()@plt
function _ZN8opendnp311Group40Var24ReadERN7openpal6RSliceERS0_@plt	opendnp3::Group40Var2::Read(openpal::RSlice&, opendnp3::Group40Var2&)@plt
function _ZN8opendnp38Database14TryCreateEventINS_15OctetStringSpecEEEvRNS_4CellIT_EERKNS4_6meas_tE@plt	void opendnp3::Database::TryCreateEvent<opendnp3::OctetStringSpec>(opendnp3::Cell<opendnp3::OctetStringSpec>&, opendnp3::OctetStringSpec::meas_t const&)@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_11CounterSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::CounterSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp311Group40Var25WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group40Var2::Write(opendnp3::Group40Var2 const&, openpal::WSlice&)@plt
function _ZN8opendnp311Group22Var65WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group22Var6::Write(opendnp3::Group22Var6 const&, openpal::WSlice&)@plt
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@plt	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@plt
function _ZN8opendnp311Group43Var55WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group43Var5::Write(opendnp3::Group43Var5 const&, openpal::WSlice&)@plt
function _ZN8opendnp311IndexSearch12FindRawRangeINS_22BinaryOutputStatusSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_@plt	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::BinaryOutputStatusSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short> const&, opendnp3::Range const&)@plt
function _ZN8opendnp311Group42Var85WriteERKS0_RN7openpal6WSliceE@plt	opendnp3::Group42Var8::Write(opendnp3::Group42Var8 const&, openpal::WSlice&)@plt
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var11ERKN7openpal6RSliceE@plt	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var11 const&, openpal::RSlice const&)@plt
sec: .plt.got
sec: .text
function _GLOBAL__sub_I_AppControlField.cpp	_GLOBAL__sub_I_AppControlField.cpp
function _GLOBAL__sub_I_PriLinkLayerStates.cpp	_GLOBAL__sub_I_PriLinkLayerStates.cpp
function _GLOBAL__sub_I_SecLinkLayerStates.cpp	_GLOBAL__sub_I_SecLinkLayerStates.cpp
function _GLOBAL__sub_I_ShiftableBuffer.cpp	_GLOBAL__sub_I_ShiftableBuffer.cpp
function _GLOBAL__sub_I_ClearRestartTask.cpp	_GLOBAL__sub_I_ClearRestartTask.cpp
function _GLOBAL__sub_I_DisableUnsolicitedTask.cpp	_GLOBAL__sub_I_DisableUnsolicitedTask.cpp
function _GLOBAL__sub_I_EnableUnsolicitedTask.cpp	_GLOBAL__sub_I_EnableUnsolicitedTask.cpp
function _GLOBAL__sub_I_EventScanTask.cpp	_GLOBAL__sub_I_EventScanTask.cpp
function _GLOBAL__sub_I_MasterContext.cpp	_GLOBAL__sub_I_MasterContext.cpp
function _GLOBAL__sub_I_MasterTasks.cpp	_GLOBAL__sub_I_MasterTasks.cpp
function _GLOBAL__sub_I_StartupIntegrityPoll.cpp	_GLOBAL__sub_I_StartupIntegrityPoll.cpp
function _GLOBAL__sub_I_Group30.cpp	_GLOBAL__sub_I_Group30.cpp
function _GLOBAL__sub_I_Group32.cpp	_GLOBAL__sub_I_Group32.cpp
function _GLOBAL__sub_I_Group40.cpp	_GLOBAL__sub_I_Group40.cpp
function _GLOBAL__sub_I_Group42.cpp	_GLOBAL__sub_I_Group42.cpp
function _GLOBAL__sub_I_Group43.cpp	_GLOBAL__sub_I_Group43.cpp
function _GLOBAL__sub_I_ASDUEventWriteHandler.cpp	_GLOBAL__sub_I_ASDUEventWriteHandler.cpp
function _GLOBAL__sub_I_EventStorage.cpp	_GLOBAL__sub_I_EventStorage.cpp
function _GLOBAL__sub_I_EventWriters.cpp	_GLOBAL__sub_I_EventWriters.cpp
function _GLOBAL__sub_I_OutstationContext.cpp	_GLOBAL__sub_I_OutstationContext.cpp
function _GLOBAL__sub_I_OutstationStates.cpp	_GLOBAL__sub_I_OutstationStates.cpp
function _GLOBAL__sub_I_StaticWriters.cpp	_GLOBAL__sub_I_StaticWriters.cpp
function deregister_tm_clones	deregister_tm_clones
function register_tm_clones	register_tm_clones
function __do_global_dtors_aux	__do_global_dtors_aux
function frame_dummy	frame_dummy
function _ZN8opendnp318AnalogCommandEventC1Ev	opendnp3::AnalogCommandEvent::AnalogCommandEvent()
function _ZN8opendnp318AnalogCommandEventC2EdNS_13CommandStatusE	opendnp3::AnalogCommandEvent::AnalogCommandEvent(double, opendnp3::CommandStatus)
function _ZN8opendnp318AnalogCommandEventC1EdNS_13CommandStatusEN7openpal10UInt48TypeE	opendnp3::AnalogCommandEvent::AnalogCommandEvent(double, opendnp3::CommandStatus, openpal::UInt48Type)
function _ZNK8opendnp318AnalogCommandEventeqERKS0_	opendnp3::AnalogCommandEvent::operator==(opendnp3::AnalogCommandEvent const&) const
function _ZN8opendnp317AnalogOutputInt16C2Es	opendnp3::AnalogOutputInt16::AnalogOutputInt16(short)
function _ZN8opendnp317AnalogOutputInt16C1EsNS_13CommandStatusE	opendnp3::AnalogOutputInt16::AnalogOutputInt16(short, opendnp3::CommandStatus)
function _ZN8opendnp317AnalogOutputInt16C2Ev	opendnp3::AnalogOutputInt16::AnalogOutputInt16()
function _ZNK8opendnp317AnalogOutputInt16eqERKS0_	opendnp3::AnalogOutputInt16::operator==(opendnp3::AnalogOutputInt16 const&) const
function _ZN8opendnp317AnalogOutputInt32C1Ei	opendnp3::AnalogOutputInt32::AnalogOutputInt32(int)
function _ZN8opendnp317AnalogOutputInt32C2EiNS_13CommandStatusE	opendnp3::AnalogOutputInt32::AnalogOutputInt32(int, opendnp3::CommandStatus)
function _ZN8opendnp317AnalogOutputInt32C1Ev	opendnp3::AnalogOutputInt32::AnalogOutputInt32()
function _ZNK8opendnp317AnalogOutputInt32eqERKS0_	opendnp3::AnalogOutputInt32::operator==(opendnp3::AnalogOutputInt32 const&) const
function _ZN8opendnp319AnalogOutputFloat32C2Ef	opendnp3::AnalogOutputFloat32::AnalogOutputFloat32(float)
function _ZN8opendnp319AnalogOutputFloat32C2EfNS_13CommandStatusE	opendnp3::AnalogOutputFloat32::AnalogOutputFloat32(float, opendnp3::CommandStatus)
function _ZN8opendnp319AnalogOutputFloat32C2Ev	opendnp3::AnalogOutputFloat32::AnalogOutputFloat32()
function _ZNK8opendnp319AnalogOutputFloat32eqERKS0_	opendnp3::AnalogOutputFloat32::operator==(opendnp3::AnalogOutputFloat32 const&) const
function _ZN8opendnp320AnalogOutputDouble64C2Ed	opendnp3::AnalogOutputDouble64::AnalogOutputDouble64(double)
function _ZN8opendnp320AnalogOutputDouble64C1EdNS_13CommandStatusE	opendnp3::AnalogOutputDouble64::AnalogOutputDouble64(double, opendnp3::CommandStatus)
function _ZN8opendnp320AnalogOutputDouble64C2Ev	opendnp3::AnalogOutputDouble64::AnalogOutputDouble64()
function _ZNK8opendnp320AnalogOutputDouble64eqERKS0_	opendnp3::AnalogOutputDouble64::operator==(opendnp3::AnalogOutputDouble64 const&) const
function _ZN8opendnp35build14ReadAllObjectsERNS_11APDURequestENS_16GroupVariationIDEh	opendnp3::build::ReadAllObjects(opendnp3::APDURequest&, opendnp3::GroupVariationID, unsigned char)
function _ZN8opendnp35build17WriteClassHeadersERNS_12HeaderWriterERKNS_10ClassFieldE	opendnp3::build::WriteClassHeaders(opendnp3::HeaderWriter&, opendnp3::ClassField const&)
function _ZN8opendnp35build12ClassRequestERNS_11APDURequestENS_12FunctionCodeERKNS_10ClassFieldEh	opendnp3::build::ClassRequest(opendnp3::APDURequest&, opendnp3::FunctionCode, opendnp3::ClassField const&, unsigned char)
function _ZN8opendnp35build13ReadIntegrityERNS_11APDURequestERKNS_10ClassFieldEh	opendnp3::build::ReadIntegrity(opendnp3::APDURequest&, opendnp3::ClassField const&, unsigned char)
function _ZN8opendnp35build18DisableUnsolicitedERNS_11APDURequestEh	opendnp3::build::DisableUnsolicited(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp35build17EnableUnsolicitedERNS_11APDURequestERKNS_10ClassFieldEh	opendnp3::build::EnableUnsolicited(opendnp3::APDURequest&, opendnp3::ClassField const&, unsigned char)
function _ZN8opendnp35build15ClearRestartIINERNS_11APDURequestEh	opendnp3::build::ClearRestartIIN(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp35build12MeasureDelayERNS_11APDURequestEh	opendnp3::build::MeasureDelay(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp35build17RecordCurrentTimeERNS_11APDURequestEh	opendnp3::build::RecordCurrentTime(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp35build15NullUnsolicitedERNS_12APDUResponseEhRKNS_8IINFieldE	opendnp3::build::NullUnsolicited(opendnp3::APDUResponse&, unsigned char, opendnp3::IINField const&)
function _ZN8opendnp310APDUHeader7ConfirmEhb	opendnp3::APDUHeader::Confirm(unsigned char, bool)
function _ZN8opendnp310APDUHeader16SolicitedConfirmEh	opendnp3::APDUHeader::SolicitedConfirm(unsigned char)
function _ZN8opendnp310APDUHeader18UnsolicitedConfirmEh	opendnp3::APDUHeader::UnsolicitedConfirm(unsigned char)
function _ZN8opendnp37logging9LogHeaderERN7openpal6LoggerEiRKNS_10APDUHeaderE	opendnp3::logging::LogHeader(openpal::Logger&, int, opendnp3::APDUHeader const&)
function _ZN8opendnp37logging9LogHeaderERN7openpal6LoggerEiRKNS_18APDUResponseHeaderE	opendnp3::logging::LogHeader(openpal::Logger&, int, opendnp3::APDUResponseHeader const&)
function _ZN8opendnp37logging20ParseAndLogRequestTxERN7openpal6LoggerERKNS1_6RSliceE	opendnp3::logging::ParseAndLogRequestTx(openpal::Logger&, openpal::RSlice const&)
function _ZN8opendnp37logging21ParseAndLogResponseTxERN7openpal6LoggerERKNS1_6RSliceE	opendnp3::logging::ParseAndLogResponseTx(openpal::Logger&, openpal::RSlice const&)
function _ZN8opendnp311APDURequestC1ERKN7openpal6WSliceE	opendnp3::APDURequest::APDURequest(openpal::WSlice const&)
function _ZN8opendnp311APDURequest15ConfigureHeaderENS_12FunctionCodeEh	opendnp3::APDURequest::ConfigureHeader(opendnp3::FunctionCode, unsigned char)
function _ZN8opendnp312APDUResponseC2ERKN7openpal6WSliceE	opendnp3::APDUResponse::APDUResponse(openpal::WSlice const&)
function _ZN8opendnp312APDUResponse6SetIINERKNS_8IINFieldE	opendnp3::APDUResponse::SetIIN(opendnp3::IINField const&)
function _ZNK8opendnp312APDUResponse6GetIINEv	opendnp3::APDUResponse::GetIIN() const
function _ZN8opendnp311APDUWrapperC2Ev	opendnp3::APDUWrapper::APDUWrapper()
function _ZN8opendnp311APDUWrapperC2ERKN7openpal6WSliceE	opendnp3::APDUWrapper::APDUWrapper(openpal::WSlice const&)
function _ZNK8opendnp311APDUWrapper7IsValidEv	opendnp3::APDUWrapper::IsValid() const
function _ZN8opendnp311APDUWrapper9GetWriterEv	opendnp3::APDUWrapper::GetWriter()
function _ZNK8opendnp311APDUWrapper9RemainingEv	opendnp3::APDUWrapper::Remaining() const
function _ZN8opendnp311APDUWrapper11SetFunctionENS_12FunctionCodeE	opendnp3::APDUWrapper::SetFunction(opendnp3::FunctionCode)
function _ZNK8opendnp311APDUWrapper11GetFunctionEv	opendnp3::APDUWrapper::GetFunction() const
function _ZNK8opendnp311APDUWrapper10GetControlEv	opendnp3::APDUWrapper::GetControl() const
function _ZN8opendnp311APDUWrapper10SetControlENS_15AppControlFieldE	opendnp3::APDUWrapper::SetControl(opendnp3::AppControlField)
function _ZNK8opendnp311APDUWrapper4SizeEv	opendnp3::APDUWrapper::Size() const
function _ZNK8opendnp311APDUWrapper8ToRSliceEv	opendnp3::APDUWrapper::ToRSlice() const
function _ZN8opendnp315AppControlFieldC2Eh	opendnp3::AppControlField::AppControlField(unsigned char)
function _ZN8opendnp315AppControlFieldC1Ebbbbh	opendnp3::AppControlField::AppControlField(bool, bool, bool, bool, unsigned char)
function _ZN8opendnp315AppControlField7RequestEh	opendnp3::AppControlField::Request(unsigned char)
function _ZNK8opendnp315AppControlField6ToByteEv	opendnp3::AppControlField::ToByte() const
function _ZN8opendnp318BinaryCommandEventC1Ev	opendnp3::BinaryCommandEvent::BinaryCommandEvent()
function _ZN8opendnp318BinaryCommandEventC1EbNS_13CommandStatusE	opendnp3::BinaryCommandEvent::BinaryCommandEvent(bool, opendnp3::CommandStatus)
function _ZN8opendnp318BinaryCommandEventC1EbNS_13CommandStatusEN7openpal10UInt48TypeE	opendnp3::BinaryCommandEvent::BinaryCommandEvent(bool, opendnp3::CommandStatus, openpal::UInt48Type)
function _ZNK8opendnp318BinaryCommandEvent8GetFlagsEv	opendnp3::BinaryCommandEvent::GetFlags() const
function _ZNK8opendnp318BinaryCommandEventeqERKS0_	opendnp3::BinaryCommandEvent::operator==(opendnp3::BinaryCommandEvent const&) const
function _ZN8opendnp318BinaryCommandEvent17GetValueFromFlagsENS_5FlagsE	opendnp3::BinaryCommandEvent::GetValueFromFlags(opendnp3::Flags)
function _ZN8opendnp318BinaryCommandEvent18GetStatusFromFlagsENS_5FlagsE	opendnp3::BinaryCommandEvent::GetStatusFromFlags(opendnp3::Flags)
function _ZN8opendnp318BinaryCommandEventC1ENS_5FlagsE	opendnp3::BinaryCommandEvent::BinaryCommandEvent(opendnp3::Flags)
function _ZN8opendnp318BinaryCommandEventC2ENS_5FlagsEN7openpal10UInt48TypeE	opendnp3::BinaryCommandEvent::BinaryCommandEvent(opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp310ClassFieldC1Ev	opendnp3::ClassField::ClassField()
function _ZN8opendnp310ClassField4NoneEv	opendnp3::ClassField::None()
function _ZN8opendnp310ClassFieldC2ENS_10PointClassE	opendnp3::ClassField::ClassField(opendnp3::PointClass)
function _ZN8opendnp310ClassFieldC2Ebbbb	opendnp3::ClassField::ClassField(bool, bool, bool, bool)
function _ZN8opendnp310ClassFieldC2ENS_10EventClassE	opendnp3::ClassField::ClassField(opendnp3::EventClass)
function _ZN8opendnp310ClassFieldC1Eh	opendnp3::ClassField::ClassField(unsigned char)
function _ZN8opendnp310ClassField10AllClassesEv	opendnp3::ClassField::AllClasses()
function _ZN8opendnp310ClassField15AllEventClassesEv	opendnp3::ClassField::AllEventClasses()
function _ZNK8opendnp310ClassField7IsEmptyEv	opendnp3::ClassField::IsEmpty() const
function _ZNK8opendnp310ClassField10IntersectsERKS0_	opendnp3::ClassField::Intersects(opendnp3::ClassField const&) const
function _ZNK8opendnp310ClassField16OnlyEventClassesEv	opendnp3::ClassField::OnlyEventClasses() const
function _ZN8opendnp310ClassField3SetENS_10PointClassE	opendnp3::ClassField::Set(opendnp3::PointClass)
function _ZN8opendnp310ClassField5ClearERKS0_	opendnp3::ClassField::Clear(opendnp3::ClassField const&)
function _ZN8opendnp310ClassField3SetERKS0_	opendnp3::ClassField::Set(opendnp3::ClassField const&)
function _ZNK8opendnp310ClassField9HasClass0Ev	opendnp3::ClassField::HasClass0() const
function _ZNK8opendnp310ClassField9HasClass1Ev	opendnp3::ClassField::HasClass1() const
function _ZNK8opendnp310ClassField9HasClass2Ev	opendnp3::ClassField::HasClass2() const
function _ZNK8opendnp310ClassField9HasClass3Ev	opendnp3::ClassField::HasClass3() const
function _ZNK8opendnp310ClassField12HasEventTypeENS_10EventClassE	opendnp3::ClassField::HasEventType(opendnp3::EventClass) const
function _ZNK8opendnp310ClassField13HasEventClassEv	opendnp3::ClassField::HasEventClass() const
function _ZNK8opendnp310ClassField11HasAnyClassEv	opendnp3::ClassField::HasAnyClass() const
function _ZN8opendnp323ControlRelayOutputBlockC1ENS_11ControlCodeEhjjNS_13CommandStatusE	opendnp3::ControlRelayOutputBlock::ControlRelayOutputBlock(opendnp3::ControlCode, unsigned char, unsigned int, unsigned int, opendnp3::CommandStatus)
function _ZN8opendnp323ControlRelayOutputBlockC1EhhjjNS_13CommandStatusE	opendnp3::ControlRelayOutputBlock::ControlRelayOutputBlock(unsigned char, unsigned char, unsigned int, unsigned int, opendnp3::CommandStatus)
function _ZN8opendnp312measurements7IsEventERKNS_16TypedMeasurementIdEES4_d	opendnp3::measurements::IsEvent(opendnp3::TypedMeasurement<double> const&, opendnp3::TypedMeasurement<double> const&, double)
function _ZN8opendnp39Functions15IsNoAckFuncCodeENS_12FunctionCodeE	opendnp3::Functions::IsNoAckFuncCode(opendnp3::FunctionCode)
function _ZN8opendnp320GroupVariationRecordC2EhhNS_14GroupVariationENS_18GroupVariationTypeE	opendnp3::GroupVariationRecord::GroupVariationRecord(unsigned char, unsigned char, opendnp3::GroupVariation, opendnp3::GroupVariationType)
function _ZN8opendnp312HeaderRecordC1ERKNS_20GroupVariationRecordEhj	opendnp3::HeaderRecord::HeaderRecord(opendnp3::GroupVariationRecord const&, unsigned char, unsigned int)
function _ZNK8opendnp312HeaderRecord16GetQualifierCodeEv	opendnp3::HeaderRecord::GetQualifierCode() const
function _ZN8opendnp320GroupVariationRecord11GetGroupVarEhh	opendnp3::GroupVariationRecord::GetGroupVar(unsigned char, unsigned char)
function _ZN8opendnp320GroupVariationRecord7GetTypeEhh	opendnp3::GroupVariationRecord::GetType(unsigned char, unsigned char)
function _ZN8opendnp320GroupVariationRecord14GetEnumAndTypeEhh	opendnp3::GroupVariationRecord::GetEnumAndType(unsigned char, unsigned char)
function _ZN8opendnp320GroupVariationRecord9GetRecordEhh	opendnp3::GroupVariationRecord::GetRecord(unsigned char, unsigned char)
function _ZN8opendnp312HeaderWriterC2EPN7openpal6WSliceE	opendnp3::HeaderWriter::HeaderWriter(openpal::WSlice*)
function _ZNK8opendnp312HeaderWriter9RemainingEv	opendnp3::HeaderWriter::Remaining() const
function _ZN8opendnp312HeaderWriter4MarkEv	opendnp3::HeaderWriter::Mark()
function _ZN8opendnp312HeaderWriter8RollbackEv	opendnp3::HeaderWriter::Rollback()
function _ZN8opendnp312HeaderWriter11WriteHeaderENS_16GroupVariationIDENS_13QualifierCodeE	opendnp3::HeaderWriter::WriteHeader(opendnp3::GroupVariationID, opendnp3::QualifierCode)
function _ZN8opendnp312HeaderWriter22WriteHeaderWithReserveENS_16GroupVariationIDENS_13QualifierCodeEj	opendnp3::HeaderWriter::WriteHeaderWithReserve(opendnp3::GroupVariationID, opendnp3::QualifierCode, unsigned int)
function _ZN8opendnp312HeaderWriter15WriteFreeFormatERKNS_15IVariableLengthE	opendnp3::HeaderWriter::WriteFreeFormat(opendnp3::IVariableLength const&)
function _ZNK8opendnp38IINField5IsSetENS_6IINBitE	opendnp3::IINField::IsSet(opendnp3::IINBit) const
function _ZN8opendnp38IINField6SetBitENS_6IINBitE	opendnp3::IINField::SetBit(opendnp3::IINBit)
function _ZN8opendnp38IINField8ClearBitENS_6IINBitE	opendnp3::IINField::ClearBit(opendnp3::IINBit)
function _ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb	opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)
function _ZNK8opendnp38IINFieldeqERKS0_	opendnp3::IINField::operator==(opendnp3::IINField const&) const
function _ZN8opendnp315DoubleBitBinaryC2Ev	opendnp3::DoubleBitBinary::DoubleBitBinary()
function _ZN8opendnp315DoubleBitBinary8GetValueENS_5FlagsE	opendnp3::DoubleBitBinary::GetValue(opendnp3::Flags)
function _ZN8opendnp315DoubleBitBinaryC1ENS_5FlagsE	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::Flags)
function _ZN8opendnp315DoubleBitBinaryC1ENS_5FlagsEN7openpal10UInt48TypeE	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp315DoubleBitBinary8GetFlagsENS_5FlagsENS_9DoubleBitE	opendnp3::DoubleBitBinary::GetFlags(opendnp3::Flags, opendnp3::DoubleBit)
function _ZN8opendnp315DoubleBitBinaryC1ENS_9DoubleBitE	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::DoubleBit)
function _ZN8opendnp315DoubleBitBinaryC2ENS_9DoubleBitENS_5FlagsE	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::DoubleBit, opendnp3::Flags)
function _ZN8opendnp315DoubleBitBinaryC2ENS_9DoubleBitENS_5FlagsEN7openpal10UInt48TypeE	opendnp3::DoubleBitBinary::DoubleBitBinary(opendnp3::DoubleBit, opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp36BinaryC1Ev	opendnp3::Binary::Binary()
function _ZN8opendnp318BinaryOutputStatusC1Eb	opendnp3::BinaryOutputStatus::BinaryOutputStatus(bool)
function _ZN8opendnp318BinaryOutputStatusC1ENS_5FlagsE	opendnp3::BinaryOutputStatus::BinaryOutputStatus(opendnp3::Flags)
function _ZN8opendnp318BinaryOutputStatusC2ENS_5FlagsEN7openpal10UInt48TypeE	opendnp3::BinaryOutputStatus::BinaryOutputStatus(opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp318BinaryOutputStatusC1EbNS_5FlagsE	opendnp3::BinaryOutputStatus::BinaryOutputStatus(bool, opendnp3::Flags)
function _ZN8opendnp36BinaryC1EbNS_5FlagsEN7openpal10UInt48TypeE	opendnp3::Binary::Binary(bool, opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp37CounterC1Ev	opendnp3::Counter::Counter()
function _ZN8opendnp313FrozenCounterC1Ej	opendnp3::FrozenCounter::FrozenCounter(unsigned int)
function _ZN8opendnp37CounterC1EjNS_5FlagsE	opendnp3::Counter::Counter(unsigned int, opendnp3::Flags)
function _ZN8opendnp37CounterC1EjNS_5FlagsEN7openpal10UInt48TypeE	opendnp3::Counter::Counter(unsigned int, opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp318AnalogOutputStatusC1Ev	opendnp3::AnalogOutputStatus::AnalogOutputStatus()
function _ZN8opendnp36AnalogC2Ed	opendnp3::Analog::Analog(double)
function _ZN8opendnp318AnalogOutputStatusC2EdNS_5FlagsE	opendnp3::AnalogOutputStatus::AnalogOutputStatus(double, opendnp3::Flags)
function _ZN8opendnp318AnalogOutputStatusC1EdNS_5FlagsEN7openpal10UInt48TypeE	opendnp3::AnalogOutputStatus::AnalogOutputStatus(double, opendnp3::Flags, openpal::UInt48Type)
function _ZN8opendnp315TimeAndIntervalC1Ev	opendnp3::TimeAndInterval::TimeAndInterval()
function _ZN8opendnp315TimeAndIntervalC1EN7openpal10UInt48TypeEjh	opendnp3::TimeAndInterval::TimeAndInterval(openpal::UInt48Type, unsigned int, unsigned char)
function _ZN8opendnp315TimeAndIntervalC1EN7openpal10UInt48TypeEjNS_13IntervalUnitsE	opendnp3::TimeAndInterval::TimeAndInterval(openpal::UInt48Type, unsigned int, opendnp3::IntervalUnits)
function _ZNK8opendnp315TimeAndInterval12GetUnitsEnumEv	opendnp3::TimeAndInterval::GetUnitsEnum() const
function _ZN8opendnp39OctetDataC2Ev	opendnp3::OctetData::OctetData()
function _ZN8opendnp39OctetDataC1ERKN7openpal6RSliceE	opendnp3::OctetData::OctetData(openpal::RSlice const&)
function _ZN8opendnp39OctetData3SetERKN7openpal6RSliceE	opendnp3::OctetData::Set(openpal::RSlice const&)
function _ZN8opendnp39OctetData3SetEPKc	opendnp3::OctetData::Set(char const*)
function _ZNK8opendnp39OctetData8ToRSliceEv	opendnp3::OctetData::ToRSlice() const
function _ZN8opendnp39OctetData7ToSliceEPKc	opendnp3::OctetData::ToSlice(char const*)
function _ZN8opendnp39OctetDataC2EPKc	opendnp3::OctetData::OctetData(char const*)
function _ZN7openpal12StaticBufferILj255EED2Ev	openpal::StaticBuffer<255u>::~StaticBuffer()
function _ZN7openpal12StaticBufferILj255EED0Ev	openpal::StaticBuffer<255u>::~StaticBuffer()
function _ZN8opendnp316APDUHeaderParser12ParseRequestERKN7openpal6RSliceEPNS1_6LoggerE	opendnp3::APDUHeaderParser::ParseRequest(openpal::RSlice const&, openpal::Logger*)
function _ZN8opendnp316APDUHeaderParser13ParseResponseERKN7openpal6RSliceEPNS1_6LoggerE	opendnp3::APDUHeaderParser::ParseResponse(openpal::RSlice const&, openpal::Logger*)
function _ZN8opendnp310APDUParser22HandleAllObjectsHeaderEPN7openpal6LoggerERKNS_12HeaderRecordERKNS_14ParserSettingsEPNS_12IAPDUHandlerE	opendnp3::APDUParser::HandleAllObjectsHeader(openpal::Logger*, opendnp3::HeaderRecord const&, opendnp3::ParserSettings const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp310APDUParser14ParseQualifierERN7openpal6RSliceEPNS1_6LoggerERKNS_12HeaderRecordERKNS_14ParserSettingsEPNS_12IAPDUHandlerE	opendnp3::APDUParser::ParseQualifier(openpal::RSlice&, openpal::Logger*, opendnp3::HeaderRecord const&, opendnp3::ParserSettings const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp310APDUParser11ParseHeaderERN7openpal6RSliceEPNS1_6LoggerEjRKNS_14ParserSettingsEPNS_12IAPDUHandlerEPNS_10IWhiteListE	opendnp3::APDUParser::ParseHeader(openpal::RSlice&, openpal::Logger*, unsigned int, opendnp3::ParserSettings const&, opendnp3::IAPDUHandler*, opendnp3::IWhiteList*)
function _ZN8opendnp310APDUParser15ParseSinglePassERKN7openpal6RSliceEPNS1_6LoggerEPNS_12IAPDUHandlerEPNS_10IWhiteListERKNS_14ParserSettingsE	opendnp3::APDUParser::ParseSinglePass(openpal::RSlice const&, openpal::Logger*, opendnp3::IAPDUHandler*, opendnp3::IWhiteList*, opendnp3::ParserSettings const&)
function _ZN8opendnp310APDUParser5ParseERKN7openpal6RSliceERNS_12IAPDUHandlerEPNS1_6LoggerENS_14ParserSettingsE	opendnp3::APDUParser::Parse(openpal::RSlice const&, opendnp3::IAPDUHandler&, openpal::Logger*, opendnp3::ParserSettings)
function _ZN8opendnp310APDUParser5ParseERKN7openpal6RSliceERNS_12IAPDUHandlerERNS1_6LoggerENS_14ParserSettingsE	opendnp3::APDUParser::Parse(openpal::RSlice const&, opendnp3::IAPDUHandler&, openpal::Logger&, opendnp3::ParserSettings)
function _ZN8opendnp310APDUParser14ParseAndLogAllERKN7openpal6RSliceEPNS1_6LoggerENS_14ParserSettingsE	opendnp3::APDUParser::ParseAndLogAll(openpal::RSlice const&, openpal::Logger*, opendnp3::ParserSettings)
function _ZN8opendnp314NumBytesInBitsEj	opendnp3::NumBytesInBits(unsigned int)
function _ZN8opendnp36GetBitERKN7openpal6RSliceEj	opendnp3::GetBit(openpal::RSlice const&, unsigned int)
function _ZN8opendnp320NumBytesInDoubleBitsEj	opendnp3::NumBytesInDoubleBits(unsigned int)
function _ZN8opendnp312GetDoubleBitERKN7openpal6RSliceEj	opendnp3::GetDoubleBit(openpal::RSlice const&, unsigned int)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_11OctetStringEEEZNS_16CountIndexParser27ParseIndexPrefixedOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_9NumParserEjPNS5_6LoggerEPNS_12IAPDUHandlerEEUlS7_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::OctetString>, opendnp3::CountIndexParser::ParseIndexPrefixedOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::NumParser const&, unsigned int, openpal::Logger*, opendnp3::IAPDUHandler*)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_11OctetStringEEEZNS_16CountIndexParser27ParseIndexPrefixedOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_9NumParserEjPNS5_6LoggerEPNS_12IAPDUHandlerEEUlS7_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::OctetString>, opendnp3::CountIndexParser::ParseIndexPrefixedOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::NumParser const&, unsigned int, openpal::Logger*, opendnp3::IAPDUHandler*)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::OctetString> >&) const
function _ZN8opendnp316CountIndexParserC1EtjRKNS_9NumParserEPFvRKNS_12HeaderRecordEtS3_RKN7openpal6RSliceERNS_12IAPDUHandlerEE	opendnp3::CountIndexParser::CountIndexParser(unsigned short, unsigned int, opendnp3::NumParser const&, void (*)(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&))
function _ZNK8opendnp316CountIndexParser7ProcessERKNS_12HeaderRecordERN7openpal6RSliceEPNS_12IAPDUHandlerEPNS4_6LoggerE	opendnp3::CountIndexParser::Process(opendnp3::HeaderRecord const&, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*) const
function _ZN8opendnp316CountIndexParser27ParseIndexPrefixedOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_9NumParserEjPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::CountIndexParser::ParseIndexPrefixedOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::NumParser const&, unsigned int, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZN8opendnp316CountIndexParser19ParseCountOfObjectsERN7openpal6RSliceERKNS_12HeaderRecordERKNS_9NumParserEtPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::CountIndexParser::ParseCountOfObjects(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::NumParser const&, unsigned short, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZN8opendnp316CountIndexParser11ParseHeaderERN7openpal6RSliceERKNS_9NumParserERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::CountIndexParser::ParseHeader(openpal::RSlice&, opendnp3::NumParser const&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_12Group122Var2EEEZNS_16CountIndexParser17InvokeCountOfTypeIS2_EEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Group122Var2>, void opendnp3::CountIndexParser::InvokeCountOfType<opendnp3::Group122Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_12Group122Var1EEEZNS_16CountIndexParser17InvokeCountOfTypeIS2_EEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Group122Var1>, void opendnp3::CountIndexParser::InvokeCountOfType<opendnp3::Group122Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15TimeAndIntervalEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group50Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::TimeAndInterval>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group50Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_20AnalogOutputDouble64EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_19AnalogOutputFloat32EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_17AnalogOutputInt16EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_17AnalogOutputInt32EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group13Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group13Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group13Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group13Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group12Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group12Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group11Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group11Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group11Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group11Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group4Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group4Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group4Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group2Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group2Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group2Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_10Group2Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_10Group2Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_10Group2Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_10Group4Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_10Group4Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_10Group4Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group11Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group11Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group11Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group11Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group12Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group12Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group13Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group13Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group13Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group13Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group22Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group22Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group22Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group22Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group23Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group23Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group23Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group23Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group32Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group41Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group41Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group41Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group41Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group42Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group43Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser13InvokeCountOfINS_11Group50Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group50Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser17InvokeCountOfTypeINS_12Group122Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOfType<opendnp3::Group122Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp316CountIndexParser17InvokeCountOfTypeINS_12Group122Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountIndexParser::InvokeCountOfType<opendnp3::Group122Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_12Group122Var2EEEZNS_16CountIndexParser17InvokeCountOfTypeIS2_EEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Group122Var2>, void opendnp3::CountIndexParser::InvokeCountOfType<opendnp3::Group122Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Group122Var2> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_12Group122Var1EEEZNS_16CountIndexParser17InvokeCountOfTypeIS2_EEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Group122Var1>, void opendnp3::CountIndexParser::InvokeCountOfType<opendnp3::Group122Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Group122Var1> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15TimeAndIntervalEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group50Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::TimeAndInterval>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group50Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::TimeAndInterval> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_20AnalogOutputDouble64EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_19AnalogOutputFloat32EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_17AnalogOutputInt16EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt16> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_17AnalogOutputInt32EEEZNS_16CountIndexParser13InvokeCountOfINS_11Group41Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group41Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt32> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var8EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var8>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group13Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group13Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::BinaryCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group13Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group13Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::BinaryCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group12Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group12Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group11Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group11Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::BinaryOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group11Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group11Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::BinaryOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group4Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group4Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group2Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group2Var1EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var1>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group32Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group32Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group42Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group42Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var3EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var3>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var4EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var4>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var6EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var6>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogCommandEventEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group43Var7EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group43Var7>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogCommandEvent> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group4Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group4Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_16CountIndexParser13InvokeCountOfINS_10Group2Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group2Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group23Var2EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group23Var2>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_16CountIndexParser13InvokeCountOfINS_11Group22Var5EEEvRKNS_12HeaderRecordEtRKNS_9NumParserERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::CountIndexParser::InvokeCountOf<opendnp3::Group22Var5>(opendnp3::HeaderRecord const&, unsigned short, opendnp3::NumParser const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZN8opendnp311CountParserC2EtjPFvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEE	opendnp3::CountParser::CountParser(unsigned short, unsigned int, void (*)(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&))
function _ZNK8opendnp311CountParser7ProcessERKNS_12HeaderRecordERN7openpal6RSliceEPNS_12IAPDUHandlerEPNS4_6LoggerE	opendnp3::CountParser::Process(opendnp3::HeaderRecord const&, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*) const
function _ZN8opendnp311CountParser19ParseCountOfObjectsERN7openpal6RSliceERKNS_12HeaderRecordEtPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::CountParser::ParseCountOfObjects(openpal::RSlice&, opendnp3::HeaderRecord const&, unsigned short, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZN8opendnp311CountParser11ParseHeaderERN7openpal6RSliceERKNS_9NumParserERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::CountParser::ParseHeader(openpal::RSlice&, opendnp3::NumParser const&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZNK8opendnp318BufferedCollectionINS_12Group120Var4EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group120Var4, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group120Var4>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_12Group120Var3EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group120Var3, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group120Var3>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_11Group52Var2EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group52Var2, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group52Var2>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_11Group52Var1EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group52Var1, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group52Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_11Group51Var2EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group51Var2, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group51Var2>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_11Group51Var1EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group51Var1, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group51Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_11Group50Var3EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group50Var3, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group50Var3>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_11Group50Var1EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Group50Var1, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group50Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZN8opendnp311CountParser13InvokeCountOfINS_11Group50Var1EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group50Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_11Group50Var1EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group50Var1, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group50Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group50Var1>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_11Group50Var3EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group50Var3>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_11Group50Var3EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group50Var3, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group50Var3>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group50Var3>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_11Group51Var1EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group51Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_11Group51Var1EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group51Var1, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group51Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group51Var1>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_11Group51Var2EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group51Var2>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_11Group51Var2EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group51Var2, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group51Var2>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group51Var2>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_11Group52Var1EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group52Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_11Group52Var1EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group52Var1, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group52Var1>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group52Var1>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_11Group52Var2EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group52Var2>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_11Group52Var2EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group52Var2, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group52Var2>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group52Var2>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_12Group120Var3EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group120Var3>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_12Group120Var3EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group120Var3, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group120Var3>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group120Var3>&) const
function _ZN8opendnp311CountParser13InvokeCountOfINS_12Group120Var4EEEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::CountParser::InvokeCountOf<opendnp3::Group120Var4>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_12Group120Var4EZNS_11CountParser13InvokeCountOfIS1_EEvRKNS_12HeaderRecordEtRKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRS8_jE_E7ForeachERNS_8IVisitorIS1_EE	opendnp3::BufferedCollection<opendnp3::Group120Var4, void opendnp3::CountParser::InvokeCountOf<opendnp3::Group120Var4>(opendnp3::HeaderRecord const&, unsigned short, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Group120Var4>&) const
function _ZN8opendnp316FreeFormatParser15ParseFreeFormatERFbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerEES3_tRS5_S9_PNS4_6LoggerE	opendnp3::FreeFormatParser::ParseFreeFormat(bool (&)(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*), opendnp3::FreeFormatHeader const&, unsigned short, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*)
function _ZN8opendnp316FreeFormatParser11ParseHeaderERN7openpal6RSliceERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::FreeFormatParser::ParseHeader(openpal::RSlice&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_13Group120Var15EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var15>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_13Group120Var14EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var14>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_13Group120Var13EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var13>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_13Group120Var12EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var12>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_13Group120Var11EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var11>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_13Group120Var10EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var10>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var8EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var8>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var9EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var9>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var7EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var7>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var6EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var6>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var5EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var5>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var2EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var2>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp316FreeFormatParser8ParseAnyINS_12Group120Var1EEEbRKNS_16FreeFormatHeaderERKN7openpal6RSliceEPNS_12IAPDUHandlerE	bool opendnp3::FreeFormatParser::ParseAny<opendnp3::Group120Var1>(opendnp3::FreeFormatHeader const&, openpal::RSlice const&, opendnp3::IAPDUHandler*)
function _ZN8opendnp312IAPDUHandler13ProcessHeaderERKNS_11RangeHeaderE	opendnp3::IAPDUHandler::ProcessHeader(opendnp3::RangeHeader const&)
function _ZN8opendnp312IAPDUHandler13ProcessHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var15ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::ProcessHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var15 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::IAPDUHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp312IAPDUHandlerC2Ev	opendnp3::IAPDUHandler::IAPDUHandler()
function _ZN8opendnp312IAPDUHandler5ResetEv	opendnp3::IAPDUHandler::Reset()
function _ZNK8opendnp312IAPDUHandler6ErrorsEv	opendnp3::IAPDUHandler::Errors() const
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16AllObjectsHeaderE	opendnp3::IAPDUHandler::OnHeader(opendnp3::AllObjectsHeader const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var1ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var1 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var2ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var2 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var5ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var5 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var6ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var6 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var7ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var7 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var8ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var8 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_12Group120Var9ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var9 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var10ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var10 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var11ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var11 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var12ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var12 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var13ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var13 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var14ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var14 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_16FreeFormatHeaderERKNS_13Group120Var15ERKN7openpal6RSliceE	opendnp3::IAPDUHandler::OnHeader(opendnp3::FreeFormatHeader const&, opendnp3::Group120Var15 const&, openpal::RSlice const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var1EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var3EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var3> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group51Var1EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group51Var1> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group51Var2EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group51Var2> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var1EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var1> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var2EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var2> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_12Group120Var3EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group120Var3> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_12Group120Var4EEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group120Var4> const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_8IINValueEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::IINValue> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_6BinaryEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_15DoubleBitBinaryEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryOutputStatusEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_7CounterEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Counter> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_13FrozenCounterEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::FrozenCounter> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_6AnalogEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Analog> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogOutputStatusEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_11OctetStringEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::OctetString> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_12Group121Var1EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group121Var1> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_6BinaryEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryOutputStatusEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_15DoubleBitBinaryEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_7CounterEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Counter> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_13FrozenCounterEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::FrozenCounter> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_6AnalogEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Analog> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogOutputStatusEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_11OctetStringEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::OctetString> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryCommandEventEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogCommandEventEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_12Group122Var1EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var1> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_12Group122Var2EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var2> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp312IAPDUHandler8OnHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::IAPDUHandler::OnHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp312IAPDUHandler14OnHeaderResultERKNS_12HeaderRecordERKNS_8IINFieldE	opendnp3::IAPDUHandler::OnHeaderResult(opendnp3::HeaderRecord const&, opendnp3::IINField const&)
function _ZN8opendnp39NumParser8ReadByteERN7openpal6RSliceE	opendnp3::NumParser::ReadByte(openpal::RSlice&)
function _ZN8opendnp39NumParserC2EPFtRN7openpal6RSliceEEh	opendnp3::NumParser::NumParser(unsigned short (*)(openpal::RSlice&), unsigned char)
function _ZNK8opendnp39NumParser8NumBytesEv	opendnp3::NumParser::NumBytes() const
function _ZNK8opendnp39NumParser7ReadNumERN7openpal6RSliceE	opendnp3::NumParser::ReadNum(openpal::RSlice&) const
function _ZNK8opendnp39NumParser10ParseRangeERN7openpal6RSliceERNS_5RangeEPNS1_6LoggerE	opendnp3::NumParser::ParseRange(openpal::RSlice&, opendnp3::Range&, openpal::Logger*) const
function _ZNK8opendnp39NumParser4ReadERtRN7openpal6RSliceE	opendnp3::NumParser::Read(unsigned short&, openpal::RSlice&) const
function _ZNK8opendnp39NumParser10ParseCountERN7openpal6RSliceERtPNS1_6LoggerE	opendnp3::NumParser::ParseCount(openpal::RSlice&, unsigned short&, openpal::Logger*) const
function _ZN8opendnp39NumParser7OneByteEv	opendnp3::NumParser::OneByte()
function _ZN8opendnp39NumParser7TwoByteEv	opendnp3::NumParser::TwoByte()
function _ZN7openpal7Bit16LEItE10ReadBufferERNS_6RSliceE	openpal::Bit16LE<unsigned short>::ReadBuffer(openpal::RSlice&)
function _ZN8opendnp312ObjectHeaderC2Ev	opendnp3::ObjectHeader::ObjectHeader()
function _ZN8opendnp318ObjectHeaderParser17ParseObjectHeaderERNS_12ObjectHeaderERN7openpal6RSliceEPNS3_6LoggerE	opendnp3::ObjectHeaderParser::ParseObjectHeader(opendnp3::ObjectHeader&, openpal::RSlice&, openpal::Logger*)
function _ZN8opendnp318ObjectHeaderParser23ReadFirstGroupVariationERKN7openpal6RSliceERNS_14GroupVariationE	opendnp3::ObjectHeaderParser::ReadFirstGroupVariation(openpal::RSlice const&, opendnp3::GroupVariation&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_11OctetStringEEEZNS_11RangeParser21ParseRangeOfOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_5RangeEPNS5_6LoggerEPNS_12IAPDUHandlerEEUlS7_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::OctetString>, opendnp3::RangeParser::ParseRangeOfOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::Logger*, opendnp3::IAPDUHandler*)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_11OctetStringEEEZNS_11RangeParser21ParseRangeOfOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_5RangeEPNS5_6LoggerEPNS_12IAPDUHandlerEEUlS7_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::OctetString>, opendnp3::RangeParser::ParseRangeOfOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::Logger*, opendnp3::IAPDUHandler*)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::OctetString> >&) const
function _ZN8opendnp311RangeParserC2ERKNS_5RangeEjPFvRKNS_12HeaderRecordES3_RKN7openpal6RSliceERNS_12IAPDUHandlerEE	opendnp3::RangeParser::RangeParser(opendnp3::Range const&, unsigned int, void (*)(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&))
function _ZNK8opendnp311RangeParser7ProcessERKNS_12HeaderRecordERN7openpal6RSliceEPNS_12IAPDUHandlerEPNS4_6LoggerE	opendnp3::RangeParser::Process(opendnp3::HeaderRecord const&, openpal::RSlice&, opendnp3::IAPDUHandler*, openpal::Logger*) const
function _ZN8opendnp311RangeParser21ParseRangeOfOctetDataERN7openpal6RSliceERKNS_12HeaderRecordERKNS_5RangeEPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::RangeParser::ParseRangeOfOctetData(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZN8opendnp311RangeParser19ParseRangeOfObjectsERN7openpal6RSliceERKNS_12HeaderRecordERKNS_5RangeEPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::RangeParser::ParseRangeOfObjects(openpal::RSlice&, opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZN8opendnp311RangeParser11ParseHeaderERN7openpal6RSliceERKNS_9NumParserERKNS_14ParserSettingsERKNS_12HeaderRecordEPNS1_6LoggerEPNS_12IAPDUHandlerE	opendnp3::RangeParser::ParseHeader(openpal::RSlice&, opendnp3::NumParser const&, opendnp3::ParserSettings const&, opendnp3::HeaderRecord const&, openpal::Logger*, opendnp3::IAPDUHandler*)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_12Group121Var1EEEZNS_11RangeParser17InvokeRangeOfTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Group121Var1>, void opendnp3::RangeParser::InvokeRangeOfType<opendnp3::Group121Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_8IINValueEEEZNS_11RangeParser23InvokeRangeBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::IINValue>, void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::IINValue>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15TimeAndIntervalEEEZNS_11RangeParser13InvokeRangeOfINS_11Group50Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::TimeAndInterval>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group50Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var3EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var3>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var3EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var3>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_12Group21Var10EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var10>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var9EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var9>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group10Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group10Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_11RangeParser13InvokeRangeOfINS_10Group3Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group3Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_11RangeParser23InvokeRangeBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::BinaryOutputStatus>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_11RangeParser29InvokeRangeDoubleBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::RangeParser::InvokeRangeDoubleBitfieldType<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_11RangeParser13InvokeRangeOfINS_10Group1Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group1Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_11RangeParser23InvokeRangeBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E5CountEv	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Count() const
function _ZN8opendnp311RangeParser23InvokeRangeBitfieldTypeINS_6BinaryEEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_10Group1Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group1Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_8IINValueEEEZNS_11RangeParser23InvokeRangeBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::IINValue>, void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::IINValue>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::IINValue> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_11RangeParser23InvokeRangeBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6BinaryEEEZNS_11RangeParser13InvokeRangeOfINS_10Group1Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Binary>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group1Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const
function _ZN8opendnp311RangeParser29InvokeRangeDoubleBitfieldTypeINS_15DoubleBitBinaryEEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeDoubleBitfieldType<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_10Group3Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group3Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_11RangeParser29InvokeRangeDoubleBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::RangeParser::InvokeRangeDoubleBitfieldType<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const
function _ZN8opendnp311RangeParser23InvokeRangeBitfieldTypeINS_18BinaryOutputStatusEEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::BinaryOutputStatus>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group10Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group10Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_11RangeParser23InvokeRangeBitfieldTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::BinaryOutputStatus>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::BinaryOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15DoubleBitBinaryEEEZNS_11RangeParser13InvokeRangeOfINS_10Group3Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group3Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18BinaryOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group10Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group10Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::BinaryOutputStatus> >&) const
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group20Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group20Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group20Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group20Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_7CounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group20Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Counter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group20Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Counter> >&) const
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group21Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group21Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group21Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group21Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group21Var9EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var9>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_12Group21Var10EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var10>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_11Group21Var9EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var9>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_13FrozenCounterEEEZNS_11RangeParser13InvokeRangeOfINS_12Group21Var10EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::FrozenCounter>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group21Var10>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::FrozenCounter> >&) const
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group30Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group30Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group30Var3EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var3>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group30Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group30Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group30Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var3EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var3>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var5EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var5>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_6AnalogEEEZNS_11RangeParser13InvokeRangeOfINS_11Group30Var6EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Analog>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group30Var6>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Analog> >&) const
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group40Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group40Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group40Var3EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var3>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group40Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var2EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var2>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var3EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var3>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_18AnalogOutputStatusEEEZNS_11RangeParser13InvokeRangeOfINS_11Group40Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group40Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::AnalogOutputStatus> >&) const
function _ZN8opendnp311RangeParser13InvokeRangeOfINS_11Group50Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group50Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_15TimeAndIntervalEEEZNS_11RangeParser13InvokeRangeOfINS_11Group50Var4EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSE_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::TimeAndInterval>, void opendnp3::RangeParser::InvokeRangeOf<opendnp3::Group50Var4>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::TimeAndInterval> >&) const
function _ZN8opendnp311RangeParser23InvokeRangeBitfieldTypeINS_8IINValueEEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeBitfieldType<opendnp3::IINValue>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZN8opendnp311RangeParser17InvokeRangeOfTypeINS_12Group121Var1EEEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerE	void opendnp3::RangeParser::InvokeRangeOfType<opendnp3::Group121Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)
function _ZNK8opendnp318BufferedCollectionINS_7IndexedINS_12Group121Var1EEEZNS_11RangeParser17InvokeRangeOfTypeIS2_EEvRKNS_12HeaderRecordERKNS_5RangeERKN7openpal6RSliceERNS_12IAPDUHandlerEEUlRSD_jE_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::BufferedCollection<opendnp3::Indexed<opendnp3::Group121Var1>, void opendnp3::RangeParser::InvokeRangeOfType<opendnp3::Group121Var1>(opendnp3::HeaderRecord const&, opendnp3::Range const&, openpal::RSlice const&, opendnp3::IAPDUHandler&)::'lambda'(openpal::RSlice&, unsigned int)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Group121Var1> >&) const
function _ZN8opendnp35flags14GetBinaryValueENS_5FlagsE	opendnp3::flags::GetBinaryValue(opendnp3::Flags)
function _ZN8opendnp35flags14GetBinaryFlagsENS_5FlagsEb	opendnp3::flags::GetBinaryFlags(opendnp3::Flags, bool)
function _ZN8opendnp312SecurityStatC1Ev	opendnp3::SecurityStat::SecurityStat()
function _ZN8opendnp312SecurityStatC2ENS0_5ValueEhN7openpal10UInt48TypeE	opendnp3::SecurityStat::SecurityStat(opendnp3::SecurityStat::Value, unsigned char, openpal::UInt48Type)
function _ZN8opendnp312SecurityStatC1Ehtj	opendnp3::SecurityStat::SecurityStat(unsigned char, unsigned short, unsigned int)
function _ZN8opendnp312SecurityStatC1EhtjN7openpal10UInt48TypeE	opendnp3::SecurityStat::SecurityStat(unsigned char, unsigned short, unsigned int, openpal::UInt48Type)
function _ZN8opendnp315HasAbsoluteTimeENS_14GroupVariationE	opendnp3::HasAbsoluteTime(opendnp3::GroupVariation)
function _ZN8opendnp315HasRelativeTimeENS_14GroupVariationE	opendnp3::HasRelativeTime(opendnp3::GroupVariation)
function _ZN8opendnp38HasFlagsENS_14GroupVariationE	opendnp3::HasFlags(opendnp3::GroupVariation)
function _ZN8opendnp37IsEventENS_14GroupVariationE	opendnp3::IsEvent(opendnp3::GroupVariation)
function _ZN8opendnp319AuthErrorCodeToTypeENS_13AuthErrorCodeE	opendnp3::AuthErrorCodeToType(opendnp3::AuthErrorCode)
function _ZN8opendnp321AuthErrorCodeFromTypeEh	opendnp3::AuthErrorCodeFromType(unsigned char)
function _ZN8opendnp321AuthErrorCodeToStringENS_13AuthErrorCodeE	opendnp3::AuthErrorCodeToString(opendnp3::AuthErrorCode)
function _ZN8opendnp321CertificateTypeToTypeENS_15CertificateTypeE	opendnp3::CertificateTypeToType(opendnp3::CertificateType)
function _ZN8opendnp323CertificateTypeFromTypeEh	opendnp3::CertificateTypeFromType(unsigned char)
function _ZN8opendnp323CertificateTypeToStringENS_15CertificateTypeE	opendnp3::CertificateTypeToString(opendnp3::CertificateType)
function _ZN8opendnp321ChallengeReasonToTypeENS_15ChallengeReasonE	opendnp3::ChallengeReasonToType(opendnp3::ChallengeReason)
function _ZN8opendnp323ChallengeReasonFromTypeEh	opendnp3::ChallengeReasonFromType(unsigned char)
function _ZN8opendnp323ChallengeReasonToStringENS_15ChallengeReasonE	opendnp3::ChallengeReasonToString(opendnp3::ChallengeReason)
function _ZN8opendnp320ChannelStateToStringENS_12ChannelStateE	opendnp3::ChannelStateToString(opendnp3::ChannelState)
function _ZN8opendnp325CommandPointStateToStringENS_17CommandPointStateE	opendnp3::CommandPointStateToString(opendnp3::CommandPointState)
function _ZN8opendnp319CommandStatusToTypeENS_13CommandStatusE	opendnp3::CommandStatusToType(opendnp3::CommandStatus)
function _ZN8opendnp321CommandStatusFromTypeEh	opendnp3::CommandStatusFromType(unsigned char)
function _ZN8opendnp321CommandStatusToStringENS_13CommandStatusE	opendnp3::CommandStatusToString(opendnp3::CommandStatus)
function _ZN8opendnp317ControlCodeToTypeENS_11ControlCodeE	opendnp3::ControlCodeToType(opendnp3::ControlCode)
function _ZN8opendnp319ControlCodeFromTypeEh	opendnp3::ControlCodeFromType(unsigned char)
function _ZN8opendnp319ControlCodeToStringENS_11ControlCodeE	opendnp3::ControlCodeToString(opendnp3::ControlCode)
function _ZN8opendnp315DoubleBitToTypeENS_9DoubleBitE	opendnp3::DoubleBitToType(opendnp3::DoubleBit)
function _ZN8opendnp317DoubleBitFromTypeEh	opendnp3::DoubleBitFromType(unsigned char)
function _ZN8opendnp317DoubleBitToStringENS_9DoubleBitE	opendnp3::DoubleBitToString(opendnp3::DoubleBit)
function _ZN8opendnp315FlagsTypeToTypeENS_9FlagsTypeE	opendnp3::FlagsTypeToType(opendnp3::FlagsType)
function _ZN8opendnp317FlagsTypeFromTypeEh	opendnp3::FlagsTypeFromType(unsigned char)
function _ZN8opendnp317FlagsTypeToStringENS_9FlagsTypeE	opendnp3::FlagsTypeToString(opendnp3::FlagsType)
function _ZN8opendnp317FlowControlToTypeENS_11FlowControlE	opendnp3::FlowControlToType(opendnp3::FlowControl)
function _ZN8opendnp319FlowControlFromTypeEh	opendnp3::FlowControlFromType(unsigned char)
function _ZN8opendnp319FlowControlToStringENS_11FlowControlE	opendnp3::FlowControlToString(opendnp3::FlowControl)
function _ZN8opendnp318FunctionCodeToTypeENS_12FunctionCodeE	opendnp3::FunctionCodeToType(opendnp3::FunctionCode)
function _ZN8opendnp320FunctionCodeFromTypeEh	opendnp3::FunctionCodeFromType(unsigned char)
function _ZN8opendnp320FunctionCodeToStringENS_12FunctionCodeE	opendnp3::FunctionCodeToString(opendnp3::FunctionCode)
function _ZN8opendnp320GroupVariationToTypeENS_14GroupVariationE	opendnp3::GroupVariationToType(opendnp3::GroupVariation)
function _ZN8opendnp322GroupVariationFromTypeEt	opendnp3::GroupVariationFromType(unsigned short)
function _ZN8opendnp322GroupVariationToStringENS_14GroupVariationE	opendnp3::GroupVariationToString(opendnp3::GroupVariation)
function _ZN8opendnp314HMACTypeToTypeENS_8HMACTypeE	opendnp3::HMACTypeToType(opendnp3::HMACType)
function _ZN8opendnp316HMACTypeFromTypeEh	opendnp3::HMACTypeFromType(unsigned char)
function _ZN8opendnp316HMACTypeToStringENS_8HMACTypeE	opendnp3::HMACTypeToString(opendnp3::HMACType)
function _ZN8opendnp319IntervalUnitsToTypeENS_13IntervalUnitsE	opendnp3::IntervalUnitsToType(opendnp3::IntervalUnits)
function _ZN8opendnp321IntervalUnitsFromTypeEh	opendnp3::IntervalUnitsFromType(unsigned char)
function _ZN8opendnp321IntervalUnitsToStringENS_13IntervalUnitsE	opendnp3::IntervalUnitsToString(opendnp3::IntervalUnits)
function _ZN8opendnp321KeyChangeMethodToTypeENS_15KeyChangeMethodE	opendnp3::KeyChangeMethodToType(opendnp3::KeyChangeMethod)
function _ZN8opendnp323KeyChangeMethodFromTypeEh	opendnp3::KeyChangeMethodFromType(unsigned char)
function _ZN8opendnp323KeyChangeMethodToStringENS_15KeyChangeMethodE	opendnp3::KeyChangeMethodToString(opendnp3::KeyChangeMethod)
function _ZN8opendnp315KeyStatusToTypeENS_9KeyStatusE	opendnp3::KeyStatusToType(opendnp3::KeyStatus)
function _ZN8opendnp317KeyStatusFromTypeEh	opendnp3::KeyStatusFromType(unsigned char)
function _ZN8opendnp317KeyStatusToStringENS_9KeyStatusE	opendnp3::KeyStatusToString(opendnp3::KeyStatus)
function _ZN8opendnp322KeyWrapAlgorithmToTypeENS_16KeyWrapAlgorithmE	opendnp3::KeyWrapAlgorithmToType(opendnp3::KeyWrapAlgorithm)
function _ZN8opendnp324KeyWrapAlgorithmFromTypeEh	opendnp3::KeyWrapAlgorithmFromType(unsigned char)
function _ZN8opendnp324KeyWrapAlgorithmToStringENS_16KeyWrapAlgorithmE	opendnp3::KeyWrapAlgorithmToString(opendnp3::KeyWrapAlgorithm)
function _ZN8opendnp318LinkFunctionToTypeENS_12LinkFunctionE	opendnp3::LinkFunctionToType(opendnp3::LinkFunction)
function _ZN8opendnp320LinkFunctionFromTypeEh	opendnp3::LinkFunctionFromType(unsigned char)
function _ZN8opendnp320LinkFunctionToStringENS_12LinkFunctionE	opendnp3::LinkFunctionToString(opendnp3::LinkFunction)
function _ZN8opendnp318LinkStatusToStringENS_10LinkStatusE	opendnp3::LinkStatusToString(opendnp3::LinkStatus)
function _ZN8opendnp322MasterTaskTypeToStringENS_14MasterTaskTypeE	opendnp3::MasterTaskTypeToString(opendnp3::MasterTaskType)
function _ZN8opendnp312ParityToTypeENS_6ParityE	opendnp3::ParityToType(opendnp3::Parity)
function _ZN8opendnp314ParityFromTypeEh	opendnp3::ParityFromType(unsigned char)
function _ZN8opendnp314ParityToStringENS_6ParityE	opendnp3::ParityToString(opendnp3::Parity)
function _ZN8opendnp319QualifierCodeToTypeENS_13QualifierCodeE	opendnp3::QualifierCodeToType(opendnp3::QualifierCode)
function _ZN8opendnp321QualifierCodeFromTypeEh	opendnp3::QualifierCodeFromType(unsigned char)
function _ZN8opendnp321QualifierCodeToStringENS_13QualifierCodeE	opendnp3::QualifierCodeToString(opendnp3::QualifierCode)
function _ZN8opendnp314StopBitsToTypeENS_8StopBitsE	opendnp3::StopBitsToType(opendnp3::StopBits)
function _ZN8opendnp316StopBitsFromTypeEh	opendnp3::StopBitsFromType(unsigned char)
function _ZN8opendnp316StopBitsToStringENS_8StopBitsE	opendnp3::StopBitsToString(opendnp3::StopBits)
function _ZN8opendnp322TaskCompletionToStringENS_14TaskCompletionE	opendnp3::TaskCompletionToString(opendnp3::TaskCompletion)
function _ZN8opendnp319UserOperationToTypeENS_13UserOperationE	opendnp3::UserOperationToType(opendnp3::UserOperation)
function _ZN8opendnp321UserOperationFromTypeEh	opendnp3::UserOperationFromType(unsigned char)
function _ZN8opendnp321UserOperationToStringENS_13UserOperationE	opendnp3::UserOperationToString(opendnp3::UserOperation)
function _ZN8opendnp314UserRoleToTypeENS_8UserRoleE	opendnp3::UserRoleToType(opendnp3::UserRole)
function _ZN8opendnp316UserRoleFromTypeEt	opendnp3::UserRoleFromType(unsigned short)
function _ZN8opendnp316UserRoleToStringENS_8UserRoleE	opendnp3::UserRoleToString(opendnp3::UserRole)
function _ZN8opendnp33CRC7CalcCrcEPKhj	opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int)
function _ZN8opendnp33CRC7CalcCrcERKN7openpal6RSliceE	opendnp3::CRC::CalcCrc(openpal::RSlice const&)
function _ZN8opendnp33CRC6AddCrcEPhj	opendnp3::CRC::AddCrc(unsigned char*, unsigned int)
function _ZN8opendnp33CRC12IsCorrectCRCEPKhj	opendnp3::CRC::IsCorrectCRC(unsigned char const*, unsigned int)
function _ZNSt17_Function_handlerIFvvEZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext18StartResponseTimerEvEUlvE_EEbRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation	std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartResponseTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::LinkContext::StartResponseTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation	std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZN8opendnp311LinkContext16OnLowerLayerDownEv	opendnp3::LinkContext::OnLowerLayerDown()
function _ZN8opendnp311LinkContext12SetTxSegmentERNS_17ITransportSegmentE	opendnp3::LinkContext::SetTxSegment(opendnp3::ITransportSegment&)
function _ZN8opendnp311LinkContext32FormatPrimaryBufferWithConfirmedERKNS_9AddressesERKN7openpal6RSliceEb	opendnp3::LinkContext::FormatPrimaryBufferWithConfirmed(opendnp3::Addresses const&, openpal::RSlice const&, bool)
function _ZN8opendnp311LinkContext34FormatPrimaryBufferWithUnconfirmedERKNS_9AddressesERKN7openpal6RSliceE	opendnp3::LinkContext::FormatPrimaryBufferWithUnconfirmed(opendnp3::Addresses const&, openpal::RSlice const&)
function _ZN8opendnp311LinkContext13QueueTransmitERKN7openpal6RSliceEb	opendnp3::LinkContext::QueueTransmit(openpal::RSlice const&, bool)
function _ZN8opendnp311LinkContext8QueueAckEt	opendnp3::LinkContext::QueueAck(unsigned short)
function _ZN8opendnp311LinkContext15QueueLinkStatusEt	opendnp3::LinkContext::QueueLinkStatus(unsigned short)
function _ZN8opendnp311LinkContext15QueueResetLinksEt	opendnp3::LinkContext::QueueResetLinks(unsigned short)
function _ZN8opendnp311LinkContext22QueueRequestLinkStatusEt	opendnp3::LinkContext::QueueRequestLinkStatus(unsigned short)
function _ZN8opendnp311LinkContext10ResetRetryEv	opendnp3::LinkContext::ResetRetry()
function _ZN8opendnp311LinkContext5RetryEv	opendnp3::LinkContext::Retry()
function _ZN8opendnp311LinkContext10PushDataUpERKNS_7MessageE	opendnp3::LinkContext::PushDataUp(opendnp3::Message const&)
function _ZN8opendnp311LinkContext20TryStartTransmissionEv	opendnp3::LinkContext::TryStartTransmission()
function _ZN8opendnp311LinkContext17OnResponseTimeoutEv	opendnp3::LinkContext::OnResponseTimeout()
function _ZNSt17_Function_handlerIFvvEZN7openpal8TimerRef5StartIZN8opendnp311LinkContext18StartResponseTimerEvEUlvE_EEbRKNS1_12TimeDurationERKT_EUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), bool openpal::TimerRef::Start<opendnp3::LinkContext::StartResponseTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::LinkContext::StartResponseTimer()::'lambda'() const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp311LinkContext18StartResponseTimerEv	opendnp3::LinkContext::StartResponseTimer()
function _ZN8opendnp311LinkContext19StartKeepAliveTimerERKN7openpal18MonotonicTimestampE	opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)
function _ZN8opendnp311LinkContext14OnLowerLayerUpEv	opendnp3::LinkContext::OnLowerLayerUp()
function _ZN8opendnp311LinkContext18OnKeepAliveTimeoutEv	opendnp3::LinkContext::OnKeepAliveTimeout()
function _ZNSt17_Function_handlerIFvvEZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp311LinkContext11CancelTimerEv	opendnp3::LinkContext::CancelTimer()
function _ZN8opendnp311LinkContext13FailKeepAliveEb	opendnp3::LinkContext::FailKeepAlive(bool)
function _ZN8opendnp311LinkContext17CompleteKeepAliveEv	opendnp3::LinkContext::CompleteKeepAlive()
function _ZN8opendnp311LinkContext7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE	opendnp3::LinkContext::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&)
function _ZN8opendnp311LinkContext12TryPendingTxERN7openpal8SettableINS1_6RSliceEEEb	opendnp3::LinkContext::TryPendingTx(openpal::Settable<openpal::RSlice>&, bool)
function _ZN8opendnp311LinkContext9OnTxReadyEv	opendnp3::LinkContext::OnTxReady()
function _ZN8opendnp311LinkContextC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERNS_12ILinkSessionERKNS_15LinkLayerConfigE	opendnp3::LinkContext::LinkContext(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::ILinkSession&, opendnp3::LinkLayerConfig const&)
function _ZN8opendnp311LinkContext21CompleteSendOperationEv	opendnp3::LinkContext::CompleteSendOperation()
function _ZN8opendnp313ILinkListener13OnStateChangeENS_10LinkStatusE	opendnp3::ILinkListener::OnStateChange(opendnp3::LinkStatus)
function _ZN8opendnp313ILinkListener22OnUnknownSourceAddressEt	opendnp3::ILinkListener::OnUnknownSourceAddress(unsigned short)
function _ZN8opendnp313ILinkListener18OnKeepAliveSuccessEv	opendnp3::ILinkListener::OnKeepAliveSuccess()
function _ZN7openpal12StaticBufferILj292EED2Ev	openpal::StaticBuffer<292u>::~StaticBuffer()
function _ZN7openpal12StaticBufferILj10EED1Ev	openpal::StaticBuffer<10u>::~StaticBuffer()
function _ZN7openpal12StaticBufferILj292EED0Ev	openpal::StaticBuffer<292u>::~StaticBuffer()
function _ZN7openpal12StaticBufferILj10EED0Ev	openpal::StaticBuffer<10u>::~StaticBuffer()
function _ZN7openpal6LoggerD1Ev	openpal::Logger::~Logger()
function _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
function _ZN8opendnp39LinkFrame12ReadUserDataEPKhPhj	opendnp3::LinkFrame::ReadUserData(unsigned char const*, unsigned char*, unsigned int)
function _ZN8opendnp39LinkFrame15ValidateBodyCRCEPKhj	opendnp3::LinkFrame::ValidateBodyCRC(unsigned char const*, unsigned int)
function _ZN8opendnp39LinkFrame16CalcUserDataSizeEh	opendnp3::LinkFrame::CalcUserDataSize(unsigned char)
function _ZN8opendnp39LinkFrame13CalcFrameSizeEh	opendnp3::LinkFrame::CalcFrameSize(unsigned char)
function _ZN8opendnp39LinkFrame12FormatHeaderERN7openpal6WSliceEhbbbNS_12LinkFunctionEttPNS1_6LoggerE	opendnp3::LinkFrame::FormatHeader(openpal::WSlice&, unsigned char, bool, bool, bool, opendnp3::LinkFunction, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame9FormatAckERN7openpal6WSliceEbbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatAck(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame10FormatNackERN7openpal6WSliceEbbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatNack(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame16FormatLinkStatusERN7openpal6WSliceEbbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatLinkStatus(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame18FormatNotSupportedERN7openpal6WSliceEbbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatNotSupported(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame21FormatResetLinkStatesERN7openpal6WSliceEbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatResetLinkStates(openpal::WSlice&, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame23FormatRequestLinkStatusERN7openpal6WSliceEbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatRequestLinkStatus(openpal::WSlice&, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame20FormatTestLinkStatusERN7openpal6WSliceEbbttPNS1_6LoggerE	opendnp3::LinkFrame::FormatTestLinkStatus(openpal::WSlice&, bool, bool, unsigned short, unsigned short, openpal::Logger*)
function _ZN8opendnp39LinkFrame13WriteUserDataEPKhPhh	opendnp3::LinkFrame::WriteUserData(unsigned char const*, unsigned char*, unsigned char)
function _ZN8opendnp39LinkFrame23FormatConfirmedUserDataERN7openpal6WSliceEbbttPKhhPNS1_6LoggerE	opendnp3::LinkFrame::FormatConfirmedUserData(openpal::WSlice&, bool, bool, unsigned short, unsigned short, unsigned char const*, unsigned char, openpal::Logger*)
function _ZN8opendnp39LinkFrame25FormatUnconfirmedUserDataERN7openpal6WSliceEbttPKhhPNS1_6LoggerE	opendnp3::LinkFrame::FormatUnconfirmedUserData(openpal::WSlice&, bool, unsigned short, unsigned short, unsigned char const*, unsigned char, openpal::Logger*)
function _ZN8opendnp310LinkHeaderC1Ev	opendnp3::LinkHeader::LinkHeader()
function _ZN8opendnp310LinkHeader9ChangeFCBEb	opendnp3::LinkHeader::ChangeFCB(bool)
function _ZN8opendnp310LinkHeader11ControlByteEbbbNS_12LinkFunctionE	opendnp3::LinkHeader::ControlByte(bool, bool, bool, opendnp3::LinkFunction)
function _ZN8opendnp310LinkHeader3SetEhttbbbNS_12LinkFunctionE	opendnp3::LinkHeader::Set(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction)
function _ZN8opendnp310LinkHeaderC2EhttbbbNS_12LinkFunctionE	opendnp3::LinkHeader::LinkHeader(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction)
function _ZN8opendnp310LinkHeader4ReadEPKh	opendnp3::LinkHeader::Read(unsigned char const*)
function _ZNK8opendnp310LinkHeader5WriteEPh	opendnp3::LinkHeader::Write(unsigned char*) const
function _ZN8opendnp316LinkHeaderFieldsC1Ev	opendnp3::LinkHeaderFields::LinkHeaderFields()
function _ZN8opendnp316LinkHeaderFieldsC1ENS_12LinkFunctionEbbbtt	opendnp3::LinkHeaderFields::LinkHeaderFields(opendnp3::LinkFunction, bool, bool, bool, unsigned short, unsigned short)
function _ZN8opendnp39LinkLayer14OnLowerLayerUpEv	opendnp3::LinkLayer::OnLowerLayerUp()
function _ZThn8_N8opendnp39LinkLayer14OnLowerLayerUpEv	non-virtual thunk to opendnp3::LinkLayer::OnLowerLayerUp()
function _ZN8opendnp39LinkLayer16OnLowerLayerDownEv	opendnp3::LinkLayer::OnLowerLayerDown()
function _ZThn8_N8opendnp39LinkLayer16OnLowerLayerDownEv	non-virtual thunk to opendnp3::LinkLayer::OnLowerLayerDown()
function _ZN8opendnp39LinkLayer9OnTxReadyEv	opendnp3::LinkLayer::OnTxReady()
function _ZThn8_N8opendnp39LinkLayer9OnTxReadyEv	non-virtual thunk to opendnp3::LinkLayer::OnTxReady()
function _ZN8opendnp39LinkLayer7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE	opendnp3::LinkLayer::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&)
function _ZThn8_N8opendnp39LinkLayer7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE	non-virtual thunk to opendnp3::LinkLayer::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&)
function _ZN8opendnp39LinkLayer4SendERNS_17ITransportSegmentE	opendnp3::LinkLayer::Send(opendnp3::ITransportSegment&)
function _ZN8opendnp39LinkLayerC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERKNS_15LinkLayerConfigE	opendnp3::LinkLayer::LinkLayer(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::LinkLayerConfig const&)
function _ZNK8opendnp39LinkLayer13GetStatisticsEv	opendnp3::LinkLayer::GetStatistics() const
function _ZN8opendnp39LinkLayer9SetRouterERNS_7ILinkTxE	opendnp3::LinkLayer::SetRouter(opendnp3::ILinkTx&)
function _ZN8opendnp39LinkLayerD1Ev	opendnp3::LinkLayer::~LinkLayer()
function _ZThn8_N8opendnp39LinkLayerD1Ev	non-virtual thunk to opendnp3::LinkLayer::~LinkLayer()
function _ZN8opendnp39LinkLayerD0Ev	opendnp3::LinkLayer::~LinkLayer()
function _ZThn8_N8opendnp39LinkLayerD0Ev	non-virtual thunk to opendnp3::LinkLayer::~LinkLayer()
function _ZN8opendnp315LinkLayerParserC2ERKN7openpal6LoggerE	opendnp3::LinkLayerParser::LinkLayerParser(openpal::Logger const&)
function _ZN8opendnp315LinkLayerParser5ResetEv	opendnp3::LinkLayerParser::Reset()
function _ZNK8opendnp315LinkLayerParser9WriteBuffEv	opendnp3::LinkLayerParser::WriteBuff() const
function _ZN8opendnp315LinkLayerParser9ParseSyncEv	opendnp3::LinkLayerParser::ParseSync()
function _ZN8opendnp315LinkLayerParser9PushFrameERNS_10IFrameSinkE	opendnp3::LinkLayerParser::PushFrame(opendnp3::IFrameSink&)
function _ZN8opendnp315LinkLayerParser16TransferUserDataEv	opendnp3::LinkLayerParser::TransferUserData()
function _ZN8opendnp315LinkLayerParser12ValidateBodyEv	opendnp3::LinkLayerParser::ValidateBody()
function _ZN8opendnp315LinkLayerParser9FailFrameEv	opendnp3::LinkLayerParser::FailFrame()
function _ZN8opendnp315LinkLayerParser9ParseBodyEv	opendnp3::LinkLayerParser::ParseBody()
function _ZN8opendnp315LinkLayerParser20ValidateFunctionCodeEv	opendnp3::LinkLayerParser::ValidateFunctionCode()
function _ZN8opendnp315LinkLayerParser24ValidateHeaderParametersEv	opendnp3::LinkLayerParser::ValidateHeaderParameters()
function _ZN8opendnp315LinkLayerParser10ReadHeaderEv	opendnp3::LinkLayerParser::ReadHeader()
function _ZN8opendnp315LinkLayerParser11ParseHeaderEv	opendnp3::LinkLayerParser::ParseHeader()
function _ZN8opendnp315LinkLayerParser12ParseOneStepEv	opendnp3::LinkLayerParser::ParseOneStep()
function _ZN8opendnp315LinkLayerParser18ParseUntilCompleteEv	opendnp3::LinkLayerParser::ParseUntilComplete()
function _ZN8opendnp315LinkLayerParser6OnReadEjRNS_10IFrameSinkE	opendnp3::LinkLayerParser::OnRead(unsigned int, opendnp3::IFrameSink&)
function _ZN8opendnp312PriStateBase18TrySendUnconfirmedERNS_11LinkContextERNS_17ITransportSegmentE	opendnp3::PriStateBase::TrySendUnconfirmed(opendnp3::LinkContext&, opendnp3::ITransportSegment&)
function _ZN8opendnp312PriStateBase24TrySendRequestLinkStatusERNS_11LinkContextE	opendnp3::PriStateBase::TrySendRequestLinkStatus(opendnp3::LinkContext&)
function _ZN8opendnp312PriStateBase5OnAckERNS_11LinkContextEb	opendnp3::PriStateBase::OnAck(opendnp3::LinkContext&, bool)
function _ZN8opendnp312PriStateBase6OnNackERNS_11LinkContextEb	opendnp3::PriStateBase::OnNack(opendnp3::LinkContext&, bool)
function _ZN8opendnp312PriStateBase12OnLinkStatusERNS_11LinkContextEb	opendnp3::PriStateBase::OnLinkStatus(opendnp3::LinkContext&, bool)
function _ZN8opendnp312PriStateBase14OnNotSupportedERNS_11LinkContextEb	opendnp3::PriStateBase::OnNotSupported(opendnp3::LinkContext&, bool)
function _ZN8opendnp312PriStateBase9OnTxReadyERNS_11LinkContextE	opendnp3::PriStateBase::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp312PriStateBase9OnTimeoutERNS_11LinkContextE	opendnp3::PriStateBase::OnTimeout(opendnp3::LinkContext&)
function _ZN8opendnp39PLLS_Idle18TrySendUnconfirmedERNS_11LinkContextERNS_17ITransportSegmentE	opendnp3::PLLS_Idle::TrySendUnconfirmed(opendnp3::LinkContext&, opendnp3::ITransportSegment&)
function _ZN8opendnp326PLLS_LinkResetTransmitWait9OnTxReadyERNS_11LinkContextE	opendnp3::PLLS_LinkResetTransmitWait::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp329PLLS_ConfUserDataTransmitWait9OnTxReadyERNS_11LinkContextE	opendnp3::PLLS_ConfUserDataTransmitWait::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp334PLLS_RequestLinkStatusTransmitWait9OnTxReadyERNS_11LinkContextE	opendnp3::PLLS_RequestLinkStatusTransmitWait::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp326PLLS_RequestLinkStatusWait14OnNotSupportedERNS_11LinkContextEb	opendnp3::PLLS_RequestLinkStatusWait::OnNotSupported(opendnp3::LinkContext&, bool)
function _ZN8opendnp326PLLS_RequestLinkStatusWait9OnTimeoutERNS_11LinkContextE	opendnp3::PLLS_RequestLinkStatusWait::OnTimeout(opendnp3::LinkContext&)
function _ZN8opendnp326PLLS_RequestLinkStatusWait12OnLinkStatusERNS_11LinkContextEb	opendnp3::PLLS_RequestLinkStatusWait::OnLinkStatus(opendnp3::LinkContext&, bool)
function _ZN8opendnp318PLLS_ResetLinkWait5OnAckERNS_11LinkContextEb	opendnp3::PLLS_ResetLinkWait::OnAck(opendnp3::LinkContext&, bool)
function _ZN8opendnp318PLLS_ResetLinkWait9OnTimeoutERNS_11LinkContextE	opendnp3::PLLS_ResetLinkWait::OnTimeout(opendnp3::LinkContext&)
function _ZN8opendnp317PLLS_ConfDataWait5OnAckERNS_11LinkContextEb	opendnp3::PLLS_ConfDataWait::OnAck(opendnp3::LinkContext&, bool)
function _ZN8opendnp39PLLS_Idle16TrySendConfirmedERNS_11LinkContextERNS_17ITransportSegmentE	opendnp3::PLLS_Idle::TrySendConfirmed(opendnp3::LinkContext&, opendnp3::ITransportSegment&)
function _ZN8opendnp332PLLS_SendUnconfirmedTransmitWait9OnTxReadyERNS_11LinkContextE	opendnp3::PLLS_SendUnconfirmedTransmitWait::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp317PLLS_ConfDataWait9OnTimeoutERNS_11LinkContextE	opendnp3::PLLS_ConfDataWait::OnTimeout(opendnp3::LinkContext&)
function _ZN8opendnp39PLLS_Idle24TrySendRequestLinkStatusERNS_11LinkContextE	opendnp3::PLLS_Idle::TrySendRequestLinkStatus(opendnp3::LinkContext&)
function _ZN8opendnp318PLLS_ResetLinkWait7FailureERNS_11LinkContextE	opendnp3::PLLS_ResetLinkWait::Failure(opendnp3::LinkContext&)
function _ZN8opendnp317PLLS_ConfDataWait7FailureERNS_11LinkContextE	opendnp3::PLLS_ConfDataWait::Failure(opendnp3::LinkContext&)
function _ZN8opendnp317PLLS_ConfDataWait6OnNackERNS_11LinkContextEb	opendnp3::PLLS_ConfDataWait::OnNack(opendnp3::LinkContext&, bool)
function _ZNK8opendnp39PLLS_Idle4NameEv	opendnp3::PLLS_Idle::Name() const
function _ZNK8opendnp332PLLS_SendUnconfirmedTransmitWait4NameEv	opendnp3::PLLS_SendUnconfirmedTransmitWait::Name() const
function _ZNK8opendnp326PLLS_LinkResetTransmitWait4NameEv	opendnp3::PLLS_LinkResetTransmitWait::Name() const
function _ZNK8opendnp329PLLS_ConfUserDataTransmitWait4NameEv	opendnp3::PLLS_ConfUserDataTransmitWait::Name() const
function _ZNK8opendnp334PLLS_RequestLinkStatusTransmitWait4NameEv	opendnp3::PLLS_RequestLinkStatusTransmitWait::Name() const
function _ZNK8opendnp318PLLS_ResetLinkWait4NameEv	opendnp3::PLLS_ResetLinkWait::Name() const
function _ZNK8opendnp317PLLS_ConfDataWait4NameEv	opendnp3::PLLS_ConfDataWait::Name() const
function _ZNK8opendnp326PLLS_RequestLinkStatusWait4NameEv	opendnp3::PLLS_RequestLinkStatusWait::Name() const
function _ZN8opendnp313ILinkListener20OnKeepAliveInitiatedEv	opendnp3::ILinkListener::OnKeepAliveInitiated()
function _ZN8opendnp318PLLS_ResetLinkWait14OnNotSupportedERNS_11LinkContextEb	opendnp3::PLLS_ResetLinkWait::OnNotSupported(opendnp3::LinkContext&, bool)
function _ZN8opendnp318PLLS_ResetLinkWait12OnLinkStatusERNS_11LinkContextEb	opendnp3::PLLS_ResetLinkWait::OnLinkStatus(opendnp3::LinkContext&, bool)
function _ZN8opendnp318PLLS_ResetLinkWait6OnNackERNS_11LinkContextEb	opendnp3::PLLS_ResetLinkWait::OnNack(opendnp3::LinkContext&, bool)
function _ZN8opendnp317PLLS_ConfDataWait14OnNotSupportedERNS_11LinkContextEb	opendnp3::PLLS_ConfDataWait::OnNotSupported(opendnp3::LinkContext&, bool)
function _ZN8opendnp317PLLS_ConfDataWait12OnLinkStatusERNS_11LinkContextEb	opendnp3::PLLS_ConfDataWait::OnLinkStatus(opendnp3::LinkContext&, bool)
function _ZN8opendnp313SLLS_NotReset16OnTestLinkStatusERNS_11LinkContextEtb	opendnp3::SLLS_NotReset::OnTestLinkStatus(opendnp3::LinkContext&, unsigned short, bool)
function _ZN8opendnp313SLLS_NotReset19OnConfirmedUserDataERNS_11LinkContextEtbRKNS_7MessageE	opendnp3::SLLS_NotReset::OnConfirmedUserData(opendnp3::LinkContext&, unsigned short, bool, opendnp3::Message const&)
function _ZN8opendnp312SecStateBase9OnTxReadyERNS_11LinkContextE	opendnp3::SecStateBase::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp313SLLS_NotReset17OnResetLinkStatesERNS_11LinkContextEt	opendnp3::SLLS_NotReset::OnResetLinkStates(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp310SLLS_Reset19OnRequestLinkStatusERNS_11LinkContextEt	opendnp3::SLLS_Reset::OnRequestLinkStatus(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp313SLLS_NotReset19OnRequestLinkStatusERNS_11LinkContextEt	opendnp3::SLLS_NotReset::OnRequestLinkStatus(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp310SLLS_Reset19OnConfirmedUserDataERNS_11LinkContextEtbRKNS_7MessageE	opendnp3::SLLS_Reset::OnConfirmedUserData(opendnp3::LinkContext&, unsigned short, bool, opendnp3::Message const&)
function _ZN8opendnp310SLLS_Reset16OnTestLinkStatusERNS_11LinkContextEtb	opendnp3::SLLS_Reset::OnTestLinkStatus(opendnp3::LinkContext&, unsigned short, bool)
function _ZNK8opendnp313SLLS_NotReset4NameEv	opendnp3::SLLS_NotReset::Name() const
function _ZNK8opendnp310SLLS_Reset4NameEv	opendnp3::SLLS_Reset::Name() const
function _ZNK8opendnp322SLLS_TransmitWaitReset4NameEv	opendnp3::SLLS_TransmitWaitReset::Name() const
function _ZNK8opendnp325SLLS_TransmitWaitNotReset4NameEv	opendnp3::SLLS_TransmitWaitNotReset::Name() const
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_13SLLS_NotResetEE9OnTxReadyERNS_11LinkContextE	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_NotReset>::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_10SLLS_ResetEE9OnTxReadyERNS_11LinkContextE	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_Reset>::OnTxReady(opendnp3::LinkContext&)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_10SLLS_ResetEE19OnConfirmedUserDataERNS_11LinkContextEtbRKNS_7MessageE	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_Reset>::OnConfirmedUserData(opendnp3::LinkContext&, unsigned short, bool, opendnp3::Message const&)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_10SLLS_ResetEE16OnTestLinkStatusERNS_11LinkContextEtb	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_Reset>::OnTestLinkStatus(opendnp3::LinkContext&, unsigned short, bool)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_10SLLS_ResetEE19OnRequestLinkStatusERNS_11LinkContextEt	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_Reset>::OnRequestLinkStatus(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_10SLLS_ResetEE17OnResetLinkStatesERNS_11LinkContextEt	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_Reset>::OnResetLinkStates(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_13SLLS_NotResetEE19OnConfirmedUserDataERNS_11LinkContextEtbRKNS_7MessageE	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_NotReset>::OnConfirmedUserData(opendnp3::LinkContext&, unsigned short, bool, opendnp3::Message const&)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_13SLLS_NotResetEE16OnTestLinkStatusERNS_11LinkContextEtb	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_NotReset>::OnTestLinkStatus(opendnp3::LinkContext&, unsigned short, bool)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_13SLLS_NotResetEE19OnRequestLinkStatusERNS_11LinkContextEt	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_NotReset>::OnRequestLinkStatus(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp321SLLS_TransmitWaitBaseINS_13SLLS_NotResetEE17OnResetLinkStatesERNS_11LinkContextEt	opendnp3::SLLS_TransmitWaitBase<opendnp3::SLLS_NotReset>::OnResetLinkStates(opendnp3::LinkContext&, unsigned short)
function _ZN8opendnp315ShiftableBufferC2EPhj	opendnp3::ShiftableBuffer::ShiftableBuffer(unsigned char*, unsigned int)
function _ZN8opendnp315ShiftableBuffer5ShiftEv	opendnp3::ShiftableBuffer::Shift()
function _ZN8opendnp315ShiftableBuffer5ResetEv	opendnp3::ShiftableBuffer::Reset()
function _ZN8opendnp315ShiftableBuffer11AdvanceReadEj	opendnp3::ShiftableBuffer::AdvanceRead(unsigned int)
function _ZN8opendnp315ShiftableBuffer12AdvanceWriteEj	opendnp3::ShiftableBuffer::AdvanceWrite(unsigned int)
function _ZN8opendnp315ShiftableBuffer4SyncERj	opendnp3::ShiftableBuffer::Sync(unsigned int&)
function _ZN8opendnp315LogFlagToStringEi	opendnp3::LogFlagToString(int)
function _ZNSt17_Function_handlerIFvRKN8opendnp36HeaderEEZNS0_15AssignClassTask12BuildRequestERNS0_11APDURequestEhEUlS3_E_E9_M_invokeERKSt9_Any_dataS3_	std::_Function_handler<void (opendnp3::Header const&), opendnp3::AssignClassTask::BuildRequest(opendnp3::APDURequest&, unsigned char)::'lambda'(opendnp3::Header const&)>::_M_invoke(std::_Any_data const&, opendnp3::Header const&)
function _ZN8opendnp315AssignClassTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::AssignClassTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp315AssignClassTask12BuildRequestERNS1_11APDURequestEhEUlRKNS1_6HeaderEE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::AssignClassTask::BuildRequest(opendnp3::APDURequest&, unsigned char)::'lambda'(opendnp3::Header const&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZN8opendnp315AssignClassTask12BuildRequestERNS_11APDURequestEh	opendnp3::AssignClassTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZNK8opendnp315AssignClassTask9IsEnabledEv	opendnp3::AssignClassTask::IsEnabled() const
function _ZN8opendnp315AssignClassTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorEN7openpal6LoggerE	opendnp3::AssignClassTask::AssignClassTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, openpal::Logger)
function _ZN8opendnp318IMasterApplication24AssignClassDuringStartupEv	opendnp3::IMasterApplication::AssignClassDuringStartup()
function _ZN8opendnp318IMasterApplication27ConfigureAssignClassRequestERKSt8functionIFvRKNS_6HeaderEEE	opendnp3::IMasterApplication::ConfigureAssignClassRequest(std::function<void (opendnp3::Header const&)> const&)
function _ZN8opendnp311IMasterTask10InitializeEv	opendnp3::IMasterTask::Initialize()
function _ZN8opendnp311IMasterTask14OnTaskCompleteENS_14TaskCompletionEN7openpal18MonotonicTimestampE	opendnp3::IMasterTask::OnTaskComplete(opendnp3::TaskCompletion, openpal::MonotonicTimestamp)
function _ZNK8opendnp315AssignClassTask4NameEv	opendnp3::AssignClassTask::Name() const
function _ZNK8opendnp315AssignClassTask11IsRecurringEv	opendnp3::AssignClassTask::IsRecurring() const
function _ZNK8opendnp315AssignClassTask8PriorityEv	opendnp3::AssignClassTask::Priority() const
function _ZNK8opendnp315AssignClassTask19BlocksLowerPriorityEv	opendnp3::AssignClassTask::BlocksLowerPriority() const
function _ZNK8opendnp315AssignClassTask11GetTaskTypeEv	opendnp3::AssignClassTask::GetTaskType() const
function _ZN8opendnp315AssignClassTaskD2Ev	opendnp3::AssignClassTask::~AssignClassTask()
function _ZN8opendnp315AssignClassTaskD0Ev	opendnp3::AssignClassTask::~AssignClassTask()
function _ZN8opendnp316ClearRestartTask12BuildRequestERNS_11APDURequestEh	opendnp3::ClearRestartTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp316ClearRestartTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::ClearRestartTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp316ClearRestartTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationEN7openpal6LoggerE	opendnp3::ClearRestartTask::ClearRestartTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::Logger)
function _ZNK8opendnp316ClearRestartTask4NameEv	opendnp3::ClearRestartTask::Name() const
function _ZNK8opendnp316ClearRestartTask11IsRecurringEv	opendnp3::ClearRestartTask::IsRecurring() const
function _ZNK8opendnp316ClearRestartTask8PriorityEv	opendnp3::ClearRestartTask::Priority() const
function _ZNK8opendnp316ClearRestartTask19BlocksLowerPriorityEv	opendnp3::ClearRestartTask::BlocksLowerPriority() const
function _ZNK8opendnp316ClearRestartTask11GetTaskTypeEv	opendnp3::ClearRestartTask::GetTaskType() const
function _ZNK8opendnp316ClearRestartTask9IsEnabledEv	opendnp3::ClearRestartTask::IsEnabled() const
function _ZN8opendnp316ClearRestartTaskD2Ev	opendnp3::ClearRestartTask::~ClearRestartTask()
function _ZN8opendnp316ClearRestartTaskD0Ev	opendnp3::ClearRestartTask::~ClearRestartTask()
function _ZN8opendnp310CommandSetC2EOS0_	opendnp3::CommandSet::CommandSet(opendnp3::CommandSet&&)
function _ZN8opendnp310CommandSetD2Ev	opendnp3::CommandSet::~CommandSet()
function _ZN8opendnp310CommandSet18StartHeaderAOInt32Ev	opendnp3::CommandSet::StartHeaderAOInt32()
function _ZN8opendnp310CommandSetC1ESt16initializer_listINS_7IndexedINS_17AnalogOutputInt32EEEE	opendnp3::CommandSet::CommandSet(std::initializer_list<opendnp3::Indexed<opendnp3::AnalogOutputInt32> >)
function _ZN8opendnp310CommandSet18StartHeaderAOInt16Ev	opendnp3::CommandSet::StartHeaderAOInt16()
function _ZN8opendnp310CommandSetC1ESt16initializer_listINS_7IndexedINS_17AnalogOutputInt16EEEE	opendnp3::CommandSet::CommandSet(std::initializer_list<opendnp3::Indexed<opendnp3::AnalogOutputInt16> >)
function _ZN8opendnp310CommandSet21StartHeaderAODouble64Ev	opendnp3::CommandSet::StartHeaderAODouble64()
function _ZN8opendnp310CommandSetC1ESt16initializer_listINS_7IndexedINS_20AnalogOutputDouble64EEEE	opendnp3::CommandSet::CommandSet(std::initializer_list<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> >)
function _ZN8opendnp310CommandSet15StartHeaderCROBEv	opendnp3::CommandSet::StartHeaderCROB()
function _ZN8opendnp310CommandSetC1ESt16initializer_listINS_7IndexedINS_23ControlRelayOutputBlockEEEE	opendnp3::CommandSet::CommandSet(std::initializer_list<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> >)
function _ZN8opendnp310CommandSet20StartHeaderAOFloat32Ev	opendnp3::CommandSet::StartHeaderAOFloat32()
function _ZN8opendnp310CommandSetC2ESt16initializer_listINS_7IndexedINS_19AnalogOutputFloat32EEEE	opendnp3::CommandSet::CommandSet(std::initializer_list<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> >)
function _ZN8opendnp314ICommandHeader19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::ICommandHeader::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp314ICommandHeader19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::ICommandHeader::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp314ICommandHeader19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::ICommandHeader::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp314ICommandHeader19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::ICommandHeader::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp314ICommandHeader19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::ICommandHeader::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp314ICommandHeader20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::ICommandHeader::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp314ICommandHeader20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::ICommandHeader::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp314ICommandHeader20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::ICommandHeader::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp314ICommandHeader20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::ICommandHeader::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp314ICommandHeader20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::ICommandHeader::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNK8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE5CountEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Count() const
function _ZNK8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE7ForeachERNS_8IVisitorINS_12CommandStateEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Foreach(opendnp3::IVisitor<opendnp3::CommandState>&) const
function _ZNK8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE5CountEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Count() const
function _ZNK8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE7ForeachERNS_8IVisitorINS_12CommandStateEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Foreach(opendnp3::IVisitor<opendnp3::CommandState>&) const
function _ZNK8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE5CountEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Count() const
function _ZNK8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE7ForeachERNS_8IVisitorINS_12CommandStateEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Foreach(opendnp3::IVisitor<opendnp3::CommandState>&) const
function _ZNK8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE5CountEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Count() const
function _ZNK8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE7ForeachERNS_8IVisitorINS_12CommandStateEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Foreach(opendnp3::IVisitor<opendnp3::CommandState>&) const
function _ZNK8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE5CountEv	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Count() const
function _ZNK8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE7ForeachERNS_8IVisitorINS_12CommandStateEEE	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Foreach(opendnp3::IVisitor<opendnp3::CommandState>&) const
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_23ControlRelayOutputBlockEEEZNS_18TypedCommandHeaderIS2_E20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>, opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)::'lambda'(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>)>::OnValue(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_23ControlRelayOutputBlockEEEZNS_18TypedCommandHeaderIS2_E19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>, opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)::'lambda'(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>)>::OnValue(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt32EEEZNS_18TypedCommandHeaderIS2_E20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt32>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt32>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt16EEEZNS_18TypedCommandHeaderIS2_E20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt16>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt16>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt16> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_19AnalogOutputFloat32EEEZNS_18TypedCommandHeaderIS2_E20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputFloat32>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputFloat32>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputFloat32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_20AnalogOutputDouble64EEEZNS_18TypedCommandHeaderIS2_E20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputDouble64>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputDouble64>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputDouble64> const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZN8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEED1Ev	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEED0Ev	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EED2Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EED0Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EED2Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EED0Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EED2Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EED0Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EED1Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::~TypedCommandHeader()
function _ZN8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EED0Ev	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::~TypedCommandHeader()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EEESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZN8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE5WriteERNS_12HeaderWriterENS_18IndexQualifierModeE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Write(opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)
function _ZN8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE5WriteERNS_12HeaderWriterENS_18IndexQualifierModeE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Write(opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE5WriteERNS_12HeaderWriterENS_18IndexQualifierModeE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Write(opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE5WriteERNS_12HeaderWriterENS_18IndexQualifierModeE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Write(opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)
function _ZN8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE5WriteERNS_12HeaderWriterENS_18IndexQualifierModeE	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Write(opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)
function _ZNK8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE14AreAllSelectedEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::AreAllSelected() const
function _ZNK8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE14AreAllSelectedEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::AreAllSelected() const
function _ZNK8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE14AreAllSelectedEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::AreAllSelected() const
function _ZNK8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE14AreAllSelectedEv	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::AreAllSelected() const
function _ZNK8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE14AreAllSelectedEv	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::AreAllSelected() const
function _ZN8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE20ApplyOperateResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::ApplyOperateResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionINS_7IndexedIS1_EEEE	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_20AnalogOutputDouble64EEEZNS_18TypedCommandHeaderIS2_E19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputDouble64>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputDouble64>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputDouble64> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt16EEEZNS_18TypedCommandHeaderIS2_E19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt16>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt16>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt16> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt32EEEZNS_18TypedCommandHeaderIS2_E19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt32>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt32>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_19AnalogOutputFloat32EEEZNS_18TypedCommandHeaderIS2_E19ApplySelectResponseENS_13QualifierCodeERKNS_11ICollectionIS3_EEEUlS3_E_E7OnValueERKS3_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputFloat32>, opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::ApplySelectResponse(opendnp3::QualifierCode, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputFloat32>)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputFloat32> const&)
function _ZNSt6vectorISt10shared_ptrIN8opendnp314ICommandHeaderEESaIS3_EED2Ev	std::vector<std::shared_ptr<opendnp3::ICommandHeader>, std::allocator<std::shared_ptr<opendnp3::ICommandHeader> > >::~vector()
function _ZNSt6vectorISt10shared_ptrIN8opendnp314ICommandHeaderEESaIS3_EE19_M_emplace_back_auxIIS3_EEEvDpOT_	_ZNSt6vectorISt10shared_ptrIN8opendnp314ICommandHeaderEESaIS3_EE19_M_emplace_back_auxIIS3_EEEvDpOT_
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_20AnalogOutputDouble64EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Record&&)
function _ZN8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE3AddERKS1_t	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Add(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZThn8_N8opendnp318TypedCommandHeaderINS_20AnalogOutputDouble64EE3AddERKS1_t	non-virtual thunk to opendnp3::TypedCommandHeader<opendnp3::AnalogOutputDouble64>::Add(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_19AnalogOutputFloat32EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Record&&)
function _ZN8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE3AddERKS1_t	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Add(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZThn8_N8opendnp318TypedCommandHeaderINS_19AnalogOutputFloat32EE3AddERKS1_t	non-virtual thunk to opendnp3::TypedCommandHeader<opendnp3::AnalogOutputFloat32>::Add(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt16EE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_	void std::vector<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record>(opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Record&&)
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE3AddERKS1_t	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Add(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZThn8_N8opendnp318TypedCommandHeaderINS_17AnalogOutputInt16EE3AddERKS1_t	non-virtual thunk to opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt16>::Add(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EE6RecordESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_	_ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_17AnalogOutputInt32EE6RecordESaIS4_EE19_M_emplace_back_auxIIS4_EEEvDpOT_
function _ZN8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE3AddERKS1_t	opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Add(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZThn8_N8opendnp318TypedCommandHeaderINS_17AnalogOutputInt32EE3AddERKS1_t	non-virtual thunk to opendnp3::TypedCommandHeader<opendnp3::AnalogOutputInt32>::Add(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZNSt6vectorIN8opendnp318TypedCommandHeaderINS0_23ControlRelayOutputBlockEE6RecordESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_	void std::vector<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record, std::allocator<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record> >::_M_emplace_back_aux<opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record>(opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Record&&)
function _ZN8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE3AddERKS1_t	opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Add(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZThn8_N8opendnp318TypedCommandHeaderINS_23ControlRelayOutputBlockEE3AddERKS1_t	non-virtual thunk to opendnp3::TypedCommandHeader<opendnp3::ControlRelayOutputBlock>::Add(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZN8opendnp313CommandSetOps13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::CommandSetOps::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp313CommandSetOps13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::CommandSetOps::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp313CommandSetOps13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::CommandSetOps::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp313CommandSetOps13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::CommandSetOps::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp313CommandSetOps9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::CommandSetOps::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp313CommandSetOps13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::CommandSetOps::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp313CommandSetOpsC1ENS0_4ModeERNS_10CommandSetE	opendnp3::CommandSetOps::CommandSetOps(opendnp3::CommandSetOps::Mode, opendnp3::CommandSet&)
function _ZN8opendnp313CommandSetOps5WriteERKNS_10CommandSetERNS_12HeaderWriterENS_18IndexQualifierModeE	opendnp3::CommandSetOps::Write(opendnp3::CommandSet const&, opendnp3::HeaderWriter&, opendnp3::IndexQualifierMode)
function _ZN8opendnp313CommandSetOps14InvokeCallbackERKNS_10CommandSetENS_14TaskCompletionERKSt8functionIFvRKNS_18ICommandTaskResultEEE	opendnp3::CommandSetOps::InvokeCallback(opendnp3::CommandSet const&, opendnp3::TaskCompletion, std::function<void (opendnp3::ICommandTaskResult const&)> const&)
function _ZN8opendnp313CommandSetOps21ProcessSelectResponseERNS_10CommandSetERKN7openpal6RSliceEPNS3_6LoggerE	opendnp3::CommandSetOps::ProcessSelectResponse(opendnp3::CommandSet&, openpal::RSlice const&, openpal::Logger*)
function _ZN8opendnp313CommandSetOps22ProcessOperateResponseERNS_10CommandSetERKN7openpal6RSliceEPNS3_6LoggerE	opendnp3::CommandSetOps::ProcessOperateResponse(opendnp3::CommandSet&, openpal::RSlice const&, openpal::Logger*)
function _ZN8opendnp311CommandTask10InitializeEv	opendnp3::CommandTask::Initialize()
function _ZN8opendnp311CommandTask14OnTaskCompleteENS_14TaskCompletionEN7openpal18MonotonicTimestampE	opendnp3::CommandTask::OnTaskComplete(opendnp3::TaskCompletion, openpal::MonotonicTimestamp)
function _ZN8opendnp311CommandTask12BuildRequestERNS_11APDURequestEh	opendnp3::CommandTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp311CommandTaskC2ERKSt10shared_ptrINS_11TaskContextEEONS_10CommandSetENS_18IndexQualifierModeERNS_18IMasterApplicationERKSt8functionIFvRKNS_18ICommandTaskResultEEERKN7openpal18MonotonicTimestampERKNS_10TaskConfigENSJ_6LoggerE	opendnp3::CommandTask::CommandTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::CommandSet&&, opendnp3::IndexQualifierMode, opendnp3::IMasterApplication&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, openpal::MonotonicTimestamp const&, opendnp3::TaskConfig const&, openpal::Logger)
function _ZN8opendnp311CommandTask15ProcessResponseERKN7openpal6RSliceE	opendnp3::CommandTask::ProcessResponse(openpal::RSlice const&)
function _ZN8opendnp311CommandTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::CommandTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp311CommandTask20LoadSelectAndOperateEv	opendnp3::CommandTask::LoadSelectAndOperate()
function _ZN8opendnp311CommandTask22CreateSelectAndOperateERKSt10shared_ptrINS_11TaskContextEEONS_10CommandSetENS_18IndexQualifierModeERNS_18IMasterApplicationERKSt8functionIFvRKNS_18ICommandTaskResultEEERKN7openpal18MonotonicTimestampERKNS_10TaskConfigENSJ_6LoggerE	opendnp3::CommandTask::CreateSelectAndOperate(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::CommandSet&&, opendnp3::IndexQualifierMode, opendnp3::IMasterApplication&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, openpal::MonotonicTimestamp const&, opendnp3::TaskConfig const&, openpal::Logger)
function _ZN8opendnp311CommandTask17LoadDirectOperateEv	opendnp3::CommandTask::LoadDirectOperate()
function _ZN8opendnp311CommandTask19CreateDirectOperateERKSt10shared_ptrINS_11TaskContextEEONS_10CommandSetENS_18IndexQualifierModeERNS_18IMasterApplicationERKSt8functionIFvRKNS_18ICommandTaskResultEEERKN7openpal18MonotonicTimestampERKNS_10TaskConfigENSJ_6LoggerE	opendnp3::CommandTask::CreateDirectOperate(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::CommandSet&&, opendnp3::IndexQualifierMode, opendnp3::IMasterApplication&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, openpal::MonotonicTimestamp const&, opendnp3::TaskConfig const&, openpal::Logger)
function _ZNK8opendnp311CommandTask4NameEv	opendnp3::CommandTask::Name() const
function _ZNK8opendnp311CommandTask8PriorityEv	opendnp3::CommandTask::Priority() const
function _ZNK8opendnp311CommandTask19BlocksLowerPriorityEv	opendnp3::CommandTask::BlocksLowerPriority() const
function _ZNK8opendnp311CommandTask11IsRecurringEv	opendnp3::CommandTask::IsRecurring() const
function _ZNK8opendnp311CommandTask9IsEnabledEv	opendnp3::CommandTask::IsEnabled() const
function _ZNK8opendnp311CommandTask11GetTaskTypeEv	opendnp3::CommandTask::GetTaskType() const
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311CommandTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::CommandTask, std::allocator<opendnp3::CommandTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311CommandTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::CommandTask, std::allocator<opendnp3::CommandTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311CommandTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::CommandTask, std::allocator<opendnp3::CommandTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311CommandTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::CommandTask, std::allocator<opendnp3::CommandTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311CommandTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::CommandTask, std::allocator<opendnp3::CommandTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZN8opendnp311CommandTaskD0Ev	opendnp3::CommandTask::~CommandTask()
function _ZN8opendnp311CommandTaskD2Ev	opendnp3::CommandTask::~CommandTask()
function _ZNSt5dequeIN8opendnp312FunctionCodeESaIS1_EE12emplace_backIIS1_EEEvDpOT_	_ZNSt5dequeIN8opendnp312FunctionCodeESaIS1_EE12emplace_backIIS1_EEEvDpOT_
function _ZNK8opendnp317CommandTaskResult5CountEv	opendnp3::CommandTaskResult::Count() const
function _ZNK8opendnp317CommandTaskResult7ForeachERNS_8IVisitorINS_18CommandPointResultEEE	opendnp3::CommandTaskResult::Foreach(opendnp3::IVisitor<opendnp3::CommandPointResult>&) const
function _ZN8opendnp314FunctorVisitorINS_12CommandStateEZNKS_17CommandTaskResult7ForeachERNS_8IVisitorINS_18CommandPointResultEEEEUlRKS1_E_E7OnValueES8_	opendnp3::FunctorVisitor<opendnp3::CommandState, opendnp3::CommandTaskResult::Foreach(opendnp3::IVisitor<opendnp3::CommandPointResult>&) const::'lambda'(opendnp3::CommandState const&)>::OnValue(opendnp3::CommandState const&)
function _ZN8opendnp317CommandTaskResultC2ENS_14TaskCompletionERKSt6vectorISt10shared_ptrINS_14ICommandHeaderEESaIS5_EE	opendnp3::CommandTaskResult::CommandTaskResult(opendnp3::TaskCompletion, std::vector<std::shared_ptr<opendnp3::ICommandHeader>, std::allocator<std::shared_ptr<opendnp3::ICommandHeader> > > const&)
function _ZN8opendnp322DisableUnsolicitedTask12BuildRequestERNS_11APDURequestEh	opendnp3::DisableUnsolicitedTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp322DisableUnsolicitedTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::DisableUnsolicitedTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp322DisableUnsolicitedTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorEN7openpal6LoggerE	opendnp3::DisableUnsolicitedTask::DisableUnsolicitedTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, openpal::Logger)
function _ZNK8opendnp311IMasterTask9IsEnabledEv	opendnp3::IMasterTask::IsEnabled() const
function _ZNK8opendnp322DisableUnsolicitedTask4NameEv	opendnp3::DisableUnsolicitedTask::Name() const
function _ZNK8opendnp322DisableUnsolicitedTask11IsRecurringEv	opendnp3::DisableUnsolicitedTask::IsRecurring() const
function _ZNK8opendnp322DisableUnsolicitedTask8PriorityEv	opendnp3::DisableUnsolicitedTask::Priority() const
function _ZNK8opendnp322DisableUnsolicitedTask19BlocksLowerPriorityEv	opendnp3::DisableUnsolicitedTask::BlocksLowerPriority() const
function _ZNK8opendnp322DisableUnsolicitedTask11GetTaskTypeEv	opendnp3::DisableUnsolicitedTask::GetTaskType() const
function _ZN8opendnp322DisableUnsolicitedTaskD2Ev	opendnp3::DisableUnsolicitedTask::~DisableUnsolicitedTask()
function _ZN8opendnp322DisableUnsolicitedTaskD0Ev	opendnp3::DisableUnsolicitedTask::~DisableUnsolicitedTask()
function _ZN8opendnp317EmptyResponseTask12BuildRequestERNS_11APDURequestEh	opendnp3::EmptyResponseTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp317EmptyResponseTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::EmptyResponseTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp317EmptyResponseTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_12FunctionCodeERKSt8functionIFbRNS_12HeaderWriterEEEN7openpal18MonotonicTimestampENSO_6LoggerERKNS_10TaskConfigE	opendnp3::EmptyResponseTask::EmptyResponseTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, opendnp3::FunctionCode, std::function<bool (opendnp3::HeaderWriter&)> const&, openpal::MonotonicTimestamp, openpal::Logger, opendnp3::TaskConfig const&)
function _ZNK8opendnp317EmptyResponseTask4NameEv	opendnp3::EmptyResponseTask::Name() const
function _ZNK8opendnp317EmptyResponseTask11IsRecurringEv	opendnp3::EmptyResponseTask::IsRecurring() const
function _ZNK8opendnp317EmptyResponseTask8PriorityEv	opendnp3::EmptyResponseTask::Priority() const
function _ZNK8opendnp317EmptyResponseTask19BlocksLowerPriorityEv	opendnp3::EmptyResponseTask::BlocksLowerPriority() const
function _ZNK8opendnp317EmptyResponseTask11GetTaskTypeEv	opendnp3::EmptyResponseTask::GetTaskType() const
function _ZN8opendnp317EmptyResponseTaskD2Ev	opendnp3::EmptyResponseTask::~EmptyResponseTask()
function _ZN8opendnp317EmptyResponseTaskD0Ev	opendnp3::EmptyResponseTask::~EmptyResponseTask()
function _ZN8opendnp321EnableUnsolicitedTask12BuildRequestERNS_11APDURequestEh	opendnp3::EnableUnsolicitedTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZNK8opendnp321EnableUnsolicitedTask9IsEnabledEv	opendnp3::EnableUnsolicitedTask::IsEnabled() const
function _ZN8opendnp321EnableUnsolicitedTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::EnableUnsolicitedTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp321EnableUnsolicitedTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorENS_10ClassFieldEN7openpal6LoggerE	opendnp3::EnableUnsolicitedTask::EnableUnsolicitedTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, opendnp3::ClassField, openpal::Logger)
function _ZNK8opendnp321EnableUnsolicitedTask11IsRecurringEv	opendnp3::EnableUnsolicitedTask::IsRecurring() const
function _ZNK8opendnp321EnableUnsolicitedTask4NameEv	opendnp3::EnableUnsolicitedTask::Name() const
function _ZNK8opendnp321EnableUnsolicitedTask8PriorityEv	opendnp3::EnableUnsolicitedTask::Priority() const
function _ZNK8opendnp321EnableUnsolicitedTask19BlocksLowerPriorityEv	opendnp3::EnableUnsolicitedTask::BlocksLowerPriority() const
function _ZNK8opendnp321EnableUnsolicitedTask11GetTaskTypeEv	opendnp3::EnableUnsolicitedTask::GetTaskType() const
function _ZN8opendnp321EnableUnsolicitedTaskD1Ev	opendnp3::EnableUnsolicitedTask::~EnableUnsolicitedTask()
function _ZN8opendnp321EnableUnsolicitedTaskD0Ev	opendnp3::EnableUnsolicitedTask::~EnableUnsolicitedTask()
function _ZN8opendnp313EventScanTask12BuildRequestERNS_11APDURequestEh	opendnp3::EventScanTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZNK8opendnp313EventScanTask9IsEnabledEv	opendnp3::EventScanTask::IsEnabled() const
function _ZN8opendnp313EventScanTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERNS_11ISOEHandlerENS_10ClassFieldEN7openpal6LoggerE	opendnp3::EventScanTask::EventScanTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, opendnp3::ClassField, openpal::Logger)
function _ZNK8opendnp312PollTaskBase4NameEv	opendnp3::PollTaskBase::Name() const
function _ZNK8opendnp313EventScanTask11IsRecurringEv	opendnp3::EventScanTask::IsRecurring() const
function _ZNK8opendnp313EventScanTask8PriorityEv	opendnp3::EventScanTask::Priority() const
function _ZNK8opendnp313EventScanTask19BlocksLowerPriorityEv	opendnp3::EventScanTask::BlocksLowerPriority() const
function _ZNK8opendnp313EventScanTask11GetTaskTypeEv	opendnp3::EventScanTask::GetTaskType() const
function _ZN8opendnp313EventScanTaskD1Ev	opendnp3::EventScanTask::~EventScanTask()
function _ZN8opendnp313EventScanTaskD0Ev	opendnp3::EventScanTask::~EventScanTask()
function _ZN8opendnp36HeaderC2Ehh	opendnp3::Header::Header(unsigned char, unsigned char)
function _ZN8opendnp36Header10AllObjectsEhh	opendnp3::Header::AllObjects(unsigned char, unsigned char)
function _ZN8opendnp36Header4FromENS_10PointClassE	opendnp3::Header::From(opendnp3::PointClass)
function _ZN8opendnp36HeaderC1Ehhhh	opendnp3::Header::Header(unsigned char, unsigned char, unsigned char, unsigned char)
function _ZN8opendnp36Header6Range8Ehhhh	opendnp3::Header::Range8(unsigned char, unsigned char, unsigned char, unsigned char)
function _ZN8opendnp36HeaderC1Ehhtt	opendnp3::Header::Header(unsigned char, unsigned char, unsigned short, unsigned short)
function _ZN8opendnp36Header7Range16Ehhtt	opendnp3::Header::Range16(unsigned char, unsigned char, unsigned short, unsigned short)
function _ZN8opendnp36HeaderC2Ehhh	opendnp3::Header::Header(unsigned char, unsigned char, unsigned char)
function _ZN8opendnp36Header6Count8Ehhh	opendnp3::Header::Count8(unsigned char, unsigned char, unsigned char)
function _ZN8opendnp36HeaderC1Ehht	opendnp3::Header::Header(unsigned char, unsigned char, unsigned short)
function _ZN8opendnp36Header7Count16Ehht	opendnp3::Header::Count16(unsigned char, unsigned char, unsigned short)
function _ZNK8opendnp36Header7WriteToERNS_12HeaderWriterE	opendnp3::Header::WriteTo(opendnp3::HeaderWriter&) const
function _ZN8opendnp311IMasterTaskC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKNS_12TaskBehaviorERKN7openpal6LoggerENS_10TaskConfigE	opendnp3::IMasterTask::IMasterTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::TaskBehavior const&, openpal::Logger const&, opendnp3::TaskConfig)
function _ZN8opendnp311IMasterTaskD2Ev	opendnp3::IMasterTask::~IMasterTask()
function _ZN8opendnp311IMasterTaskD0Ev	opendnp3::IMasterTask::~IMasterTask()
function _ZNK8opendnp311IMasterTask14ExpirationTimeEv	opendnp3::IMasterTask::ExpirationTime() const
function _ZNK8opendnp311IMasterTask19StartExpirationTimeEv	opendnp3::IMasterTask::StartExpirationTime() const
function _ZN8opendnp311IMasterTask12CompleteTaskENS_14TaskCompletionEN7openpal18MonotonicTimestampE	opendnp3::IMasterTask::CompleteTask(opendnp3::TaskCompletion, openpal::MonotonicTimestamp)
function _ZN8opendnp311IMasterTask10OnResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceENS4_18MonotonicTimestampE	opendnp3::IMasterTask::OnResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&, openpal::MonotonicTimestamp)
function _ZN8opendnp311IMasterTask17OnResponseTimeoutEN7openpal18MonotonicTimestampE	opendnp3::IMasterTask::OnResponseTimeout(openpal::MonotonicTimestamp)
function _ZN8opendnp311IMasterTask17OnLowerLayerCloseEN7openpal18MonotonicTimestampE	opendnp3::IMasterTask::OnLowerLayerClose(openpal::MonotonicTimestamp)
function _ZN8opendnp311IMasterTask14OnStartTimeoutEN7openpal18MonotonicTimestampE	opendnp3::IMasterTask::OnStartTimeout(openpal::MonotonicTimestamp)
function _ZN8opendnp311IMasterTask20OnMessageFormatErrorEN7openpal18MonotonicTimestampE	opendnp3::IMasterTask::OnMessageFormatError(openpal::MonotonicTimestamp)
function _ZN8opendnp311IMasterTask7OnStartEv	opendnp3::IMasterTask::OnStart()
function _ZN8opendnp311IMasterTask16SetMinExpirationEv	opendnp3::IMasterTask::SetMinExpiration()
function _ZN8opendnp311IMasterTask22ValidateSingleResponseERKNS_18APDUResponseHeaderE	opendnp3::IMasterTask::ValidateSingleResponse(opendnp3::APDUResponseHeader const&)
function _ZN8opendnp311IMasterTask27ValidateInternalIndicationsERKNS_18APDUResponseHeaderE	opendnp3::IMasterTask::ValidateInternalIndications(opendnp3::APDUResponseHeader const&)
function _ZN8opendnp311IMasterTask17ValidateNoObjectsERKN7openpal6RSliceE	opendnp3::IMasterTask::ValidateNoObjects(openpal::RSlice const&)
function _ZN8opendnp311IMasterTask20ValidateNullResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::IMasterTask::ValidateNullResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp318IMasterApplication11OnTaskStartENS_14MasterTaskTypeENS_6TaskIdE	opendnp3::IMasterApplication::OnTaskStart(opendnp3::MasterTaskType, opendnp3::TaskId)
function _ZN8opendnp318IMasterApplication14OnTaskCompleteERKNS_8TaskInfoE	opendnp3::IMasterApplication::OnTaskComplete(opendnp3::TaskInfo const&)
function _ZN8opendnp315LANTimeSyncTask10InitializeEv	opendnp3::LANTimeSyncTask::Initialize()
function _ZN8opendnp315LANTimeSyncTask12BuildRequestERNS_11APDURequestEh	opendnp3::LANTimeSyncTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp315LANTimeSyncTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationEN7openpal6LoggerE	opendnp3::LANTimeSyncTask::LANTimeSyncTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::Logger)
function _ZN8opendnp315LANTimeSyncTask27OnResponseRecordCurrentTimeERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::LANTimeSyncTask::OnResponseRecordCurrentTime(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp315LANTimeSyncTask19OnResponseWriteTimeERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::LANTimeSyncTask::OnResponseWriteTime(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp315LANTimeSyncTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::LANTimeSyncTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN7openpal18FixedUTCTimeSource3NowEv	openpal::FixedUTCTimeSource::Now()
function _ZNK8opendnp315LANTimeSyncTask4NameEv	opendnp3::LANTimeSyncTask::Name() const
function _ZNK8opendnp315LANTimeSyncTask8PriorityEv	opendnp3::LANTimeSyncTask::Priority() const
function _ZNK8opendnp315LANTimeSyncTask19BlocksLowerPriorityEv	opendnp3::LANTimeSyncTask::BlocksLowerPriority() const
function _ZNK8opendnp315LANTimeSyncTask11IsRecurringEv	opendnp3::LANTimeSyncTask::IsRecurring() const
function _ZNK8opendnp315LANTimeSyncTask11GetTaskTypeEv	opendnp3::LANTimeSyncTask::GetTaskType() const
function _ZNK8opendnp315LANTimeSyncTask9IsEnabledEv	opendnp3::LANTimeSyncTask::IsEnabled() const
function _ZN8opendnp315LANTimeSyncTaskD2Ev	opendnp3::LANTimeSyncTask::~LANTimeSyncTask()
function _ZN8opendnp315LANTimeSyncTaskD0Ev	opendnp3::LANTimeSyncTask::~LANTimeSyncTask()
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext12AddClassScanERKNS1_10ClassFieldEN7openpal12TimeDurationENS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::AddClassScan(opendnp3::ClassField const&, openpal::TimeDuration, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext17AddAllObjectsScanENS1_16GroupVariationIDEN7openpal12TimeDurationENS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::AddAllObjectsScan(opendnp3::GroupVariationID, openpal::TimeDuration, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext12AddRangeScanENS1_16GroupVariationIDEttN7openpal12TimeDurationENS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::AddRangeScan(opendnp3::GroupVariationID, unsigned short, unsigned short, openpal::TimeDuration, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext11ScanClassesERKNS1_10ClassFieldENS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::ScanClasses(opendnp3::ClassField const&, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext14ScanAllObjectsENS1_16GroupVariationIDENS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::ScanAllObjects(opendnp3::GroupVariationID, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext9ScanRangeENS1_16GroupVariationIDEttNS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::ScanRange(opendnp3::GroupVariationID, unsigned short, unsigned short, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext12AddClassScanERKNS0_10ClassFieldEN7openpal12TimeDurationENS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::AddClassScan(opendnp3::ClassField const&, openpal::TimeDuration, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext11ScanClassesERKNS0_10ClassFieldENS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::ScanClasses(opendnp3::ClassField const&, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext17AddAllObjectsScanENS0_16GroupVariationIDEN7openpal12TimeDurationENS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::AddAllObjectsScan(opendnp3::GroupVariationID, openpal::TimeDuration, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext14ScanAllObjectsENS0_16GroupVariationIDENS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::ScanAllObjects(opendnp3::GroupVariationID, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp38MContext18StartResponseTimerEvEUlvE_EEbRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation	std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::MContext::StartResponseTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::MContext::StartResponseTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp38MContext5WriteERKNS1_15TimeAndIntervalEtNS1_10TaskConfigEEUlRNS1_12HeaderWriterEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MContext::Write(opendnp3::TimeAndInterval const&, unsigned short, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext9ScanRangeENS0_16GroupVariationIDEttNS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::ScanRange(opendnp3::GroupVariationID, unsigned short, unsigned short, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext5WriteERKNS0_15TimeAndIntervalEtNS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::Write(opendnp3::TimeAndInterval const&, unsigned short, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38MContext14OnLowerLayerUpEv	opendnp3::MContext::OnLowerLayerUp()
function _ZNSt17_Function_handlerIFbRN8opendnp312HeaderWriterEEZNS0_8MContext12AddRangeScanENS0_16GroupVariationIDEttN7openpal12TimeDurationENS0_10TaskConfigEEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_	std::_Function_handler<bool (opendnp3::HeaderWriter&), opendnp3::MContext::AddRangeScan(opendnp3::GroupVariationID, unsigned short, unsigned short, openpal::TimeDuration, opendnp3::TaskConfig)::'lambda'(opendnp3::HeaderWriter&)>::_M_invoke(std::_Any_data const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38MContext16OnLowerLayerDownEv	opendnp3::MContext::OnLowerLayerDown()
function _ZN8opendnp38MContext18CompleteActiveTaskEv	opendnp3::MContext::CompleteActiveTask()
function _ZN8opendnp38MContext10ProcessIINERKNS_8IINFieldE	opendnp3::MContext::ProcessIIN(opendnp3::IINField const&)
function _ZN8opendnp38MContext8TransmitERKN7openpal6RSliceE	opendnp3::MContext::Transmit(openpal::RSlice const&)
function _ZN8opendnp38MContext20CheckConfirmTransmitEv	opendnp3::MContext::CheckConfirmTransmit()
function _ZN8opendnp38MContext12QueueConfirmERKNS_10APDUHeaderE	opendnp3::MContext::QueueConfirm(opendnp3::APDUHeader const&)
function _ZN8opendnp38MContext26ProcessUnsolicitedResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::MContext::ProcessUnsolicitedResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp38MContext18StartResponseTimerEv	opendnp3::MContext::StartResponseTimer()
function _ZN8opendnp38MContext25ScheduleRecurringPollTaskERKSt10shared_ptrINS_11IMasterTaskEE	opendnp3::MContext::ScheduleRecurringPollTask(std::shared_ptr<opendnp3::IMasterTask> const&)
function _ZN8opendnp38MContext17ScheduleAdhocTaskERKSt10shared_ptrINS_11IMasterTaskEE	opendnp3::MContext::ScheduleAdhocTask(std::shared_ptr<opendnp3::IMasterTask> const&)
function _ZN8opendnp38MContext16ResumeActiveTaskEv	opendnp3::MContext::ResumeActiveTask()
function _ZN8opendnp38MContext3RunERKSt10shared_ptrINS_11IMasterTaskEE	opendnp3::MContext::Run(std::shared_ptr<opendnp3::IMasterTask> const&)
function _ZThn8_N8opendnp38MContext3RunERKSt10shared_ptrINS_11IMasterTaskEE	non-virtual thunk to opendnp3::MContext::Run(std::shared_ptr<opendnp3::IMasterTask> const&)
function _ZN8opendnp38MContext18OnTransmitCompleteEv	opendnp3::MContext::OnTransmitComplete()
function _ZN8opendnp38MContext9OnTxReadyEv	opendnp3::MContext::OnTxReady()
function _ZN8opendnp38MContext19StartTask_TaskReadyEv	opendnp3::MContext::StartTask_TaskReady()
function _ZN8opendnp38MContext26OnResponse_WaitForResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::MContext::OnResponse_WaitForResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp38MContext15OnResponseEventERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::MContext::OnResponseEvent(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp38MContext15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::MContext::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp38MContext11ProcessAPDUERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::MContext::ProcessAPDU(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp38MContext14OnParsedHeaderERKN7openpal6RSliceERKNS_18APDUResponseHeaderES4_	opendnp3::MContext::OnParsedHeader(openpal::RSlice const&, opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp38MContext9OnReceiveERKNS_7MessageE	opendnp3::MContext::OnReceive(opendnp3::Message const&)
function _ZN8opendnp38MContext33OnResponseTimeout_WaitForResponseEv	opendnp3::MContext::OnResponseTimeout_WaitForResponse()
function _ZN8opendnp38MContext22OnResponseTimeoutEventEv	opendnp3::MContext::OnResponseTimeoutEvent()
function _ZN8opendnp38MContext17OnResponseTimeoutEv	opendnp3::MContext::OnResponseTimeout()
function _ZNSt17_Function_handlerIFvvEZN7openpal8TimerRef5StartIZN8opendnp38MContext18StartResponseTimerEvEUlvE_EEbRKNS1_12TimeDurationERKT_EUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), bool openpal::TimerRef::Start<opendnp3::MContext::StartResponseTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::MContext::StartResponseTimer()::'lambda'() const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp38MContext13DirectOperateEONS_10CommandSetERKSt8functionIFvRKNS_18ICommandTaskResultEEERKNS_10TaskConfigE	opendnp3::MContext::DirectOperate(opendnp3::CommandSet&&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, opendnp3::TaskConfig const&)
function _ZN8opendnp38MContext16SelectAndOperateEONS_10CommandSetERKSt8functionIFvRKNS_18ICommandTaskResultEEERKNS_10TaskConfigE	opendnp3::MContext::SelectAndOperate(opendnp3::CommandSet&&, std::function<void (opendnp3::ICommandTaskResult const&)> const&, opendnp3::TaskConfig const&)
function _ZN8opendnp38MContextC2ERKNS_9AddressesERKN7openpal6LoggerERKSt10shared_ptrINS4_9IExecutorEERKS8_INS_11ILowerLayerEERKS8_INS_11ISOEHandlerEERKS8_INS_18IMasterApplicationEERKS8_INS_16IMasterSchedulerEERKNS_12MasterParamsE	opendnp3::MContext::MContext(opendnp3::Addresses const&, openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::ILowerLayer> const&, std::shared_ptr<opendnp3::ISOEHandler> const&, std::shared_ptr<opendnp3::IMasterApplication> const&, std::shared_ptr<opendnp3::IMasterScheduler> const&, opendnp3::MasterParams const&)
function _ZN8opendnp38MContext7AddScanEN7openpal12TimeDurationERKSt8functionIFbRNS_12HeaderWriterEEENS_10TaskConfigE	opendnp3::MContext::AddScan(openpal::TimeDuration, std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskConfig)
function _ZN8opendnp38MContext12AddClassScanERKNS_10ClassFieldEN7openpal12TimeDurationENS_10TaskConfigE	opendnp3::MContext::AddClassScan(opendnp3::ClassField const&, openpal::TimeDuration, opendnp3::TaskConfig)
function _ZN8opendnp38MContext17AddAllObjectsScanENS_16GroupVariationIDEN7openpal12TimeDurationENS_10TaskConfigE	opendnp3::MContext::AddAllObjectsScan(opendnp3::GroupVariationID, openpal::TimeDuration, opendnp3::TaskConfig)
function _ZN8opendnp38MContext12AddRangeScanENS_16GroupVariationIDEttN7openpal12TimeDurationENS_10TaskConfigE	opendnp3::MContext::AddRangeScan(opendnp3::GroupVariationID, unsigned short, unsigned short, openpal::TimeDuration, opendnp3::TaskConfig)
function _ZN8opendnp38MContext4ScanERKSt8functionIFbRNS_12HeaderWriterEEENS_10TaskConfigE	opendnp3::MContext::Scan(std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskConfig)
function _ZN8opendnp38MContext11ScanClassesERKNS_10ClassFieldENS_10TaskConfigE	opendnp3::MContext::ScanClasses(opendnp3::ClassField const&, opendnp3::TaskConfig)
function _ZN8opendnp38MContext14ScanAllObjectsENS_16GroupVariationIDENS_10TaskConfigE	opendnp3::MContext::ScanAllObjects(opendnp3::GroupVariationID, opendnp3::TaskConfig)
function _ZN8opendnp38MContext9ScanRangeENS_16GroupVariationIDEttNS_10TaskConfigE	opendnp3::MContext::ScanRange(opendnp3::GroupVariationID, unsigned short, unsigned short, opendnp3::TaskConfig)
function _ZN8opendnp38MContext5WriteERKNS_15TimeAndIntervalEtNS_10TaskConfigE	opendnp3::MContext::Write(opendnp3::TimeAndInterval const&, unsigned short, opendnp3::TaskConfig)
function _ZN8opendnp38MContext15PerformFunctionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_12FunctionCodeERKSt8functionIFbRNS_12HeaderWriterEEENS_10TaskConfigE	opendnp3::MContext::PerformFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, opendnp3::FunctionCode, std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskConfig)
function _ZN8opendnp38MContext7RestartENS_11RestartTypeERKSt8functionIFvRKNS_22RestartOperationResultEEENS_10TaskConfigE	opendnp3::MContext::Restart(opendnp3::RestartType, std::function<void (opendnp3::RestartOperationResult const&)> const&, opendnp3::TaskConfig)
function _ZN8opendnp38MContext17RecordLastRequestERKN7openpal6RSliceE	opendnp3::MContext::RecordLastRequest(openpal::RSlice const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320RestartOperationTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::RestartOperationTask, std::allocator<opendnp3::RestartOperationTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp317EmptyResponseTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::EmptyResponseTask, std::allocator<opendnp3::EmptyResponseTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp312UserPollTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::UserPollTask, std::allocator<opendnp3::UserPollTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320RestartOperationTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::RestartOperationTask, std::allocator<opendnp3::RestartOperationTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp317EmptyResponseTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::EmptyResponseTask, std::allocator<opendnp3::EmptyResponseTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp312UserPollTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::UserPollTask, std::allocator<opendnp3::UserPollTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp312UserPollTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::UserPollTask, std::allocator<opendnp3::UserPollTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp317EmptyResponseTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::EmptyResponseTask, std::allocator<opendnp3::EmptyResponseTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320RestartOperationTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::RestartOperationTask, std::allocator<opendnp3::RestartOperationTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp312UserPollTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::UserPollTask, std::allocator<opendnp3::UserPollTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp317EmptyResponseTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::EmptyResponseTask, std::allocator<opendnp3::EmptyResponseTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320RestartOperationTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::RestartOperationTask, std::allocator<opendnp3::RestartOperationTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZN7openpal5ArrayIhjED1Ev	openpal::Array<unsigned char, unsigned int>::~Array()
function _ZN7openpal5ArrayIhjED0Ev	openpal::Array<unsigned char, unsigned int>::~Array()
function _ZN7openpal6BufferD1Ev	openpal::Buffer::~Buffer()
function _ZN7openpal6BufferD0Ev	openpal::Buffer::~Buffer()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320RestartOperationTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::RestartOperationTask, std::allocator<opendnp3::RestartOperationTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp312UserPollTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::UserPollTask, std::allocator<opendnp3::UserPollTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp317EmptyResponseTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::EmptyResponseTask, std::allocator<opendnp3::EmptyResponseTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZN8opendnp38MContextD0Ev	opendnp3::MContext::~MContext()
function _ZN8opendnp38MContextD2Ev	opendnp3::MContext::~MContext()
function _ZN8opendnp311MasterTasksD1Ev	opendnp3::MasterTasks::~MasterTasks()
function _ZNSt14_Function_base13_Base_managerIZN8opendnp322MasterSchedulerBackend19PostCheckForTaskRunEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MasterSchedulerBackend::PostCheckForTaskRun()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp322MasterSchedulerBackend15CheckForTaskRunEvEUlvE_EEvRKNS1_18MonotonicTimestampERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation	std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::MasterSchedulerBackend::CheckForTaskRun()::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::CheckForTaskRun()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp322MasterSchedulerBackend19RestartTimeoutTimerEvEUlvE_EEvRKNS1_18MonotonicTimestampERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation	std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::MasterSchedulerBackend::RestartTimeoutTimer()::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::RestartTimeoutTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt14_Function_base13_Base_managerIZN8opendnp322MasterSchedulerBackend6DemandERKSt10shared_ptrINS1_11IMasterTaskEEEUlvE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::MasterSchedulerBackend::Demand(std::shared_ptr<opendnp3::IMasterTask> const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZN8opendnp322MasterSchedulerBackend8ShutdownEv	opendnp3::MasterSchedulerBackend::Shutdown()
function _ZN8opendnp322MasterSchedulerBackend19PostCheckForTaskRunEv	opendnp3::MasterSchedulerBackend::PostCheckForTaskRun()
function _ZN8opendnp322MasterSchedulerBackend8EvaluateEv	opendnp3::MasterSchedulerBackend::Evaluate()
function _ZN8opendnp322MasterSchedulerBackend19RestartTimeoutTimerEv	opendnp3::MasterSchedulerBackend::RestartTimeoutTimer()
function _ZN8opendnp322MasterSchedulerBackend12TimeoutTasksEv	opendnp3::MasterSchedulerBackend::TimeoutTasks()
function _ZNSt17_Function_handlerIFvvEZN7openpal8TimerRef7RestartIZN8opendnp322MasterSchedulerBackend19RestartTimeoutTimerEvEUlvE_EEvRKNS1_18MonotonicTimestampERKT_EUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), void openpal::TimerRef::Restart<opendnp3::MasterSchedulerBackend::RestartTimeoutTimer()::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::RestartTimeoutTimer()::'lambda'() const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp322MasterSchedulerBackend11CompareTimeERKN7openpal18MonotonicTimestampERKNS0_6RecordES7_	opendnp3::MasterSchedulerBackend::CompareTime(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)
function _ZN8opendnp322MasterSchedulerBackend20CompareEnabledStatusERKNS0_6RecordES3_	opendnp3::MasterSchedulerBackend::CompareEnabledStatus(opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)
function _ZN8opendnp322MasterSchedulerBackend20CompareBlockedStatusERKNS0_6RecordES3_	opendnp3::MasterSchedulerBackend::CompareBlockedStatus(opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)
function _ZN8opendnp322MasterSchedulerBackend15ComparePriorityERKNS0_6RecordES3_	opendnp3::MasterSchedulerBackend::ComparePriority(opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)
function _ZN8opendnp322MasterSchedulerBackend16GetBestTaskToRunERKN7openpal18MonotonicTimestampERKNS0_6RecordES7_	opendnp3::MasterSchedulerBackend::GetBestTaskToRun(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::Record const&, opendnp3::MasterSchedulerBackend::Record const&)
function _ZN8opendnp322MasterSchedulerBackend15CheckForTaskRunEv	opendnp3::MasterSchedulerBackend::CheckForTaskRun()
function _ZNSt17_Function_handlerIFvvEZN8opendnp322MasterSchedulerBackend6DemandERKSt10shared_ptrINS1_11IMasterTaskEEEUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), opendnp3::MasterSchedulerBackend::Demand(std::shared_ptr<opendnp3::IMasterTask> const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZNSt17_Function_handlerIFvvEZN8opendnp322MasterSchedulerBackend19PostCheckForTaskRunEvEUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), opendnp3::MasterSchedulerBackend::PostCheckForTaskRun()::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZNSt17_Function_handlerIFvvEZN7openpal8TimerRef7RestartIZN8opendnp322MasterSchedulerBackend15CheckForTaskRunEvEUlvE_EEvRKNS1_18MonotonicTimestampERKT_EUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), void openpal::TimerRef::Restart<opendnp3::MasterSchedulerBackend::CheckForTaskRun()::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::MasterSchedulerBackend::CheckForTaskRun()::'lambda'() const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp322MasterSchedulerBackend6DemandERKSt10shared_ptrINS_11IMasterTaskEE	opendnp3::MasterSchedulerBackend::Demand(std::shared_ptr<opendnp3::IMasterTask> const&)
function _ZN8opendnp322MasterSchedulerBackendC1ERKSt10shared_ptrIN7openpal9IExecutorEE	opendnp3::MasterSchedulerBackend::MasterSchedulerBackend(std::shared_ptr<openpal::IExecutor> const&)
function _ZN8opendnp322MasterSchedulerBackend16SetRunnerOfflineERKNS_17IMasterTaskRunnerE	opendnp3::MasterSchedulerBackend::SetRunnerOffline(opendnp3::IMasterTaskRunner const&)
function _ZN8opendnp322MasterSchedulerBackend3AddERKSt10shared_ptrINS_11IMasterTaskEERNS_17IMasterTaskRunnerE	opendnp3::MasterSchedulerBackend::Add(std::shared_ptr<opendnp3::IMasterTask> const&, opendnp3::IMasterTaskRunner&)
function _ZN8opendnp322MasterSchedulerBackend18CompleteCurrentForERKNS_17IMasterTaskRunnerE	opendnp3::MasterSchedulerBackend::CompleteCurrentFor(opendnp3::IMasterTaskRunner const&)
function _ZN8opendnp322MasterSchedulerBackendD0Ev	opendnp3::MasterSchedulerBackend::~MasterSchedulerBackend()
function _ZN8opendnp322MasterSchedulerBackendD2Ev	opendnp3::MasterSchedulerBackend::~MasterSchedulerBackend()
function _ZNSt6vectorIN8opendnp322MasterSchedulerBackend6RecordESaIS2_EED1Ev	std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> >::~vector()
function _ZNSt6vectorIN8opendnp322MasterSchedulerBackend6RecordESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_	std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> >::_M_erase(__gnu_cxx::__normal_iterator<opendnp3::MasterSchedulerBackend::Record*, std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> > >, __gnu_cxx::__normal_iterator<opendnp3::MasterSchedulerBackend::Record*, std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> > >)
function _ZNSt6vectorIN8opendnp322MasterSchedulerBackend6RecordESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_	void std::vector<opendnp3::MasterSchedulerBackend::Record, std::allocator<opendnp3::MasterSchedulerBackend::Record> >::_M_emplace_back_aux<opendnp3::MasterSchedulerBackend::Record>(opendnp3::MasterSchedulerBackend::Record&&)
function _ZN8opendnp311MasterTasks14DemandTimeSyncEv	opendnp3::MasterTasks::DemandTimeSync()
function _ZN8opendnp311MasterTasks15DemandEventScanEv	opendnp3::MasterTasks::DemandEventScan()
function _ZN8opendnp311MasterTasks15DemandIntegrityEv	opendnp3::MasterTasks::DemandIntegrity()
function _ZN8opendnp311MasterTasks17OnRestartDetectedEv	opendnp3::MasterTasks::OnRestartDetected()
function _ZN8opendnp311MasterTasks15GetTimeSyncTaskERKSt10shared_ptrINS_11TaskContextEENS_12TimeSyncModeERKN7openpal6LoggerERNS_18IMasterApplicationE	opendnp3::MasterTasks::GetTimeSyncTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::TimeSyncMode, openpal::Logger const&, opendnp3::IMasterApplication&)
function _ZN8opendnp311MasterTasks18GetEnableUnsolTaskERKSt10shared_ptrINS_11TaskContextEERKNS_12MasterParamsERKN7openpal6LoggerERNS_18IMasterApplicationE	opendnp3::MasterTasks::GetEnableUnsolTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::MasterParams const&, openpal::Logger const&, opendnp3::IMasterApplication&)
function _ZN8opendnp311MasterTasks19GetDisableUnsolTaskERKSt10shared_ptrINS_11TaskContextEERKNS_12MasterParamsERKN7openpal6LoggerERNS_18IMasterApplicationE	opendnp3::MasterTasks::GetDisableUnsolTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::MasterParams const&, openpal::Logger const&, opendnp3::IMasterApplication&)
function _ZN8opendnp311MasterTasks10InitializeERNS_16IMasterSchedulerERNS_17IMasterTaskRunnerE	opendnp3::MasterTasks::Initialize(opendnp3::IMasterScheduler&, opendnp3::IMasterTaskRunner&)
function _ZN8opendnp311MasterTasksC1ERKNS_12MasterParamsERKN7openpal6LoggerERNS_18IMasterApplicationERNS_11ISOEHandlerE	opendnp3::MasterTasks::MasterTasks(opendnp3::MasterParams const&, openpal::Logger const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&)
function _ZN8opendnp311MasterTasks8BindTaskERKSt10shared_ptrINS_11IMasterTaskEE	opendnp3::MasterTasks::BindTask(std::shared_ptr<opendnp3::IMasterTask> const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp322DisableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::DisableUnsolicitedTask, std::allocator<opendnp3::DisableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321EnableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::EnableUnsolicitedTask, std::allocator<opendnp3::EnableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315LANTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::LANTimeSyncTask, std::allocator<opendnp3::LANTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315LANTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::LANTimeSyncTask, std::allocator<opendnp3::LANTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318SerialTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::SerialTimeSyncTask, std::allocator<opendnp3::SerialTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318SerialTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::SerialTimeSyncTask, std::allocator<opendnp3::SerialTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp313EventScanTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::EventScanTask, std::allocator<opendnp3::EventScanTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320StartupIntegrityPollESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::StartupIntegrityPoll, std::allocator<opendnp3::StartupIntegrityPoll>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315AssignClassTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::AssignClassTask, std::allocator<opendnp3::AssignClassTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp316ClearRestartTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::ClearRestartTask, std::allocator<opendnp3::ClearRestartTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311TaskContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	std::_Sp_counted_ptr_inplace<opendnp3::TaskContext, std::allocator<opendnp3::TaskContext>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311TaskContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TaskContext, std::allocator<opendnp3::TaskContext>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp316ClearRestartTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::ClearRestartTask, std::allocator<opendnp3::ClearRestartTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315AssignClassTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::AssignClassTask, std::allocator<opendnp3::AssignClassTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320StartupIntegrityPollESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::StartupIntegrityPoll, std::allocator<opendnp3::StartupIntegrityPoll>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp313EventScanTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::EventScanTask, std::allocator<opendnp3::EventScanTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318SerialTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::SerialTimeSyncTask, std::allocator<opendnp3::SerialTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315LANTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::LANTimeSyncTask, std::allocator<opendnp3::LANTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321EnableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::EnableUnsolicitedTask, std::allocator<opendnp3::EnableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp322DisableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::DisableUnsolicitedTask, std::allocator<opendnp3::DisableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp322DisableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::DisableUnsolicitedTask, std::allocator<opendnp3::DisableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321EnableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::EnableUnsolicitedTask, std::allocator<opendnp3::EnableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315LANTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::LANTimeSyncTask, std::allocator<opendnp3::LANTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318SerialTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::SerialTimeSyncTask, std::allocator<opendnp3::SerialTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp313EventScanTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::EventScanTask, std::allocator<opendnp3::EventScanTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320StartupIntegrityPollESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::StartupIntegrityPoll, std::allocator<opendnp3::StartupIntegrityPoll>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315AssignClassTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::AssignClassTask, std::allocator<opendnp3::AssignClassTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp316ClearRestartTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::ClearRestartTask, std::allocator<opendnp3::ClearRestartTask>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311TaskContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TaskContext, std::allocator<opendnp3::TaskContext>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311TaskContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TaskContext, std::allocator<opendnp3::TaskContext>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp316ClearRestartTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::ClearRestartTask, std::allocator<opendnp3::ClearRestartTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315AssignClassTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::AssignClassTask, std::allocator<opendnp3::AssignClassTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320StartupIntegrityPollESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::StartupIntegrityPoll, std::allocator<opendnp3::StartupIntegrityPoll>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp313EventScanTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::EventScanTask, std::allocator<opendnp3::EventScanTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp318SerialTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::SerialTimeSyncTask, std::allocator<opendnp3::SerialTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315LANTimeSyncTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::LANTimeSyncTask, std::allocator<opendnp3::LANTimeSyncTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321EnableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::EnableUnsolicitedTask, std::allocator<opendnp3::EnableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp322DisableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::DisableUnsolicitedTask, std::allocator<opendnp3::DisableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp322DisableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::DisableUnsolicitedTask, std::allocator<opendnp3::DisableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321EnableUnsolicitedTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::EnableUnsolicitedTask, std::allocator<opendnp3::EnableUnsolicitedTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp313EventScanTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::EventScanTask, std::allocator<opendnp3::EventScanTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp320StartupIntegrityPollESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::StartupIntegrityPoll, std::allocator<opendnp3::StartupIntegrityPoll>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp315AssignClassTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::AssignClassTask, std::allocator<opendnp3::AssignClassTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp316ClearRestartTaskESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::ClearRestartTask, std::allocator<opendnp3::ClearRestartTask>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt6vectorISt10shared_ptrIN8opendnp311IMasterTaskEESaIS3_EE19_M_emplace_back_auxIIRKS3_EEEvDpOT_	_ZNSt6vectorISt10shared_ptrIN8opendnp311IMasterTaskEESaIS3_EE19_M_emplace_back_auxIIRKS3_EEEvDpOT_
function _ZNSt8_Rb_treeIPKN8opendnp311IMasterTaskES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E	std::_Rb_tree<opendnp3::IMasterTask const*, opendnp3::IMasterTask const*, std::_Identity<opendnp3::IMasterTask const*>, std::less<opendnp3::IMasterTask const*>, std::allocator<opendnp3::IMasterTask const*> >::_M_erase(std::_Rb_tree_node<opendnp3::IMasterTask const*>*)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp311TaskContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TaskContext, std::allocator<opendnp3::TaskContext>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNK8opendnp321TransformedCollectionINS_11Group50Var1EN7openpal10UInt48TypeEZNS_18MeasurementHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionIS1_EEEUlRKS1_E_E5CountEv	opendnp3::TransformedCollection<opendnp3::Group50Var1, openpal::UInt48Type, opendnp3::MeasurementHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)::'lambda'(opendnp3::Group50Var1 const&)>::Count() const
function _ZNK8opendnp321TransformedCollectionINS_11Group50Var1EN7openpal10UInt48TypeEZNS_18MeasurementHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionIS1_EEEUlRKS1_E_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::TransformedCollection<opendnp3::Group50Var1, openpal::UInt48Type, opendnp3::MeasurementHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)::'lambda'(opendnp3::Group50Var1 const&)>::Foreach(opendnp3::IVisitor<openpal::UInt48Type>&) const
function _ZN8opendnp314FunctorVisitorINS_11Group50Var1EZNKS_21TransformedCollectionIS1_N7openpal10UInt48TypeEZNS_18MeasurementHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionIS1_EEEUlRKS1_E_E7ForeachERNS_8IVisitorIS4_EEEUlSE_E_E7OnValueESE_	opendnp3::FunctorVisitor<opendnp3::Group50Var1, opendnp3::TransformedCollection<opendnp3::Group50Var1, openpal::UInt48Type, opendnp3::MeasurementHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)::'lambda'(opendnp3::Group50Var1 const&)>::Foreach(opendnp3::IVisitor<openpal::UInt48Type>&) const::'lambda'(opendnp3::Group50Var1 const&)>::OnValue(opendnp3::Group50Var1 const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group51Var2EEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group51Var2> const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group51Var1EEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group51Var1> const&)
function _ZN8opendnp318MeasurementHandlerC1ERKN7openpal6LoggerEPNS_11ISOEHandlerE	opendnp3::MeasurementHandler::MeasurementHandler(openpal::Logger const&, opendnp3::ISOEHandler*)
function _ZN8opendnp318MeasurementHandlerD1Ev	opendnp3::MeasurementHandler::~MeasurementHandler()
function _ZN8opendnp318MeasurementHandler19ProcessMeasurementsERKN7openpal6RSliceERNS1_6LoggerEPNS_11ISOEHandlerE	opendnp3::MeasurementHandler::ProcessMeasurements(openpal::RSlice const&, openpal::Logger&, opendnp3::ISOEHandler*)
function _ZN8opendnp318MeasurementHandler12ModeFromTypeENS_14GroupVariationE	opendnp3::MeasurementHandler::ModeFromType(opendnp3::GroupVariation)
function _ZN8opendnp318MeasurementHandler15CheckForTxStartEv	opendnp3::MeasurementHandler::CheckForTxStart()
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryOutputStatusEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_7CounterEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Counter> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_13FrozenCounterEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::FrozenCounter> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_6AnalogEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Analog> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogOutputStatusEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_11OctetStringEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::OctetString> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryCommandEventEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryCommandEvent> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogCommandEventEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogCommandEvent> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var1EEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_12Group122Var1EEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var1> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18BinaryOutputStatusEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::BinaryOutputStatus> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_7CounterEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Counter> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_13FrozenCounterEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::FrozenCounter> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_6AnalogEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Analog> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_18AnalogOutputStatusEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputStatus> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_11OctetStringEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::OctetString> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_12Group122Var2EEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var2> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_12Group121Var1EEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group121Var1> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_6BinaryEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_15DoubleBitBinaryEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_15DoubleBitBinaryEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)
function _ZN8opendnp318MeasurementHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_6BinaryEEEEE	opendnp3::MeasurementHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)
function _ZN8opendnp318MeasurementHandler7ConvertERKNS_12Group121Var1E	opendnp3::MeasurementHandler::Convert(opendnp3::Group121Var1 const&)
function _ZN8opendnp318MeasurementHandler7ConvertERKNS_12Group122Var1E	opendnp3::MeasurementHandler::Convert(opendnp3::Group122Var1 const&)
function _ZN8opendnp318MeasurementHandler7ConvertERKNS_12Group122Var2E	opendnp3::MeasurementHandler::Convert(opendnp3::Group122Var2 const&)
function _ZN8opendnp318MeasurementHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::MeasurementHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp314FunctorVisitorINS_11Group51Var2EZNKS_11ICollectionIS1_E13ReadOnlyValueERS1_EUlRKS1_E_E7OnValueES6_	opendnp3::FunctorVisitor<opendnp3::Group51Var2, opendnp3::ICollection<opendnp3::Group51Var2>::ReadOnlyValue(opendnp3::Group51Var2&) const::'lambda'(opendnp3::Group51Var2 const&)>::OnValue(opendnp3::Group51Var2 const&)
function _ZN8opendnp314FunctorVisitorINS_11Group51Var1EZNKS_11ICollectionIS1_E13ReadOnlyValueERS1_EUlRKS1_E_E7OnValueES6_	opendnp3::FunctorVisitor<opendnp3::Group51Var1, opendnp3::ICollection<opendnp3::Group51Var1>::ReadOnlyValue(opendnp3::Group51Var1&) const::'lambda'(opendnp3::Group51Var1 const&)>::OnValue(opendnp3::Group51Var1 const&)
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_12Group122Var2EEENS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS4_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E5CountEv	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group122Var2>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group122Var2>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var2> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group122Var2> const&)>::Count() const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_12Group122Var2EEENS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS4_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS5_EE	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group122Var2>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group122Var2>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var2> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group122Var2> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::SecurityStat> >&) const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_12Group122Var1EEENS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS4_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E5CountEv	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group122Var1>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group122Var1>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var1> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group122Var1> const&)>::Count() const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_12Group122Var1EEENS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS4_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS5_EE	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group122Var1>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group122Var1>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var1> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group122Var1> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::SecurityStat> >&) const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_12Group121Var1EEENS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS4_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E5CountEv	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group121Var1>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group121Var1>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group121Var1> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group121Var1> const&)>::Count() const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_12Group121Var1EEENS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS4_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS5_EE	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group121Var1>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group121Var1>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group121Var1> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group121Var1> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::SecurityStat> >&) const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_15DoubleBitBinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E5CountEv	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)>::Count() const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_6BinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E5CountEv	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Binary>, opendnp3::Indexed<opendnp3::Binary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)>::Count() const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_15DoubleBitBinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const
function _ZNK8opendnp321TransformedCollectionINS_7IndexedINS_6BinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EE	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Binary>, opendnp3::Indexed<opendnp3::Binary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_12Group121Var1EEEZNKS_21TransformedCollectionIS3_NS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS5_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS6_EEEUlSK_E_E7OnValueESK_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::Group121Var1>, opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group121Var1>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group121Var1>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group121Var1> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group121Var1> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::SecurityStat> >&) const::'lambda'(opendnp3::Indexed<opendnp3::Group121Var1> const&)>::OnValue(opendnp3::Indexed<opendnp3::Group121Var1> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_12Group122Var1EEEZNKS_21TransformedCollectionIS3_NS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS5_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS6_EEEUlSK_E_E7OnValueESK_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::Group122Var1>, opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group122Var1>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group122Var1>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var1> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group122Var1> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::SecurityStat> >&) const::'lambda'(opendnp3::Indexed<opendnp3::Group122Var1> const&)>::OnValue(opendnp3::Indexed<opendnp3::Group122Var1> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_12Group122Var2EEEZNKS_21TransformedCollectionIS3_NS1_INS_12SecurityStatEEEZNS_18MeasurementHandler25LoadValuesWithTransformToIS5_S2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT0_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS6_EEEUlSK_E_E7OnValueESK_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::Group122Var2>, opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Group122Var2>, opendnp3::Indexed<opendnp3::SecurityStat>, opendnp3::IINField opendnp3::MeasurementHandler::LoadValuesWithTransformTo<opendnp3::SecurityStat, opendnp3::Group122Var2>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Group122Var2> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Group122Var2> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::SecurityStat> >&) const::'lambda'(opendnp3::Indexed<opendnp3::Group122Var2> const&)>::OnValue(opendnp3::Indexed<opendnp3::Group122Var2> const&)
function _ZZNK8opendnp321TransformedCollectionINS_7IndexedINS_15DoubleBitBinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EEENKUlSH_E_clESH_	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)::operator()(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&) const
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_15DoubleBitBinaryEEEZNKS_21TransformedCollectionIS3_S3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EEEUlSI_E_E7OnValueESI_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::Indexed<opendnp3::DoubleBitBinary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::DoubleBitBinary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::DoubleBitBinary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::DoubleBitBinary> >&) const::'lambda'(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)>::OnValue(opendnp3::Indexed<opendnp3::DoubleBitBinary> const&)
function _ZZNK8opendnp321TransformedCollectionINS_7IndexedINS_6BinaryEEES3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EEENKUlSH_E_clESH_	opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Binary>, opendnp3::Indexed<opendnp3::Binary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)::operator()(opendnp3::Indexed<opendnp3::Binary> const&) const
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_6BinaryEEEZNKS_21TransformedCollectionIS3_S3_ZNS_18MeasurementHandler14ProcessWithCTOIS2_EENS_8IINFieldERKNS_12HeaderRecordERKNS_11ICollectionINS1_IT_EEEEEUlRKS3_E_E7ForeachERNS_8IVisitorIS3_EEEUlSI_E_E7OnValueESI_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::Binary>, opendnp3::TransformedCollection<opendnp3::Indexed<opendnp3::Binary>, opendnp3::Indexed<opendnp3::Binary>, opendnp3::IINField opendnp3::MeasurementHandler::ProcessWithCTO<opendnp3::Binary>(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::Binary> > const&)::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)>::Foreach(opendnp3::IVisitor<opendnp3::Indexed<opendnp3::Binary> >&) const::'lambda'(opendnp3::Indexed<opendnp3::Binary> const&)>::OnValue(opendnp3::Indexed<opendnp3::Binary> const&)
function _ZN8opendnp312PollTaskBase10InitializeEv	opendnp3::PollTaskBase::Initialize()
function _ZN8opendnp312PollTaskBaseC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERNS_11ISOEHandlerERKNS_12TaskBehaviorEN7openpal6LoggerENS_10TaskConfigE	opendnp3::PollTaskBase::PollTaskBase(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, opendnp3::TaskBehavior const&, openpal::Logger, opendnp3::TaskConfig)
function _ZN8opendnp312PollTaskBase19ProcessMeasurementsERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::PollTaskBase::ProcessMeasurements(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp312PollTaskBase15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::PollTaskBase::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZNK8opendnp320RestartOperationTask11GetTaskTypeEv	opendnp3::RestartOperationTask::GetTaskType() const
function _ZN8opendnp320RestartOperationTask12BuildRequestERNS_11APDURequestEh	opendnp3::RestartOperationTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZNK8opendnp320RestartOperationTask4NameEv	opendnp3::RestartOperationTask::Name() const
function _ZN8opendnp320RestartOperationTask9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::RestartOperationTask::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZThn136_N8opendnp320RestartOperationTask9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	non-virtual thunk to opendnp3::RestartOperationTask::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp320RestartOperationTask14OnTaskCompleteENS_14TaskCompletionEN7openpal18MonotonicTimestampE	opendnp3::RestartOperationTask::OnTaskComplete(opendnp3::TaskCompletion, openpal::MonotonicTimestamp)
function _ZN8opendnp320RestartOperationTask13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var2EEE	opendnp3::RestartOperationTask::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var2> const&)
function _ZThn136_N8opendnp320RestartOperationTask13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var2EEE	non-virtual thunk to opendnp3::RestartOperationTask::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var2> const&)
function _ZN8opendnp320RestartOperationTask13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var1EEE	opendnp3::RestartOperationTask::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var1> const&)
function _ZThn136_N8opendnp320RestartOperationTask13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var1EEE	non-virtual thunk to opendnp3::RestartOperationTask::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var1> const&)
function _ZN8opendnp320RestartOperationTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::RestartOperationTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp320RestartOperationTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERKN7openpal18MonotonicTimestampENS_11RestartTypeERKSt8functionIFvRKNS_22RestartOperationResultEEENS8_6LoggerERKNS_10TaskConfigE	opendnp3::RestartOperationTask::RestartOperationTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::MonotonicTimestamp const&, opendnp3::RestartType, std::function<void (opendnp3::RestartOperationResult const&)> const&, openpal::Logger, opendnp3::TaskConfig const&)
function _ZN8opendnp320RestartOperationTask14ToFunctionCodeENS_11RestartTypeE	opendnp3::RestartOperationTask::ToFunctionCode(opendnp3::RestartType)
function _ZNK8opendnp320RestartOperationTask8PriorityEv	opendnp3::RestartOperationTask::Priority() const
function _ZNK8opendnp320RestartOperationTask19BlocksLowerPriorityEv	opendnp3::RestartOperationTask::BlocksLowerPriority() const
function _ZNK8opendnp320RestartOperationTask11IsRecurringEv	opendnp3::RestartOperationTask::IsRecurring() const
function _ZN8opendnp314FunctorVisitorINS_11Group52Var2EZNKS_11ICollectionIS1_E13ReadOnlyValueERS1_EUlRKS1_E_E7OnValueES6_	opendnp3::FunctorVisitor<opendnp3::Group52Var2, opendnp3::ICollection<opendnp3::Group52Var2>::ReadOnlyValue(opendnp3::Group52Var2&) const::'lambda'(opendnp3::Group52Var2 const&)>::OnValue(opendnp3::Group52Var2 const&)
function _ZN8opendnp314FunctorVisitorINS_11Group52Var1EZNKS_11ICollectionIS1_E13ReadOnlyValueERS1_EUlRKS1_E_E7OnValueES6_	opendnp3::FunctorVisitor<opendnp3::Group52Var1, opendnp3::ICollection<opendnp3::Group52Var1>::ReadOnlyValue(opendnp3::Group52Var1&) const::'lambda'(opendnp3::Group52Var1 const&)>::OnValue(opendnp3::Group52Var1 const&)
function _ZN8opendnp320RestartOperationTaskD2Ev	opendnp3::RestartOperationTask::~RestartOperationTask()
function _ZN8opendnp320RestartOperationTaskD0Ev	opendnp3::RestartOperationTask::~RestartOperationTask()
function _ZN8opendnp318SerialTimeSyncTask10InitializeEv	opendnp3::SerialTimeSyncTask::Initialize()
function _ZN8opendnp318SerialTimeSyncTask12BuildRequestERNS_11APDURequestEh	opendnp3::SerialTimeSyncTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp318SerialTimeSyncTaskC2ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationEN7openpal6LoggerE	opendnp3::SerialTimeSyncTask::SerialTimeSyncTask(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, openpal::Logger)
function _ZN8opendnp318SerialTimeSyncTask19OnResponseDelayMeasERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::SerialTimeSyncTask::OnResponseDelayMeas(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp318SerialTimeSyncTask19OnResponseWriteTimeERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::SerialTimeSyncTask::OnResponseWriteTime(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZN8opendnp318SerialTimeSyncTask15ProcessResponseERKNS_18APDUResponseHeaderERKN7openpal6RSliceE	opendnp3::SerialTimeSyncTask::ProcessResponse(opendnp3::APDUResponseHeader const&, openpal::RSlice const&)
function _ZNK8opendnp318SerialTimeSyncTask4NameEv	opendnp3::SerialTimeSyncTask::Name() const
function _ZNK8opendnp318SerialTimeSyncTask8PriorityEv	opendnp3::SerialTimeSyncTask::Priority() const
function _ZNK8opendnp318SerialTimeSyncTask19BlocksLowerPriorityEv	opendnp3::SerialTimeSyncTask::BlocksLowerPriority() const
function _ZNK8opendnp318SerialTimeSyncTask11IsRecurringEv	opendnp3::SerialTimeSyncTask::IsRecurring() const
function _ZNK8opendnp318SerialTimeSyncTask11GetTaskTypeEv	opendnp3::SerialTimeSyncTask::GetTaskType() const
function _ZNK8opendnp318SerialTimeSyncTask9IsEnabledEv	opendnp3::SerialTimeSyncTask::IsEnabled() const
function _ZN8opendnp315TimeSyncHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::TimeSyncHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp318SerialTimeSyncTaskD1Ev	opendnp3::SerialTimeSyncTask::~SerialTimeSyncTask()
function _ZN8opendnp318SerialTimeSyncTaskD0Ev	opendnp3::SerialTimeSyncTask::~SerialTimeSyncTask()
function _ZN8opendnp315TimeSyncHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group52Var2EEE	opendnp3::TimeSyncHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group52Var2> const&)
function _ZN8opendnp320StartupIntegrityPoll12BuildRequestERNS_11APDURequestEh	opendnp3::StartupIntegrityPoll::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZNK8opendnp320StartupIntegrityPoll9IsEnabledEv	opendnp3::StartupIntegrityPoll::IsEnabled() const
function _ZN8opendnp320StartupIntegrityPollC1ERKSt10shared_ptrINS_11TaskContextEERNS_18IMasterApplicationERNS_11ISOEHandlerENS_10ClassFieldERKNS_12TaskBehaviorEN7openpal6LoggerE	opendnp3::StartupIntegrityPoll::StartupIntegrityPoll(std::shared_ptr<opendnp3::TaskContext> const&, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, opendnp3::ClassField, opendnp3::TaskBehavior const&, openpal::Logger)
function _ZNK8opendnp320StartupIntegrityPoll11IsRecurringEv	opendnp3::StartupIntegrityPoll::IsRecurring() const
function _ZNK8opendnp320StartupIntegrityPoll4NameEv	opendnp3::StartupIntegrityPoll::Name() const
function _ZNK8opendnp320StartupIntegrityPoll8PriorityEv	opendnp3::StartupIntegrityPoll::Priority() const
function _ZNK8opendnp320StartupIntegrityPoll19BlocksLowerPriorityEv	opendnp3::StartupIntegrityPoll::BlocksLowerPriority() const
function _ZNK8opendnp320StartupIntegrityPoll11GetTaskTypeEv	opendnp3::StartupIntegrityPoll::GetTaskType() const
function _ZN8opendnp320StartupIntegrityPollD1Ev	opendnp3::StartupIntegrityPoll::~StartupIntegrityPoll()
function _ZN8opendnp320StartupIntegrityPollD0Ev	opendnp3::StartupIntegrityPoll::~StartupIntegrityPoll()
function _ZN8opendnp312TaskBehaviorC1ERKN7openpal12TimeDurationERKNS1_18MonotonicTimestampES4_S4_S7_	opendnp3::TaskBehavior::TaskBehavior(openpal::TimeDuration const&, openpal::MonotonicTimestamp const&, openpal::TimeDuration const&, openpal::TimeDuration const&, openpal::MonotonicTimestamp const&)
function _ZN8opendnp312TaskBehavior22SingleExecutionNoRetryEN7openpal18MonotonicTimestampE	opendnp3::TaskBehavior::SingleExecutionNoRetry(openpal::MonotonicTimestamp)
function _ZN8opendnp312TaskBehavior22SingleExecutionNoRetryEv	opendnp3::TaskBehavior::SingleExecutionNoRetry()
function _ZN8opendnp312TaskBehavior17ImmediatePeriodicERKN7openpal12TimeDurationES4_S4_	opendnp3::TaskBehavior::ImmediatePeriodic(openpal::TimeDuration const&, openpal::TimeDuration const&, openpal::TimeDuration const&)
function _ZN8opendnp312TaskBehavior33SingleImmediateExecutionWithRetryERKN7openpal12TimeDurationES4_	opendnp3::TaskBehavior::SingleImmediateExecutionWithRetry(openpal::TimeDuration const&, openpal::TimeDuration const&)
function _ZN8opendnp312TaskBehavior15ReactsToIINOnlyEv	opendnp3::TaskBehavior::ReactsToIINOnly()
function _ZN8opendnp312TaskBehavior9OnSuccessERKN7openpal18MonotonicTimestampE	opendnp3::TaskBehavior::OnSuccess(openpal::MonotonicTimestamp const&)
function _ZN8opendnp312TaskBehavior5ResetEv	opendnp3::TaskBehavior::Reset()
function _ZN8opendnp312TaskBehavior7DisableEv	opendnp3::TaskBehavior::Disable()
function _ZNK8opendnp312TaskBehavior20CalcNextRetryTimeoutEv	opendnp3::TaskBehavior::CalcNextRetryTimeout() const
function _ZN8opendnp312TaskBehavior17OnResponseTimeoutERKN7openpal18MonotonicTimestampE	opendnp3::TaskBehavior::OnResponseTimeout(openpal::MonotonicTimestamp const&)
function _ZN8opendnp311TaskContext8AddBlockERKNS_11IMasterTaskE	opendnp3::TaskContext::AddBlock(opendnp3::IMasterTask const&)
function _ZNK8opendnp311TaskContext9IsBlockedERKNS_11IMasterTaskE	opendnp3::TaskContext::IsBlocked(opendnp3::IMasterTask const&) const
function _ZN8opendnp311TaskContext11RemoveBlockERKNS_11IMasterTaskE	opendnp3::TaskContext::RemoveBlock(opendnp3::IMasterTask const&)
function _ZN8opendnp312UserPollTask12BuildRequestERNS_11APDURequestEh	opendnp3::UserPollTask::BuildRequest(opendnp3::APDURequest&, unsigned char)
function _ZN8opendnp312UserPollTaskC2ERKSt10shared_ptrINS_11TaskContextEERKSt8functionIFbRNS_12HeaderWriterEEERKNS_12TaskBehaviorEbRNS_18IMasterApplicationERNS_11ISOEHandlerEN7openpal6LoggerENS_10TaskConfigE	opendnp3::UserPollTask::UserPollTask(std::shared_ptr<opendnp3::TaskContext> const&, std::function<bool (opendnp3::HeaderWriter&)> const&, opendnp3::TaskBehavior const&, bool, opendnp3::IMasterApplication&, opendnp3::ISOEHandler&, openpal::Logger, opendnp3::TaskConfig)
function _ZNK8opendnp312UserPollTask8PriorityEv	opendnp3::UserPollTask::Priority() const
function _ZNK8opendnp312UserPollTask19BlocksLowerPriorityEv	opendnp3::UserPollTask::BlocksLowerPriority() const
function _ZNK8opendnp312UserPollTask11IsRecurringEv	opendnp3::UserPollTask::IsRecurring() const
function _ZNK8opendnp312UserPollTask9IsEnabledEv	opendnp3::UserPollTask::IsEnabled() const
function _ZNK8opendnp312UserPollTask11GetTaskTypeEv	opendnp3::UserPollTask::GetTaskType() const
function _ZN8opendnp312UserPollTaskD1Ev	opendnp3::UserPollTask::~UserPollTask()
function _ZN8opendnp312UserPollTaskD0Ev	opendnp3::UserPollTask::~UserPollTask()
function _ZN8opendnp310Group1Var2C1Ev	opendnp3::Group1Var2::Group1Var2()
function _ZN8opendnp310Group1Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group1Var2::Read(openpal::RSlice&, opendnp3::Group1Var2&)
function _ZN8opendnp310Group1Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group1Var2::Write(opendnp3::Group1Var2 const&, openpal::WSlice&)
function _ZN8opendnp310Group1Var210ReadTargetERN7openpal6RSliceERNS_6BinaryE	opendnp3::Group1Var2::ReadTarget(openpal::RSlice&, opendnp3::Binary&)
function _ZN8opendnp310Group1Var211WriteTargetERKNS_6BinaryERN7openpal6WSliceE	opendnp3::Group1Var2::WriteTarget(opendnp3::Binary const&, openpal::WSlice&)
function _ZN8opendnp311Group10Var2C1Ev	opendnp3::Group10Var2::Group10Var2()
function _ZN8opendnp311Group10Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group10Var2::Read(openpal::RSlice&, opendnp3::Group10Var2&)
function _ZN8opendnp311Group10Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group10Var2::Write(opendnp3::Group10Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group10Var210ReadTargetERN7openpal6RSliceERNS_18BinaryOutputStatusE	opendnp3::Group10Var2::ReadTarget(openpal::RSlice&, opendnp3::BinaryOutputStatus&)
function _ZN8opendnp311Group10Var211WriteTargetERKNS_18BinaryOutputStatusERN7openpal6WSliceE	opendnp3::Group10Var2::WriteTarget(opendnp3::BinaryOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group11Var1C2Ev	opendnp3::Group11Var1::Group11Var1()
function _ZN8opendnp311Group11Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group11Var1::Read(openpal::RSlice&, opendnp3::Group11Var1&)
function _ZN8opendnp311Group11Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group11Var1::Write(opendnp3::Group11Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group11Var110ReadTargetERN7openpal6RSliceERNS_18BinaryOutputStatusE	opendnp3::Group11Var1::ReadTarget(openpal::RSlice&, opendnp3::BinaryOutputStatus&)
function _ZN8opendnp311Group11Var111WriteTargetERKNS_18BinaryOutputStatusERN7openpal6WSliceE	opendnp3::Group11Var1::WriteTarget(opendnp3::BinaryOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group11Var2C1Ev	opendnp3::Group11Var2::Group11Var2()
function _ZN8opendnp311Group11Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group11Var2::Read(openpal::RSlice&, opendnp3::Group11Var2&)
function _ZN8opendnp311Group11Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group11Var2::Write(opendnp3::Group11Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group11Var210ReadTargetERN7openpal6RSliceERNS_18BinaryOutputStatusE	opendnp3::Group11Var2::ReadTarget(openpal::RSlice&, opendnp3::BinaryOutputStatus&)
function _ZN8opendnp311Group11Var211WriteTargetERKNS_18BinaryOutputStatusERN7openpal6WSliceE	opendnp3::Group11Var2::WriteTarget(opendnp3::BinaryOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group12Var1C1Ev	opendnp3::Group12Var1::Group12Var1()
function _ZN8opendnp311Group12Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group12Var1::Read(openpal::RSlice&, opendnp3::Group12Var1&)
function _ZN8opendnp311Group12Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group12Var1::Write(opendnp3::Group12Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group12Var110ReadTargetERN7openpal6RSliceERNS_23ControlRelayOutputBlockE	opendnp3::Group12Var1::ReadTarget(openpal::RSlice&, opendnp3::ControlRelayOutputBlock&)
function _ZN8opendnp311Group12Var111WriteTargetERKNS_23ControlRelayOutputBlockERN7openpal6WSliceE	opendnp3::Group12Var1::WriteTarget(opendnp3::ControlRelayOutputBlock const&, openpal::WSlice&)
function _ZNK8opendnp312Group120Var54SizeEv	opendnp3::Group120Var5::Size() const
function _ZNK8opendnp312Group120Var64SizeEv	opendnp3::Group120Var6::Size() const
function _ZNK8opendnp312Group120Var74SizeEv	opendnp3::Group120Var7::Size() const
function _ZNK8opendnp312Group120Var84SizeEv	opendnp3::Group120Var8::Size() const
function _ZN8opendnp312Group120Var94ReadERKN7openpal6RSliceE	opendnp3::Group120Var9::Read(openpal::RSlice const&)
function _ZNK8opendnp313Group120Var104SizeEv	opendnp3::Group120Var10::Size() const
function _ZNK8opendnp313Group120Var114SizeEv	opendnp3::Group120Var11::Size() const
function _ZNK8opendnp313Group120Var134SizeEv	opendnp3::Group120Var13::Size() const
function _ZN8opendnp313Group120Var144ReadERKN7openpal6RSliceE	opendnp3::Group120Var14::Read(openpal::RSlice const&)
function _ZNK8opendnp312Group120Var94SizeEv	opendnp3::Group120Var9::Size() const
function _ZN8opendnp313Group120Var154ReadERKN7openpal6RSliceE	opendnp3::Group120Var15::Read(openpal::RSlice const&)
function _ZNK8opendnp312Group120Var95WriteERN7openpal6WSliceE	opendnp3::Group120Var9::Write(openpal::WSlice&) const
function _ZN8opendnp312Group120Var84ReadERKN7openpal6RSliceE	opendnp3::Group120Var8::Read(openpal::RSlice const&)
function _ZNK8opendnp313Group120Var145WriteERN7openpal6WSliceE	opendnp3::Group120Var14::Write(openpal::WSlice&) const
function _ZNK8opendnp313Group120Var155WriteERN7openpal6WSliceE	opendnp3::Group120Var15::Write(openpal::WSlice&) const
function _ZNK8opendnp312Group120Var85WriteERN7openpal6WSliceE	opendnp3::Group120Var8::Write(openpal::WSlice&) const
function _ZN8opendnp312Group120Var14ReadERKN7openpal6RSliceE	opendnp3::Group120Var1::Read(openpal::RSlice const&)
function _ZN8opendnp313Group120Var114ReadERKN7openpal6RSliceE	opendnp3::Group120Var11::Read(openpal::RSlice const&)
function _ZNK8opendnp313Group120Var115WriteERN7openpal6WSliceE	opendnp3::Group120Var11::Write(openpal::WSlice&) const
function _ZNK8opendnp313Group120Var135WriteERN7openpal6WSliceE	opendnp3::Group120Var13::Write(openpal::WSlice&) const
function _ZNK8opendnp312Group120Var75WriteERN7openpal6WSliceE	opendnp3::Group120Var7::Write(openpal::WSlice&) const
function _ZNK8opendnp312Group120Var15WriteERN7openpal6WSliceE	opendnp3::Group120Var1::Write(openpal::WSlice&) const
function _ZNK8opendnp312Group120Var65WriteERN7openpal6WSliceE	opendnp3::Group120Var6::Write(openpal::WSlice&) const
function _ZNK8opendnp312Group120Var25WriteERN7openpal6WSliceE	opendnp3::Group120Var2::Write(openpal::WSlice&) const
function _ZNK8opendnp313Group120Var105WriteERN7openpal6WSliceE	opendnp3::Group120Var10::Write(openpal::WSlice&) const
function _ZN8opendnp312Group120Var54ReadERKN7openpal6RSliceE	opendnp3::Group120Var5::Read(openpal::RSlice const&)
function _ZN8opendnp313Group120Var104ReadERKN7openpal6RSliceE	opendnp3::Group120Var10::Read(openpal::RSlice const&)
function _ZN8opendnp312Group120Var74ReadERKN7openpal6RSliceE	opendnp3::Group120Var7::Read(openpal::RSlice const&)
function _ZN8opendnp312Group120Var24ReadERKN7openpal6RSliceE	opendnp3::Group120Var2::Read(openpal::RSlice const&)
function _ZN8opendnp312Group120Var64ReadERKN7openpal6RSliceE	opendnp3::Group120Var6::Read(openpal::RSlice const&)
function _ZN8opendnp313Group120Var124ReadERKN7openpal6RSliceE	opendnp3::Group120Var12::Read(openpal::RSlice const&)
function _ZN8opendnp313Group120Var134ReadERKN7openpal6RSliceE	opendnp3::Group120Var13::Read(openpal::RSlice const&)
function _ZNK8opendnp312Group120Var55WriteERN7openpal6WSliceE	opendnp3::Group120Var5::Write(openpal::WSlice&) const
function _ZNK8opendnp313Group120Var125WriteERN7openpal6WSliceE	opendnp3::Group120Var12::Write(openpal::WSlice&) const
function _ZN8opendnp312Group120Var1C1Ev	opendnp3::Group120Var1::Group120Var1()
function _ZN8opendnp312Group120Var1C2EjtNS_8HMACTypeENS_15ChallengeReasonERKN7openpal6RSliceE	opendnp3::Group120Var1::Group120Var1(unsigned int, unsigned short, opendnp3::HMACType, opendnp3::ChallengeReason, openpal::RSlice const&)
function _ZN8opendnp312Group120Var2C1Ev	opendnp3::Group120Var2::Group120Var2()
function _ZN8opendnp312Group120Var2C2EjtRKN7openpal6RSliceE	opendnp3::Group120Var2::Group120Var2(unsigned int, unsigned short, openpal::RSlice const&)
function _ZN8opendnp312Group120Var3C1Ev	opendnp3::Group120Var3::Group120Var3()
function _ZN8opendnp312Group120Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group120Var3::Read(openpal::RSlice&, opendnp3::Group120Var3&)
function _ZN8opendnp312Group120Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group120Var3::Write(opendnp3::Group120Var3 const&, openpal::WSlice&)
function _ZN8opendnp312Group120Var4C2Ev	opendnp3::Group120Var4::Group120Var4()
function _ZN8opendnp312Group120Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group120Var4::Read(openpal::RSlice&, opendnp3::Group120Var4&)
function _ZN8opendnp312Group120Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group120Var4::Write(opendnp3::Group120Var4 const&, openpal::WSlice&)
function _ZN8opendnp312Group120Var5C2Ev	opendnp3::Group120Var5::Group120Var5()
function _ZN8opendnp312Group120Var5C2EjtNS_16KeyWrapAlgorithmENS_9KeyStatusENS_8HMACTypeERKN7openpal6RSliceES7_	opendnp3::Group120Var5::Group120Var5(unsigned int, unsigned short, opendnp3::KeyWrapAlgorithm, opendnp3::KeyStatus, opendnp3::HMACType, openpal::RSlice const&, openpal::RSlice const&)
function _ZN8opendnp312Group120Var6C1Ev	opendnp3::Group120Var6::Group120Var6()
function _ZN8opendnp312Group120Var6C1EjtRKN7openpal6RSliceE	opendnp3::Group120Var6::Group120Var6(unsigned int, unsigned short, openpal::RSlice const&)
function _ZN8opendnp312Group120Var7C1Ev	opendnp3::Group120Var7::Group120Var7()
function _ZN8opendnp312Group120Var7C1EjttNS_13AuthErrorCodeEN7openpal10UInt48TypeERKNS2_6RSliceE	opendnp3::Group120Var7::Group120Var7(unsigned int, unsigned short, unsigned short, opendnp3::AuthErrorCode, openpal::UInt48Type, openpal::RSlice const&)
function _ZN8opendnp312Group120Var8C2Ev	opendnp3::Group120Var8::Group120Var8()
function _ZN8opendnp312Group120Var8C2ENS_15KeyChangeMethodENS_15CertificateTypeERKN7openpal6RSliceE	opendnp3::Group120Var8::Group120Var8(opendnp3::KeyChangeMethod, opendnp3::CertificateType, openpal::RSlice const&)
function _ZN8opendnp312Group120Var9C2Ev	opendnp3::Group120Var9::Group120Var9()
function _ZN8opendnp312Group120Var9C1ERKN7openpal6RSliceE	opendnp3::Group120Var9::Group120Var9(openpal::RSlice const&)
function _ZN8opendnp313Group120Var10C2Ev	opendnp3::Group120Var10::Group120Var10()
function _ZN8opendnp313Group120Var10C1ENS_15KeyChangeMethodENS_13UserOperationEjttRKN7openpal6RSliceES6_S6_	opendnp3::Group120Var10::Group120Var10(opendnp3::KeyChangeMethod, opendnp3::UserOperation, unsigned int, unsigned short, unsigned short, openpal::RSlice const&, openpal::RSlice const&, openpal::RSlice const&)
function _ZN8opendnp313Group120Var11C1Ev	opendnp3::Group120Var11::Group120Var11()
function _ZN8opendnp313Group120Var11C1ENS_15KeyChangeMethodERKN7openpal6RSliceES5_	opendnp3::Group120Var11::Group120Var11(opendnp3::KeyChangeMethod, openpal::RSlice const&, openpal::RSlice const&)
function _ZN8opendnp313Group120Var12C2Ev	opendnp3::Group120Var12::Group120Var12()
function _ZN8opendnp313Group120Var12C2EjtRKN7openpal6RSliceE	opendnp3::Group120Var12::Group120Var12(unsigned int, unsigned short, openpal::RSlice const&)
function _ZN8opendnp313Group120Var13C2Ev	opendnp3::Group120Var13::Group120Var13()
function _ZN8opendnp313Group120Var13C1EjtRKN7openpal6RSliceE	opendnp3::Group120Var13::Group120Var13(unsigned int, unsigned short, openpal::RSlice const&)
function _ZN8opendnp313Group120Var14C2Ev	opendnp3::Group120Var14::Group120Var14()
function _ZN8opendnp313Group120Var14C2ERKN7openpal6RSliceE	opendnp3::Group120Var14::Group120Var14(openpal::RSlice const&)
function _ZN8opendnp313Group120Var15C2Ev	opendnp3::Group120Var15::Group120Var15()
function _ZN8opendnp313Group120Var15C1ERKN7openpal6RSliceE	opendnp3::Group120Var15::Group120Var15(openpal::RSlice const&)
function _ZNK8opendnp312Group120Var110InstanceIDEv	opendnp3::Group120Var1::InstanceID() const
function _ZNK8opendnp312Group120Var210InstanceIDEv	opendnp3::Group120Var2::InstanceID() const
function _ZNK8opendnp312Group120Var510InstanceIDEv	opendnp3::Group120Var5::InstanceID() const
function _ZNK8opendnp312Group120Var610InstanceIDEv	opendnp3::Group120Var6::InstanceID() const
function _ZNK8opendnp312Group120Var710InstanceIDEv	opendnp3::Group120Var7::InstanceID() const
function _ZNK8opendnp312Group120Var810InstanceIDEv	opendnp3::Group120Var8::InstanceID() const
function _ZNK8opendnp312Group120Var910InstanceIDEv	opendnp3::Group120Var9::InstanceID() const
function _ZNK8opendnp313Group120Var1010InstanceIDEv	opendnp3::Group120Var10::InstanceID() const
function _ZNK8opendnp313Group120Var1110InstanceIDEv	opendnp3::Group120Var11::InstanceID() const
function _ZNK8opendnp313Group120Var1210InstanceIDEv	opendnp3::Group120Var12::InstanceID() const
function _ZNK8opendnp313Group120Var1310InstanceIDEv	opendnp3::Group120Var13::InstanceID() const
function _ZNK8opendnp313Group120Var1410InstanceIDEv	opendnp3::Group120Var14::InstanceID() const
function _ZNK8opendnp313Group120Var1510InstanceIDEv	opendnp3::Group120Var15::InstanceID() const
function _ZN8opendnp313Group120Var15D1Ev	opendnp3::Group120Var15::~Group120Var15()
function _ZN8opendnp313Group120Var14D2Ev	opendnp3::Group120Var14::~Group120Var14()
function _ZN8opendnp313Group120Var13D2Ev	opendnp3::Group120Var13::~Group120Var13()
function _ZN8opendnp313Group120Var12D1Ev	opendnp3::Group120Var12::~Group120Var12()
function _ZN8opendnp313Group120Var11D2Ev	opendnp3::Group120Var11::~Group120Var11()
function _ZN8opendnp313Group120Var10D2Ev	opendnp3::Group120Var10::~Group120Var10()
function _ZN8opendnp312Group120Var9D2Ev	opendnp3::Group120Var9::~Group120Var9()
function _ZN8opendnp312Group120Var8D1Ev	opendnp3::Group120Var8::~Group120Var8()
function _ZN8opendnp312Group120Var7D2Ev	opendnp3::Group120Var7::~Group120Var7()
function _ZN8opendnp312Group120Var6D1Ev	opendnp3::Group120Var6::~Group120Var6()
function _ZN8opendnp312Group120Var5D2Ev	opendnp3::Group120Var5::~Group120Var5()
function _ZN8opendnp312Group120Var2D2Ev	opendnp3::Group120Var2::~Group120Var2()
function _ZN8opendnp312Group120Var1D2Ev	opendnp3::Group120Var1::~Group120Var1()
function _ZN8opendnp313Group120Var15D0Ev	opendnp3::Group120Var15::~Group120Var15()
function _ZN8opendnp313Group120Var14D0Ev	opendnp3::Group120Var14::~Group120Var14()
function _ZN8opendnp313Group120Var13D0Ev	opendnp3::Group120Var13::~Group120Var13()
function _ZN8opendnp313Group120Var12D0Ev	opendnp3::Group120Var12::~Group120Var12()
function _ZN8opendnp313Group120Var11D0Ev	opendnp3::Group120Var11::~Group120Var11()
function _ZN8opendnp313Group120Var10D0Ev	opendnp3::Group120Var10::~Group120Var10()
function _ZN8opendnp312Group120Var9D0Ev	opendnp3::Group120Var9::~Group120Var9()
function _ZN8opendnp312Group120Var8D0Ev	opendnp3::Group120Var8::~Group120Var8()
function _ZN8opendnp312Group120Var7D0Ev	opendnp3::Group120Var7::~Group120Var7()
function _ZN8opendnp312Group120Var6D0Ev	opendnp3::Group120Var6::~Group120Var6()
function _ZN8opendnp312Group120Var5D0Ev	opendnp3::Group120Var5::~Group120Var5()
function _ZN8opendnp312Group120Var2D0Ev	opendnp3::Group120Var2::~Group120Var2()
function _ZN8opendnp312Group120Var1D0Ev	opendnp3::Group120Var1::~Group120Var1()
function _ZN8opendnp312Group121Var1C1Ev	opendnp3::Group121Var1::Group121Var1()
function _ZN8opendnp312Group121Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group121Var1::Read(openpal::RSlice&, opendnp3::Group121Var1&)
function _ZN8opendnp312Group121Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group121Var1::Write(opendnp3::Group121Var1 const&, openpal::WSlice&)
function _ZN8opendnp312Group121Var110ReadTargetERN7openpal6RSliceERNS_12SecurityStatE	opendnp3::Group121Var1::ReadTarget(openpal::RSlice&, opendnp3::SecurityStat&)
function _ZN8opendnp312Group121Var111WriteTargetERKNS_12SecurityStatERN7openpal6WSliceE	opendnp3::Group121Var1::WriteTarget(opendnp3::SecurityStat const&, openpal::WSlice&)
function _ZN8opendnp312Group122Var1C1Ev	opendnp3::Group122Var1::Group122Var1()
function _ZN8opendnp312Group122Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group122Var1::Read(openpal::RSlice&, opendnp3::Group122Var1&)
function _ZN8opendnp312Group122Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group122Var1::Write(opendnp3::Group122Var1 const&, openpal::WSlice&)
function _ZN8opendnp312Group122Var110ReadTargetERN7openpal6RSliceERNS_12SecurityStatE	opendnp3::Group122Var1::ReadTarget(openpal::RSlice&, opendnp3::SecurityStat&)
function _ZN8opendnp312Group122Var111WriteTargetERKNS_12SecurityStatERN7openpal6WSliceE	opendnp3::Group122Var1::WriteTarget(opendnp3::SecurityStat const&, openpal::WSlice&)
function _ZN8opendnp312Group122Var2C1Ev	opendnp3::Group122Var2::Group122Var2()
function _ZN8opendnp312Group122Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group122Var2::Read(openpal::RSlice&, opendnp3::Group122Var2&)
function _ZN8opendnp312Group122Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group122Var2::Write(opendnp3::Group122Var2 const&, openpal::WSlice&)
function _ZN8opendnp312Group122Var210ReadTargetERN7openpal6RSliceERNS_12SecurityStatE	opendnp3::Group122Var2::ReadTarget(openpal::RSlice&, opendnp3::SecurityStat&)
function _ZN8opendnp312Group122Var211WriteTargetERKNS_12SecurityStatERN7openpal6WSliceE	opendnp3::Group122Var2::WriteTarget(opendnp3::SecurityStat const&, openpal::WSlice&)
function _ZN8opendnp311Group13Var1C2Ev	opendnp3::Group13Var1::Group13Var1()
function _ZN8opendnp311Group13Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group13Var1::Read(openpal::RSlice&, opendnp3::Group13Var1&)
function _ZN8opendnp311Group13Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group13Var1::Write(opendnp3::Group13Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group13Var110ReadTargetERN7openpal6RSliceERNS_18BinaryCommandEventE	opendnp3::Group13Var1::ReadTarget(openpal::RSlice&, opendnp3::BinaryCommandEvent&)
function _ZN8opendnp311Group13Var111WriteTargetERKNS_18BinaryCommandEventERN7openpal6WSliceE	opendnp3::Group13Var1::WriteTarget(opendnp3::BinaryCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group13Var2C1Ev	opendnp3::Group13Var2::Group13Var2()
function _ZN8opendnp311Group13Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group13Var2::Read(openpal::RSlice&, opendnp3::Group13Var2&)
function _ZN8opendnp311Group13Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group13Var2::Write(opendnp3::Group13Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group13Var210ReadTargetERN7openpal6RSliceERNS_18BinaryCommandEventE	opendnp3::Group13Var2::ReadTarget(openpal::RSlice&, opendnp3::BinaryCommandEvent&)
function _ZN8opendnp311Group13Var211WriteTargetERKNS_18BinaryCommandEventERN7openpal6WSliceE	opendnp3::Group13Var2::WriteTarget(opendnp3::BinaryCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp310Group2Var1C2Ev	opendnp3::Group2Var1::Group2Var1()
function _ZN8opendnp310Group2Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group2Var1::Read(openpal::RSlice&, opendnp3::Group2Var1&)
function _ZN8opendnp310Group2Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group2Var1::Write(opendnp3::Group2Var1 const&, openpal::WSlice&)
function _ZN8opendnp310Group2Var110ReadTargetERN7openpal6RSliceERNS_6BinaryE	opendnp3::Group2Var1::ReadTarget(openpal::RSlice&, opendnp3::Binary&)
function _ZN8opendnp310Group2Var111WriteTargetERKNS_6BinaryERN7openpal6WSliceE	opendnp3::Group2Var1::WriteTarget(opendnp3::Binary const&, openpal::WSlice&)
function _ZN8opendnp310Group2Var2C2Ev	opendnp3::Group2Var2::Group2Var2()
function _ZN8opendnp310Group2Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group2Var2::Read(openpal::RSlice&, opendnp3::Group2Var2&)
function _ZN8opendnp310Group2Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group2Var2::Write(opendnp3::Group2Var2 const&, openpal::WSlice&)
function _ZN8opendnp310Group2Var210ReadTargetERN7openpal6RSliceERNS_6BinaryE	opendnp3::Group2Var2::ReadTarget(openpal::RSlice&, opendnp3::Binary&)
function _ZN8opendnp310Group2Var211WriteTargetERKNS_6BinaryERN7openpal6WSliceE	opendnp3::Group2Var2::WriteTarget(opendnp3::Binary const&, openpal::WSlice&)
function _ZN8opendnp310Group2Var3C1Ev	opendnp3::Group2Var3::Group2Var3()
function _ZN8opendnp310Group2Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group2Var3::Read(openpal::RSlice&, opendnp3::Group2Var3&)
function _ZN8opendnp310Group2Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group2Var3::Write(opendnp3::Group2Var3 const&, openpal::WSlice&)
function _ZN8opendnp310Group2Var310ReadTargetERN7openpal6RSliceERNS_6BinaryE	opendnp3::Group2Var3::ReadTarget(openpal::RSlice&, opendnp3::Binary&)
function _ZN8opendnp310Group2Var311WriteTargetERKNS_6BinaryERN7openpal6WSliceE	opendnp3::Group2Var3::WriteTarget(opendnp3::Binary const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var1C2Ev	opendnp3::Group20Var1::Group20Var1()
function _ZN8opendnp311Group20Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group20Var1::Read(openpal::RSlice&, opendnp3::Group20Var1&)
function _ZN8opendnp311Group20Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group20Var1::Write(opendnp3::Group20Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var110ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group20Var1::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group20Var111WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group20Var1::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var2C1Ev	opendnp3::Group20Var2::Group20Var2()
function _ZN8opendnp311Group20Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group20Var2::Read(openpal::RSlice&, opendnp3::Group20Var2&)
function _ZN8opendnp311Group20Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group20Var2::Write(opendnp3::Group20Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var210ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group20Var2::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group20Var211WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group20Var2::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var5C2Ev	opendnp3::Group20Var5::Group20Var5()
function _ZN8opendnp311Group20Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group20Var5::Read(openpal::RSlice&, opendnp3::Group20Var5&)
function _ZN8opendnp311Group20Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group20Var5::Write(opendnp3::Group20Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var510ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group20Var5::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group20Var511WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group20Var5::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var6C2Ev	opendnp3::Group20Var6::Group20Var6()
function _ZN8opendnp311Group20Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group20Var6::Read(openpal::RSlice&, opendnp3::Group20Var6&)
function _ZN8opendnp311Group20Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group20Var6::Write(opendnp3::Group20Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group20Var610ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group20Var6::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group20Var611WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group20Var6::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var1C2Ev	opendnp3::Group21Var1::Group21Var1()
function _ZN8opendnp311Group21Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group21Var1::Read(openpal::RSlice&, opendnp3::Group21Var1&)
function _ZN8opendnp311Group21Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group21Var1::Write(opendnp3::Group21Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var110ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group21Var1::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group21Var111WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group21Var1::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var2C2Ev	opendnp3::Group21Var2::Group21Var2()
function _ZN8opendnp311Group21Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group21Var2::Read(openpal::RSlice&, opendnp3::Group21Var2&)
function _ZN8opendnp311Group21Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group21Var2::Write(opendnp3::Group21Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var210ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group21Var2::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group21Var211WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group21Var2::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var5C1Ev	opendnp3::Group21Var5::Group21Var5()
function _ZN8opendnp311Group21Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group21Var5::Read(openpal::RSlice&, opendnp3::Group21Var5&)
function _ZN8opendnp311Group21Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group21Var5::Write(opendnp3::Group21Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var510ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group21Var5::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group21Var511WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group21Var5::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var6C2Ev	opendnp3::Group21Var6::Group21Var6()
function _ZN8opendnp311Group21Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group21Var6::Read(openpal::RSlice&, opendnp3::Group21Var6&)
function _ZN8opendnp311Group21Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group21Var6::Write(opendnp3::Group21Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var610ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group21Var6::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group21Var611WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group21Var6::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var9C2Ev	opendnp3::Group21Var9::Group21Var9()
function _ZN8opendnp311Group21Var94ReadERN7openpal6RSliceERS0_	opendnp3::Group21Var9::Read(openpal::RSlice&, opendnp3::Group21Var9&)
function _ZN8opendnp311Group21Var95WriteERKS0_RN7openpal6WSliceE	opendnp3::Group21Var9::Write(opendnp3::Group21Var9 const&, openpal::WSlice&)
function _ZN8opendnp311Group21Var910ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group21Var9::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group21Var911WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group21Var9::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp312Group21Var10C2Ev	opendnp3::Group21Var10::Group21Var10()
function _ZN8opendnp312Group21Var104ReadERN7openpal6RSliceERS0_	opendnp3::Group21Var10::Read(openpal::RSlice&, opendnp3::Group21Var10&)
function _ZN8opendnp312Group21Var105WriteERKS0_RN7openpal6WSliceE	opendnp3::Group21Var10::Write(opendnp3::Group21Var10 const&, openpal::WSlice&)
function _ZN8opendnp312Group21Var1010ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group21Var10::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp312Group21Var1011WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group21Var10::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var1C2Ev	opendnp3::Group22Var1::Group22Var1()
function _ZN8opendnp311Group22Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group22Var1::Read(openpal::RSlice&, opendnp3::Group22Var1&)
function _ZN8opendnp311Group22Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group22Var1::Write(opendnp3::Group22Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var110ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group22Var1::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group22Var111WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group22Var1::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var2C1Ev	opendnp3::Group22Var2::Group22Var2()
function _ZN8opendnp311Group22Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group22Var2::Read(openpal::RSlice&, opendnp3::Group22Var2&)
function _ZN8opendnp311Group22Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group22Var2::Write(opendnp3::Group22Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var210ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group22Var2::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group22Var211WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group22Var2::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var5C1Ev	opendnp3::Group22Var5::Group22Var5()
function _ZN8opendnp311Group22Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group22Var5::Read(openpal::RSlice&, opendnp3::Group22Var5&)
function _ZN8opendnp311Group22Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group22Var5::Write(opendnp3::Group22Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var510ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group22Var5::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group22Var511WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group22Var5::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var6C1Ev	opendnp3::Group22Var6::Group22Var6()
function _ZN8opendnp311Group22Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group22Var6::Read(openpal::RSlice&, opendnp3::Group22Var6&)
function _ZN8opendnp311Group22Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group22Var6::Write(opendnp3::Group22Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group22Var610ReadTargetERN7openpal6RSliceERNS_7CounterE	opendnp3::Group22Var6::ReadTarget(openpal::RSlice&, opendnp3::Counter&)
function _ZN8opendnp311Group22Var611WriteTargetERKNS_7CounterERN7openpal6WSliceE	opendnp3::Group22Var6::WriteTarget(opendnp3::Counter const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var1C1Ev	opendnp3::Group23Var1::Group23Var1()
function _ZN8opendnp311Group23Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group23Var1::Read(openpal::RSlice&, opendnp3::Group23Var1&)
function _ZN8opendnp311Group23Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group23Var1::Write(opendnp3::Group23Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var110ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group23Var1::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group23Var111WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group23Var1::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var2C2Ev	opendnp3::Group23Var2::Group23Var2()
function _ZN8opendnp311Group23Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group23Var2::Read(openpal::RSlice&, opendnp3::Group23Var2&)
function _ZN8opendnp311Group23Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group23Var2::Write(opendnp3::Group23Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var210ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group23Var2::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group23Var211WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group23Var2::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var5C2Ev	opendnp3::Group23Var5::Group23Var5()
function _ZN8opendnp311Group23Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group23Var5::Read(openpal::RSlice&, opendnp3::Group23Var5&)
function _ZN8opendnp311Group23Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group23Var5::Write(opendnp3::Group23Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var510ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group23Var5::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group23Var511WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group23Var5::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var6C1Ev	opendnp3::Group23Var6::Group23Var6()
function _ZN8opendnp311Group23Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group23Var6::Read(openpal::RSlice&, opendnp3::Group23Var6&)
function _ZN8opendnp311Group23Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group23Var6::Write(opendnp3::Group23Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group23Var610ReadTargetERN7openpal6RSliceERNS_13FrozenCounterE	opendnp3::Group23Var6::ReadTarget(openpal::RSlice&, opendnp3::FrozenCounter&)
function _ZN8opendnp311Group23Var611WriteTargetERKNS_13FrozenCounterERN7openpal6WSliceE	opendnp3::Group23Var6::WriteTarget(opendnp3::FrozenCounter const&, openpal::WSlice&)
function _ZN8opendnp310Group3Var2C2Ev	opendnp3::Group3Var2::Group3Var2()
function _ZN8opendnp310Group3Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group3Var2::Read(openpal::RSlice&, opendnp3::Group3Var2&)
function _ZN8opendnp310Group3Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group3Var2::Write(opendnp3::Group3Var2 const&, openpal::WSlice&)
function _ZN8opendnp310Group3Var210ReadTargetERN7openpal6RSliceERNS_15DoubleBitBinaryE	opendnp3::Group3Var2::ReadTarget(openpal::RSlice&, opendnp3::DoubleBitBinary&)
function _ZN8opendnp310Group3Var211WriteTargetERKNS_15DoubleBitBinaryERN7openpal6WSliceE	opendnp3::Group3Var2::WriteTarget(opendnp3::DoubleBitBinary const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var1C1Ev	opendnp3::Group30Var1::Group30Var1()
function _ZN8opendnp311Group30Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group30Var1::Read(openpal::RSlice&, opendnp3::Group30Var1&)
function _ZN8opendnp311Group30Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group30Var1::Write(opendnp3::Group30Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var110ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group30Var1::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group30Var111WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group30Var1::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var2C2Ev	opendnp3::Group30Var2::Group30Var2()
function _ZN8opendnp311Group30Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group30Var2::Read(openpal::RSlice&, opendnp3::Group30Var2&)
function _ZN8opendnp311Group30Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group30Var2::Write(opendnp3::Group30Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var210ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group30Var2::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group30Var211WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group30Var2::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var3C1Ev	opendnp3::Group30Var3::Group30Var3()
function _ZN8opendnp311Group30Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group30Var3::Read(openpal::RSlice&, opendnp3::Group30Var3&)
function _ZN8opendnp311Group30Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group30Var3::Write(opendnp3::Group30Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var310ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group30Var3::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group30Var311WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group30Var3::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var4C2Ev	opendnp3::Group30Var4::Group30Var4()
function _ZN8opendnp311Group30Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group30Var4::Read(openpal::RSlice&, opendnp3::Group30Var4&)
function _ZN8opendnp311Group30Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group30Var4::Write(opendnp3::Group30Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var410ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group30Var4::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group30Var411WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group30Var4::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var5C2Ev	opendnp3::Group30Var5::Group30Var5()
function _ZN8opendnp311Group30Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group30Var5::Read(openpal::RSlice&, opendnp3::Group30Var5&)
function _ZN8opendnp311Group30Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group30Var5::Write(opendnp3::Group30Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var510ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group30Var5::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group30Var511WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group30Var5::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var6C1Ev	opendnp3::Group30Var6::Group30Var6()
function _ZN8opendnp311Group30Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group30Var6::Read(openpal::RSlice&, opendnp3::Group30Var6&)
function _ZN8opendnp311Group30Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group30Var6::Write(opendnp3::Group30Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group30Var610ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group30Var6::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group30Var611WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group30Var6::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var1C1Ev	opendnp3::Group32Var1::Group32Var1()
function _ZN8opendnp311Group32Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var1::Read(openpal::RSlice&, opendnp3::Group32Var1&)
function _ZN8opendnp311Group32Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var1::Write(opendnp3::Group32Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var110ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var1::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var111WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var1::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var2C1Ev	opendnp3::Group32Var2::Group32Var2()
function _ZN8opendnp311Group32Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var2::Read(openpal::RSlice&, opendnp3::Group32Var2&)
function _ZN8opendnp311Group32Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var2::Write(opendnp3::Group32Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var210ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var2::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var211WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var2::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var3C1Ev	opendnp3::Group32Var3::Group32Var3()
function _ZN8opendnp311Group32Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var3::Read(openpal::RSlice&, opendnp3::Group32Var3&)
function _ZN8opendnp311Group32Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var3::Write(opendnp3::Group32Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var310ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var3::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var311WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var3::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var4C1Ev	opendnp3::Group32Var4::Group32Var4()
function _ZN8opendnp311Group32Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var4::Read(openpal::RSlice&, opendnp3::Group32Var4&)
function _ZN8opendnp311Group32Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var4::Write(opendnp3::Group32Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var410ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var4::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var411WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var4::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var5C1Ev	opendnp3::Group32Var5::Group32Var5()
function _ZN8opendnp311Group32Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var5::Read(openpal::RSlice&, opendnp3::Group32Var5&)
function _ZN8opendnp311Group32Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var5::Write(opendnp3::Group32Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var510ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var5::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var511WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var5::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var6C1Ev	opendnp3::Group32Var6::Group32Var6()
function _ZN8opendnp311Group32Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var6::Read(openpal::RSlice&, opendnp3::Group32Var6&)
function _ZN8opendnp311Group32Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var6::Write(opendnp3::Group32Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var610ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var6::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var611WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var6::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var7C1Ev	opendnp3::Group32Var7::Group32Var7()
function _ZN8opendnp311Group32Var74ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var7::Read(openpal::RSlice&, opendnp3::Group32Var7&)
function _ZN8opendnp311Group32Var75WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var7::Write(opendnp3::Group32Var7 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var710ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var7::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var711WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var7::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var8C2Ev	opendnp3::Group32Var8::Group32Var8()
function _ZN8opendnp311Group32Var84ReadERN7openpal6RSliceERS0_	opendnp3::Group32Var8::Read(openpal::RSlice&, opendnp3::Group32Var8&)
function _ZN8opendnp311Group32Var85WriteERKS0_RN7openpal6WSliceE	opendnp3::Group32Var8::Write(opendnp3::Group32Var8 const&, openpal::WSlice&)
function _ZN8opendnp311Group32Var810ReadTargetERN7openpal6RSliceERNS_6AnalogE	opendnp3::Group32Var8::ReadTarget(openpal::RSlice&, opendnp3::Analog&)
function _ZN8opendnp311Group32Var811WriteTargetERKNS_6AnalogERN7openpal6WSliceE	opendnp3::Group32Var8::WriteTarget(opendnp3::Analog const&, openpal::WSlice&)
function _ZN8opendnp310Group4Var1C2Ev	opendnp3::Group4Var1::Group4Var1()
function _ZN8opendnp310Group4Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group4Var1::Read(openpal::RSlice&, opendnp3::Group4Var1&)
function _ZN8opendnp310Group4Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group4Var1::Write(opendnp3::Group4Var1 const&, openpal::WSlice&)
function _ZN8opendnp310Group4Var110ReadTargetERN7openpal6RSliceERNS_15DoubleBitBinaryE	opendnp3::Group4Var1::ReadTarget(openpal::RSlice&, opendnp3::DoubleBitBinary&)
function _ZN8opendnp310Group4Var111WriteTargetERKNS_15DoubleBitBinaryERN7openpal6WSliceE	opendnp3::Group4Var1::WriteTarget(opendnp3::DoubleBitBinary const&, openpal::WSlice&)
function _ZN8opendnp310Group4Var2C2Ev	opendnp3::Group4Var2::Group4Var2()
function _ZN8opendnp310Group4Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group4Var2::Read(openpal::RSlice&, opendnp3::Group4Var2&)
function _ZN8opendnp310Group4Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group4Var2::Write(opendnp3::Group4Var2 const&, openpal::WSlice&)
function _ZN8opendnp310Group4Var210ReadTargetERN7openpal6RSliceERNS_15DoubleBitBinaryE	opendnp3::Group4Var2::ReadTarget(openpal::RSlice&, opendnp3::DoubleBitBinary&)
function _ZN8opendnp310Group4Var211WriteTargetERKNS_15DoubleBitBinaryERN7openpal6WSliceE	opendnp3::Group4Var2::WriteTarget(opendnp3::DoubleBitBinary const&, openpal::WSlice&)
function _ZN8opendnp310Group4Var3C2Ev	opendnp3::Group4Var3::Group4Var3()
function _ZN8opendnp310Group4Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group4Var3::Read(openpal::RSlice&, opendnp3::Group4Var3&)
function _ZN8opendnp310Group4Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group4Var3::Write(opendnp3::Group4Var3 const&, openpal::WSlice&)
function _ZN8opendnp310Group4Var310ReadTargetERN7openpal6RSliceERNS_15DoubleBitBinaryE	opendnp3::Group4Var3::ReadTarget(openpal::RSlice&, opendnp3::DoubleBitBinary&)
function _ZN8opendnp310Group4Var311WriteTargetERKNS_15DoubleBitBinaryERN7openpal6WSliceE	opendnp3::Group4Var3::WriteTarget(opendnp3::DoubleBitBinary const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var1C1Ev	opendnp3::Group40Var1::Group40Var1()
function _ZN8opendnp311Group40Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group40Var1::Read(openpal::RSlice&, opendnp3::Group40Var1&)
function _ZN8opendnp311Group40Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group40Var1::Write(opendnp3::Group40Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var110ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group40Var1::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group40Var111WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group40Var1::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var2C1Ev	opendnp3::Group40Var2::Group40Var2()
function _ZN8opendnp311Group40Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group40Var2::Read(openpal::RSlice&, opendnp3::Group40Var2&)
function _ZN8opendnp311Group40Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group40Var2::Write(opendnp3::Group40Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var210ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group40Var2::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group40Var211WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group40Var2::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var3C1Ev	opendnp3::Group40Var3::Group40Var3()
function _ZN8opendnp311Group40Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group40Var3::Read(openpal::RSlice&, opendnp3::Group40Var3&)
function _ZN8opendnp311Group40Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group40Var3::Write(opendnp3::Group40Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var310ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group40Var3::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group40Var311WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group40Var3::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var4C1Ev	opendnp3::Group40Var4::Group40Var4()
function _ZN8opendnp311Group40Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group40Var4::Read(openpal::RSlice&, opendnp3::Group40Var4&)
function _ZN8opendnp311Group40Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group40Var4::Write(opendnp3::Group40Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group40Var410ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group40Var4::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group40Var411WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group40Var4::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var1C2Ev	opendnp3::Group41Var1::Group41Var1()
function _ZN8opendnp311Group41Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group41Var1::Read(openpal::RSlice&, opendnp3::Group41Var1&)
function _ZN8opendnp311Group41Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group41Var1::Write(opendnp3::Group41Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var110ReadTargetERN7openpal6RSliceERNS_17AnalogOutputInt32E	opendnp3::Group41Var1::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputInt32&)
function _ZN8opendnp311Group41Var111WriteTargetERKNS_17AnalogOutputInt32ERN7openpal6WSliceE	opendnp3::Group41Var1::WriteTarget(opendnp3::AnalogOutputInt32 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var2C2Ev	opendnp3::Group41Var2::Group41Var2()
function _ZN8opendnp311Group41Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group41Var2::Read(openpal::RSlice&, opendnp3::Group41Var2&)
function _ZN8opendnp311Group41Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group41Var2::Write(opendnp3::Group41Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var210ReadTargetERN7openpal6RSliceERNS_17AnalogOutputInt16E	opendnp3::Group41Var2::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputInt16&)
function _ZN8opendnp311Group41Var211WriteTargetERKNS_17AnalogOutputInt16ERN7openpal6WSliceE	opendnp3::Group41Var2::WriteTarget(opendnp3::AnalogOutputInt16 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var3C1Ev	opendnp3::Group41Var3::Group41Var3()
function _ZN8opendnp311Group41Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group41Var3::Read(openpal::RSlice&, opendnp3::Group41Var3&)
function _ZN8opendnp311Group41Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group41Var3::Write(opendnp3::Group41Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var310ReadTargetERN7openpal6RSliceERNS_19AnalogOutputFloat32E	opendnp3::Group41Var3::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputFloat32&)
function _ZN8opendnp311Group41Var311WriteTargetERKNS_19AnalogOutputFloat32ERN7openpal6WSliceE	opendnp3::Group41Var3::WriteTarget(opendnp3::AnalogOutputFloat32 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var4C2Ev	opendnp3::Group41Var4::Group41Var4()
function _ZN8opendnp311Group41Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group41Var4::Read(openpal::RSlice&, opendnp3::Group41Var4&)
function _ZN8opendnp311Group41Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group41Var4::Write(opendnp3::Group41Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group41Var410ReadTargetERN7openpal6RSliceERNS_20AnalogOutputDouble64E	opendnp3::Group41Var4::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputDouble64&)
function _ZN8opendnp311Group41Var411WriteTargetERKNS_20AnalogOutputDouble64ERN7openpal6WSliceE	opendnp3::Group41Var4::WriteTarget(opendnp3::AnalogOutputDouble64 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var1C2Ev	opendnp3::Group42Var1::Group42Var1()
function _ZN8opendnp311Group42Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var1::Read(openpal::RSlice&, opendnp3::Group42Var1&)
function _ZN8opendnp311Group42Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var1::Write(opendnp3::Group42Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var110ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var1::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var111WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var1::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var2C1Ev	opendnp3::Group42Var2::Group42Var2()
function _ZN8opendnp311Group42Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var2::Read(openpal::RSlice&, opendnp3::Group42Var2&)
function _ZN8opendnp311Group42Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var2::Write(opendnp3::Group42Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var210ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var2::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var211WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var2::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var3C1Ev	opendnp3::Group42Var3::Group42Var3()
function _ZN8opendnp311Group42Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var3::Read(openpal::RSlice&, opendnp3::Group42Var3&)
function _ZN8opendnp311Group42Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var3::Write(opendnp3::Group42Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var310ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var3::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var311WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var3::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var4C2Ev	opendnp3::Group42Var4::Group42Var4()
function _ZN8opendnp311Group42Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var4::Read(openpal::RSlice&, opendnp3::Group42Var4&)
function _ZN8opendnp311Group42Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var4::Write(opendnp3::Group42Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var410ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var4::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var411WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var4::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var5C2Ev	opendnp3::Group42Var5::Group42Var5()
function _ZN8opendnp311Group42Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var5::Read(openpal::RSlice&, opendnp3::Group42Var5&)
function _ZN8opendnp311Group42Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var5::Write(opendnp3::Group42Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var510ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var5::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var511WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var5::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var6C2Ev	opendnp3::Group42Var6::Group42Var6()
function _ZN8opendnp311Group42Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var6::Read(openpal::RSlice&, opendnp3::Group42Var6&)
function _ZN8opendnp311Group42Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var6::Write(opendnp3::Group42Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var610ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var6::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var611WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var6::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var7C1Ev	opendnp3::Group42Var7::Group42Var7()
function _ZN8opendnp311Group42Var74ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var7::Read(openpal::RSlice&, opendnp3::Group42Var7&)
function _ZN8opendnp311Group42Var75WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var7::Write(opendnp3::Group42Var7 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var710ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var7::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var711WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var7::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var8C1Ev	opendnp3::Group42Var8::Group42Var8()
function _ZN8opendnp311Group42Var84ReadERN7openpal6RSliceERS0_	opendnp3::Group42Var8::Read(openpal::RSlice&, opendnp3::Group42Var8&)
function _ZN8opendnp311Group42Var85WriteERKS0_RN7openpal6WSliceE	opendnp3::Group42Var8::Write(opendnp3::Group42Var8 const&, openpal::WSlice&)
function _ZN8opendnp311Group42Var810ReadTargetERN7openpal6RSliceERNS_18AnalogOutputStatusE	opendnp3::Group42Var8::ReadTarget(openpal::RSlice&, opendnp3::AnalogOutputStatus&)
function _ZN8opendnp311Group42Var811WriteTargetERKNS_18AnalogOutputStatusERN7openpal6WSliceE	opendnp3::Group42Var8::WriteTarget(opendnp3::AnalogOutputStatus const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var1C1Ev	opendnp3::Group43Var1::Group43Var1()
function _ZN8opendnp311Group43Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var1::Read(openpal::RSlice&, opendnp3::Group43Var1&)
function _ZN8opendnp311Group43Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var1::Write(opendnp3::Group43Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var110ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var1::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var111WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var1::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var2C2Ev	opendnp3::Group43Var2::Group43Var2()
function _ZN8opendnp311Group43Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var2::Read(openpal::RSlice&, opendnp3::Group43Var2&)
function _ZN8opendnp311Group43Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var2::Write(opendnp3::Group43Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var210ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var2::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var211WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var2::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var3C1Ev	opendnp3::Group43Var3::Group43Var3()
function _ZN8opendnp311Group43Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var3::Read(openpal::RSlice&, opendnp3::Group43Var3&)
function _ZN8opendnp311Group43Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var3::Write(opendnp3::Group43Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var310ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var3::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var311WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var3::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var4C1Ev	opendnp3::Group43Var4::Group43Var4()
function _ZN8opendnp311Group43Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var4::Read(openpal::RSlice&, opendnp3::Group43Var4&)
function _ZN8opendnp311Group43Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var4::Write(opendnp3::Group43Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var410ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var4::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var411WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var4::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var5C1Ev	opendnp3::Group43Var5::Group43Var5()
function _ZN8opendnp311Group43Var54ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var5::Read(openpal::RSlice&, opendnp3::Group43Var5&)
function _ZN8opendnp311Group43Var55WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var5::Write(opendnp3::Group43Var5 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var510ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var5::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var511WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var5::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var6C1Ev	opendnp3::Group43Var6::Group43Var6()
function _ZN8opendnp311Group43Var64ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var6::Read(openpal::RSlice&, opendnp3::Group43Var6&)
function _ZN8opendnp311Group43Var65WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var6::Write(opendnp3::Group43Var6 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var610ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var6::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var611WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var6::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var7C2Ev	opendnp3::Group43Var7::Group43Var7()
function _ZN8opendnp311Group43Var74ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var7::Read(openpal::RSlice&, opendnp3::Group43Var7&)
function _ZN8opendnp311Group43Var75WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var7::Write(opendnp3::Group43Var7 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var710ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var7::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var711WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var7::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var8C1Ev	opendnp3::Group43Var8::Group43Var8()
function _ZN8opendnp311Group43Var84ReadERN7openpal6RSliceERS0_	opendnp3::Group43Var8::Read(openpal::RSlice&, opendnp3::Group43Var8&)
function _ZN8opendnp311Group43Var85WriteERKS0_RN7openpal6WSliceE	opendnp3::Group43Var8::Write(opendnp3::Group43Var8 const&, openpal::WSlice&)
function _ZN8opendnp311Group43Var810ReadTargetERN7openpal6RSliceERNS_18AnalogCommandEventE	opendnp3::Group43Var8::ReadTarget(openpal::RSlice&, opendnp3::AnalogCommandEvent&)
function _ZN8opendnp311Group43Var811WriteTargetERKNS_18AnalogCommandEventERN7openpal6WSliceE	opendnp3::Group43Var8::WriteTarget(opendnp3::AnalogCommandEvent const&, openpal::WSlice&)
function _ZN8opendnp311Group50Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group50Var1::Read(openpal::RSlice&, opendnp3::Group50Var1&)
function _ZN8opendnp311Group50Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group50Var1::Write(opendnp3::Group50Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group50Var3C1Ev	opendnp3::Group50Var3::Group50Var3()
function _ZN8opendnp311Group50Var34ReadERN7openpal6RSliceERS0_	opendnp3::Group50Var3::Read(openpal::RSlice&, opendnp3::Group50Var3&)
function _ZN8opendnp311Group50Var35WriteERKS0_RN7openpal6WSliceE	opendnp3::Group50Var3::Write(opendnp3::Group50Var3 const&, openpal::WSlice&)
function _ZN8opendnp311Group50Var4C2Ev	opendnp3::Group50Var4::Group50Var4()
function _ZN8opendnp311Group50Var44ReadERN7openpal6RSliceERS0_	opendnp3::Group50Var4::Read(openpal::RSlice&, opendnp3::Group50Var4&)
function _ZN8opendnp311Group50Var45WriteERKS0_RN7openpal6WSliceE	opendnp3::Group50Var4::Write(opendnp3::Group50Var4 const&, openpal::WSlice&)
function _ZN8opendnp311Group50Var410ReadTargetERN7openpal6RSliceERNS_15TimeAndIntervalE	opendnp3::Group50Var4::ReadTarget(openpal::RSlice&, opendnp3::TimeAndInterval&)
function _ZN8opendnp311Group50Var411WriteTargetERKNS_15TimeAndIntervalERN7openpal6WSliceE	opendnp3::Group50Var4::WriteTarget(opendnp3::TimeAndInterval const&, openpal::WSlice&)
function _ZN8opendnp311Group51Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group51Var1::Read(openpal::RSlice&, opendnp3::Group51Var1&)
function _ZN8opendnp311Group51Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group51Var1::Write(opendnp3::Group51Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group51Var2C1Ev	opendnp3::Group51Var2::Group51Var2()
function _ZN8opendnp311Group51Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group51Var2::Read(openpal::RSlice&, opendnp3::Group51Var2&)
function _ZN8opendnp311Group51Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group51Var2::Write(opendnp3::Group51Var2 const&, openpal::WSlice&)
function _ZN8opendnp311Group52Var1C1Ev	opendnp3::Group52Var1::Group52Var1()
function _ZN8opendnp311Group52Var14ReadERN7openpal6RSliceERS0_	opendnp3::Group52Var1::Read(openpal::RSlice&, opendnp3::Group52Var1&)
function _ZN8opendnp311Group52Var15WriteERKS0_RN7openpal6WSliceE	opendnp3::Group52Var1::Write(opendnp3::Group52Var1 const&, openpal::WSlice&)
function _ZN8opendnp311Group52Var2C2Ev	opendnp3::Group52Var2::Group52Var2()
function _ZN8opendnp311Group52Var24ReadERN7openpal6RSliceERS0_	opendnp3::Group52Var2::Read(openpal::RSlice&, opendnp3::Group52Var2&)
function _ZN8opendnp311Group52Var25WriteERKS0_RN7openpal6WSliceE	opendnp3::Group52Var2::Write(opendnp3::Group52Var2 const&, openpal::WSlice&)
function _ZNK8opendnp314ApplicationIIN5ToIINEv	opendnp3::ApplicationIIN::ToIIN() const
function _ZNSt14_Function_base13_Base_managerIZN8opendnp318AssignClassHandler29NotifyApplicationOfAssignmentENS1_15AssignClassTypeENS1_10PointClassERKNS1_5RangeEEUlvE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation	std::_Function_base::_Base_manager<opendnp3::AssignClassHandler::NotifyApplicationOfAssignment(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZNSt17_Function_handlerIFvvEZN8opendnp318AssignClassHandler29NotifyApplicationOfAssignmentENS1_15AssignClassTypeENS1_10PointClassERKNS1_5RangeEEUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), opendnp3::AssignClassHandler::NotifyApplicationOfAssignment(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp318AssignClassHandlerC1ERN7openpal9IExecutorERNS_22IOutstationApplicationERNS_14IClassAssignerE	opendnp3::AssignClassHandler::AssignClassHandler(openpal::IExecutor&, opendnp3::IOutstationApplication&, opendnp3::IClassAssigner&)
function _ZN8opendnp318AssignClassHandler21IsExpectingAssignmentEv	opendnp3::AssignClassHandler::IsExpectingAssignment()
function _ZN8opendnp318AssignClassHandler29NotifyApplicationOfAssignmentENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE	opendnp3::AssignClassHandler::NotifyApplicationOfAssignment(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)
function _ZN8opendnp318AssignClassHandler18ProcessAssignRangeENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE	opendnp3::AssignClassHandler::ProcessAssignRange(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)
function _ZN8opendnp318AssignClassHandler13ProcessHeaderERKNS_11RangeHeaderE	opendnp3::AssignClassHandler::ProcessHeader(opendnp3::RangeHeader const&)
function _ZN8opendnp318AssignClassHandler16ProcessAssignAllENS_15AssignClassTypeENS_10PointClassE	opendnp3::AssignClassHandler::ProcessAssignAll(opendnp3::AssignClassType, opendnp3::PointClass)
function _ZN8opendnp318AssignClassHandler11RecordClassENS_14GroupVariationE	opendnp3::AssignClassHandler::RecordClass(opendnp3::GroupVariation)
function _ZN8opendnp318AssignClassHandler13ProcessHeaderERKNS_16AllObjectsHeaderE	opendnp3::AssignClassHandler::ProcessHeader(opendnp3::AllObjectsHeader const&)
function _ZN8opendnp322IOutstationApplication21RecordClassAssignmentENS_15AssignClassTypeENS_10PointClassEtt	opendnp3::IOutstationApplication::RecordClassAssignment(opendnp3::AssignClassType, opendnp3::PointClass, unsigned short, unsigned short)
function _ZN8opendnp318AssignClassHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::AssignClassHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp324ClassBasedRequestHandler13ProcessHeaderERKNS_16AllObjectsHeaderE	opendnp3::ClassBasedRequestHandler::ProcessHeader(opendnp3::AllObjectsHeader const&)
function _ZN8opendnp324ClassBasedRequestHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::ClassBasedRequestHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp320CommandActionAdapterD2Ev	opendnp3::CommandActionAdapter::~CommandActionAdapter()
function _ZN8opendnp320CommandActionAdapterD0Ev	opendnp3::CommandActionAdapter::~CommandActionAdapter()
function _ZN8opendnp320CommandActionAdapterC2EPNS_15ICommandHandlerEbNS_11OperateTypeE	opendnp3::CommandActionAdapter::CommandActionAdapter(opendnp3::ICommandHandler*, bool, opendnp3::OperateType)
function _ZN8opendnp320CommandActionAdapter10CheckStartEv	opendnp3::CommandActionAdapter::CheckStart()
function _ZN8opendnp320CommandActionAdapter6ActionERKNS_23ControlRelayOutputBlockEt	opendnp3::CommandActionAdapter::Action(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZN8opendnp320CommandActionAdapter6ActionERKNS_17AnalogOutputInt16Et	opendnp3::CommandActionAdapter::Action(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZN8opendnp320CommandActionAdapter6ActionERKNS_17AnalogOutputInt32Et	opendnp3::CommandActionAdapter::Action(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZN8opendnp320CommandActionAdapter6ActionERKNS_19AnalogOutputFloat32Et	opendnp3::CommandActionAdapter::Action(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZN8opendnp320CommandActionAdapter6ActionERKNS_20AnalogOutputDouble64Et	opendnp3::CommandActionAdapter::Action(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZN8opendnp322CommandResponseHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::CommandResponseHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp322CommandResponseHandlerC1EhPNS_14ICommandActionEPNS_12HeaderWriterE	opendnp3::CommandResponseHandler::CommandResponseHandler(unsigned char, opendnp3::ICommandAction*, opendnp3::HeaderWriter*)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixTwoByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixTwoByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp322CommandResponseHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_23ControlRelayOutputBlockEEEEE	opendnp3::CommandResponseHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp322CommandResponseHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt16EEEEE	opendnp3::CommandResponseHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp322CommandResponseHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_17AnalogOutputInt32EEEEE	opendnp3::CommandResponseHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp322CommandResponseHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_19AnalogOutputFloat32EEEEE	opendnp3::CommandResponseHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&)
function _ZN8opendnp322CommandResponseHandler25ProcessIndexPrefixOneByteERKNS_12HeaderRecordERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::CommandResponseHandler::ProcessIndexPrefixOneByte(opendnp3::HeaderRecord const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp322CommandResponseHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_20AnalogOutputDouble64EEEEE	opendnp3::CommandResponseHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_23ControlRelayOutputBlockEEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal7Bit16LEItEEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISC_EEEEPNS_21PrefixedWriteIteratorIT0_SC_EEEUlRKS3_E_E7OnValueESQ_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::ControlRelayOutputBlock, openpal::Bit16LE<unsigned short> >(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::ControlRelayOutputBlock> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&, opendnp3::PrefixedWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::ControlRelayOutputBlock>*)::'lambda'(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> const&)>::OnValue(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_23ControlRelayOutputBlockEEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal11UInt8SimpleEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISB_EEEEPNS_21PrefixedWriteIteratorIT0_SB_EEEUlRKS3_E_E7OnValueESP_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::ControlRelayOutputBlock, openpal::UInt8Simple>(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::ControlRelayOutputBlock> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> > const&, opendnp3::PrefixedWriteIterator<openpal::UInt8Simple, opendnp3::ControlRelayOutputBlock>*)::'lambda'(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> const&)>::OnValue(opendnp3::Indexed<opendnp3::ControlRelayOutputBlock> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt16EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal7Bit16LEItEEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISC_EEEEPNS_21PrefixedWriteIteratorIT0_SC_EEEUlRKS3_E_E7OnValueESQ_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt16>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputInt16, openpal::Bit16LE<unsigned short> >(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputInt16> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&, opendnp3::PrefixedWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputInt16>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt16> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt16> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt16EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal11UInt8SimpleEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISB_EEEEPNS_21PrefixedWriteIteratorIT0_SB_EEEUlRKS3_E_E7OnValueESP_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt16>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputInt16, openpal::UInt8Simple>(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputInt16> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt16> > const&, opendnp3::PrefixedWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputInt16>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt16> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt16> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt32EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal7Bit16LEItEEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISC_EEEEPNS_21PrefixedWriteIteratorIT0_SC_EEEUlRKS3_E_E7OnValueESQ_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt32>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputInt32, openpal::Bit16LE<unsigned short> >(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputInt32> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&, opendnp3::PrefixedWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputInt32>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt32> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_17AnalogOutputInt32EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal11UInt8SimpleEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISB_EEEEPNS_21PrefixedWriteIteratorIT0_SB_EEEUlRKS3_E_E7OnValueESP_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputInt32>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputInt32, openpal::UInt8Simple>(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputInt32> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputInt32> > const&, opendnp3::PrefixedWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputInt32>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputInt32> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputInt32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_19AnalogOutputFloat32EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal7Bit16LEItEEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISC_EEEEPNS_21PrefixedWriteIteratorIT0_SC_EEEUlRKS3_E_E7OnValueESQ_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputFloat32>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputFloat32, openpal::Bit16LE<unsigned short> >(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputFloat32> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&, opendnp3::PrefixedWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputFloat32>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputFloat32> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputFloat32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_19AnalogOutputFloat32EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal11UInt8SimpleEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISB_EEEEPNS_21PrefixedWriteIteratorIT0_SB_EEEUlRKS3_E_E7OnValueESP_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputFloat32>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputFloat32, openpal::UInt8Simple>(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputFloat32> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputFloat32> > const&, opendnp3::PrefixedWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputFloat32>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputFloat32> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputFloat32> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_20AnalogOutputDouble64EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal7Bit16LEItEEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISC_EEEEPNS_21PrefixedWriteIteratorIT0_SC_EEEUlRKS3_E_E7OnValueESQ_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputDouble64>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputDouble64, openpal::Bit16LE<unsigned short> >(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputDouble64> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&, opendnp3::PrefixedWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputDouble64>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputDouble64> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputDouble64> const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_20AnalogOutputDouble64EEEZNS_22CommandResponseHandler27RespondToHeaderWithIteratorIS2_N7openpal11UInt8SimpleEEENS_8IINFieldENS_13QualifierCodeERKNS_14DNP3SerializerIT_EERKNS_11ICollectionINS1_ISB_EEEEPNS_21PrefixedWriteIteratorIT0_SB_EEEUlRKS3_E_E7OnValueESP_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::AnalogOutputDouble64>, opendnp3::IINField opendnp3::CommandResponseHandler::RespondToHeaderWithIterator<opendnp3::AnalogOutputDouble64, openpal::UInt8Simple>(opendnp3::QualifierCode, opendnp3::DNP3Serializer<opendnp3::AnalogOutputDouble64> const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::AnalogOutputDouble64> > const&, opendnp3::PrefixedWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputDouble64>*)::'lambda'(opendnp3::Indexed<opendnp3::AnalogOutputDouble64> const&)>::OnValue(opendnp3::Indexed<opendnp3::AnalogOutputDouble64> const&)
function _ZN8opendnp38Database6UpdateERKNS_15TimeAndIntervalEt	opendnp3::Database::Update(opendnp3::TimeAndInterval const&, unsigned short)
function _ZN8opendnp38Database11GetRawIndexINS_22AnalogOutputStatusSpecEEEtt.part.25.constprop.30	unsigned short opendnp3::Database::GetRawIndex<opendnp3::AnalogOutputStatusSpec>(unsigned short) (.part.25.constprop.30)
function _ZN8opendnp38Database11GetRawIndexINS_22BinaryOutputStatusSpecEEEtt.part.23.constprop.33	unsigned short opendnp3::Database::GetRawIndex<opendnp3::BinaryOutputStatusSpec>(unsigned short) (.part.23.constprop.33)
function _ZN8opendnp38Database11GetRawIndexINS_17FrozenCounterSpecEEEtt.part.21.constprop.36	unsigned short opendnp3::Database::GetRawIndex<opendnp3::FrozenCounterSpec>(unsigned short) (.part.21.constprop.36)
function _ZN8opendnp38Database11GetRawIndexINS_11CounterSpecEEEtt.part.19.constprop.39	unsigned short opendnp3::Database::GetRawIndex<opendnp3::CounterSpec>(unsigned short) (.part.19.constprop.39)
function _ZN8opendnp38Database11GetRawIndexINS_10AnalogSpecEEEtt.part.17.constprop.42	unsigned short opendnp3::Database::GetRawIndex<opendnp3::AnalogSpec>(unsigned short) (.part.17.constprop.42)
function _ZN8opendnp38Database11GetRawIndexINS_19DoubleBitBinarySpecEEEtt.part.15.constprop.45	unsigned short opendnp3::Database::GetRawIndex<opendnp3::DoubleBitBinarySpec>(unsigned short) (.part.15.constprop.45)
function _ZN8opendnp38Database11GetRawIndexINS_10BinarySpecEEEtt.part.13.constprop.48	unsigned short opendnp3::Database::GetRawIndex<opendnp3::BinarySpec>(unsigned short) (.part.13.constprop.48)
function _ZN8opendnp38DatabaseC1ERKNS_13DatabaseSizesERNS_14IEventReceiverENS_9IndexModeENS_18StaticTypeBitFieldE	opendnp3::Database::Database(opendnp3::DatabaseSizes const&, opendnp3::IEventReceiver&, opendnp3::IndexMode, opendnp3::StaticTypeBitField)
function _ZN8opendnp38Database19ConvertToEventClassENS_10PointClassERNS_10EventClassE	opendnp3::Database::ConvertToEventClass(opendnp3::PointClass, opendnp3::EventClass&)
function _ZN8opendnp38Database6UpdateERKNS_7CounterEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::Counter const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6UpdateERKNS_15DoubleBitBinaryEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::DoubleBitBinary const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6UpdateERKNS_13FrozenCounterEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::FrozenCounter const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6UpdateERKNS_18AnalogOutputStatusEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::AnalogOutputStatus const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6UpdateERKNS_6BinaryEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::Binary const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6UpdateERKNS_18BinaryOutputStatusEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::BinaryOutputStatus const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6UpdateERKNS_6AnalogEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::Analog const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database6ModifyENS_9FlagsTypeEtth	opendnp3::Database::Modify(opendnp3::FlagsType, unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6UpdateERKNS_11OctetStringEtNS_9EventModeE	opendnp3::Database::Update(opendnp3::OctetString const&, unsigned short, opendnp3::EventMode)
function _ZN8opendnp38Database17GetResponseLoaderEv	opendnp3::Database::GetResponseLoader()
function _ZN8opendnp38Database17GetStaticSelectorEv	opendnp3::Database::GetStaticSelector()
function _ZN8opendnp38Database16GetClassAssignerEv	opendnp3::Database::GetClassAssigner()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_15OctetStringSpecEEEtED1Ev	openpal::Array<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_19TimeAndIntervalSpecEEEtED2Ev	openpal::Array<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_19TimeAndIntervalSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_22AnalogOutputStatusSpecEEEtED1Ev	openpal::Array<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_22AnalogOutputStatusSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_22BinaryOutputStatusSpecEEEtED1Ev	openpal::Array<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_22BinaryOutputStatusSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_17FrozenCounterSpecEEEtED1Ev	openpal::Array<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_17FrozenCounterSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_11CounterSpecEEEtED2Ev	openpal::Array<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_11CounterSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_10AnalogSpecEEEtED1Ev	openpal::Array<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_10AnalogSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_19DoubleBitBinarySpecEEEtED2Ev	openpal::Array<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_19DoubleBitBinarySpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_10BinarySpecEEEtED2Ev	openpal::Array<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_10BinarySpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>::~Array()
function _ZN7openpal5ArrayIN8opendnp34CellINS1_15OctetStringSpecEEEtED0Ev	openpal::Array<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>::~Array()
function _ZN8opendnp38DatabaseD0Ev	opendnp3::Database::~Database()
function _ZN8opendnp38DatabaseD2Ev	opendnp3::Database::~Database()
function _ZN8opendnp38Database6ModifyINS_10BinarySpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::BinarySpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6ModifyINS_19DoubleBitBinarySpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::DoubleBitBinarySpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6ModifyINS_10AnalogSpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::AnalogSpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6ModifyINS_11CounterSpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::CounterSpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6ModifyINS_17FrozenCounterSpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::FrozenCounterSpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6ModifyINS_22BinaryOutputStatusSpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::BinaryOutputStatusSpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database6ModifyINS_22AnalogOutputStatusSpecEEEbtth	bool opendnp3::Database::Modify<opendnp3::AnalogOutputStatusSpec>(unsigned short, unsigned short, unsigned char)
function _ZN8opendnp38Database14TryCreateEventINS_15OctetStringSpecEEEvRNS_4CellIT_EERKNS4_6meas_tE	void opendnp3::Database::TryCreateEvent<opendnp3::OctetStringSpec>(opendnp3::Cell<opendnp3::OctetStringSpec>&, opendnp3::OctetStringSpec::meas_t const&)
function _ZN8opendnp315DatabaseBuffers4LoadERNS_12HeaderWriterE	opendnp3::DatabaseBuffers::Load(opendnp3::HeaderWriter&)
function _ZThn8_N8opendnp315DatabaseBuffers4LoadERNS_12HeaderWriterE	non-virtual thunk to opendnp3::DatabaseBuffers::Load(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8UnselectEv	opendnp3::DatabaseBuffers::Unselect()
function _ZN8opendnp315DatabaseBuffersC1ERKNS_13DatabaseSizesENS_18StaticTypeBitFieldENS_9IndexModeE	opendnp3::DatabaseBuffers::DatabaseBuffers(opendnp3::DatabaseSizes const&, opendnp3::StaticTypeBitField, opendnp3::IndexMode)
function _ZN8opendnp315DatabaseBuffers17CheckForPromotionINS_10BinarySpecEEENT_18static_variation_tERKNS3_6meas_tES4_	opendnp3::BinarySpec::static_variation_t opendnp3::DatabaseBuffers::CheckForPromotion<opendnp3::BinarySpec>(opendnp3::BinarySpec::meas_t const&, opendnp3::BinarySpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers7RangeOfEt	opendnp3::DatabaseBuffers::RangeOf(unsigned short)
function _ZN8opendnp315DatabaseBuffers18AssignClassToRangeENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE	opendnp3::DatabaseBuffers::AssignClassToRange(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)
function _ZThn16_N8opendnp315DatabaseBuffers18AssignClassToRangeENS_15AssignClassTypeENS_10PointClassERKNS_5RangeE	non-virtual thunk to opendnp3::DatabaseBuffers::AssignClassToRange(opendnp3::AssignClassType, opendnp3::PointClass, opendnp3::Range const&)
function _ZN8opendnp315DatabaseBuffers16AssignClassToAllENS_15AssignClassTypeENS_10PointClassE	opendnp3::DatabaseBuffers::AssignClassToAll(opendnp3::AssignClassType, opendnp3::PointClass)
function _ZThn16_N8opendnp315DatabaseBuffers16AssignClassToAllENS_15AssignClassTypeENS_10PointClassE	non-virtual thunk to opendnp3::DatabaseBuffers::AssignClassToAll(opendnp3::AssignClassType, opendnp3::PointClass)
function _ZN8opendnp315DatabaseBuffers9SelectAllENS_14GroupVariationE	opendnp3::DatabaseBuffers::SelectAll(opendnp3::GroupVariation)
function _ZN8opendnp315DatabaseBuffers11SelectRangeENS_14GroupVariationERKNS_5RangeE	opendnp3::DatabaseBuffers::SelectRange(opendnp3::GroupVariation, opendnp3::Range const&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_15OctetStringSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::OctetStringSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_19TimeAndIntervalSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::TimeAndIntervalSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_22AnalogOutputStatusSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::AnalogOutputStatusSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_22BinaryOutputStatusSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::BinaryOutputStatusSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_10AnalogSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::AnalogSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_17FrozenCounterSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::FrozenCounterSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_11CounterSpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::CounterSpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_19DoubleBitBinarySpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::DoubleBitBinarySpec>(opendnp3::HeaderWriter&)
function _ZN8opendnp315DatabaseBuffers8LoadTypeINS_10BinarySpecEEEbRNS_12HeaderWriterE	bool opendnp3::DatabaseBuffers::LoadType<opendnp3::BinarySpec>(opendnp3::HeaderWriter&)
function _ZNK8opendnp315DatabaseBuffers15HasAnySelectionEv	opendnp3::DatabaseBuffers::HasAnySelection() const
function _ZThn8_NK8opendnp315DatabaseBuffers15HasAnySelectionEv	non-virtual thunk to opendnp3::DatabaseBuffers::HasAnySelection() const
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_10BinarySpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::BinarySpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>, bool, opendnp3::BinarySpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_19DoubleBitBinarySpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::DoubleBitBinarySpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>, bool, opendnp3::DoubleBitBinarySpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_22BinaryOutputStatusSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::BinaryOutputStatusSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>, bool, opendnp3::BinaryOutputStatusSpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_11CounterSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::CounterSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>, bool, opendnp3::CounterSpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_17FrozenCounterSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::FrozenCounterSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>, bool, opendnp3::FrozenCounterSpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_10AnalogSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::AnalogSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>, bool, opendnp3::AnalogSpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_22AnalogOutputStatusSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::AnalogOutputStatusSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>, bool, opendnp3::AnalogOutputStatusSpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_19TimeAndIntervalSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::TimeAndIntervalSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>, bool, opendnp3::TimeAndIntervalSpec::static_variation_t)
function _ZN8opendnp315DatabaseBuffers13GenericSelectINS_15OctetStringSpecEEENS_8IINFieldENS_5RangeEN7openpal9ArrayViewINS_4CellIT_EEtEEbNS8_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::GenericSelect<opendnp3::OctetStringSpec>(opendnp3::Range, openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>, bool, opendnp3::OctetStringSpec::static_variation_t)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_10BinarySpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::BinarySpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_19DoubleBitBinarySpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::DoubleBitBinarySpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_22BinaryOutputStatusSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::BinaryOutputStatusSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_11CounterSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::CounterSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp315DatabaseBuffers18SelectVirtualRangeINS_11CounterSpecEEENS_8IINFieldERKNS_5RangeEbNT_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::SelectVirtualRange<opendnp3::CounterSpec>(opendnp3::Range const&, bool, opendnp3::CounterSpec::static_variation_t)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_17FrozenCounterSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::FrozenCounterSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp315DatabaseBuffers18SelectVirtualRangeINS_17FrozenCounterSpecEEENS_8IINFieldERKNS_5RangeEbNT_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::SelectVirtualRange<opendnp3::FrozenCounterSpec>(opendnp3::Range const&, bool, opendnp3::FrozenCounterSpec::static_variation_t)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_10AnalogSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::AnalogSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp315DatabaseBuffers18SelectVirtualRangeINS_10AnalogSpecEEENS_8IINFieldERKNS_5RangeEbNT_18static_variation_tE	opendnp3::IINField opendnp3::DatabaseBuffers::SelectVirtualRange<opendnp3::AnalogSpec>(opendnp3::Range const&, bool, opendnp3::AnalogSpec::static_variation_t)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_22AnalogOutputStatusSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::AnalogOutputStatusSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_19TimeAndIntervalSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::TimeAndIntervalSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp311IndexSearch12FindRawRangeINS_15OctetStringSpecEEENS_5RangeERKN7openpal9ArrayViewINS_4CellIT_EEtEERKS3_	opendnp3::Range opendnp3::IndexSearch::FindRawRange<opendnp3::OctetStringSpec>(openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short> const&, opendnp3::Range const&)
function _ZN8opendnp318DatabaseConfigViewC1EN7openpal9ArrayViewINS_4CellINS_10BinarySpecEEEtEENS2_INS3_INS_19DoubleBitBinarySpecEEEtEENS2_INS3_INS_10AnalogSpecEEEtEENS2_INS3_INS_11CounterSpecEEEtEENS2_INS3_INS_17FrozenCounterSpecEEEtEENS2_INS3_INS_22BinaryOutputStatusSpecEEEtEENS2_INS3_INS_22AnalogOutputStatusSpecEEEtEENS2_INS3_INS_19TimeAndIntervalSpecEEEtEENS2_INS3_INS_15OctetStringSpecEEEtEE	opendnp3::DatabaseConfigView::DatabaseConfigView(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>)
function _ZN8opendnp315DeferredRequestC2Ej	opendnp3::DeferredRequest::DeferredRequest(unsigned int)
function _ZN8opendnp315DeferredRequest5ResetEv	opendnp3::DeferredRequest::Reset()
function _ZNK8opendnp315DeferredRequest5IsSetEv	opendnp3::DeferredRequest::IsSet() const
function _ZNK8opendnp315DeferredRequest11GetFunctionEv	opendnp3::DeferredRequest::GetFunction() const
function _ZN8opendnp315DeferredRequest3SetERKNS_13ParsedRequestE	opendnp3::DeferredRequest::Set(opendnp3::ParsedRequest const&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_25EventOctetStringVariationERKNS_11OctetStringERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventOctetStringVariation, opendnp3::OctetString const&, opendnp3::IEventCollection<opendnp3::OctetString>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_32EventBinaryOutputStatusVariationERKNS_18BinaryOutputStatusERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventBinaryOutputStatusVariation, opendnp3::BinaryOutputStatus const&, opendnp3::IEventCollection<opendnp3::BinaryOutputStatus>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_20EventBinaryVariationERKNS_6BinaryERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventBinaryVariation, opendnp3::Binary const&, opendnp3::IEventCollection<opendnp3::Binary>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_26EventDoubleBinaryVariationERKNS_15DoubleBitBinaryERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventDoubleBinaryVariation, opendnp3::DoubleBitBinary const&, opendnp3::IEventCollection<opendnp3::DoubleBitBinary>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_27EventFrozenCounterVariationERKNS_13FrozenCounterERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventFrozenCounterVariation, opendnp3::FrozenCounter const&, opendnp3::IEventCollection<opendnp3::FrozenCounter>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_21EventCounterVariationERKNS_7CounterERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventCounterVariation, opendnp3::Counter const&, opendnp3::IEventCollection<opendnp3::Counter>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_20EventAnalogVariationERKNS_6AnalogERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventAnalogVariation, opendnp3::Analog const&, opendnp3::IEventCollection<opendnp3::Analog>&)
function _ZN8opendnp321ASDUEventWriteHandler5WriteENS_32EventAnalogOutputStatusVariationERKNS_18AnalogOutputStatusERNS_16IEventCollectionIS2_EE	opendnp3::ASDUEventWriteHandler::Write(opendnp3::EventAnalogOutputStatusVariation, opendnp3::AnalogOutputStatus const&, opendnp3::IEventCollection<opendnp3::AnalogOutputStatus>&)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_18AnalogOutputStatusEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::AnalogOutputStatus>::Write(opendnp3::AnalogOutputStatus const&, unsigned short)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_18BinaryOutputStatusEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::BinaryOutputStatus>::Write(opendnp3::BinaryOutputStatus const&, unsigned short)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_6AnalogEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::Analog>::Write(opendnp3::Analog const&, unsigned short)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_13FrozenCounterEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::FrozenCounter>::Write(opendnp3::FrozenCounter const&, unsigned short)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_7CounterEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::Counter>::Write(opendnp3::Counter const&, unsigned short)
function _ZN8opendnp312EventWriters14CTOEventWriterINS_6BinaryENS_11Group51Var1EE5WriteERKS2_t	opendnp3::EventWriters::CTOEventWriter<opendnp3::Binary, opendnp3::Group51Var1>::Write(opendnp3::Binary const&, unsigned short)
function _ZN8opendnp312EventWriters14CTOEventWriterINS_15DoubleBitBinaryENS_11Group51Var1EE5WriteERKS2_t	opendnp3::EventWriters::CTOEventWriter<opendnp3::DoubleBitBinary, opendnp3::Group51Var1>::Write(opendnp3::DoubleBitBinary const&, unsigned short)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_15DoubleBitBinaryEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::DoubleBitBinary>::Write(opendnp3::DoubleBitBinary const&, unsigned short)
function _ZN8opendnp312EventWriters16BasicEventWriterINS_6BinaryEE5WriteERKS2_t	opendnp3::EventWriters::BasicEventWriter<opendnp3::Binary>::Write(opendnp3::Binary const&, unsigned short)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_10BinarySpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::BinarySpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_19DoubleBitBinarySpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::DoubleBitBinarySpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_10AnalogSpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::AnalogSpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_11CounterSpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::CounterSpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_17FrozenCounterSpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::FrozenCounterSpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_22BinaryOutputStatusSpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::BinaryOutputStatusSpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_22AnalogOutputStatusSpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::AnalogOutputStatusSpec> const&)
function _ZN8opendnp311EventBuffer6UpdateERKNS_5EventINS_15OctetStringSpecEEE	opendnp3::EventBuffer::Update(opendnp3::Event<opendnp3::OctetStringSpec> const&)
function _ZN8opendnp311EventBuffer8UnselectEv	opendnp3::EventBuffer::Unselect()
function _ZNK8opendnp311EventBuffer15HasAnySelectionEv	opendnp3::EventBuffer::HasAnySelection() const
function _ZThn16_NK8opendnp311EventBuffer15HasAnySelectionEv	non-virtual thunk to opendnp3::EventBuffer::HasAnySelection() const
function _ZN8opendnp311EventBuffer4LoadERNS_12HeaderWriterE	opendnp3::EventBuffer::Load(opendnp3::HeaderWriter&)
function _ZThn16_N8opendnp311EventBuffer4LoadERNS_12HeaderWriterE	non-virtual thunk to opendnp3::EventBuffer::Load(opendnp3::HeaderWriter&)
function _ZN8opendnp311EventBufferC2ERKNS_17EventBufferConfigE	opendnp3::EventBuffer::EventBuffer(opendnp3::EventBufferConfig const&)
function _ZN8opendnp311EventBuffer14SelectMaxCountENS_14GroupVariationEj	opendnp3::EventBuffer::SelectMaxCount(opendnp3::GroupVariation, unsigned int)
function _ZN8opendnp311EventBuffer9SelectAllENS_14GroupVariationE	opendnp3::EventBuffer::SelectAll(opendnp3::GroupVariation)
function _ZThn8_N8opendnp311EventBuffer9SelectAllENS_14GroupVariationE	non-virtual thunk to opendnp3::EventBuffer::SelectAll(opendnp3::GroupVariation)
function _ZN8opendnp311EventBuffer11SelectCountENS_14GroupVariationEt	opendnp3::EventBuffer::SelectCount(opendnp3::GroupVariation, unsigned short)
function _ZThn8_N8opendnp311EventBuffer11SelectCountENS_14GroupVariationEt	non-virtual thunk to opendnp3::EventBuffer::SelectCount(opendnp3::GroupVariation, unsigned short)
function _ZNK8opendnp311EventBuffer19UnwrittenClassFieldEv	opendnp3::EventBuffer::UnwrittenClassField() const
function _ZN8opendnp311EventBuffer11IsOverflownEv	opendnp3::EventBuffer::IsOverflown()
function _ZN8opendnp311EventBuffer16SelectAllByClassERKNS_10ClassFieldE	opendnp3::EventBuffer::SelectAllByClass(opendnp3::ClassField const&)
function _ZN8opendnp311EventBuffer12ClearWrittenEv	opendnp3::EventBuffer::ClearWritten()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_15OctetStringSpecEEEEEjED1Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::OctetStringSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_22AnalogOutputStatusSpecEEEEEjED2Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::AnalogOutputStatusSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_22AnalogOutputStatusSpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::AnalogOutputStatusSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_22BinaryOutputStatusSpecEEEEEjED2Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::BinaryOutputStatusSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_22BinaryOutputStatusSpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::BinaryOutputStatusSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_17FrozenCounterSpecEEEEEjED2Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::FrozenCounterSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_17FrozenCounterSpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::FrozenCounterSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_11CounterSpecEEEEEjED1Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::CounterSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_11CounterSpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::CounterSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_10AnalogSpecEEEEEjED1Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::AnalogSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_10AnalogSpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::AnalogSpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_19DoubleBitBinarySpecEEEEEjED1Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::DoubleBitBinarySpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_19DoubleBitBinarySpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::DoubleBitBinarySpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_10BinarySpecEEEEEjED1Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::BinarySpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_10BinarySpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::BinarySpec> >, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_11EventRecordEEEjED1Ev	openpal::Array<opendnp3::Node<opendnp3::EventRecord>, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_11EventRecordEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::EventRecord>, unsigned int>::~Array()
function _ZN7openpal5ArrayIN8opendnp34NodeINS1_16TypedEventRecordINS1_15OctetStringSpecEEEEEjED0Ev	openpal::Array<opendnp3::Node<opendnp3::TypedEventRecord<opendnp3::OctetStringSpec> >, unsigned int>::~Array()
function _ZN8opendnp311EventBufferD0Ev	opendnp3::EventBuffer::~EventBuffer()
function _ZN8opendnp311EventBufferD2Ev	opendnp3::EventBuffer::~EventBuffer()
function _ZN8opendnp310EventListsC2ERKNS_17EventBufferConfigE	opendnp3::EventLists::EventLists(opendnp3::EventBufferConfig const&)
function _ZNK8opendnp310EventLists13IsAnyTypeFullEv	opendnp3::EventLists::IsAnyTypeFull() const
function _ZN8opendnp310EventLists7GetListINS_10BinarySpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::BinarySpec> >& opendnp3::EventLists::GetList<opendnp3::BinarySpec>()
function _ZN8opendnp310EventLists7GetListINS_19DoubleBitBinarySpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::DoubleBitBinarySpec> >& opendnp3::EventLists::GetList<opendnp3::DoubleBitBinarySpec>()
function _ZN8opendnp310EventLists7GetListINS_11CounterSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::CounterSpec> >& opendnp3::EventLists::GetList<opendnp3::CounterSpec>()
function _ZN8opendnp310EventLists7GetListINS_17FrozenCounterSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::FrozenCounterSpec> >& opendnp3::EventLists::GetList<opendnp3::FrozenCounterSpec>()
function _ZN8opendnp310EventLists7GetListINS_10AnalogSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::AnalogSpec> >& opendnp3::EventLists::GetList<opendnp3::AnalogSpec>()
function _ZN8opendnp310EventLists7GetListINS_22BinaryOutputStatusSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::BinaryOutputStatusSpec> >& opendnp3::EventLists::GetList<opendnp3::BinaryOutputStatusSpec>()
function _ZN8opendnp310EventLists7GetListINS_22AnalogOutputStatusSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::AnalogOutputStatusSpec> >& opendnp3::EventLists::GetList<opendnp3::AnalogOutputStatusSpec>()
function _ZN8opendnp310EventLists7GetListINS_15OctetStringSpecEEERNS_4ListINS_16TypedEventRecordIT_EEEEv	opendnp3::List<opendnp3::TypedEventRecord<opendnp3::OctetStringSpec> >& opendnp3::EventLists::GetList<opendnp3::OctetStringSpec>()
function _ZN8opendnp311EventRecordC1EtNS_10EventClassE	opendnp3::EventRecord::EventRecord(unsigned short, opendnp3::EventClass)
function _ZN8opendnp314EventSelection13SelectByClassERNS_10EventListsERKNS_10ClassFieldEj	opendnp3::EventSelection::SelectByClass(opendnp3::EventLists&, opendnp3::ClassField const&, unsigned int)
function _ZN8opendnp312EventStorageC2ERKNS_17EventBufferConfigE	opendnp3::EventStorage::EventStorage(opendnp3::EventBufferConfig const&)
function _ZNK8opendnp312EventStorage13IsAnyTypeFullEv	opendnp3::EventStorage::IsAnyTypeFull() const
function _ZNK8opendnp312EventStorage11NumSelectedEv	opendnp3::EventStorage::NumSelected() const
function _ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE	opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_10BinarySpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::BinarySpec> const&)
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_19DoubleBitBinarySpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::DoubleBitBinarySpec> const&)
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_10AnalogSpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::AnalogSpec> const&)
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_11CounterSpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::CounterSpec> const&)
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_17FrozenCounterSpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::FrozenCounterSpec> const&)
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_22BinaryOutputStatusSpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::BinaryOutputStatusSpec> const&)
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_22AnalogOutputStatusSpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::AnalogOutputStatusSpec> const&)
function _ZN8opendnp312EventStorage12SelectByTypeENS_20EventBinaryVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventBinaryVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_26EventDoubleBinaryVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventDoubleBinaryVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_20EventAnalogVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventAnalogVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_21EventCounterVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventCounterVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_27EventFrozenCounterVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventFrozenCounterVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_32EventBinaryOutputStatusVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventBinaryOutputStatusVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_32EventAnalogOutputStatusVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventAnalogOutputStatusVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_25EventOctetStringVariationEj	opendnp3::EventStorage::SelectByType(opendnp3::EventOctetStringVariation, unsigned int)
function _ZN8opendnp312EventStorage12SelectByTypeENS_9EventTypeEj	opendnp3::EventStorage::SelectByType(opendnp3::EventType, unsigned int)
function _ZN8opendnp312EventStorage13SelectByClassERKNS_10EventClassE	opendnp3::EventStorage::SelectByClass(opendnp3::EventClass const&)
function _ZN8opendnp312EventStorage13SelectByClassERKNS_10EventClassEj	opendnp3::EventStorage::SelectByClass(opendnp3::EventClass const&, unsigned int)
function _ZN8opendnp312EventStorage13SelectByClassERKNS_10ClassFieldE	opendnp3::EventStorage::SelectByClass(opendnp3::ClassField const&)
function _ZN8opendnp312EventStorage13SelectByClassERKNS_10ClassFieldEj	opendnp3::EventStorage::SelectByClass(opendnp3::ClassField const&, unsigned int)
function _ZN8opendnp312EventStorage5WriteERNS_18IEventWriteHandlerE	opendnp3::EventStorage::Write(opendnp3::IEventWriteHandler&)
function _ZN8opendnp312EventStorage12ClearWrittenEv	opendnp3::EventStorage::ClearWritten()
function _ZN8opendnp312EventStorage8UnselectEv	opendnp3::EventStorage::Unselect()
function _ZN8opendnp312EventStorage6UpdateERKNS_5EventINS_15OctetStringSpecEEE	opendnp3::EventStorage::Update(opendnp3::Event<opendnp3::OctetStringSpec> const&)
function _ZNK8opendnp313EventTypeImplINS_15OctetStringSpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::OctetStringSpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_15OctetStringSpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::OctetStringSpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_22AnalogOutputStatusSpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::AnalogOutputStatusSpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_22AnalogOutputStatusSpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::AnalogOutputStatusSpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_22BinaryOutputStatusSpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::BinaryOutputStatusSpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_22BinaryOutputStatusSpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::BinaryOutputStatusSpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_17FrozenCounterSpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::FrozenCounterSpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_17FrozenCounterSpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::FrozenCounterSpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_11CounterSpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::CounterSpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_11CounterSpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::CounterSpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_10AnalogSpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::AnalogSpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_10AnalogSpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::AnalogSpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_19DoubleBitBinarySpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::DoubleBitBinarySpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_19DoubleBitBinarySpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::DoubleBitBinarySpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZNK8opendnp313EventTypeImplINS_10BinarySpecEE22SelectDefaultVariationERNS_11EventRecordE	opendnp3::EventTypeImpl<opendnp3::BinarySpec>::SelectDefaultVariation(opendnp3::EventRecord&) const
function _ZNK8opendnp313EventTypeImplINS_10BinarySpecEE9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventTypeImpl<opendnp3::BinarySpec>::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&) const
function _ZN8opendnp315EventCollectionINS_10BinarySpecEE9WriteSomeERNS_12IEventWriterINS_6BinaryEEE	opendnp3::EventCollection<opendnp3::BinarySpec>::WriteSome(opendnp3::IEventWriter<opendnp3::Binary>&)
function _ZN8opendnp315EventCollectionINS_19DoubleBitBinarySpecEE9WriteSomeERNS_12IEventWriterINS_15DoubleBitBinaryEEE	opendnp3::EventCollection<opendnp3::DoubleBitBinarySpec>::WriteSome(opendnp3::IEventWriter<opendnp3::DoubleBitBinary>&)
function _ZN8opendnp315EventCollectionINS_10AnalogSpecEE9WriteSomeERNS_12IEventWriterINS_6AnalogEEE	opendnp3::EventCollection<opendnp3::AnalogSpec>::WriteSome(opendnp3::IEventWriter<opendnp3::Analog>&)
function _ZN8opendnp315EventCollectionINS_11CounterSpecEE9WriteSomeERNS_12IEventWriterINS_7CounterEEE	opendnp3::EventCollection<opendnp3::CounterSpec>::WriteSome(opendnp3::IEventWriter<opendnp3::Counter>&)
function _ZN8opendnp315EventCollectionINS_17FrozenCounterSpecEE9WriteSomeERNS_12IEventWriterINS_13FrozenCounterEEE	opendnp3::EventCollection<opendnp3::FrozenCounterSpec>::WriteSome(opendnp3::IEventWriter<opendnp3::FrozenCounter>&)
function _ZN8opendnp315EventCollectionINS_22BinaryOutputStatusSpecEE9WriteSomeERNS_12IEventWriterINS_18BinaryOutputStatusEEE	opendnp3::EventCollection<opendnp3::BinaryOutputStatusSpec>::WriteSome(opendnp3::IEventWriter<opendnp3::BinaryOutputStatus>&)
function _ZN8opendnp315EventCollectionINS_22AnalogOutputStatusSpecEE9WriteSomeERNS_12IEventWriterINS_18AnalogOutputStatusEEE	opendnp3::EventCollection<opendnp3::AnalogOutputStatusSpec>::WriteSome(opendnp3::IEventWriter<opendnp3::AnalogOutputStatus>&)
function _ZN8opendnp315EventCollectionINS_15OctetStringSpecEE9WriteSomeERNS_12IEventWriterINS_11OctetStringEEE	opendnp3::EventCollection<opendnp3::OctetStringSpec>::WriteSome(opendnp3::IEventWriter<opendnp3::OctetString>&)
function _ZNK8opendnp313EventTypeImplINS_15OctetStringSpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::OctetStringSpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_22AnalogOutputStatusSpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::AnalogOutputStatusSpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_19DoubleBitBinarySpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::DoubleBitBinarySpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_10BinarySpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::BinarySpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_22BinaryOutputStatusSpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::BinaryOutputStatusSpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_17FrozenCounterSpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::FrozenCounterSpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_11CounterSpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::CounterSpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZNK8opendnp313EventTypeImplINS_10AnalogSpecEE21RemoveTypeFromStorageERNS_11EventRecordERNS_10EventListsE	opendnp3::EventTypeImpl<opendnp3::AnalogSpec>::RemoveTypeFromStorage(opendnp3::EventRecord&, opendnp3::EventLists&) const
function _ZN8opendnp311EventUpdate6UpdateINS_15OctetStringSpecEEEbRNS_10EventListsERKNS_5EventIT_EE	bool opendnp3::EventUpdate::Update<opendnp3::OctetStringSpec>(opendnp3::EventLists&, opendnp3::Event<opendnp3::OctetStringSpec> const&)
function _ZN8opendnp312EventWriters5WriteEhRNS_12HeaderWriterERNS_16IEventCollectionINS_11OctetStringEEE	opendnp3::EventWriters::Write(unsigned char, opendnp3::HeaderWriter&, opendnp3::IEventCollection<opendnp3::OctetString>&)
function _ZN8opendnp322OctetStringEventWriter5WriteERKNS_11OctetStringEt	opendnp3::OctetStringEventWriter::Write(opendnp3::OctetString const&, unsigned short)
function _ZN8opendnp312EventWriting16FindNextSelectedERNS_4ListINS_11EventRecordEE8IteratorENS_9EventTypeE	opendnp3::EventWriting::FindNextSelected(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventType)
function _ZN8opendnp312EventWriting9WriteSomeERNS_4ListINS_11EventRecordEE8IteratorERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventWriting::WriteSome(opendnp3::List<opendnp3::EventRecord>::Iterator&, opendnp3::EventLists&, opendnp3::IEventWriteHandler&)
function _ZN8opendnp312EventWriting5WriteERNS_10EventListsERNS_18IEventWriteHandlerE	opendnp3::EventWriting::Write(opendnp3::EventLists&, opendnp3::IEventWriteHandler&)
function _ZN8opendnp317EventBufferConfigC1Etttttttt	opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
function _ZN8opendnp317EventBufferConfig8AllTypesEt	opendnp3::EventBufferConfig::AllTypes(unsigned short)
function _ZNK8opendnp317EventBufferConfig11TotalEventsEv	opendnp3::EventBufferConfig::TotalEvents() const
function _ZN8opendnp318IINFromParseResultENS_11ParseResultE	opendnp3::IINFromParseResult(opendnp3::ParseResult)
function _ZN8opendnp321OctetStringSerializer5WriteERKNS_11OctetStringERN7openpal6WSliceE	opendnp3::OctetStringSerializer::Write(opendnp3::OctetString const&, openpal::WSlice&)
function _ZN8opendnp321OctetStringSerializerC1Ebh	opendnp3::OctetStringSerializer::OctetStringSerializer(bool, unsigned char)
function _ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation	std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
function _ZN8opendnp38OContext16OnLowerLayerDownEv	opendnp3::OContext::OnLowerLayerDown()
function _ZN8opendnp38OContext17ProcessNewRequestERKNS_13ParsedRequestE	opendnp3::OContext::ProcessNewRequest(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext19OnReceiveSolRequestERKNS_13ParsedRequestE	opendnp3::OContext::OnReceiveSolRequest(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext14ProcessRequestERKNS_13ParsedRequestE	opendnp3::OContext::ProcessRequest(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext14ProcessConfirmERKNS_13ParsedRequestE	opendnp3::OContext::ProcessConfirm(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext7BeginTxEtRKN7openpal6RSliceE	opendnp3::OContext::BeginTx(unsigned short, openpal::RSlice const&)
function _ZN8opendnp38OContext15BeginResponseTxEtRKN7openpal6RSliceERKNS_15AppControlFieldE	opendnp3::OContext::BeginResponseTx(unsigned short, openpal::RSlice const&, opendnp3::AppControlField const&)
function _ZN8opendnp38OContext12BeginUnsolTxERKNS_15AppControlFieldERKN7openpal6RSliceE	opendnp3::OContext::BeginUnsolTx(opendnp3::AppControlField const&, openpal::RSlice const&)
function _ZN8opendnp38OContext22ProcessDeferredRequestERKNS_13ParsedRequestE	opendnp3::OContext::ProcessDeferredRequest(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext19RestartConfirmTimerEv	opendnp3::OContext::RestartConfirmTimer()
function _ZNK8opendnp38OContext11CanTransmitEv	opendnp3::OContext::CanTransmit() const
function _ZN8opendnp38OContext23CheckForDeferredRequestEv	opendnp3::OContext::CheckForDeferredRequest()
function _ZN8opendnp38OContext13GetDynamicIINEv	opendnp3::OContext::GetDynamicIIN()
function _ZN8opendnp38OContext14GetResponseIINEv	opendnp3::OContext::GetResponseIIN()
function _ZN8opendnp38OContext25ContinueMultiFragResponseERKNS_9AddressesERKN7openpal11SequenceNumIhLh16EEE	opendnp3::OContext::ContinueMultiFragResponse(opendnp3::Addresses const&, openpal::SequenceNum<unsigned char, (unsigned char)16> const&)
function _ZN8opendnp38OContext19CheckForUnsolicitedEv	opendnp3::OContext::CheckForUnsolicited()
function _ZN8opendnp38OContext17CheckForTaskStartEv	opendnp3::OContext::CheckForTaskStart()
function _ZN8opendnp38OContext14OnLowerLayerUpEv	opendnp3::OContext::OnLowerLayerUp()
function _ZNSt17_Function_handlerIFvvEZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E9_M_invokeERKSt9_Any_data	std::_Function_handler<void (), void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_invoke(std::_Any_data const&)
function _ZN8opendnp38OContext9OnTxReadyEv	opendnp3::OContext::OnTxReady()
function _ZN8opendnp38OContext13SetRestartIINEv	opendnp3::OContext::SetRestartIIN()
function _ZN8opendnp38OContext16GetUpdateHandlerEv	opendnp3::OContext::GetUpdateHandler()
function _ZN8opendnp38OContext13GetConfigViewEv	opendnp3::OContext::GetConfigView()
function _ZN8opendnp38OContext10HandleReadERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleRead(openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext20RespondToReadRequestERKNS_13ParsedRequestE	opendnp3::OContext::RespondToReadRequest(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext11HandleWriteERKN7openpal6RSliceE	opendnp3::OContext::HandleWrite(openpal::RSlice const&)
function _ZN8opendnp38OContext18HandleDelayMeasureERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleDelayMeasure(openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext23HandleRecordCurrentTimeEv	opendnp3::OContext::HandleRecordCurrentTime()
function _ZN8opendnp38OContext13HandleRestartERKN7openpal6RSliceEbPNS_12HeaderWriterE	opendnp3::OContext::HandleRestart(openpal::RSlice const&, bool, opendnp3::HeaderWriter*)
function _ZN8opendnp38OContext17HandleAssignClassERKN7openpal6RSliceE	opendnp3::OContext::HandleAssignClass(openpal::RSlice const&)
function _ZN8opendnp38OContext24HandleDisableUnsolicitedERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleDisableUnsolicited(openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext23HandleEnableUnsolicitedERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleEnableUnsolicited(openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext25HandleCommandWithConstantERKN7openpal6RSliceERNS_12HeaderWriterENS_13CommandStatusE	opendnp3::OContext::HandleCommandWithConstant(openpal::RSlice const&, opendnp3::HeaderWriter&, opendnp3::CommandStatus)
function _ZN8opendnp38OContextC2ERKNS_9AddressesERKNS_16OutstationConfigERKNS_13DatabaseSizesERKN7openpal6LoggerERKSt10shared_ptrINSA_9IExecutorEERKSE_INS_11ILowerLayerEERKSE_INS_15ICommandHandlerEERKSE_INS_22IOutstationApplicationEE	opendnp3::OContext::OContext(opendnp3::Addresses const&, opendnp3::OutstationConfig const&, opendnp3::DatabaseSizes const&, openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::ILowerLayer> const&, std::shared_ptr<opendnp3::ICommandHandler> const&, std::shared_ptr<opendnp3::IOutstationApplication> const&)
function _ZN8opendnp38OContext19HandleDirectOperateERKN7openpal6RSliceENS_11OperateTypeEPNS_12HeaderWriterE	opendnp3::OContext::HandleDirectOperate(openpal::RSlice const&, opendnp3::OperateType, opendnp3::HeaderWriter*)
function _ZN8opendnp38OContext19ProcessRequestNoAckERKNS_13ParsedRequestE	opendnp3::OContext::ProcessRequestNoAck(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext14ProcessObjectsERKNS_13ParsedRequestE	opendnp3::OContext::ProcessObjects(opendnp3::ParsedRequest const&)
function _ZN8opendnp38OContext14ProcessMessageERKNS_7MessageE	opendnp3::OContext::ProcessMessage(opendnp3::Message const&)
function _ZN8opendnp38OContext9OnReceiveERKNS_7MessageE	opendnp3::OContext::OnReceive(opendnp3::Message const&)
function _ZN8opendnp38OContext12HandleSelectERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleSelect(openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext13HandleOperateERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleOperate(openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext21HandleNonReadResponseERKNS_10APDUHeaderERKN7openpal6RSliceERNS_12HeaderWriterE	opendnp3::OContext::HandleNonReadResponse(opendnp3::APDUHeader const&, openpal::RSlice const&, opendnp3::HeaderWriter&)
function _ZN8opendnp38OContext23RespondToNonReadRequestERKNS_13ParsedRequestE	opendnp3::OContext::RespondToNonReadRequest(opendnp3::ParsedRequest const&)
function _ZN8opendnp322IOutstationApplication19SupportsAssignClassEv	opendnp3::IOutstationApplication::SupportsAssignClass()
function _ZNK8opendnp322IOutstationApplication17GetApplicationIINEv	opendnp3::IOutstationApplication::GetApplicationIIN() const
function _ZNK8opendnp322IOutstationApplication18ColdRestartSupportEv	opendnp3::IOutstationApplication::ColdRestartSupport() const
function _ZNK8opendnp322IOutstationApplication18WarmRestartSupportEv	opendnp3::IOutstationApplication::WarmRestartSupport() const
function _ZN8opendnp322IOutstationApplication11ColdRestartEv	opendnp3::IOutstationApplication::ColdRestart()
function _ZN8opendnp322IOutstationApplication11WarmRestartEv	opendnp3::IOutstationApplication::WarmRestart()
function _ZN8opendnp321ConstantCommandAction6ActionERKNS_23ControlRelayOutputBlockEt	opendnp3::ConstantCommandAction::Action(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZN8opendnp321ConstantCommandAction6ActionERKNS_17AnalogOutputInt16Et	opendnp3::ConstantCommandAction::Action(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZN8opendnp321ConstantCommandAction6ActionERKNS_17AnalogOutputInt32Et	opendnp3::ConstantCommandAction::Action(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZN8opendnp321ConstantCommandAction6ActionERKNS_19AnalogOutputFloat32Et	opendnp3::ConstantCommandAction::Action(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZN8opendnp321ConstantCommandAction6ActionERKNS_20AnalogOutputDouble64Et	opendnp3::ConstantCommandAction::Action(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZN8opendnp321ConstantCommandActionD2Ev	opendnp3::ConstantCommandAction::~ConstantCommandAction()
function _ZN8opendnp321ConstantCommandActionD0Ev	opendnp3::ConstantCommandAction::~ConstantCommandAction()
function _ZN8opendnp38OContextD0Ev	opendnp3::OContext::~OContext()
function _ZN8opendnp38OContextD1Ev	opendnp3::OContext::~OContext()
function _ZN8opendnp310EventListsD2Ev	opendnp3::EventLists::~EventLists()
function _ZN8opendnp313StaticBuffersD2Ev	opendnp3::StaticBuffers::~StaticBuffers()
function _ZN8opendnp39StateIdle16OnConfirmTimeoutERNS_8OContextE	opendnp3::StateIdle::OnConfirmTimeout(opendnp3::OContext&)
function _ZN8opendnp325StateSolicitedConfirmWait16OnConfirmTimeoutERNS_8OContextE	opendnp3::StateSolicitedConfirmWait::OnConfirmTimeout(opendnp3::OContext&)
function _ZN8opendnp39StateIdle9OnConfirmERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateIdle::OnConfirm(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp39StateIdle16OnNewReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateIdle::OnNewReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp39StateIdle19OnNewNonReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateIdle::OnNewNonReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp39StateIdle19OnRepeatReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateIdle::OnRepeatReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp327StateUnsolicitedConfirmWait22OnRepeatNonReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateUnsolicitedConfirmWait::OnRepeatNonReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp325StateSolicitedConfirmWait16OnNewReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateSolicitedConfirmWait::OnNewReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp325StateSolicitedConfirmWait19OnNewNonReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateSolicitedConfirmWait::OnNewNonReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp325StateSolicitedConfirmWait22OnRepeatNonReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateSolicitedConfirmWait::OnRepeatNonReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp327StateUnsolicitedConfirmWait9OnConfirmERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateUnsolicitedConfirmWait::OnConfirm(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp325StateSolicitedConfirmWait9OnConfirmERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateSolicitedConfirmWait::OnConfirm(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp325StateSolicitedConfirmWait19OnRepeatReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateSolicitedConfirmWait::OnRepeatReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp327StateUnsolicitedConfirmWait16OnNewReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateUnsolicitedConfirmWait::OnNewReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp327StateUnsolicitedConfirmWait19OnNewNonReadRequestERNS_8OContextERKNS_13ParsedRequestE	opendnp3::StateUnsolicitedConfirmWait::OnNewNonReadRequest(opendnp3::OContext&, opendnp3::ParsedRequest const&)
function _ZN8opendnp327StateUnsolicitedConfirmWait16OnConfirmTimeoutERNS_8OContextE	opendnp3::StateUnsolicitedConfirmWait::OnConfirmTimeout(opendnp3::OContext&)
function _ZN8opendnp315OutstationState6IsIdleEv	opendnp3::OutstationState::IsIdle()
function _ZN8opendnp39StateIdle6IsIdleEv	opendnp3::StateIdle::IsIdle()
function _ZN8opendnp39StateIdle4NameEv	opendnp3::StateIdle::Name()
function _ZN8opendnp325StateSolicitedConfirmWait4NameEv	opendnp3::StateSolicitedConfirmWait::Name()
function _ZN8opendnp327StateUnsolicitedConfirmWait4NameEv	opendnp3::StateUnsolicitedConfirmWait::Name()
function _ZN8opendnp39StateIdleD1Ev	opendnp3::StateIdle::~StateIdle()
function _ZN8opendnp325StateSolicitedConfirmWaitD1Ev	opendnp3::StateSolicitedConfirmWait::~StateSolicitedConfirmWait()
function _ZN8opendnp327StateUnsolicitedConfirmWaitD2Ev	opendnp3::StateUnsolicitedConfirmWait::~StateUnsolicitedConfirmWait()
function _ZN8opendnp311ReadHandler13ProcessHeaderERKNS_11RangeHeaderE	opendnp3::ReadHandler::ProcessHeader(opendnp3::RangeHeader const&)
function _ZN8opendnp311ReadHandler13ProcessHeaderERKNS_11CountHeaderE	opendnp3::ReadHandler::ProcessHeader(opendnp3::CountHeader const&)
function _ZN8opendnp311ReadHandler13ProcessHeaderERKNS_16AllObjectsHeaderE	opendnp3::ReadHandler::ProcessHeader(opendnp3::AllObjectsHeader const&)
function _ZN8opendnp311ReadHandlerC1ERNS_15IStaticSelectorERNS_14IEventSelectorE	opendnp3::ReadHandler::ReadHandler(opendnp3::IStaticSelector&, opendnp3::IEventSelector&)
function _ZN8opendnp311ReadHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::ReadHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp314RequestHistoryC1Ev	opendnp3::RequestHistory::RequestHistory()
function _ZN8opendnp314RequestHistory5ResetEv	opendnp3::RequestHistory::Reset()
function _ZN8opendnp314RequestHistory26RecordLastProcessedRequestERKNS_10APDUHeaderERKN7openpal6RSliceE	opendnp3::RequestHistory::RecordLastProcessedRequest(opendnp3::APDUHeader const&, openpal::RSlice const&)
function _ZNK8opendnp314RequestHistory13GetLastHeaderEv	opendnp3::RequestHistory::GetLastHeader() const
function _ZNK8opendnp314RequestHistory17EqualsLastObjectsERKN7openpal6RSliceE	opendnp3::RequestHistory::EqualsLastObjects(openpal::RSlice const&) const
function _ZNK8opendnp314RequestHistory22FullyEqualsLastRequestERKNS_10APDUHeaderERKN7openpal6RSliceE	opendnp3::RequestHistory::FullyEqualsLastRequest(opendnp3::APDUHeader const&, openpal::RSlice const&) const
function _ZN8opendnp315ResponseContextC1ERNS_15IResponseLoaderES2_	opendnp3::ResponseContext::ResponseContext(opendnp3::IResponseLoader&, opendnp3::IResponseLoader&)
function _ZNK8opendnp315ResponseContext12HasSelectionEv	opendnp3::ResponseContext::HasSelection() const
function _ZN8opendnp315ResponseContext5ResetEv	opendnp3::ResponseContext::Reset()
function _ZN8opendnp315ResponseContext12LoadResponseERNS_12HeaderWriterE	opendnp3::ResponseContext::LoadResponse(opendnp3::HeaderWriter&)
function _ZNK8opendnp314SelectedRanges15HasAnySelectionEv	opendnp3::SelectedRanges::HasAnySelection() const
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_10BinarySpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::BinarySpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_19DoubleBitBinarySpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::DoubleBitBinarySpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_10AnalogSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::AnalogSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_11CounterSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::CounterSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_17FrozenCounterSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::FrozenCounterSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_22BinaryOutputStatusSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::BinaryOutputStatusSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_22AnalogOutputStatusSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::AnalogOutputStatusSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_19TimeAndIntervalSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::TimeAndIntervalSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_16SecurityStatSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::SecurityStatSpec>()
function _ZN8opendnp314SelectedRanges11GetRangeRefINS_15OctetStringSpecEEERNS_5RangeEv	opendnp3::Range& opendnp3::SelectedRanges::GetRangeRef<opendnp3::OctetStringSpec>()
function _ZN8opendnp320SimpleCommandHandler5StartEv	opendnp3::SimpleCommandHandler::Start()
function _ZN8opendnp320SimpleCommandHandler3EndEv	opendnp3::SimpleCommandHandler::End()
function _ZN8opendnp320SimpleCommandHandler7OperateERKNS_20AnalogOutputDouble64EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::Operate(opendnp3::AnalogOutputDouble64 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler7OperateERKNS_23ControlRelayOutputBlockEtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::Operate(opendnp3::ControlRelayOutputBlock const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler7OperateERKNS_17AnalogOutputInt16EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::Operate(opendnp3::AnalogOutputInt16 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler7OperateERKNS_17AnalogOutputInt32EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::Operate(opendnp3::AnalogOutputInt32 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler7OperateERKNS_19AnalogOutputFloat32EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::Operate(opendnp3::AnalogOutputFloat32 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler6SelectERKNS_20AnalogOutputDouble64Et	opendnp3::SimpleCommandHandler::Select(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler6SelectERKNS_23ControlRelayOutputBlockEt	opendnp3::SimpleCommandHandler::Select(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler6SelectERKNS_17AnalogOutputInt16Et	opendnp3::SimpleCommandHandler::Select(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler6SelectERKNS_17AnalogOutputInt32Et	opendnp3::SimpleCommandHandler::Select(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler6SelectERKNS_19AnalogOutputFloat32Et	opendnp3::SimpleCommandHandler::Select(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandlerC1ENS_13CommandStatusE	opendnp3::SimpleCommandHandler::SimpleCommandHandler(opendnp3::CommandStatus)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_23ControlRelayOutputBlockEt	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::ControlRelayOutputBlock const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_23ControlRelayOutputBlockEtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::ControlRelayOutputBlock const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_17AnalogOutputInt16Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputInt16 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_17AnalogOutputInt16EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputInt16 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_17AnalogOutputInt32Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputInt32 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_17AnalogOutputInt32EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputInt32 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_19AnalogOutputFloat32Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputFloat32 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_19AnalogOutputFloat32EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputFloat32 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandler8DoSelectERKNS_20AnalogOutputDouble64Et	opendnp3::SimpleCommandHandler::DoSelect(opendnp3::AnalogOutputDouble64 const&, unsigned short)
function _ZN8opendnp320SimpleCommandHandler9DoOperateERKNS_20AnalogOutputDouble64EtNS_11OperateTypeE	opendnp3::SimpleCommandHandler::DoOperate(opendnp3::AnalogOutputDouble64 const&, unsigned short, opendnp3::OperateType)
function _ZN8opendnp320SimpleCommandHandlerD1Ev	opendnp3::SimpleCommandHandler::~SimpleCommandHandler()
function _ZN8opendnp320SimpleCommandHandlerD0Ev	opendnp3::SimpleCommandHandler::~SimpleCommandHandler()
function _ZNK8opendnp313StaticBuffers7GetViewEv	opendnp3::StaticBuffers::GetView() const
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_10BinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinarySpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_19DoubleBitBinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::DoubleBitBinarySpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_11CounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::CounterSpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_17FrozenCounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::FrozenCounterSpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_10AnalogSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogSpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_22BinaryOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinaryOutputStatusSpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_22AnalogOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogOutputStatusSpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_19TimeAndIntervalSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::TimeAndIntervalSpec>()
function _ZN8opendnp313StaticBuffers12GetArrayViewINS_15OctetStringSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv	openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::OctetStringSpec>()
function _ZN8opendnp313StaticBuffersC2ERKNS_13DatabaseSizesE	opendnp3::StaticBuffers::StaticBuffers(opendnp3::DatabaseSizes const&)
function _ZN8opendnp318RangeWriteIteratorIN7openpal11UInt8SimpleENS_6AnalogEED2Ev.part.7	opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::Analog>::~RangeWriteIterator() (.part.7)
function _ZN8opendnp318RangeWriteIteratorIN7openpal11UInt8SimpleENS_7CounterEED2Ev.part.8	opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::Counter>::~RangeWriteIterator() (.part.8)
function _ZN8opendnp318RangeWriteIteratorIN7openpal11UInt8SimpleENS_18AnalogOutputStatusEED2Ev.part.11	opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputStatus>::~RangeWriteIterator() (.part.11)
function _ZN8opendnp318RangeWriteIteratorIN7openpal7Bit16LEItEENS_6AnalogEED2Ev.part.17	opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::Analog>::~RangeWriteIterator() (.part.17)
function _ZN8opendnp318RangeWriteIteratorIN7openpal7Bit16LEItEENS_7CounterEED2Ev.part.18	opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::Counter>::~RangeWriteIterator() (.part.18)
function _ZN8opendnp318RangeWriteIteratorIN7openpal7Bit16LEItEENS_18AnalogOutputStatusEED2Ev.part.21	opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputStatus>::~RangeWriteIterator() (.part.21)
function _ZN8opendnp313StaticWriters5WriteERN7openpal9ArrayViewINS_4CellINS_15OctetStringSpecEEEtEERNS_12HeaderWriterERNS_5RangeE	opendnp3::StaticWriters::Write(openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp313StaticWriters3GetENS_21StaticBinaryVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticBinaryVariation)
function _ZN8opendnp313StaticWriters3GetENS_27StaticDoubleBinaryVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticDoubleBinaryVariation)
function _ZN8opendnp313StaticWriters3GetENS_21StaticAnalogVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticAnalogVariation)
function _ZN8opendnp313StaticWriters3GetENS_22StaticCounterVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticCounterVariation)
function _ZN8opendnp313StaticWriters3GetENS_28StaticFrozenCounterVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticFrozenCounterVariation)
function _ZN8opendnp313StaticWriters3GetENS_33StaticBinaryOutputStatusVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticBinaryOutputStatusVariation)
function _ZN8opendnp313StaticWriters3GetENS_33StaticAnalogOutputStatusVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticAnalogOutputStatusVariation)
function _ZN8opendnp313StaticWriters3GetENS_26StaticOctetStringVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticOctetStringVariation)
function _ZN8opendnp313StaticWriters3GetENS_30StaticTimeAndIntervalVariationE	opendnp3::StaticWriters::Get(opendnp3::StaticTimeAndIntervalVariation)
function _ZN8opendnp319WriteWithSerializerINS_10BinarySpecENS_10Group1Var2EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::BinarySpec, opendnp3::Group1Var2>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_19TimeAndIntervalSpecENS_11Group50Var4EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::TimeAndIntervalSpec, opendnp3::Group50Var4>(openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_19DoubleBitBinarySpecENS_10Group3Var2EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::DoubleBitBinarySpec, opendnp3::Group3Var2>(openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_17FrozenCounterSpecENS_11Group21Var1EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::FrozenCounterSpec, opendnp3::Group21Var1>(openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_22BinaryOutputStatusSpecENS_11Group10Var2EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::BinaryOutputStatusSpec, opendnp3::Group10Var2>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteSingleBitfieldINS_10BinarySpecENS_10Group1Var1EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteSingleBitfield<opendnp3::BinarySpec, opendnp3::Group1Var1>(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp321LoadWithRangeIteratorINS_10AnalogSpecEN7openpal11UInt8SimpleEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS6_6meas_tEEERNS_5RangeE	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogSpec, openpal::UInt8Simple>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::AnalogSpec::meas_t>&, opendnp3::Range&)
function _ZN8opendnp321LoadWithRangeIteratorINS_10AnalogSpecEN7openpal7Bit16LEItEEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS7_6meas_tEEERNS_5RangeE	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogSpec, openpal::Bit16LE<unsigned short> >(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogSpec::meas_t>&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_10AnalogSpecENS_11Group30Var6EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogSpec, opendnp3::Group30Var6>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_10AnalogSpecENS_11Group30Var5EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogSpec, opendnp3::Group30Var5>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_10AnalogSpecENS_11Group30Var4EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogSpec, opendnp3::Group30Var4>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_10AnalogSpecENS_11Group30Var3EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogSpec, opendnp3::Group30Var3>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_10AnalogSpecENS_11Group30Var2EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogSpec, opendnp3::Group30Var2>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_10AnalogSpecENS_11Group30Var1EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogSpec, opendnp3::Group30Var1>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp321LoadWithRangeIteratorINS_11CounterSpecEN7openpal11UInt8SimpleEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS6_6meas_tEEERNS_5RangeE	bool opendnp3::LoadWithRangeIterator<opendnp3::CounterSpec, openpal::UInt8Simple>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::CounterSpec::meas_t>&, opendnp3::Range&)
function _ZN8opendnp321LoadWithRangeIteratorINS_11CounterSpecEN7openpal7Bit16LEItEEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS7_6meas_tEEERNS_5RangeE	bool opendnp3::LoadWithRangeIterator<opendnp3::CounterSpec, openpal::Bit16LE<unsigned short> >(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::CounterSpec::meas_t>&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_11CounterSpecENS_11Group20Var6EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::CounterSpec, opendnp3::Group20Var6>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_11CounterSpecENS_11Group20Var5EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::CounterSpec, opendnp3::Group20Var5>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_11CounterSpecENS_11Group20Var2EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::CounterSpec, opendnp3::Group20Var2>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_11CounterSpecENS_11Group20Var1EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::CounterSpec, opendnp3::Group20Var1>(openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp321LoadWithRangeIteratorINS_22AnalogOutputStatusSpecEN7openpal11UInt8SimpleEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS6_6meas_tEEERNS_5RangeE	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogOutputStatusSpec, openpal::UInt8Simple>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::UInt8Simple, opendnp3::AnalogOutputStatusSpec::meas_t>&, opendnp3::Range&)
function _ZN8opendnp321LoadWithRangeIteratorINS_22AnalogOutputStatusSpecEN7openpal7Bit16LEItEEEEbRNS2_9ArrayViewINS_4CellIT_EEtEERNS_18RangeWriteIteratorIT0_NS7_6meas_tEEERNS_5RangeE	bool opendnp3::LoadWithRangeIterator<opendnp3::AnalogOutputStatusSpec, openpal::Bit16LE<unsigned short> >(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::RangeWriteIterator<openpal::Bit16LE<unsigned short>, opendnp3::AnalogOutputStatusSpec::meas_t>&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_22AnalogOutputStatusSpecENS_11Group40Var4EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogOutputStatusSpec, opendnp3::Group40Var4>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_22AnalogOutputStatusSpecENS_11Group40Var3EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogOutputStatusSpec, opendnp3::Group40Var3>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_22AnalogOutputStatusSpecENS_11Group40Var2EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogOutputStatusSpec, opendnp3::Group40Var2>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp319WriteWithSerializerINS_22AnalogOutputStatusSpecENS_11Group40Var1EEEbRN7openpal9ArrayViewINS_4CellIT_EEtEERNS_12HeaderWriterERNS_5RangeE	bool opendnp3::WriteWithSerializer<opendnp3::AnalogOutputStatusSpec, opendnp3::Group40Var1>(openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>&, opendnp3::HeaderWriter&, opendnp3::Range&)
function _ZN8opendnp312WriteHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var3EEE	opendnp3::WriteHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var3> const&)
function _ZN8opendnp312WriteHandler13ProcessHeaderERKNS_11CountHeaderERKNS_11ICollectionINS_11Group50Var1EEE	opendnp3::WriteHandler::ProcessHeader(opendnp3::CountHeader const&, opendnp3::ICollection<opendnp3::Group50Var1> const&)
function _ZN8opendnp312WriteHandler13ProcessHeaderERKNS_11RangeHeaderERKNS_11ICollectionINS_7IndexedINS_8IINValueEEEEE	opendnp3::WriteHandler::ProcessHeader(opendnp3::RangeHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::IINValue> > const&)
function _ZN8opendnp312WriteHandler13ProcessHeaderERKNS_12PrefixHeaderERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE	opendnp3::WriteHandler::ProcessHeader(opendnp3::PrefixHeader const&, opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)
function _ZN8opendnp312WriteHandlerC1ERNS_22IOutstationApplicationERNS_13TimeSyncStateEN7openpal11SequenceNumIhLh16EEENS5_18MonotonicTimestampEPNS_8IINFieldE	opendnp3::WriteHandler::WriteHandler(opendnp3::IOutstationApplication&, opendnp3::TimeSyncState&, openpal::SequenceNum<unsigned char, (unsigned char)16>, openpal::MonotonicTimestamp, opendnp3::IINField*)
function _ZN8opendnp322IOutstationApplication28SupportsWriteTimeAndIntervalEv	opendnp3::IOutstationApplication::SupportsWriteTimeAndInterval()
function _ZN8opendnp322IOutstationApplication20WriteTimeAndIntervalERKNS_11ICollectionINS_7IndexedINS_15TimeAndIntervalEEEEE	opendnp3::IOutstationApplication::WriteTimeAndInterval(opendnp3::ICollection<opendnp3::Indexed<opendnp3::TimeAndInterval> > const&)
function _ZN8opendnp312WriteHandler9IsAllowedEjNS_14GroupVariationENS_13QualifierCodeE	opendnp3::WriteHandler::IsAllowed(unsigned int, opendnp3::GroupVariation, opendnp3::QualifierCode)
function _ZN8opendnp314FunctorVisitorINS_11Group50Var3EZNKS_11ICollectionIS1_E13ReadOnlyValueERS1_EUlRKS1_E_E7OnValueES6_	opendnp3::FunctorVisitor<opendnp3::Group50Var3, opendnp3::ICollection<opendnp3::Group50Var3>::ReadOnlyValue(opendnp3::Group50Var3&) const::'lambda'(opendnp3::Group50Var3 const&)>::OnValue(opendnp3::Group50Var3 const&)
function _ZN8opendnp314FunctorVisitorINS_11Group50Var1EZNKS_11ICollectionIS1_E13ReadOnlyValueERS1_EUlRKS1_E_E7OnValueES6_	opendnp3::FunctorVisitor<opendnp3::Group50Var1, opendnp3::ICollection<opendnp3::Group50Var1>::ReadOnlyValue(opendnp3::Group50Var1&) const::'lambda'(opendnp3::Group50Var1 const&)>::OnValue(opendnp3::Group50Var1 const&)
function _ZN8opendnp314FunctorVisitorINS_7IndexedINS_8IINValueEEEZNKS_11ICollectionIS3_E13ReadOnlyValueERS3_EUlRKS3_E_E7OnValueES8_	opendnp3::FunctorVisitor<opendnp3::Indexed<opendnp3::IINValue>, opendnp3::ICollection<opendnp3::Indexed<opendnp3::IINValue> >::ReadOnlyValue(opendnp3::Indexed<opendnp3::IINValue>&) const::'lambda'(opendnp3::Indexed<opendnp3::IINValue> const&)>::OnValue(opendnp3::Indexed<opendnp3::IINValue> const&)
function _ZN8opendnp315TransportHeaderC2Eh	opendnp3::TransportHeader::TransportHeader(unsigned char)
function _ZN8opendnp315TransportHeader6ToByteEbbh	opendnp3::TransportHeader::ToByte(bool, bool, unsigned char)
function _ZN8opendnp314TransportLayer13BeginTransmitERKNS_7MessageE	opendnp3::TransportLayer::BeginTransmit(opendnp3::Message const&)
function _ZThn8_N8opendnp314TransportLayer13BeginTransmitERKNS_7MessageE	non-virtual thunk to opendnp3::TransportLayer::BeginTransmit(opendnp3::Message const&)
function _ZN8opendnp314TransportLayer9OnTxReadyEv	opendnp3::TransportLayer::OnTxReady()
function _ZN8opendnp314TransportLayer14OnLowerLayerUpEv	opendnp3::TransportLayer::OnLowerLayerUp()
function _ZN8opendnp314TransportLayer16OnLowerLayerDownEv	opendnp3::TransportLayer::OnLowerLayerDown()
function _ZN8opendnp314TransportLayer9OnReceiveERKNS_7MessageE	opendnp3::TransportLayer::OnReceive(opendnp3::Message const&)
function _ZN8opendnp314TransportLayerC1ERKN7openpal6LoggerEj	opendnp3::TransportLayer::TransportLayer(openpal::Logger const&, unsigned int)
function _ZN8opendnp314TransportLayer11SetAppLayerERNS_11IUpperLayerE	opendnp3::TransportLayer::SetAppLayer(opendnp3::IUpperLayer&)
function _ZN8opendnp314TransportLayer12SetLinkLayerERNS_10ILinkLayerE	opendnp3::TransportLayer::SetLinkLayer(opendnp3::ILinkLayer&)
function _ZNK8opendnp314TransportLayer13GetStatisticsEv	opendnp3::TransportLayer::GetStatistics() const
function _ZN7openpal12StaticBufferILj250EED1Ev	openpal::StaticBuffer<250u>::~StaticBuffer()
function _ZN7openpal12StaticBufferILj250EED0Ev	openpal::StaticBuffer<250u>::~StaticBuffer()
function _ZN8opendnp314TransportLayerD0Ev	opendnp3::TransportLayer::~TransportLayer()
function _ZThn8_N8opendnp314TransportLayerD0Ev	non-virtual thunk to opendnp3::TransportLayer::~TransportLayer()
function _ZN8opendnp314TransportLayerD2Ev	opendnp3::TransportLayer::~TransportLayer()
function _ZThn8_N8opendnp314TransportLayerD1Ev	non-virtual thunk to opendnp3::TransportLayer::~TransportLayer()
function _ZN8opendnp311TransportRxD1Ev	opendnp3::TransportRx::~TransportRx()
function _ZN8opendnp311TransportRxC2ERKN7openpal6LoggerEj	opendnp3::TransportRx::TransportRx(openpal::Logger const&, unsigned int)
function _ZN8opendnp311TransportRx13ClearRxBufferEv	opendnp3::TransportRx::ClearRxBuffer()
function _ZN8opendnp311TransportRx5ResetEv	opendnp3::TransportRx::Reset()
function _ZN8opendnp311TransportRx12GetAvailableEv	opendnp3::TransportRx::GetAvailable()
function _ZN8opendnp311TransportRx14ProcessReceiveERKNS_7MessageE	opendnp3::TransportRx::ProcessReceive(opendnp3::Message const&)
function _ZN8opendnp314TransportStackC2ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_13ILinkListenerEEjRKNS_15LinkLayerConfigE	opendnp3::TransportStack::TransportStack(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::ILinkListener> const&, unsigned int, opendnp3::LinkLayerConfig const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp39LinkLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::LinkLayer, std::allocator<opendnp3::LinkLayer>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp314TransportLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev	std::_Sp_counted_ptr_inplace<opendnp3::TransportLayer, std::allocator<opendnp3::TransportLayer>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp314TransportLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::TransportLayer, std::allocator<opendnp3::TransportLayer>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp39LinkLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info	std::_Sp_counted_ptr_inplace<opendnp3::LinkLayer, std::allocator<opendnp3::LinkLayer>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp314TransportLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::TransportLayer, std::allocator<opendnp3::TransportLayer>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp39LinkLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev	std::_Sp_counted_ptr_inplace<opendnp3::LinkLayer, std::allocator<opendnp3::LinkLayer>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp39LinkLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::LinkLayer, std::allocator<opendnp3::LinkLayer>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp314TransportLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv	std::_Sp_counted_ptr_inplace<opendnp3::TransportLayer, std::allocator<opendnp3::TransportLayer>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp314TransportLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::TransportLayer, std::allocator<opendnp3::TransportLayer>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNSt23_Sp_counted_ptr_inplaceIN8opendnp39LinkLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv	std::_Sp_counted_ptr_inplace<opendnp3::LinkLayer, std::allocator<opendnp3::LinkLayer>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
function _ZNK8opendnp311TransportTx8HasValueEv	opendnp3::TransportTx::HasValue() const
function _ZN8opendnp311TransportTx7AdvanceEv	opendnp3::TransportTx::Advance()
function _ZN8opendnp311TransportTx10GetSegmentEv	opendnp3::TransportTx::GetSegment()
function _ZN8opendnp311TransportTxC2ERKN7openpal6LoggerE	opendnp3::TransportTx::TransportTx(openpal::Logger const&)
function _ZN8opendnp311TransportTx9ConfigureERKNS_7MessageE	opendnp3::TransportTx::Configure(opendnp3::Message const&)
function _ZNK8opendnp311TransportTx12GetAddressesEv	opendnp3::TransportTx::GetAddresses() const
function _ZN8opendnp311TransportTxD1Ev	opendnp3::TransportTx::~TransportTx()
function _ZN8opendnp311TransportTxD0Ev	opendnp3::TransportTx::~TransportTx()
sec: .fini
function _fini	_fini
sec: .rodata
sec: .eh_frame_hdr
sec: .eh_frame
sec: .gcc_except_table
sec: .init_array
sec: .fini_array
sec: .jcr
sec: .data.rel.ro
sec: .dynamic
sec: .got
sec: .got.plt
sec: .data
sec: .bss
sec: .comment
sec: .shstrtab
sec: .symtab
sec: .strtab
image: /usr/lib/libopenpal.so.2
image: /usr/lib/x86_64-linux-gnu/libstdc++.so.6
image: /lib/x86_64-linux-gnu/libgcc_s.so.1
image: /lib/x86_64-linux-gnu/libc.so.6
image: /lib/x86_64-linux-gnu/libdl.so.2
image: /usr/lib/libasiopal.so.2
image: /lib/x86_64-linux-gnu/libm.so.6
_init: 1 7fffbc848948 7fffbc848958 7fffbc848958	_init
0x7f02e76a4100: sub rsp, 0x8
0x7f02e76a4104: mov rax, qword ptr [rip+0x299e1d]  reg(10, 7f02e76a4100) 
0x7f02e76a410b: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f02e76a410e: jz 0x7f02e76a4115
0x7f02e76a4115: add rsp, 0x8
0x7f02e76a4119: ret 
frame_dummy: 1 7fffbc848948 7fffbc848958 7fffbc848958	frame_dummy
0x7f02e76a8fc0: lea rdi, ptr [rip+0x28d361]  reg(3, 1) 
0x7f02e76a8fc7: cmp qword ptr [rdi], 0x0  mem(7f02e7936328, 0) 
0x7f02e76a8fcb: jnz 0x7f02e76a8fd8
0x7f02e76a8fcd: jmp 0x7f02e76a8f30
register_tm_clones: 7f02e7936328 7fffbc848948 7fffbc848958 7fffbc848958	register_tm_clones
0x7f02e76a8f30: lea rdi, ptr [rip+0x297539]  reg(3, 7f02e7936328) 
0x7f02e76a8f37: lea rsi, ptr [rip+0x297532]  reg(4, 7fffbc848948) 
0x7f02e76a8f3e: push rbp
0x7f02e76a8f3f: sub rsi, rdi  reg(4, 7f02e7940470)  reg(3, 7f02e7940470) 
0x7f02e76a8f42: mov rbp, rsp
0x7f02e76a8f45: sar rsi, 0x3  reg(4, 0) 
0x7f02e76a8f49: mov rax, rsi  reg(10, 16)  reg(4, 0) 
0x7f02e76a8f4c: shr rax, 0x3f  reg(10, 0) 
0x7f02e76a8f50: add rsi, rax  reg(4, 0)  reg(10, 0) 
0x7f02e76a8f53: sar rsi, 0x1  reg(4, 0) 
0x7f02e76a8f56: jz 0x7f02e76a8f70
0x7f02e76a8f70: pop rbp
0x7f02e76a8f71: ret 
_GLOBAL__sub_I_AppControlField.cpp: 1 7fffbc848948 7fffbc848958 7fffbc848958	_GLOBAL__sub_I_AppControlField.cpp
0x7f02e76a8630: mov rdi, qword ptr [rip+0x2950e9]  reg(3, 1) 
0x7f02e76a8637: xor r9d, r9d  reg(64, 2f)  reg(64, 2f) 
0x7f02e76a863a: xor r8d, r8d  reg(61, 7f02e80fff08)  reg(61, 7f02e80fff08) 
0x7f02e76a863d: xor ecx, ecx  reg(55, 7fffbc848958)  reg(55, 7fffbc848958) 
0x7f02e76a863f: mov edx, 0x1  reg(54, 7fffbc848958) 
0x7f02e76a8644: mov esi, 0x1  reg(47, 7fffbc848948) 
0x7f02e76a8649: jmp 0x7f02e76a4770
opendnp3::AppControlField::AppControlField(bool, bool, bool, bool, unsigned char)@plt: 7f02e7940471 1 1 0	_ZN8opendnp315AppControlFieldC1Ebbbbh@plt
0x7f02e76a4770: jmp qword ptr [rip+0x299bc2]
0x7f02e76a4776: push 0x64 
0x7f02e76a477b: jmp 0x7f02e76a4120
opendnp3::AppControlField::AppControlField(bool, bool, bool, bool, unsigned char): 7f02e7940471 1 1 0	_ZN8opendnp315AppControlFieldC1Ebbbbh
0x7f02e76a9fc0: mov byte ptr [rdi], sil  reg(48, 1)  mem(7f02e7940471, 0) 
0x7f02e76a9fc3: mov byte ptr [rdi+0x1], dl  reg(33, 1)  mem(7f02e7940472, 0) 
0x7f02e76a9fc6: mov byte ptr [rdi+0x2], cl  reg(30, 0)  mem(7f02e7940473, 0) 
0x7f02e76a9fc9: mov byte ptr [rdi+0x3], r8b  reg(59, 0)  mem(7f02e7940474, 0) 
0x7f02e76a9fcd: mov byte ptr [rdi+0x4], r9b  reg(62, 0)  mem(7f02e7940475, 0) 
0x7f02e76a9fd1: ret 
_GLOBAL__sub_I_PriLinkLayerStates.cpp: 1 7fffbc848948 7fffbc848958 0	_GLOBAL__sub_I_PriLinkLayerStates.cpp
0x7f02e76a8650: mov rax, qword ptr [rip+0x294841]  reg(10, 0) 
0x7f02e76a8657: lea rdx, ptr [rax+0x10]  reg(8, 7fffbc848958) 
0x7f02e76a865b: mov rax, qword ptr [rip+0x294fbe]  reg(10, 7f02e7937d90) 
0x7f02e76a8662: mov qword ptr [rax], rdx  reg(8, 7f02e7937da0)  mem(7f02e79404b0, 0) 
0x7f02e76a8665: mov rax, qword ptr [rip+0x2953e4]  reg(10, 7f02e79404b0) 
0x7f02e76a866c: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937da0) 
0x7f02e76a8670: mov rax, qword ptr [rip+0x294d81]  reg(10, 7f02e7937df0) 
0x7f02e76a8677: mov qword ptr [rax], rdx  reg(8, 7f02e7937e00)  mem(7f02e79404a8, 0) 
0x7f02e76a867a: mov rax, qword ptr [rip+0x295887]  reg(10, 7f02e79404a8) 
0x7f02e76a8681: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937e00) 
0x7f02e76a8685: mov rax, qword ptr [rip+0x29497c]  reg(10, 7f02e7937e50) 
0x7f02e76a868c: mov qword ptr [rax], rdx  reg(8, 7f02e7937e60)  mem(7f02e79404a0, 0) 
0x7f02e76a868f: mov rax, qword ptr [rip+0x294b3a]  reg(10, 7f02e79404a0) 
0x7f02e76a8696: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937e60) 
0x7f02e76a869a: mov rax, qword ptr [rip+0x294727]  reg(10, 7f02e7937eb0) 
0x7f02e76a86a1: mov qword ptr [rax], rdx  reg(8, 7f02e7937ec0)  mem(7f02e7940498, 0) 
0x7f02e76a86a4: mov rax, qword ptr [rip+0x295805]  reg(10, 7f02e7940498) 
0x7f02e76a86ab: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937ec0) 
0x7f02e76a86af: mov rax, qword ptr [rip+0x294ce2]  reg(10, 7f02e7937f10) 
0x7f02e76a86b6: mov qword ptr [rax], rdx  reg(8, 7f02e7937f20)  mem(7f02e7940490, 0) 
0x7f02e76a86b9: mov rax, qword ptr [rip+0x294920]  reg(10, 7f02e7940490) 
0x7f02e76a86c0: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937f20) 
0x7f02e76a86c4: mov rax, qword ptr [rip+0x2946c5]  reg(10, 7f02e7937f70) 
0x7f02e76a86cb: mov qword ptr [rax], rdx  reg(8, 7f02e7937f80)  mem(7f02e7940488, 0) 
0x7f02e76a86ce: mov rax, qword ptr [rip+0x294d73]  reg(10, 7f02e7940488) 
0x7f02e76a86d5: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937f80) 
0x7f02e76a86d9: mov rax, qword ptr [rip+0x294d60]  reg(10, 7f02e7937fd0) 
0x7f02e76a86e0: mov qword ptr [rax], rdx  reg(8, 7f02e7937fe0)  mem(7f02e7940480, 0) 
0x7f02e76a86e3: mov rax, qword ptr [rip+0x295356]  reg(10, 7f02e7940480) 
0x7f02e76a86ea: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7937fe0) 
0x7f02e76a86ee: mov rax, qword ptr [rip+0x29494b]  reg(10, 7f02e7938030) 
0x7f02e76a86f5: mov qword ptr [rax], rdx  reg(8, 7f02e7938040)  mem(7f02e7940478, 0) 
0x7f02e76a86f8: ret 
_GLOBAL__sub_I_SecLinkLayerStates.cpp: 1 7fffbc848948 7fffbc848958 0	_GLOBAL__sub_I_SecLinkLayerStates.cpp
0x7f02e76a8700: mov rax, qword ptr [rip+0x294ef9]  reg(10, 7f02e7940478) 
0x7f02e76a8707: lea rdx, ptr [rax+0x10]  reg(8, 7fffbc848958) 
0x7f02e76a870b: mov rax, qword ptr [rip+0x2955fe]  reg(10, 7f02e79381f0) 
0x7f02e76a8712: mov qword ptr [rax], rdx  reg(8, 7f02e7938200)  mem(7f02e79404d0, 0) 
0x7f02e76a8715: mov rax, qword ptr [rip+0x294ae4]  reg(10, 7f02e79404d0) 
0x7f02e76a871c: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7938200) 
0x7f02e76a8720: mov rax, qword ptr [rip+0x2951f9]  reg(10, 7f02e7938230) 
0x7f02e76a8727: mov qword ptr [rax], rdx  reg(8, 7f02e7938240)  mem(7f02e79404c8, 0) 
0x7f02e76a872a: mov rax, qword ptr [rip+0x29463f]  reg(10, 7f02e79404c8) 
0x7f02e76a8731: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7938240) 
0x7f02e76a8735: mov rax, qword ptr [rip+0x294724]  reg(10, 7f02e7938130) 
0x7f02e76a873c: mov qword ptr [rax], rdx  reg(8, 7f02e7938140)  mem(7f02e79404c0, 0) 
0x7f02e76a873f: mov rax, qword ptr [rip+0x2952d2]  reg(10, 7f02e79404c0) 
0x7f02e76a8746: lea rdx, ptr [rax+0x10]  reg(8, 7f02e7938140) 
0x7f02e76a874a: mov rax, qword ptr [rip+0x29572f]  reg(10, 7f02e7938170) 
0x7f02e76a8751: mov qword ptr [rax], rdx  reg(8, 7f02e7938180)  mem(7f02e79404b8, 0) 
0x7f02e76a8754: ret 
_GLOBAL__sub_I_ShiftableBuffer.cpp: 1 7fffbc848948 7fffbc848958 0	_GLOBAL__sub_I_ShiftableBuffer.cpp
0x7f02e76a8760: lea rdi, ptr [rip+0x297d71]  reg(3, 1) 
0x7f02e76a8767: sub rsp, 0x8
0x7f02e76a876b: call 0x7f02e76a73a0
std::ios_base::Init::Init()@plt: 7f02e79404d8 7fffbc848948 7fffbc848958 0	_ZNSt8ios_base4InitC1Ev@plt
0x7f02e76a73a0: jmp qword ptr [rip+0x2985aa]
0x7f02e76a73a6: push 0x327 
0x7f02e76a73ab: jmp 0x7f02e76a4120
0x7f02e76a8770: mov rdi, qword ptr [rip+0x295871]  reg(3, 7f02e7402458) 
0x7f02e76a8777: lea rdx, ptr [rip+0x297a42]  reg(8, 6) 
0x7f02e76a877e: lea rsi, ptr [rip+0x297d53]  reg(4, 0) 
0x7f02e76a8785: add rsp, 0x8
0x7f02e76a8789: jmp 0x7f02e76a5cd0
__cxa_atexit@plt: 7f02e71260b0 7f02e79404d8 7f02e79401c0 7fffbc8487e0	__cxa_atexit@plt
0x7f02e76a5cd0: jmp qword ptr [rip+0x299112]
0x7f02e76a5cd6: push 0x1ba 
0x7f02e76a5cdb: jmp 0x7f02e76a4120
_GLOBAL__sub_I_ClearRestartTask.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_ClearRestartTask.cpp
0x7f02e76a8790: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a8795: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
0x7f02e76a50b6: push 0xf8 
0x7f02e76a50bb: jmp 0x7f02e76a4120
_GLOBAL__sub_I_DisableUnsolicitedTask.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_DisableUnsolicitedTask.cpp
0x7f02e76a87a0: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a87a5: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_EnableUnsolicitedTask.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_EnableUnsolicitedTask.cpp
0x7f02e76a87b0: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a87b5: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_EventScanTask.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_EventScanTask.cpp
0x7f02e76a87c0: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a87c5: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_MasterContext.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_MasterContext.cpp
0x7f02e76a87d0: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a87d5: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_MasterTasks.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_MasterTasks.cpp
0x7f02e76a87e0: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a87e5: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_StartupIntegrityPoll.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_StartupIntegrityPoll.cpp
0x7f02e76a87f0: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a87f5: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 280	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_Group30.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_Group30.cpp
0x7f02e76a8800: sub rsp, 0x8
0x7f02e76a8804: mov rax, qword ptr [rip+0x2946bd]  reg(10, 1388) 
0x7f02e76a880b: cmp byte ptr [rax], 0x0  mem(7f02e7940508, 0) 
0x7f02e76a880e: jz 0x7f02e76a88bf
0x7f02e76a88bf: mov byte ptr [rax], 0x1  mem(7f02e7940508, 0) 
0x7f02e76a88c2: call 0x7f02e76a7a80
int openpal::MaxValue<int>()@plt: 1 7fffbc848948 7fffbc848958 280	_ZN7openpal8MaxValueIiEET_v@plt
0x7f02e76a7a80: jmp qword ptr [rip+0x29823a]
0x7f02e76a7a86: push 0x395 
0x7f02e76a7a8b: jmp 0x7f02e76a4120
0x7f02e76a88c7: mov rdx, qword ptr [rip+0x29491a]  reg(8, 7fffbc848958) 
0x7f02e76a88ce: mov dword ptr [rdx], eax  reg(56, 7fffffff)  mem(7f02e7940520, 0) 
0x7f02e76a88d0: jmp 0x7f02e76a8814
0x7f02e76a8814: mov rax, qword ptr [rip+0x295545]  reg(10, 7fffffff) 
0x7f02e76a881b: cmp byte ptr [rax], 0x0  mem(7f02e7940500, 0) 
0x7f02e76a881e: jz 0x7f02e76a88a9
0x7f02e76a88a9: mov byte ptr [rax], 0x1  mem(7f02e7940500, 0) 
0x7f02e76a88ac: call 0x7f02e76a6460
int openpal::MinValue<int>()@plt: 1 7fffbc848948 7f02e7940520 280	_ZN7openpal8MinValueIiEET_v@plt
0x7f02e76a6460: jmp qword ptr [rip+0x298d4a]
0x7f02e76a6466: push 0x233 
0x7f02e76a646b: jmp 0x7f02e76a4120
0x7f02e76a88b1: mov rdx, qword ptr [rip+0x294a70]  reg(8, 7f02e7940520) 
0x7f02e76a88b8: mov dword ptr [rdx], eax  reg(56, 80000000)  mem(7f02e794051c, 7fffffff00000000) 
0x7f02e76a88ba: jmp 0x7f02e76a8824
0x7f02e76a8824: mov rax, qword ptr [rip+0x29460d]  reg(10, 80000000) 
0x7f02e76a882b: cmp byte ptr [rax], 0x0  mem(7f02e79404f8, 0) 
0x7f02e76a882e: jz 0x7f02e76a8895
0x7f02e76a8895: mov byte ptr [rax], 0x1  mem(7f02e79404f8, 0) 
0x7f02e76a8898: call 0x7f02e76a6f30
short openpal::MaxValue<short>()@plt: 1 7fffbc848948 7f02e794051c 280	_ZN7openpal8MaxValueIsEET_v@plt
0x7f02e76a6f30: jmp qword ptr [rip+0x2987e2]
0x7f02e76a6f36: push 0x2e0 
0x7f02e76a6f3b: jmp 0x7f02e76a4120
0x7f02e76a889d: mov rdx, qword ptr [rip+0x294a64]  reg(8, 7f02e794051c) 
0x7f02e76a88a4: mov word ptr [rdx], ax  reg(29, 7fff)  mem(7f02e794051a, ffff800000000000) 
0x7f02e76a88a7: jmp 0x7f02e76a8830
0x7f02e76a8830: mov rax, qword ptr [rip+0x2948c1]  reg(10, 7fff) 
0x7f02e76a8837: cmp byte ptr [rax], 0x0  mem(7f02e79404f0, 0) 
0x7f02e76a883a: jz 0x7f02e76a8881
0x7f02e76a8881: mov byte ptr [rax], 0x1  mem(7f02e79404f0, 0) 
0x7f02e76a8884: call 0x7f02e76a6830
short openpal::MinValue<short>()@plt: 1 7fffbc848948 7f02e794051a 280	_ZN7openpal8MinValueIsEET_v@plt
0x7f02e76a6830: jmp qword ptr [rip+0x298b62]
0x7f02e76a6836: push 0x270 
0x7f02e76a683b: jmp 0x7f02e76a4120
0x7f02e76a8889: mov rdx, qword ptr [rip+0x294560]  reg(8, 7f02e794051a) 
0x7f02e76a8890: mov word ptr [rdx], ax  reg(29, ffff8000)  mem(7f02e7940518, 800000007fff0000) 
0x7f02e76a8893: jmp 0x7f02e76a883c
0x7f02e76a883c: mov rax, qword ptr [rip+0x2952dd]  reg(10, ffff8000) 
0x7f02e76a8843: cmp byte ptr [rax], 0x0  mem(7f02e79404e8, 0) 
0x7f02e76a8846: jz 0x7f02e76a886c
0x7f02e76a886c: mov byte ptr [rax], 0x1  mem(7f02e79404e8, 0) 
0x7f02e76a886f: call 0x7f02e76a6c00
float openpal::MaxValue<float>()@plt: 1 7fffbc848948 7f02e7940518 280	_ZN7openpal8MaxValueIfEET_v@plt
0x7f02e76a6c00: jmp qword ptr [rip+0x29897a]
0x7f02e76a6c06: push 0x2ad 
0x7f02e76a6c0b: jmp 0x7f02e76a4120
0x7f02e76a8874: mov rax, qword ptr [rip+0x295515]  reg(10, 7f02e79404e8) 
0x7f02e76a887b: movss dword ptr [rax], xmm0
0x7f02e76a887f: jmp 0x7f02e76a8848
0x7f02e76a8848: mov rax, qword ptr [rip+0x2956d1]  reg(10, 7f02e7940514) 
0x7f02e76a884f: cmp byte ptr [rax], 0x0  mem(7f02e79404e0, 0) 
0x7f02e76a8852: jnz 0x7f02e76a8867
0x7f02e76a8854: mov byte ptr [rax], 0x1  mem(7f02e79404e0, 0) 
0x7f02e76a8857: call 0x7f02e76a6630
float openpal::MinValue<float>()@plt: 1 7fffbc848948 7f02e7940518 280	_ZN7openpal8MinValueIfEET_v@plt
0x7f02e76a6630: jmp qword ptr [rip+0x298c62]
0x7f02e76a6636: push 0x250 
0x7f02e76a663b: jmp 0x7f02e76a4120
0x7f02e76a885c: mov rax, qword ptr [rip+0x295645]  reg(10, 7f02e79404e0) 
0x7f02e76a8863: movss dword ptr [rax], xmm0
0x7f02e76a8867: add rsp, 0x8
0x7f02e76a886b: ret 
_GLOBAL__sub_I_Group32.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_Group32.cpp
0x7f02e76a88e0: sub rsp, 0x8
0x7f02e76a88e4: mov rax, qword ptr [rip+0x2945dd]  reg(10, 7f02e7940510) 
0x7f02e76a88eb: cmp byte ptr [rax], 0x0  mem(7f02e7940508, 1) 
0x7f02e76a88ee: jz 0x7f02e76a899f
0x7f02e76a88f4: mov rax, qword ptr [rip+0x295465]  reg(10, 7f02e7940508) 
0x7f02e76a88fb: cmp byte ptr [rax], 0x0  mem(7f02e7940500, 1) 
0x7f02e76a88fe: jz 0x7f02e76a8989
0x7f02e76a8904: mov rax, qword ptr [rip+0x29452d]  reg(10, 7f02e7940500) 
0x7f02e76a890b: cmp byte ptr [rax], 0x0  mem(7f02e79404f8, 1) 
0x7f02e76a890e: jz 0x7f02e76a8975
0x7f02e76a8910: mov rax, qword ptr [rip+0x2947e1]  reg(10, 7f02e79404f8) 
0x7f02e76a8917: cmp byte ptr [rax], 0x0  mem(7f02e79404f0, 1) 
0x7f02e76a891a: jz 0x7f02e76a8961
0x7f02e76a891c: mov rax, qword ptr [rip+0x2951fd]  reg(10, 7f02e79404f0) 
0x7f02e76a8923: cmp byte ptr [rax], 0x0  mem(7f02e79404e8, 1) 
0x7f02e76a8926: jz 0x7f02e76a894c
0x7f02e76a8928: mov rax, qword ptr [rip+0x2955f1]  reg(10, 7f02e79404e8) 
0x7f02e76a892f: cmp byte ptr [rax], 0x0  mem(7f02e79404e0, 1) 
0x7f02e76a8932: jnz 0x7f02e76a8947
0x7f02e76a8947: add rsp, 0x8
0x7f02e76a894b: ret 
_GLOBAL__sub_I_Group40.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_Group40.cpp
0x7f02e76a89c0: sub rsp, 0x8
0x7f02e76a89c4: mov rax, qword ptr [rip+0x2944fd]  reg(10, 7f02e79404e0) 
0x7f02e76a89cb: cmp byte ptr [rax], 0x0  mem(7f02e7940508, 1) 
0x7f02e76a89ce: jz 0x7f02e76a8a7f
0x7f02e76a89d4: mov rax, qword ptr [rip+0x295385]  reg(10, 7f02e7940508) 
0x7f02e76a89db: cmp byte ptr [rax], 0x0  mem(7f02e7940500, 1) 
0x7f02e76a89de: jz 0x7f02e76a8a69
0x7f02e76a89e4: mov rax, qword ptr [rip+0x29444d]  reg(10, 7f02e7940500) 
0x7f02e76a89eb: cmp byte ptr [rax], 0x0  mem(7f02e79404f8, 1) 
0x7f02e76a89ee: jz 0x7f02e76a8a55
0x7f02e76a89f0: mov rax, qword ptr [rip+0x294701]  reg(10, 7f02e79404f8) 
0x7f02e76a89f7: cmp byte ptr [rax], 0x0  mem(7f02e79404f0, 1) 
0x7f02e76a89fa: jz 0x7f02e76a8a41
0x7f02e76a89fc: mov rax, qword ptr [rip+0x29511d]  reg(10, 7f02e79404f0) 
0x7f02e76a8a03: cmp byte ptr [rax], 0x0  mem(7f02e79404e8, 1) 
0x7f02e76a8a06: jz 0x7f02e76a8a2c
0x7f02e76a8a08: mov rax, qword ptr [rip+0x295511]  reg(10, 7f02e79404e8) 
0x7f02e76a8a0f: cmp byte ptr [rax], 0x0  mem(7f02e79404e0, 1) 
0x7f02e76a8a12: jnz 0x7f02e76a8a27
0x7f02e76a8a27: add rsp, 0x8
0x7f02e76a8a2b: ret 
_GLOBAL__sub_I_Group42.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_Group42.cpp
0x7f02e76a8aa0: sub rsp, 0x8
0x7f02e76a8aa4: mov rax, qword ptr [rip+0x29441d]  reg(10, 7f02e79404e0) 
0x7f02e76a8aab: cmp byte ptr [rax], 0x0  mem(7f02e7940508, 1) 
0x7f02e76a8aae: jz 0x7f02e76a8b5f
0x7f02e76a8ab4: mov rax, qword ptr [rip+0x2952a5]  reg(10, 7f02e7940508) 
0x7f02e76a8abb: cmp byte ptr [rax], 0x0  mem(7f02e7940500, 1) 
0x7f02e76a8abe: jz 0x7f02e76a8b49
0x7f02e76a8ac4: mov rax, qword ptr [rip+0x29436d]  reg(10, 7f02e7940500) 
0x7f02e76a8acb: cmp byte ptr [rax], 0x0  mem(7f02e79404f8, 1) 
0x7f02e76a8ace: jz 0x7f02e76a8b35
0x7f02e76a8ad0: mov rax, qword ptr [rip+0x294621]  reg(10, 7f02e79404f8) 
0x7f02e76a8ad7: cmp byte ptr [rax], 0x0  mem(7f02e79404f0, 1) 
0x7f02e76a8ada: jz 0x7f02e76a8b21
0x7f02e76a8adc: mov rax, qword ptr [rip+0x29503d]  reg(10, 7f02e79404f0) 
0x7f02e76a8ae3: cmp byte ptr [rax], 0x0  mem(7f02e79404e8, 1) 
0x7f02e76a8ae6: jz 0x7f02e76a8b0c
0x7f02e76a8ae8: mov rax, qword ptr [rip+0x295431]  reg(10, 7f02e79404e8) 
0x7f02e76a8aef: cmp byte ptr [rax], 0x0  mem(7f02e79404e0, 1) 
0x7f02e76a8af2: jnz 0x7f02e76a8b07
0x7f02e76a8b07: add rsp, 0x8
0x7f02e76a8b0b: ret 
_GLOBAL__sub_I_Group43.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_Group43.cpp
0x7f02e76a8b80: sub rsp, 0x8
0x7f02e76a8b84: mov rax, qword ptr [rip+0x29433d]  reg(10, 7f02e79404e0) 
0x7f02e76a8b8b: cmp byte ptr [rax], 0x0  mem(7f02e7940508, 1) 
0x7f02e76a8b8e: jz 0x7f02e76a8c3f
0x7f02e76a8b94: mov rax, qword ptr [rip+0x2951c5]  reg(10, 7f02e7940508) 
0x7f02e76a8b9b: cmp byte ptr [rax], 0x0  mem(7f02e7940500, 1) 
0x7f02e76a8b9e: jz 0x7f02e76a8c29
0x7f02e76a8ba4: mov rax, qword ptr [rip+0x29428d]  reg(10, 7f02e7940500) 
0x7f02e76a8bab: cmp byte ptr [rax], 0x0  mem(7f02e79404f8, 1) 
0x7f02e76a8bae: jz 0x7f02e76a8c15
0x7f02e76a8bb0: mov rax, qword ptr [rip+0x294541]  reg(10, 7f02e79404f8) 
0x7f02e76a8bb7: cmp byte ptr [rax], 0x0  mem(7f02e79404f0, 1) 
0x7f02e76a8bba: jz 0x7f02e76a8c01
0x7f02e76a8bbc: mov rax, qword ptr [rip+0x294f5d]  reg(10, 7f02e79404f0) 
0x7f02e76a8bc3: cmp byte ptr [rax], 0x0  mem(7f02e79404e8, 1) 
0x7f02e76a8bc6: jz 0x7f02e76a8bec
0x7f02e76a8bc8: mov rax, qword ptr [rip+0x295351]  reg(10, 7f02e79404e8) 
0x7f02e76a8bcf: cmp byte ptr [rax], 0x0  mem(7f02e79404e0, 1) 
0x7f02e76a8bd2: jnz 0x7f02e76a8be7
0x7f02e76a8be7: add rsp, 0x8
0x7f02e76a8beb: ret 
_GLOBAL__sub_I_ASDUEventWriteHandler.cpp: 1 7fffbc848948 7fffbc848958 280	_GLOBAL__sub_I_ASDUEventWriteHandler.cpp
0x7f02e76a8c60: mov rax, qword ptr [rip+0x294789]  reg(10, 7f02e79404e0) 
0x7f02e76a8c67: cmp byte ptr [rax], 0x0  mem(7f02e7940528, 0) 
0x7f02e76a8c6a: jz 0x7f02e76a8c6d
0x7f02e76a8c6d: push rdx  reg(8, 7fffbc848958) 
0x7f02e76a8c6e: mov byte ptr [rax], 0x1  mem(7f02e7940528, 0) 
0x7f02e76a8c71: call 0x7f02e76a7170
unsigned short openpal::MaxValue<unsigned short>()@plt: 1 7fffbc848948 7fffbc848958 280	_ZN7openpal8MaxValueItEET_v@plt
0x7f02e76a7170: jmp qword ptr [rip+0x2986c2]
0x7f02e76a7176: push 0x304 
0x7f02e76a717b: jmp 0x7f02e76a4120
0x7f02e76a8c76: mov rdx, qword ptr [rip+0x294c6b]  reg(8, 7fffbc848958) 
0x7f02e76a8c7d: mov word ptr [rdx], ax  reg(29, ffffffff)  mem(7f02e7940530, 0) 
0x7f02e76a8c80: pop rcx  reg(9, 280) 
0x7f02e76a8c81: ret 
_GLOBAL__sub_I_EventStorage.cpp: 1 7fffbc848948 7fffbc848958 7fffbc848958	_GLOBAL__sub_I_EventStorage.cpp
0x7f02e76a8c90: mov rax, qword ptr [rip+0x295049]  reg(10, ffffffff) 
0x7f02e76a8c97: cmp byte ptr [rax], 0x0  mem(7f02e7940570, 0) 
0x7f02e76a8c9a: jnz 0x7f02e76a8cba
0x7f02e76a8c9c: mov rdx, qword ptr [rip+0x294b85]  reg(8, 7fffbc848958) 
0x7f02e76a8ca3: mov byte ptr [rax], 0x1  mem(7f02e7940570, 0) 
0x7f02e76a8ca6: mov rax, qword ptr [rip+0x294e7b]  reg(10, 7f02e7940570) 
0x7f02e76a8cad: add rdx, 0x10  reg(8, 7f02e793c028) 
0x7f02e76a8cb1: mov word ptr [rax+0x8], 0x0  mem(7f02e79405f8, 0) 
0x7f02e76a8cb7: mov qword ptr [rax], rdx  reg(8, 7f02e793c038)  mem(7f02e79405f0, 0) 
0x7f02e76a8cba: mov rax, qword ptr [rip+0x2950e7]  reg(10, 7f02e79405f0) 
0x7f02e76a8cc1: cmp byte ptr [rax], 0x0  mem(7f02e7940568, 0) 
0x7f02e76a8cc4: jnz 0x7f02e76a8ce4
0x7f02e76a8cc6: mov rdx, qword ptr [rip+0x294353]  reg(8, 7f02e793c038) 
0x7f02e76a8ccd: mov byte ptr [rax], 0x1  mem(7f02e7940568, 0) 
0x7f02e76a8cd0: mov rax, qword ptr [rip+0x294bf9]  reg(10, 7f02e7940568) 
0x7f02e76a8cd7: add rdx, 0x10  reg(8, 7f02e793c050) 
0x7f02e76a8cdb: mov word ptr [rax+0x8], 0x4  mem(7f02e79405e8, 0) 
0x7f02e76a8ce1: mov qword ptr [rax], rdx  reg(8, 7f02e793c060)  mem(7f02e79405e0, 0) 
0x7f02e76a8ce4: mov rax, qword ptr [rip+0x29417d]  reg(10, 7f02e79405e0) 
0x7f02e76a8ceb: cmp byte ptr [rax], 0x0  mem(7f02e7940560, 0) 
0x7f02e76a8cee: jnz 0x7f02e76a8d0e
0x7f02e76a8cf0: mov rdx, qword ptr [rip+0x294b61]  reg(8, 7f02e793c060) 
0x7f02e76a8cf7: mov byte ptr [rax], 0x1  mem(7f02e7940560, 0) 
0x7f02e76a8cfa: mov rax, qword ptr [rip+0x294ef7]  reg(10, 7f02e7940560) 
0x7f02e76a8d01: add rdx, 0x10  reg(8, 7f02e793c078) 
0x7f02e76a8d05: mov word ptr [rax+0x8], 0x1  mem(7f02e79405d8, 0) 
0x7f02e76a8d0b: mov qword ptr [rax], rdx  reg(8, 7f02e793c088)  mem(7f02e79405d0, 0) 
0x7f02e76a8d0e: mov rax, qword ptr [rip+0x294ec3]  reg(10, 7f02e79405d0) 
0x7f02e76a8d15: cmp byte ptr [rax], 0x0  mem(7f02e7940558, 0) 
0x7f02e76a8d18: jnz 0x7f02e76a8d38
0x7f02e76a8d1a: mov rdx, qword ptr [rip+0x294707]  reg(8, 7f02e793c088) 
0x7f02e76a8d21: mov byte ptr [rax], 0x1  mem(7f02e7940558, 0) 
0x7f02e76a8d24: mov rax, qword ptr [rip+0x29480d]  reg(10, 7f02e7940558) 
0x7f02e76a8d2b: add rdx, 0x10  reg(8, 7f02e793c0a0) 
0x7f02e76a8d2f: mov word ptr [rax+0x8], 0x2  mem(7f02e79405c8, 0) 
0x7f02e76a8d35: mov qword ptr [rax], rdx  reg(8, 7f02e793c0b0)  mem(7f02e79405c0, 0) 
0x7f02e76a8d38: mov rax, qword ptr [rip+0x294959]  reg(10, 7f02e79405c0) 
0x7f02e76a8d3f: cmp byte ptr [rax], 0x0  mem(7f02e7940550, 0) 
0x7f02e76a8d42: jnz 0x7f02e76a8d62
0x7f02e76a8d44: mov rdx, qword ptr [rip+0x294b65]  reg(8, 7f02e793c0b0) 
0x7f02e76a8d4b: mov byte ptr [rax], 0x1  mem(7f02e7940550, 0) 
0x7f02e76a8d4e: mov rax, qword ptr [rip+0x294be3]  reg(10, 7f02e7940550) 
0x7f02e76a8d55: add rdx, 0x10  reg(8, 7f02e793c0c8) 
0x7f02e76a8d59: mov word ptr [rax+0x8], 0x3  mem(7f02e79405b8, 0) 
0x7f02e76a8d5f: mov qword ptr [rax], rdx  reg(8, 7f02e793c0d8)  mem(7f02e79405b0, 0) 
0x7f02e76a8d62: mov rax, qword ptr [rip+0x294a27]  reg(10, 7f02e79405b0) 
0x7f02e76a8d69: cmp byte ptr [rax], 0x0  mem(7f02e7940548, 0) 
0x7f02e76a8d6c: jnz 0x7f02e76a8d8c
0x7f02e76a8d6e: mov rdx, qword ptr [rip+0x2947cb]  reg(8, 7f02e793c0d8) 
0x7f02e76a8d75: mov byte ptr [rax], 0x1  mem(7f02e7940548, 0) 
0x7f02e76a8d78: mov rax, qword ptr [rip+0x294549]  reg(10, 7f02e7940548) 
0x7f02e76a8d7f: add rdx, 0x10  reg(8, 7f02e793c0f0) 
0x7f02e76a8d83: mov word ptr [rax+0x8], 0x5  mem(7f02e79405a8, 0) 
0x7f02e76a8d89: mov qword ptr [rax], rdx  reg(8, 7f02e793c100)  mem(7f02e79405a0, 0) 
0x7f02e76a8d8c: mov rax, qword ptr [rip+0x295095]  reg(10, 7f02e79405a0) 
0x7f02e76a8d93: cmp byte ptr [rax], 0x0  mem(7f02e7940540, 0) 
0x7f02e76a8d96: jnz 0x7f02e76a8db6
0x7f02e76a8d98: mov rdx, qword ptr [rip+0x294041]  reg(8, 7f02e793c100) 
0x7f02e76a8d9f: mov byte ptr [rax], 0x1  mem(7f02e7940540, 0) 
0x7f02e76a8da2: mov rax, qword ptr [rip+0x2943a7]  reg(10, 7f02e7940540) 
0x7f02e76a8da9: add rdx, 0x10  reg(8, 7f02e793c118) 
0x7f02e76a8dad: mov word ptr [rax+0x8], 0x6  mem(7f02e7940598, 0) 
0x7f02e76a8db3: mov qword ptr [rax], rdx  reg(8, 7f02e793c128)  mem(7f02e7940590, 0) 
0x7f02e76a8db6: mov rax, qword ptr [rip+0x294d43]  reg(10, 7f02e7940590) 
0x7f02e76a8dbd: cmp byte ptr [rax], 0x0  mem(7f02e7940538, 0) 
0x7f02e76a8dc0: jnz 0x7f02e76a8de0
0x7f02e76a8dc2: mov rdx, qword ptr [rip+0x294887]  reg(8, 7f02e793c128) 
0x7f02e76a8dc9: mov byte ptr [rax], 0x1  mem(7f02e7940538, 0) 
0x7f02e76a8dcc: mov rax, qword ptr [rip+0x294c85]  reg(10, 7f02e7940538) 
0x7f02e76a8dd3: add rdx, 0x10  reg(8, 7f02e793c140) 
0x7f02e76a8dd7: mov word ptr [rax+0x8], 0x7  mem(7f02e7940588, 0) 
0x7f02e76a8ddd: mov qword ptr [rax], rdx  reg(8, 7f02e793c150)  mem(7f02e7940580, 0) 
0x7f02e76a8de0: ret 
_GLOBAL__sub_I_EventWriters.cpp: 1 7fffbc848948 7fffbc848958 7fffbc848958	_GLOBAL__sub_I_EventWriters.cpp
0x7f02e76a8df0: mov rax, qword ptr [rip+0x2945f9]  reg(10, 7f02e7940580) 
0x7f02e76a8df7: cmp byte ptr [rax], 0x0  mem(7f02e7940528, 1) 
0x7f02e76a8dfa: jz 0x7f02e76a8dfd
0x7f02e76a8dfc: ret 
_GLOBAL__sub_I_OutstationContext.cpp: 1 7fffbc848948 7fffbc848958 7fffbc848958	_GLOBAL__sub_I_OutstationContext.cpp
0x7f02e76a8e20: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a8e25: jmp 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 7fffbc848958	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
_GLOBAL__sub_I_OutstationStates.cpp: 1 7fffbc848948 7fffbc848958 7fffbc848958	_GLOBAL__sub_I_OutstationStates.cpp
0x7f02e76a8e30: sub rsp, 0x8
0x7f02e76a8e34: mov edi, 0x1388  reg(45, 1) 
0x7f02e76a8e39: call 0x7f02e76a50b0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 7fffbc848958	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x7f02e76a50b0: jmp qword ptr [rip+0x299722]
0x7f02e76a8e3e: mov rax, qword ptr [rip+0x294513]  reg(10, 1388) 
0x7f02e76a8e45: mov rsi, qword ptr [rip+0x294c2c]  reg(4, 1388) 
0x7f02e76a8e4c: lea rdx, ptr [rip+0x29736d]  reg(8, 0) 
0x7f02e76a8e53: mov rdi, qword ptr [rip+0x295156]  reg(3, 7fffbc8488a0) 
0x7f02e76a8e5a: add rax, 0x10  reg(10, 7f02e793c2e0) 
0x7f02e76a8e5e: mov qword ptr [rsi], rax  reg(10, 7f02e793c2f0)  mem(7f02e7940610, 0) 
0x7f02e76a8e61: call 0x7f02e76a5cd0
__cxa_atexit@plt: 7f02e76fbb30 7f02e7940610 7f02e79401c0 7fffbc848958	__cxa_atexit@plt
0x7f02e76a5cd0: jmp qword ptr [rip+0x299112]
0x7f02e76a8e66: mov rax, qword ptr [rip+0x294663]  reg(10, 0) 
0x7f02e76a8e6d: mov rsi, qword ptr [rip+0x2947a4]  reg(4, 7f02e6e68ef0) 
0x7f02e76a8e74: lea rdx, ptr [rip+0x297345]  reg(8, 16) 
0x7f02e76a8e7b: mov rdi, qword ptr [rip+0x294706]  reg(3, c2d74e77b17481c4) 
0x7f02e76a8e82: add rax, 0x10  reg(10, 7f02e793c330) 
0x7f02e76a8e86: mov qword ptr [rsi], rax  reg(10, 7f02e793c340)  mem(7f02e7940608, 0) 
0x7f02e76a8e89: call 0x7f02e76a5cd0
__cxa_atexit@plt: 7f02e76fbb40 7f02e7940608 7f02e79401c0 2a0	__cxa_atexit@plt
0x7f02e76a5cd0: jmp qword ptr [rip+0x299112]
0x7f02e76a8e8e: mov rax, qword ptr [rip+0x29503b]  reg(10, 0) 
0x7f02e76a8e95: mov rsi, qword ptr [rip+0x2950f4]  reg(4, 7f02e6e68f10) 
0x7f02e76a8e9c: lea rdx, ptr [rip+0x29731d]  reg(8, 17) 
0x7f02e76a8ea3: mov rdi, qword ptr [rip+0x294726]  reg(3, c2d74e77b19481c4) 
0x7f02e76a8eaa: add rax, 0x10  reg(10, 7f02e793c380) 
0x7f02e76a8eae: mov qword ptr [rsi], rax  reg(10, 7f02e793c390)  mem(7f02e7940600, 0) 
0x7f02e76a8eb1: add rsp, 0x8
0x7f02e76a8eb5: jmp 0x7f02e76a5cd0
__cxa_atexit@plt: 7f02e76fbb50 7f02e7940600 7f02e79401c0 2c0	__cxa_atexit@plt
0x7f02e76a5cd0: jmp qword ptr [rip+0x299112]
_GLOBAL__sub_I_StaticWriters.cpp: 1 7fffbc848948 7fffbc848958 2e0	_GLOBAL__sub_I_StaticWriters.cpp
0x7f02e76a8ec0: mov rax, qword ptr [rip+0x294529]  reg(10, 0) 
0x7f02e76a8ec7: cmp byte ptr [rax], 0x0  mem(7f02e7940528, 1) 
0x7f02e76a8eca: jz 0x7f02e76a8ecd
0x7f02e76a8ecc: ret 
_init: 1 7fffbc848948 7fffbc848958 7fffbc848958	_init
frame_dummy: 1 7fffbc848948 7fffbc848958 7fffbc848958	frame_dummy
register_tm_clones: 7f02e80bfdf8 7fffbc848948 7fffbc848958 7fffbc848958	register_tm_clones
_start: 7f02fbb05168 1 7f02fb8eeab0 7fffbc848958	_start
0x407900: xor ebp, ebp
0x407902: mov r9, rdx  reg(12, 0)  reg(8, 7f02fb8eeab0) 
0x407905: pop rsi  reg(4, 1) 
0x407906: mov rdx, rsp  reg(8, 7f02fb8eeab0) 
0x407909: and rsp, 0xfffffffffffffff0
0x40790d: push rax  reg(10, 1c) 
0x40790e: push rsp
0x40790f: mov r8, 0x408ee0  reg(11, 7f02fbb056f8) 
0x407916: mov rcx, 0x408e70  reg(9, 7fffbc848958) 
0x40791d: mov rdi, 0x406f40  reg(3, 7f02fbb05168) 
0x407924: call 0x406f10
__libc_start_main@plt: 406f40 1 7fffbc848948 408e70	__libc_start_main@plt
0x406f10: jmp qword ptr [rip+0x204262]
0x406f16: push 0x2c 
0x406f1b: jmp 0x406c40
__libc_csu_init: 1 7fffbc848948 7fffbc848958 3a0	__libc_csu_init
0x408e70: push r15  reg(18, 0) 
0x408e72: push r14  reg(17, 0) 
0x408e74: mov r15d, edi  reg(82, 0)  reg(45, 1) 
0x408e77: push r13  reg(16, 7fffbc848940) 
0x408e79: push r12  reg(15, 407900) 
0x408e7b: lea r12, ptr [rip+0x20186e]  reg(15, 407900) 
0x408e82: push rbp
0x408e83: lea rbp, ptr [rip+0x201876]
0x408e8a: push rbx  reg(7, 0) 
0x408e8b: mov r14, rsi  reg(17, 0)  reg(4, 7fffbc848948) 
0x408e8e: mov r13, rdx  reg(16, 7fffbc848940)  reg(8, 7fffbc848958) 
0x408e91: sub rbp, r12
0x408e94: sub rsp, 0x8
0x408e98: sar rbp, 0x3
0x408e9c: call 0x406c18
_init: 1 7fffbc848948 7fffbc848958 3a0	_init
0x406c18: sub rsp, 0x8
0x406c1c: mov rax, qword ptr [rip+0x2043cd]  reg(10, 7f02e6e69f38) 
0x406c23: test rax, rax  reg(10, 0)  reg(10, 0) 
0x406c26: jz 0x406c2d
0x406c2d: add rsp, 0x8
0x406c31: ret 
0x408ea1: test rbp, rbp
0x408ea4: jz 0x408ec6
0x408ea6: xor ebx, ebx  reg(53, 0)  reg(53, 0) 
0x408ea8: nop dword ptr [rax+rax*1], eax
0x408eb0: mov rdx, r13  reg(8, 7fffbc848958)  reg(16, 7fffbc848958) 
0x408eb3: mov rsi, r14  reg(4, 7fffbc848948)  reg(17, 7fffbc848948) 
0x408eb6: mov edi, r15d  reg(45, 1)  reg(82, 1) 
0x408eb9: call qword ptr [r12+rbx*8]
frame_dummy: 1 7fffbc848948 7fffbc848958 3a0	frame_dummy
0x4079d0: mov edi, 0x60a708  reg(45, 1) 
0x4079d5: cmp qword ptr [rdi], 0x0  mem(60a708, 0) 
0x4079d9: jnz 0x4079e0
0x4079db: jmp 0x407970
register_tm_clones: 60a708 7fffbc848948 7fffbc848958 3a0	register_tm_clones
0x407970: mov esi, 0x60b1a0  reg(47, 7fffbc848948) 
0x407975: push rbp
0x407976: sub rsi, 0x60b1a0  reg(4, 60b1a0) 
0x40797d: sar rsi, 0x3  reg(4, 0) 
0x407981: mov rbp, rsp
0x407984: mov rax, rsi  reg(10, 0)  reg(4, 0) 
0x407987: shr rax, 0x3f  reg(10, 0) 
0x40798b: add rsi, rax  reg(4, 0)  reg(10, 0) 
0x40798e: sar rsi, 0x1  reg(4, 0) 
0x407991: jz 0x4079a8
0x4079a8: pop rbp
0x4079a9: ret 
0x408ebd: add rbx, 0x1  reg(7, 0) 
0x408ec1: cmp rbx, rbp  reg(7, 1) 
0x408ec4: jnz 0x408eb0
0x408eb0: mov rdx, r13  reg(8, 7fffbc848958)  reg(16, 7fffbc848958) 
0x408eb3: mov rsi, r14  reg(4, 0)  reg(17, 7fffbc848948) 
0x408eb6: mov edi, r15d  reg(45, 60a708)  reg(82, 1) 
0x408eb9: call qword ptr [r12+rbx*8]
_GLOBAL__sub_I_main.cpp: 1 7fffbc848948 7fffbc848958 3a0	_GLOBAL__sub_I_main.cpp
0x4078c0: sub rsp, 0x8
0x4078c4: mov edi, 0x1388  reg(45, 1) 
0x4078c9: call 0x406cd0
openpal::TimeDuration::Milliseconds(long)@plt: 1388 7fffbc848948 7fffbc848958 3a0	_ZN7openpal12TimeDuration12MillisecondsEl@plt
0x406cd0: jmp qword ptr [rip+0x204382]
0x406cd6: push 0x8 
0x406cdb: jmp 0x406c40
0x4078ce: lea rdi, ptr [rip+0x2038d3]  reg(3, 7fffbc848800) 
0x4078d5: mov qword ptr [rip+0x2038d4], rax  reg(10, 1388)  mem(60b1b0, 0) 
0x4078dc: call 0x406e80
std::ios_base::Init::Init()@plt: 60b1a8 1388 0 3a0	_ZNSt8ios_base4InitC1Ev@plt
0x406e80: jmp qword ptr [rip+0x2042aa]
0x406e86: push 0x23 
0x406e8b: jmp 0x406c40
0x4078e1: mov rdi, qword ptr [rip+0x203710]  reg(3, 60b1a8) 
0x4078e8: lea rdx, ptr [rip+0x2038a1]  reg(8, 0) 
0x4078ef: lea rsi, ptr [rip+0x2038b2]  reg(4, 1388) 
0x4078f6: add rsp, 0x8
0x4078fa: jmp 0x406d70
__cxa_atexit@plt: 7f02e71260b0 60b1a8 60b190 3a0	__cxa_atexit@plt
0x406d70: jmp qword ptr [rip+0x204332]
0x406d76: push 0x12 
0x406d7b: jmp 0x406c40
0x408ebd: add rbx, 0x1  reg(7, 1) 
0x408ec1: cmp rbx, rbp  reg(7, 2) 
0x408ec4: jnz 0x408eb0
0x408ec6: add rsp, 0x8
0x408eca: pop rbx  reg(7, 2) 
0x408ecb: pop rbp
0x408ecc: pop r12  reg(15, 60a6f0) 
0x408ece: pop r13  reg(16, 7fffbc848958) 
0x408ed0: pop r14  reg(17, 7fffbc848948) 
0x408ed2: pop r15  reg(18, 1) 
0x408ed4: ret 
main: 1 7fffbc848948 7fffbc848958 3c0	main
0x406f40: push rbp
0x406f41: mov edi, 0x48  reg(45, 1) 
0x406f46: mov rbp, rsp
0x406f49: push r15  reg(18, 0) 
0x406f4b: push r14  reg(17, 0) 
0x406f4d: push r13  reg(16, 7fffbc848940) 
0x406f4f: push r12  reg(15, 407900) 
0x406f51: push rbx  reg(7, 0) 
0x406f52: sub rsp, 0x288
0x406f59: mov rax, qword ptr fs:[0x28]  reg(10, 406f40) 
0x406f62: mov qword ptr [rbp-0x38], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848828, 408ebd) 
0x406f66: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x406f68: lea rax, ptr [rip+0xf31]  reg(10, 0) 
0x406f6f: mov qword ptr [rbp-0x48], rax  reg(10, 407ea0)  mem(7fffbc848818, 2) 
0x406f73: lea rax, ptr [rip+0xf36]  reg(10, 407ea0) 
0x406f7a: mov qword ptr [rbp-0x50], rax  reg(10, 407eb0)  mem(7fffbc848810, 1) 
0x406f7e: lea rax, ptr [rip+0xeeb]  reg(10, 407eb0) 
0x406f85: mov qword ptr [rbp-0x68], rax  reg(10, 407e70)  mem(7fffbc8487f8, 7f02e71260b0) 
0x406f89: lea rax, ptr [rip+0xef0]  reg(10, 407e70) 
0x406f90: mov qword ptr [rbp-0x70], rax  reg(10, 407e80)  mem(7fffbc8487f0, 7f02fb8eeab0) 
0x406f94: call 0x406da0
operator new(unsigned long)@plt: 48 7fffbc848948 7fffbc848958 3c0	_Znwm@plt
0x406da0: jmp qword ptr [rip+0x20431a]
0x406da6: push 0x15 
0x406dab: jmp 0x406c40
0x406f99: mov rbx, rax  reg(7, 0)  reg(10, 1f4bc20) 
0x406f9c: mov dword ptr [rax+0x8], 0x1  mem(1f4bc28, 0) 
0x406fa3: mov dword ptr [rax+0xc], 0x1  mem(1f4bc2c, 0) 
0x406faa: lea rax, ptr [rip+0x203d6f]  reg(10, 1f4bc20) 
0x406fb1: lea r14, ptr [rip+0x2039c8]  reg(17, 0) 
0x406fb8: mov rdi, rbx  reg(3, 0)  reg(7, 1f4bc20) 
0x406fbb: mov byte ptr [rbx+0x18], 0x0  mem(1f4bc38, 0) 
0x406fbf: mov qword ptr [rbx+0x20], 0x0  mem(1f4bc40, 0) 
0x406fc7: mov qword ptr [rbx+0x28], 0x0  mem(1f4bc48, 0) 
0x406fcf: mov qword ptr [rbx+0x30], 0x0  mem(1f4bc50, 0) 
0x406fd7: add rax, 0x10  reg(10, 60ad20) 
0x406fdb: mov qword ptr [rbx+0x38], 0x0  mem(1f4bc58, 0) 
0x406fe3: mov qword ptr [rbx+0x40], 0x0  mem(1f4bc60, 0) 
0x406feb: mov qword ptr [rbx], rax  reg(10, 60ad30)  mem(1f4bc20, 0) 
0x406fee: mov rax, qword ptr [rip+0x203fdb]  reg(10, 60ad30) 
0x406ff5: mov rsi, r14  reg(4, 1f4bc60)  reg(17, 60a980) 
0x406ff8: add rax, 0x10  reg(10, 7f02e7decef8) 
0x406ffc: mov qword ptr [rbx+0x10], rax  reg(10, 7f02e7decf08)  mem(1f4bc30, 0) 
0x407000: call 0x408010
std::_Sp_counted_ptr_inplace<asiodnp3::ConsoleLogger, std::allocator<asiodnp3::ConsoleLogger>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): 1f4bc20 60a980 1f4bc20 7f02e6e67b20	_ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp313ConsoleLoggerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
0x408010: mov rdx, rdi  reg(8, 1f4bc20)  reg(3, 1f4bc20) 
0x408013: mov rsi, qword ptr [rsi+0x8]  reg(4, 60a980) 
0x408017: lea rdi, ptr [rip+0x1562]  reg(3, 1f4bc20) 
0x40801e: cmp rsi, rdi  reg(4, 409580)  reg(3, 409580) 
0x408021: jz 0x408033
0x408033: lea rax, ptr [rdx+0x10]  reg(10, 7f02e7decf08) 
0x408037: ret 
0x407005: lea rcx, ptr [rbp-0x220]  reg(9, 7f02e6e67b20) 
0x40700c: mov qword ptr [rbp-0x220], rax  reg(10, 1f4bc30)  mem(7fffbc848640, 2) 
0x407013: mov qword ptr [rbp-0x218], rbx  reg(7, 1f4bc20)  mem(7fffbc848648, 7f02fb8edac6) 
0x40701a: lea rax, ptr [rbp-0x60]  reg(10, 1f4bc30) 
0x40701e: lea rbx, ptr [rbp-0x80]  reg(7, 1f4bc20) 
0x407022: mov esi, 0x1  reg(47, 409580) 
0x407027: mov rdx, rcx  reg(8, 1f4bc20)  reg(9, 7fffbc848640) 
0x40702a: mov qword ptr [rbp-0x2a8], rcx  reg(9, 7fffbc848640)  mem(7fffbc8485b8, 7f02e7b674e8) 
0x407031: lea rcx, ptr [rbp-0x290]  reg(9, 7fffbc848640) 
0x407038: mov r8, rax  reg(11, 408ee0)  reg(10, 7fffbc848800) 
0x40703b: mov qword ptr [rbp-0x298], rax  reg(10, 7fffbc848800)  mem(7fffbc8485c8, 0) 
0x407042: mov rdi, rcx  reg(3, 409580)  reg(9, 7fffbc8485d0) 
0x407045: mov qword ptr [rbp-0x2b0], rcx  reg(9, 7fffbc8485d0)  mem(7fffbc8485b0, 7f02e6aab9e8) 
0x40704c: mov rcx, rbx  reg(9, 7fffbc8485d0)  reg(7, 7fffbc8487e0) 
0x40704f: call 0x406ce0
asiodnp3::DNP3Manager::DNP3Manager(unsigned int, std::shared_ptr<openpal::ILogHandler>, std::function<void ()>, std::function<void ()>)@plt: 7fffbc8485d0 1 7fffbc848640 7fffbc8487e0	_ZN8asiodnp311DNP3ManagerC1EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES7_@plt
0x406ce0: jmp qword ptr [rip+0x20437a]
0x406ce6: push 0x9 
0x406ceb: jmp 0x406c40
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848550 7fffbc8487e0 2 7fffbc8487e0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407e80: test edx, edx  reg(54, 2)  reg(54, 2) 
0x407e82: jz 0x407e90
0x407e84: cmp edx, 0x1  reg(54, 2) 
0x407e87: jnz 0x407e8c
0x407e8c: xor eax, eax  reg(56, 407e80)  reg(56, 407e80) 
0x407e8e: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848530 7fffbc848800 2 7fffbc8487e0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407eb0: test edx, edx  reg(54, 2)  reg(54, 2) 
0x407eb2: jz 0x407ec0
0x407eb4: cmp edx, 0x1  reg(54, 2) 
0x407eb7: jnz 0x407ebc
0x407ebc: xor eax, eax  reg(56, 407eb0)  reg(56, 407eb0) 
0x407ebe: ret 
memcpy: 1f4bdb0 7fffbc8484c0 7 7fffbc8484c7	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 7fffbc8484c7	dlsym@plt
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc8484b0 7fffbc848530 2 0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407eb0: test edx, edx  reg(54, 2)  reg(54, 2) 
0x407eb2: jz 0x407ec0
0x407eb4: cmp edx, 0x1  reg(54, 2) 
0x407eb7: jnz 0x407ebc
0x407ebc: xor eax, eax  reg(56, 407eb0)  reg(56, 407eb0) 
0x407ebe: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848490 7fffbc848550 2 0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407e80: test edx, edx  reg(54, 2)  reg(54, 2) 
0x407e82: jz 0x407e90
0x407e84: cmp edx, 0x1  reg(54, 2) 
0x407e87: jnz 0x407e8c
0x407e8c: xor eax, eax  reg(56, 407e80)  reg(56, 407e80) 
0x407e8e: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 1f4bcd0 7fffbc848490 2 1	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407e80: test edx, edx  reg(54, 2)  reg(54, 2) 
0x407e82: jz 0x407e90
0x407e84: cmp edx, 0x1  reg(54, 2) 
0x407e87: jnz 0x407e8c
0x407e8c: xor eax, eax  reg(56, 407e80)  reg(56, 407e80) 
0x407e8e: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 1f4bcf0 7fffbc8484b0 2 1	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407eb0: test edx, edx  reg(54, 2)  reg(54, 2) 
0x407eb2: jz 0x407ec0
0x407eb4: cmp edx, 0x1  reg(54, 2) 
0x407eb7: jnz 0x407ebc
0x407ebc: xor eax, eax  reg(56, 407eb0)  reg(56, 407eb0) 
0x407ebe: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848490 7fffbc848490 3 7f02e6e67b20	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407e80: test edx, edx  reg(54, 3)  reg(54, 3) 
0x407e82: jz 0x407e90
0x407e84: cmp edx, 0x1  reg(54, 3) 
0x407e87: jnz 0x407e8c
0x407e8c: xor eax, eax  reg(56, 407e80)  reg(56, 407e80) 
0x407e8e: ret 
_ZNSt17_Function_handlerIFvvEZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIS0_ES8_Ed0_UlvE_E9_M_invokeERKSt9_Any_data: 1f4bcd0 0 c2d74583d95481c4 ffffffffffffff78	_ZNSt17_Function_handlerIFvvEZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIS0_ES8_Ed0_UlvE_E9_M_invokeERKSt9_Any_data
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc8484b0 7fffbc8484b0 3 7f02e6e67b20	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407eb0: test edx, edx  reg(54, 3)  reg(54, 3) 
0x407eb2: jz 0x407ec0
0x407eb4: cmp edx, 0x1  reg(54, 3) 
0x407eb7: jnz 0x407ebc
0x407ebc: xor eax, eax  reg(56, 407eb0)  reg(56, 407eb0) 
0x407ebe: ret 
0x407e70: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848530 7fffbc848530 3 0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407eb0: test edx, edx  reg(54, 3)  reg(54, 3) 
0x407eb2: jz 0x407ec0
0x407eb4: cmp edx, 0x1  reg(54, 3) 
0x407eb7: jnz 0x407ebc
0x407ebc: xor eax, eax  reg(56, 407eb0)  reg(56, 407eb0) 
0x407ebe: ret 
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848550 7fffbc848550 3 0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407e80: test edx, edx  reg(54, 3)  reg(54, 3) 
0x407e82: jz 0x407e90
0x407e84: cmp edx, 0x1  reg(54, 3) 
0x407e87: jnz 0x407e8c
0x407e8c: xor eax, eax  reg(56, 407e80)  reg(56, 407e80) 
0x407e8e: ret 
opendnp3::LogFlagToString(int): 8 0 6 7f02e29583f0	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 8) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 8) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x407054: mov rdi, qword ptr [rbp-0x218]  reg(10, 0) 
0x40705b: test rdi, rdi  reg(3, 1f4bc20)  reg(3, 1f4bc20) 
0x40705e: jz 0x407065
0x407060: call 0x408e00
0x7f02e76c124b: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4bc20 7fffbc848550 3 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc8487e0) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc8487e0)  reg(3, 1f4bc20) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4bc28, 100000003) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4bc20) 
0x408e16: ret 
memcpy: 7f02dc0008c1 7f02e7bdc261 2 7f02dc0008c0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc0008c0	dlsym@plt
0x407065: mov rax, qword ptr [rbp-0x70]  reg(10, 0) 
0x407069: test rax, rax  reg(10, 407e80)  reg(10, 407e80) 
0x40706c: jz 0x40707b
0x40706e: mov edx, 0x3  reg(54, 3) 
0x407073: mov rsi, rbx  reg(4, 7fffbc848550)  reg(7, 7fffbc8487e0) 
0x407076: mov rdi, rbx  reg(3, 1f4bc20)  reg(7, 7fffbc8487e0) 
0x407079: call rax
memcpy: 7f02dc0008c3 7f02e295837b d 31	memcpy
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc8487e0 7fffbc8487e0 3 0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed0_NUlvE_EE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
0x407e80: test edx, edx  reg(54, 3)  reg(54, 3) 
0x407e82: jz 0x407e90
0x407e84: cmp edx, 0x1  reg(54, 3) 
0x407e87: jnz 0x407e8c
0x407e8c: xor eax, eax  reg(56, 407e80)  reg(56, 407e80) 
0x407e8e: ret 
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
0x40707b: mov rax, qword ptr [rbp-0x50]  reg(10, 0) 
0x40707f: test rax, rax  reg(10, 407eb0)  reg(10, 407eb0) 
0x407082: jz 0x407095
0x407084: mov rdi, qword ptr [rbp-0x298]  reg(3, 7fffbc8487e0) 
0x40708b: mov edx, 0x3  reg(54, 3) 
0x407090: mov rsi, rdi  reg(4, 7fffbc8487e0)  reg(3, 7fffbc848800) 
0x407093: call rax
memcpy: 7f02dc0008d0 7f02e7bdc264 2 0	memcpy
_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation: 7fffbc848800 7fffbc848800 3 0	_ZNSt14_Function_base13_Base_managerIZN8asiodnp311DNP3ManagerC4EjSt10shared_ptrIN7openpal11ILogHandlerEESt8functionIFvvEES9_Ed_UlvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
0x407eb0: test edx, edx  reg(54, 3)  reg(54, 3) 
0x407eb2: jz 0x407ec0
0x407eb4: cmp edx, 0x1  reg(54, 3) 
0x407eb7: jnz 0x407ebc
0x407ebc: xor eax, eax  reg(56, 407eb0)  reg(56, 407eb0) 
0x407ebe: ret 
memcpy: 7f02dc0008d2 7f02e771077f 7 0	memcpy
0x407095: mov edi, 0x18  reg(45, 7fffbc848800) 
0x40709a: call 0x406da0
operator new(unsigned long)@plt: 18 7fffbc848800 3 0	_Znwm@plt
0x406da0: jmp qword ptr [rip+0x20431a]
operator new(unsigned long)@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
0x40709f: mov r12, rax  reg(15, 407900)  reg(10, 1f4c340) 
0x4070a2: mov dword ptr [rax+0x8], 0x1  mem(1f4c348, 0) 
0x4070a9: mov dword ptr [rax+0xc], 0x1  mem(1f4c34c, 0) 
0x4070b0: lea rax, ptr [rip+0x203c31]  reg(10, 1f4c340) 
0x4070b7: mov rdi, r12  reg(3, 0)  reg(15, 1f4c340) 
0x4070ba: mov rsi, r14  reg(4, 1f4c350)  reg(17, 60a980) 
0x4070bd: add rax, 0x10  reg(10, 60ace8) 
memcpy: 7f02dc0008d9 7f02e7bdc265 1 0	memcpy
0x4070c1: mov qword ptr [r12], rax  reg(10, 60acf8)  mem(1f4c340, 0) 
0x4070c5: lea rax, ptr [rip+0x203aec]  reg(10, 60acf8) 
0x4070cc: add rax, 0x10  reg(10, 60abb8) 
0x4070d0: mov qword ptr [r12+0x10], rax  reg(10, 60abc8)  mem(1f4c350, 0) 
0x4070d5: call 0x407fe0
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
std::_Sp_counted_ptr_inplace<asiodnp3::PrintingChannelListener, std::allocator<asiodnp3::PrintingChannelListener>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): 1f4c340 60a980 1f4c340 7f02e6e67b20	_ZNSt23_Sp_counted_ptr_inplaceIN8asiodnp323PrintingChannelListenerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
0x407fe0: mov rdx, rdi  reg(8, 1f4c340)  reg(3, 1f4c340) 
0x407fe3: mov rsi, qword ptr [rsi+0x8]  reg(4, 60a980) 
0x407fe7: lea rdi, ptr [rip+0x1592]  reg(3, 1f4c340) 
0x407fee: cmp rsi, rdi  reg(4, 409580)  reg(3, 409580) 
0x407ff1: jz 0x408003
0x408003: lea rax, ptr [rdx+0x10]  reg(10, 60abc8) 
0x408007: ret 
memcpy: 7f02dc0008da 1f4bdb0 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
0x4070da: mov qword ptr [rbp-0x218], r12  reg(15, 1f4c340)  mem(7fffbc848648, 1f4bc20) 
0x4070e1: lea r12, ptr [rbp-0xa0]  reg(15, 1f4c340) 
0x4070e8: lea rsi, ptr [rip+0x1ef8]  reg(4, 409580) 
0x4070ef: mov qword ptr [rbp-0x220], rax  reg(10, 1f4c350)  mem(7fffbc848640, 1f4bc30) 
0x4070f6: mov rdi, r12  reg(3, 409580)  reg(15, 7fffbc8487c0) 
0x4070f9: call 0x407a00
memcpy: 7f02dc0008e1 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) (.isra.37): 7fffbc8487c0 408fe7 1f4c340 7f02e6e67b20	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.37
0x407a00: push r13  reg(16, 7fffbc848940) 
0x407a02: push r12  reg(15, 7fffbc8487c0) 
0x407a04: lea r13, ptr [rdi+0x10]  reg(16, 7fffbc848940) 
0x407a08: push rbp
0x407a09: push rbx  reg(7, 7fffbc8487e0) 
0x407a0a: sub rsp, 0x18
0x407a0e: mov qword ptr [rdi], r13  reg(16, 7fffbc8487d0)  mem(7fffbc8487c0, 6) 
0x407a11: mov rax, qword ptr fs:[0x28]  reg(10, 1f4c350) 
memcpy: 7f02dc0008e4 7f02e2958e40 13 0	memcpy
0x407a1a: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848578, 7f02e6b27184) 
dlsym@plt: ffffffffffffffff 7f02e7ebed08 13 0	dlsym@plt
0x407a1f: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x407a21: test rsi, rsi  reg(4, 408fe7)  reg(4, 408fe7) 
0x407a24: jz 0x407aac
0x407a2a: mov rbx, rdi  reg(7, 7fffbc8487e0)  reg(3, 7fffbc8487c0) 
0x407a2d: mov rdi, rsi  reg(3, 7fffbc8487c0)  reg(4, 408fe7) 
0x407a30: mov r12, rsi  reg(15, 7fffbc8487c0)  reg(4, 408fe7) 
0x407a33: call 0x406cc0
memcpy: 7f02dc000b00 7f02dc0008c0 37 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 37 7f02dc000020	dlsym@plt
strlen@plt: 408fe7 408fe7 1f4c340 7f02e6e67b20	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x406cc6: push 0x7 
0x406ccb: jmp 0x406c40
0x407a38: cmp rax, 0xf  reg(10, 7) 
0x407a3c: mov rbp, rax
0x407a3f: mov qword ptr [rsp], rax  reg(10, 7)  mem(7fffbc848570, 0) 
0x407a43: jnbe 0x407a7a
0x407a45: cmp rax, 0x1  reg(10, 7) 
0x407a49: jz 0x407aa2
0x407a4b: test rax, rax  reg(10, 7)  reg(10, 7) 
0x407a4e: jnz 0x407ab8
0x407ab8: mov rdi, r13  reg(3, 408fe7)  reg(16, 7fffbc8487d0) 
0x407abb: jmp 0x407a95
0x407a95: mov rdx, rbp  reg(8, 4080) 
0x407a98: mov rsi, r12  reg(4, f800)  reg(15, 408fe7) 
0x407a9b: call 0x406d50
memcpy@plt: 7fffbc8487d0 408fe7 7 27	memcpy@plt
0x406d50: jmp qword ptr [rip+0x204342]
0x406d56: push 0x10 
0x406d5b: jmp 0x406c40
memcpy: 7fffbc8487d0 408fe7 7 27	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 27	dlsym@plt
0x407aa0: jmp 0x407a50
0x407a50: mov rax, qword ptr [rsp]  reg(10, 7fffbc8487d0) 
0x407a54: mov rdx, qword ptr [rbx]  reg(8, 7) 
0x407a57: mov qword ptr [rbx+0x8], rax  reg(10, 7)  mem(7fffbc8487c8, 3a0) 
0x407a5b: mov byte ptr [rdx+rax*1], 0x0  mem(7fffbc8487d7, 60b1a800) 
0x407a5f: mov rax, qword ptr [rsp+0x8]  reg(10, 7) 
0x407a64: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x407a6d: jnz 0x407abd
0x407a6f: add rsp, 0x18
0x407a73: pop rbx  reg(7, 7fffbc8487c0) 
0x407a74: pop rbp
0x407a75: pop r12  reg(15, 408fe7) 
0x407a77: pop r13  reg(16, 7fffbc8487d0) 
0x407a79: ret 
0x4070fe: lea r13, ptr [rbp-0xc0]  reg(16, 7fffbc848940) 
0x407105: lea rsi, ptr [rip+0x1ee3]  reg(4, 2e302e30) 
0x40710c: mov rdi, r13  reg(3, 7fffbc8487d0)  reg(16, 7fffbc8487a0) 
0x40710f: call 0x407a00
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) (.isra.37): 7fffbc8487a0 408fef 7fffbc8487d0 302e302e	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.37
0x407a00: push r13  reg(16, 7fffbc8487a0) 
0x407a02: push r12  reg(15, 7fffbc8487c0) 
0x407a04: lea r13, ptr [rdi+0x10]  reg(16, 7fffbc8487a0) 
0x407a08: push rbp
0x407a09: push rbx  reg(7, 7fffbc8487e0) 
0x407a0a: sub rsp, 0x18
0x407a0e: mov qword ptr [rdi], r13  reg(16, 7fffbc8487b0)  mem(7fffbc8487a0, 0) 
0x407a11: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x407a1a: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848578, d533a0ca891b2d00) 
0x407a1f: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x407a21: test rsi, rsi  reg(4, 408fef)  reg(4, 408fef) 
0x407a24: jz 0x407aac
0x407a2a: mov rbx, rdi  reg(7, 7fffbc8487e0)  reg(3, 7fffbc8487a0) 
0x407a2d: mov rdi, rsi  reg(3, 7fffbc8487a0)  reg(4, 408fef) 
0x407a30: mov r12, rsi  reg(15, 7fffbc8487c0)  reg(4, 408fef) 
0x407a33: call 0x406cc0
strlen@plt: 408fef 408fef 7fffbc8487d0 302e302e	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x407a38: cmp rax, 0xf  reg(10, 6) 
0x407a3c: mov rbp, rax
0x407a3f: mov qword ptr [rsp], rax  reg(10, 6)  mem(7fffbc848570, 7) 
0x407a43: jnbe 0x407a7a
0x407a45: cmp rax, 0x1  reg(10, 6) 
0x407a49: jz 0x407aa2
0x407a4b: test rax, rax  reg(10, 6)  reg(10, 6) 
0x407a4e: jnz 0x407ab8
0x407ab8: mov rdi, r13  reg(3, 408fef)  reg(16, 7fffbc8487b0) 
0x407abb: jmp 0x407a95
0x407a95: mov rdx, rbp  reg(8, 40) 
0x407a98: mov rsi, r12  reg(4, f800)  reg(15, 408fef) 
0x407a9b: call 0x406d50
memcpy@plt: 7fffbc8487b0 408fef 6 2f	memcpy@plt
0x406d50: jmp qword ptr [rip+0x204342]
memcpy: 7fffbc8487b0 408fef 6 2f	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 2f	dlsym@plt
0x407aa0: jmp 0x407a50
0x407a50: mov rax, qword ptr [rsp]  reg(10, 7fffbc8487b0) 
0x407a54: mov rdx, qword ptr [rbx]  reg(8, 6) 
0x407a57: mov qword ptr [rbx+0x8], rax  reg(10, 6)  mem(7fffbc8487a8, 0) 
0x407a5b: mov byte ptr [rdx+rax*1], 0x0  mem(7fffbc8487b6, 0) 
0x407a5f: mov rax, qword ptr [rsp+0x8]  reg(10, 6) 
0x407a64: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x407a6d: jnz 0x407abd
0x407a6f: add rsp, 0x18
0x407a73: pop rbx  reg(7, 7fffbc8487a0) 
0x407a74: pop rbp
0x407a75: pop r12  reg(15, 408fef) 
0x407a77: pop r13  reg(16, 7fffbc8487b0) 
0x407a79: ret 
0x407114: mov rsi, qword ptr [rbp-0x2b0]  reg(4, 76726573) 
0x40711b: push qword ptr [rbp-0x2a8]  mem(7fffbc8485b8, 7fffbc848640) 
0x407121: lea rdi, ptr [rbp-0x280]  reg(3, 7fffbc8487b0) 
0x407128: push 0x4e20 
0x40712d: mov r9, r12  reg(12, 7f02e7b674e8)  reg(15, 7fffbc8487c0) 
0x407130: mov r8d, 0x1  reg(61, 0) 
0x407136: mov ecx, 0x1feaf  reg(55, 72657672) 
0x40713b: mov rdx, r13  reg(8, 7fffbc8487b0)  reg(16, 7fffbc8487a0) 
0x40713e: call 0x406d30
asiodnp3::DNP3Manager::AddTCPServer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, opendnp3::ServerAcceptMode, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned short, std::shared_ptr<asiodnp3::IChannelListener>)@plt: 7fffbc8485e0 7fffbc8485d0 7fffbc8487a0 1feaf	_ZN8asiodnp311DNP3Manager12AddTCPServerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjN8opendnp316ServerAcceptModeES8_tSt10shared_ptrINS_16IChannelListenerEE@plt
0x406d30: jmp qword ptr [rip+0x204352]
0x406d36: push 0xe 
0x406d3b: jmp 0x406c40
memcpy: 1f4c380 7fffbc8487b0 6 7f02e6e67b20	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 7f02e6e67b20	dlsym@plt
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4c360 409580 1f4bc20 72657672	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4c360) 
0x408e09: mov rbx, rdi  reg(7, 1f4c360)  reg(3, 1f4c360) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4c368, 100000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4c360) 
0x408e16: ret 
memcpy: 7fffbc8484f0 7fffbc8487d0 7 c	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 c	dlsym@plt
opendnp3::LinkLayerParser::LinkLayerParser(openpal::Logger const&): 1f4cbc0 7fffbc8484c0 1f4d010 7f02e6e67b20	_ZN8opendnp315LinkLayerParserC2ERKN7openpal6LoggerE
0x7f02e76bede0: push rbp
0x7f02e76bede1: push rbx  reg(7, 1f4cae0) 
0x7f02e76bede2: mov rbx, rdi  reg(7, 1f4cae0)  reg(3, 1f4cbc0) 
0x7f02e76bede5: sub rsp, 0x8
0x7f02e76bede9: mov rax, qword ptr [rsi]  reg(10, 1f4ce10) 
0x7f02e76bedec: mov qword ptr [rdi], rax  reg(10, 1f4bc30)  mem(1f4cbc0, 0) 
0x7f02e76bedef: mov rax, qword ptr [rsi+0x8]  reg(10, 1f4bc30) 
0x7f02e76bedf3: test rax, rax  reg(10, 1f4bc20)  reg(10, 1f4bc20) 
0x7f02e76bedf6: mov qword ptr [rdi+0x8], rax  reg(10, 1f4bc20)  mem(1f4cbc8, 0) 
0x7f02e76bedfa: jz 0x7f02e76beed0
0x7f02e76bee00: cmp qword ptr [rip+0x27e768], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bee08: jz 0x7f02e76beea0
0x7f02e76bee0e: lock add dword ptr [rax+0x8], 0x1  mem(1f4bc28, 100000004) 
0x7f02e76bee13: mov rdx, qword ptr [rsi+0x18]  reg(8, 1f4d010) 
0x7f02e76bee17: mov rax, qword ptr [rsi+0x10]  reg(10, 1f4bc20) 
0x7f02e76bee1b: test rdx, rdx  reg(8, 1f4c360)  reg(8, 1f4c360) 
0x7f02e76bee1e: mov qword ptr [rdi+0x10], rax  reg(10, 1f4c370)  mem(1f4cbd0, 0) 
0x7f02e76bee22: mov qword ptr [rdi+0x18], rdx  reg(8, 1f4c360)  mem(1f4cbd8, 0) 
0x7f02e76bee26: lea rax, ptr [rdx+0x8]  reg(10, 1f4c370) 
0x7f02e76bee2a: jz 0x7f02e76bee30
0x7f02e76bee2c: lock add dword ptr [rax], 0x1  mem(1f4c368, 100000002) 
0x7f02e76bee30: lea rdi, ptr [rbx+0x3c]  reg(3, 1f4cbc0) 
0x7f02e76bee34: mov dword ptr [rbx+0x20], 0x0  mem(1f4cbe0, 0) 
0x7f02e76bee3b: mov dword ptr [rbx+0x24], 0x0  mem(1f4cbe4, 0) 
0x7f02e76bee42: mov dword ptr [rbx+0x28], 0x0  mem(1f4cbe8, 0) 
0x7f02e76bee49: mov dword ptr [rbx+0x2c], 0x0  mem(1f4cbec, 0) 
0x7f02e76bee50: mov dword ptr [rbx+0x30], 0x0  mem(1f4cbf0, 0) 
0x7f02e76bee57: mov dword ptr [rbx+0x34], 0x0  mem(1f4cbf4, 0) 
0x7f02e76bee5e: mov dword ptr [rbx+0x38], 0x0  mem(1f4cbf8, 0) 
0x7f02e76bee65: call 0x7f02e76a62c0
opendnp3::LinkHeader::LinkHeader()@plt: 1f4cbfc 7fffbc8484c0 1f4c360 7f02e6e67b20	_ZN8opendnp310LinkHeaderC1Ev@plt
0x7f02e76a62c0: jmp qword ptr [rip+0x298e1a]
0x7f02e76a62c6: push 0x219 
0x7f02e76a62cb: jmp 0x7f02e76a4120
opendnp3::LinkHeader::LinkHeader(): 1f4cbfc 7fffbc8484c0 1f4c360 7f02e6e67b20	_ZN8opendnp310LinkHeaderC1Ev
0x7f02e76be530: xor eax, eax  reg(56, 1f4c368)  reg(56, 1f4c368) 
0x7f02e76be532: xor edx, edx  reg(54, 1f4c360)  reg(54, 1f4c360) 
0x7f02e76be534: mov byte ptr [rdi], 0x5  mem(1f4cbfc, 0) 
0x7f02e76be537: mov word ptr [rdi+0x2], ax  reg(29, 0)  mem(1f4cbfe, 0) 
0x7f02e76be53b: mov word ptr [rdi+0x4], dx  reg(35, 0)  mem(1f4cc00, 0) 
0x7f02e76be53f: mov byte ptr [rdi+0x6], 0x0  mem(1f4cc02, 0) 
0x7f02e76be543: ret 
0x7f02e76bee6a: lea rdi, ptr [rbx+0x50]  reg(3, 1f4cbfc) 
0x7f02e76bee6e: mov dword ptr [rbx+0x44], 0x0  mem(1f4cc04, 0) 
0x7f02e76bee75: mov dword ptr [rbx+0x48], 0x0  mem(1f4cc08, 0) 
0x7f02e76bee7c: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4cc10 7fffbc8484c0 0 7f02e6e67b20	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e76a6076: push 0x1f4 
0x7f02e76a607b: jmp 0x7f02e76a4120
0x7f02e76bee81: lea rsi, ptr [rbx+0x60]  reg(4, 7fffbc8484c0) 
0x7f02e76bee85: lea rdi, ptr [rbx+0x188]  reg(3, 1f4cc10) 
0x7f02e76bee8c: mov edx, 0x124  reg(54, 0) 
0x7f02e76bee91: call 0x7f02e76a6410
opendnp3::ShiftableBuffer::ShiftableBuffer(unsigned char*, unsigned int)@plt: 1f4cd48 1f4cc20 124 7f02e6e67b20	_ZN8opendnp315ShiftableBufferC1EPhj@plt
0x7f02e76a6410: jmp qword ptr [rip+0x298d72]
0x7f02e76a6416: push 0x22e 
0x7f02e76a641b: jmp 0x7f02e76a4120
opendnp3::ShiftableBuffer::ShiftableBuffer(unsigned char*, unsigned int): 1f4cd48 1f4cc20 124 7f02e6e67b20	_ZN8opendnp315ShiftableBufferC2EPhj
0x7f02e76c10d0: mov qword ptr [rdi], rsi  reg(4, 1f4cc20)  mem(1f4cd48, 0) 
0x7f02e76c10d3: mov dword ptr [rdi+0x8], edx  reg(54, 124)  mem(1f4cd50, 0) 
0x7f02e76c10d6: mov dword ptr [rdi+0xc], 0x0  mem(1f4cd54, 0) 
0x7f02e76c10dd: mov dword ptr [rdi+0x10], 0x0  mem(1f4cd58, 0) 
0x7f02e76c10e4: ret 
0x7f02e76bee96: add rsp, 0x8
0x7f02e76bee9a: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bee9b: pop rbp
0x7f02e76bee9c: ret 
memcpy: 1f4cd90 7fffbc8484f0 7 7f02e6e67b20	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 7f02e6e67b20	dlsym@plt
opendnp3::MasterSchedulerBackend::MasterSchedulerBackend(std::shared_ptr<openpal::IExecutor> const&): 1f4d0d0 7fffbc848400 1f4d0c0 7f02e6e67b20	_ZN8opendnp322MasterSchedulerBackendC1ERKSt10shared_ptrIN7openpal9IExecutorEE
0x7f02e76d0930: mov rax, qword ptr [rip+0x26ca71]  reg(10, 1f4c3a0) 
0x7f02e76d0937: push r12  reg(15, 7fffbc848490) 
0x7f02e76d0939: push rbp
0x7f02e76d093a: push rbx  reg(7, 1f4d030) 
0x7f02e76d093b: mov rbp, rsi
0x7f02e76d093e: mov qword ptr [rdi+0x18], 0x0  mem(1f4d0e8, 0) 
0x7f02e76d0946: mov rbx, rdi  reg(7, 1f4d030)  reg(3, 1f4d0d0) 
0x7f02e76d0949: mov byte ptr [rdi+0x8], 0x0  mem(1f4d0d8, 0) 
0x7f02e76d094d: add rax, 0x10  reg(10, 7f02e7939678) 
0x7f02e76d0951: mov qword ptr [rdi+0x10], 0x0  mem(1f4d0e0, 0) 
0x7f02e76d0959: mov qword ptr [rdi+0x20], 0x0  mem(1f4d0f0, 0) 
0x7f02e76d0961: mov qword ptr [rdi], rax  reg(10, 7f02e7939688)  mem(1f4d0d0, 0) 
0x7f02e76d0964: mov rax, qword ptr [rsi]  reg(10, 7f02e7939688) 
0x7f02e76d0967: mov qword ptr [rdi+0x28], 0x0  mem(1f4d0f8, 0) 
0x7f02e76d096f: mov qword ptr [rdi+0x30], 0x0  mem(1f4d100, 0) 
0x7f02e76d0977: mov qword ptr [rdi+0x38], 0x0  mem(1f4d108, 0) 
0x7f02e76d097f: mov qword ptr [rdi+0x40], rax  reg(10, 1f4c3b0)  mem(1f4d110, 0) 
0x7f02e76d0983: mov rax, qword ptr [rsi+0x8]  reg(10, 1f4c3b0) 
0x7f02e76d0987: test rax, rax  reg(10, 1f4c3a0)  reg(10, 1f4c3a0) 
0x7f02e76d098a: mov qword ptr [rdi+0x48], rax  reg(10, 1f4c3a0)  mem(1f4d118, 0) 
0x7f02e76d098e: jz 0x7f02e76d099f
0x7f02e76d0990: cmp qword ptr [rip+0x26cbd8], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76d0998: jz 0x7f02e76d09c8
0x7f02e76d099a: lock add dword ptr [rax+0x8], 0x1  mem(1f4c3a8, 200000004) 
0x7f02e76d099f: lea r12, ptr [rbx+0x50]  reg(15, 7fffbc848490) 
0x7f02e76d09a3: mov rsi, qword ptr [rbp]  reg(4, 7fffbc848400) 
0x7f02e76d09a7: mov rdi, r12  reg(3, 1f4d0d0)  reg(15, 1f4d120) 
0x7f02e76d09aa: call 0x7f02e76a4480
openpal::TimerRef::TimerRef(openpal::IExecutor&)@plt: 1f4d120 1f4c3b0 1f4d0c0 7f02e6e67b20	_ZN7openpal8TimerRefC1ERNS_9IExecutorE@plt
0x7f02e76a4480: jmp qword ptr [rip+0x299d3a]
0x7f02e76a4486: push 0x35 
0x7f02e76a448b: jmp 0x7f02e76a4120
0x7f02e76d09af: mov rsi, qword ptr [rbp]  reg(4, 1f4c3b0) 
0x7f02e76d09b3: lea rdi, ptr [rbx+0x60]  reg(3, 1f4d120) 
0x7f02e76d09b7: call 0x7f02e76a4480
openpal::TimerRef::TimerRef(openpal::IExecutor&)@plt: 1f4d130 1f4c3b0 1f4d0c0 7f02e6e67b20	_ZN7openpal8TimerRefC1ERNS_9IExecutorE@plt
0x7f02e76a4480: jmp qword ptr [rip+0x299d3a]
0x7f02e76d09bc: pop rbx  reg(7, 1f4d0d0) 
0x7f02e76d09bd: pop rbp
0x7f02e76d09be: pop r12  reg(15, 1f4d120) 
0x7f02e76d09c0: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4c3a0 1f4c3b0 1f4d0c0 7f02e6e67b20	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4d030) 
0x408e09: mov rbx, rdi  reg(7, 1f4d030)  reg(3, 1f4c3a0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4c3a8, 200000005) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4c3a0) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4cad0 409580 1f4d020 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4cad0) 
0x408e09: mov rbx, rdi  reg(7, 1f4cad0)  reg(3, 1f4cad0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4cad8, 200000003) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4cad0) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4c2c0 409580 1f4d020 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4cad0) 
0x408e09: mov rbx, rdi  reg(7, 1f4cad0)  reg(3, 1f4c2c0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4c2c8, 100000003) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4c2c0) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4cad0 409580 1f4d020 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4cad0) 
0x408e09: mov rbx, rdi  reg(7, 1f4cad0)  reg(3, 1f4cad0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4cad8, 200000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4cad0) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4c3a0 409580 1f4d020 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4cad0) 
0x408e09: mov rbx, rdi  reg(7, 1f4cad0)  reg(3, 1f4c3a0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4c3a8, 200000004) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4c3a0) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4c360 409580 1f4d020 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4cad0) 
0x408e09: mov rbx, rdi  reg(7, 1f4cad0)  reg(3, 1f4c360) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4c368, 100000004) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4c360) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4bc20 409580 1f4d020 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f4cad0) 
0x408e09: mov rbx, rdi  reg(7, 1f4cad0)  reg(3, 1f4bc20) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4bc28, 100000006) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4bc20) 
0x408e16: ret 
0x407143: mov rdi, qword ptr [rbp-0xc0]  reg(3, 1f4c2d8) 
0x40714a: add r13, 0x10  reg(16, 7fffbc8487a0) 
0x40714e: pop r15  reg(18, 0) 
0x407150: pop rax  reg(10, 7fffbc8485e0) 
0x407151: cmp rdi, r13  reg(3, 7fffbc8487b0)  reg(16, 7fffbc8487b0) 
0x407154: jz 0x40715b
0x40715b: mov rdi, qword ptr [rbp-0xa0]  reg(3, 7fffbc8487b0) 
0x407162: add r12, 0x10  reg(15, 7fffbc8487c0) 
0x407166: cmp rdi, r12  reg(3, 7fffbc8487d0)  reg(15, 7fffbc8487d0) 
0x407169: jz 0x407170
0x407170: mov rdi, qword ptr [rbp-0x218]  reg(3, 7fffbc8487d0) 
0x407177: test rdi, rdi  reg(3, 1f4c340)  reg(3, 1f4c340) 
0x40717a: jz 0x407181
0x40717c: call 0x408e00
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4c340 0 7fffbc848560 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc8487e0) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc8487e0)  reg(3, 1f4c340) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4c348, 100000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4c340) 
0x408e16: ret 
0x407181: mov r15, qword ptr [rbp-0x2a8]  reg(18, 4e20) 
0x407188: lea rax, ptr [rbp-0x240]  reg(10, 7fffbc848640) 
0x40718f: mov esi, 0xa  reg(47, 0) 
0x407194: mov edi, 0xa  reg(45, 1f4c340) 
0x407199: mov ecx, 0xa  reg(55, 0) 
0x40719e: mov word ptr [rbp-0x23e], si  reg(40, a)  mem(7fffbc848622, 8958000000000060) 
0x4071a5: mov word ptr [rbp-0x23c], di  reg(41, a)  mem(7fffbc848624, bc84895800000000) 
0x4071ac: mov r8d, 0xa  reg(61, 0) 
0x4071b2: mov r9d, 0xa  reg(64, 7f02e7b674e8) 
0x4071b8: mov r10d, 0xa  reg(67, 16c) 
0x4071be: mov r11d, 0xa  reg(70, 7f02e712cba0) 
0x4071c4: mov r12d, 0xa  reg(73, 7fffbc8487d0) 
0x4071ca: mov r13d, 0xa  reg(76, 7fffbc8487b0) 
0x4071d0: mov rsi, rax  reg(4, a)  reg(10, 7fffbc848620) 
0x4071d3: mov rdi, r15  reg(3, a)  reg(18, 7fffbc848640) 
0x4071d6: mov word ptr [rbp-0x240], cx  reg(32, a)  mem(7fffbc848620, a000aa6f0) 
0x4071dd: mov word ptr [rbp-0x23a], r8w  reg(60, a)  mem(7fffbc848626, 7fffbc8489580000) 
0x4071e5: mov word ptr [rbp-0x238], r9w  reg(63, a)  mem(7fffbc848628, 7fffbc848958) 
0x4071ed: mov word ptr [rbp-0x236], r10w  reg(66, a)  mem(7fffbc84862a, 894800007fffbc84) 
0x4071f5: mov word ptr [rbp-0x234], r11w  reg(69, a)  mem(7fffbc84862c, bc84894800007fff) 
0x4071fd: mov word ptr [rbp-0x232], r12w  reg(72, a)  mem(7fffbc84862e, 7fffbc8489480000) 
0x407205: mov word ptr [rbp-0x230], r13w  reg(75, a)  mem(7fffbc848630, 7fffbc848948) 
0x40720d: mov qword ptr [rbp-0x2a0], rax  reg(10, 7fffbc848620)  mem(7fffbc8485c0, d) 
0x407214: call 0x4086a0
asiodnp3::OutstationStackConfig::OutstationStackConfig(opendnp3::DatabaseSizes const&): 7fffbc848640 7fffbc848620 7fffbc848560 a	_ZN8asiodnp321OutstationStackConfigC2ERKN8opendnp313DatabaseSizesE
0x4086a0: push rbp
0x4086a1: mov rbp, rsp
0x4086a4: push r15  reg(18, 7fffbc848640) 
0x4086a6: push r14  reg(17, 60a980) 
0x4086a8: push r13  reg(16, a) 
0x4086aa: push r12  reg(15, a) 
0x4086ac: mov r12, rsi  reg(15, a)  reg(4, 7fffbc848620) 
0x4086af: push rbx  reg(7, 7fffbc8487e0) 
0x4086b0: mov rbx, rdi  reg(7, 7fffbc8487e0)  reg(3, 7fffbc848640) 
0x4086b3: sub rsp, 0x18
0x4086b7: mov rax, qword ptr [rsi]  reg(10, 7fffbc848620) 
0x4086ba: lea r13, ptr [rip+0x2023d7]  reg(16, a) 
0x4086c1: mov qword ptr [rdi], rax  reg(10, a000a000a000a)  mem(7fffbc848640, 1f4c350) 
0x4086c4: mov rax, qword ptr [rsi+0x8]  reg(10, a000a000a000a) 
0x4086c8: mov qword ptr [rdi+0x8], rax  reg(10, a000a000a000a)  mem(7fffbc848648, 1f4c340) 
0x4086cc: movzx eax, word ptr [rsi+0x10]  reg(56, a000a000a000a) 
0x4086d0: mov word ptr [rdi+0x10], ax  reg(29, a)  mem(7fffbc848650, 1) 
0x4086d4: movzx eax, word ptr [rsi]  reg(56, a) 
0x4086d7: mov esi, eax  reg(47, 7fffbc848620)  reg(56, a) 
0x4086d9: mov word ptr [rdi+0x20], ax  reg(29, a)  mem(7fffbc848660, 7f02e7406ac8) 
0x4086dd: lea rax, ptr [r13+0x10]  reg(10, a) 
0x4086e1: mov qword ptr [rdi+0x18], rax  reg(10, 60aaa8)  mem(7fffbc848658, 0) 
0x4086e5: movzx eax, si  reg(56, 60aaa8)  reg(40, a) 
0x4086e8: lea rdi, ptr [rax+rax*2]  reg(3, 7fffbc848640) 
0x4086ec: mov r14, rax  reg(17, 60a980)  reg(10, a) 
0x4086ef: add rdi, rdi  reg(3, 1e)  reg(3, 1e) 
0x4086f2: call 0x406c50
operator new[](unsigned long)@plt: 3c a 7fffbc848560 a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x406c56: push 0x0 
0x406c5b: jmp 0x406c40
0x4086f7: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x4086f9: test r14, r14  reg(17, a)  reg(17, a) 
0x4086fc: mov rdx, rax  reg(8, 1f4d210)  reg(10, 1f4d210) 
0x4086ff: jz 0x408728
0x408701: nop dword ptr [rax], eax
0x408708: xor r8d, r8d  reg(61, a)  reg(61, a) 
0x40870b: add rcx, 0x1  reg(9, 0) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d214, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d210, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d212, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d210) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d213, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 1) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 1) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d21a, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d216, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d218, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d216) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d219, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 2) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 2) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d220, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d21c, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d21e, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d21c) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d21f, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 3) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 3) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d226, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d222, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d224, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d222) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d225, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 4) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 4) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d22c, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d228, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d22a, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d228) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d22b, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 5) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 5) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d232, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d22e, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d230, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d22e) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d231, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 6) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 6) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d238, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d234, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d236, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d234) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d237, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 7) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 7) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d23e, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d23a, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d23c, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d23a) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d23d, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 8) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 8) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d244, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d240, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d242, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d240) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d243, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, 9) 
0x408726: jnz 0x408708
0x408708: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x40870b: add rcx, 0x1  reg(9, 9) 
0x40870f: mov byte ptr [rdx+0x4], 0x0  mem(1f4d24a, 0) 
0x408713: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d246, 0) 
0x408717: mov byte ptr [rdx+0x2], 0x1  mem(1f4d248, 0) 
0x40871b: add rdx, 0x6  reg(8, 1f4d246) 
0x40871f: mov byte ptr [rdx-0x3], 0x2  mem(1f4d249, 0) 
0x408723: cmp r14, rcx  reg(17, a)  reg(9, a) 
0x408726: jnz 0x408708
0x408728: mov qword ptr [rbx+0x28], rax  reg(10, 1f4d210)  mem(7fffbc848668, 7f02e6aab9e8) 
0x40872c: movzx eax, word ptr [r12+0x2]  reg(56, 1f4d210) 
0x408732: lea r14, ptr [rip+0x20237f]  reg(17, a) 
0x408739: mov esi, eax  reg(47, 1f4d250)  reg(56, a) 
0x40873b: mov word ptr [rbx+0x38], ax  reg(29, a)  mem(7fffbc848678, 7f02fb8f5923) 
0x40873f: lea rax, ptr [r14+0x10]  reg(10, a) 
0x408743: mov qword ptr [rbx+0x30], rax  reg(10, 60aac8)  mem(7fffbc848670, 7fffbc848810) 
0x408747: movzx eax, si  reg(56, 60aac8)  reg(40, a) 
0x40874a: lea rdi, ptr [rax+rax*2]  reg(3, 0) 
0x40874e: mov r15, rax  reg(18, 7fffbc848640)  reg(10, a) 
0x408751: add rdi, rdi  reg(3, 1e)  reg(3, 1e) 
0x408754: call 0x406c50
operator new[](unsigned long)@plt: 3c a 1f4d24c a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x408759: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x40875b: test r15, r15  reg(18, a)  reg(18, a) 
0x40875e: mov rdx, rax  reg(8, 1f4d260)  reg(10, 1f4d260) 
0x408761: jz 0x408786
0x408763: nop dword ptr [rax+rax*1], eax
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 0) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d262, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d260, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d264, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d260) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d263, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 1) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 1) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d268, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d266, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d26a, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d266) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d269, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 2) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 2) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d26e, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d26c, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d270, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d26c) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d26f, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 3) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 3) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d274, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d272, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d276, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d272) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d275, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 4) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 4) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d27a, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d278, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d27c, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d278) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d27b, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 5) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 5) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d280, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d27e, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d282, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d27e) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d281, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 6) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 6) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d286, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d284, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d288, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d284) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d287, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 7) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 7) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d28c, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d28a, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d28e, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d28a) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d28d, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 8) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 8) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d292, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d290, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d294, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d290) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d293, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, 9) 
0x408784: jnz 0x408768
0x408768: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x40876a: add rcx, 0x1  reg(9, 9) 
0x40876e: mov byte ptr [rdx+0x2], 0x0  mem(1f4d298, 0) 
0x408772: mov word ptr [rdx], di  reg(41, 0)  mem(1f4d296, 0) 
0x408775: mov byte ptr [rdx+0x4], 0x0  mem(1f4d29a, 0) 
0x408779: add rdx, 0x6  reg(8, 1f4d296) 
0x40877d: mov byte ptr [rdx-0x3], 0x2  mem(1f4d299, 0) 
0x408781: cmp r15, rcx  reg(18, a)  reg(9, a) 
0x408784: jnz 0x408768
0x408786: mov qword ptr [rbx+0x40], rax  reg(10, 1f4d260)  mem(7fffbc848680, ff7fffff) 
0x40878a: movzx eax, word ptr [r12+0x4]  reg(56, 1f4d260) 
0x408790: lea r15, ptr [rip+0x202341]  reg(18, a) 
0x408797: mov edi, eax  reg(45, 0)  reg(56, a) 
0x408799: mov word ptr [rbx+0x50], ax  reg(29, a)  mem(7fffbc848690, 0) 
0x40879d: lea rax, ptr [r15+0x10]  reg(10, a) 
0x4087a1: mov qword ptr [rbx+0x48], rax  reg(10, 60aae8)  mem(7fffbc848688, 0) 
0x4087a5: movzx eax, di  reg(56, 60aae8)  reg(41, a) 
0x4087a8: mov rdi, rax  reg(3, a)  reg(10, a) 
0x4087ab: mov qword ptr [rbp-0x38], rax  reg(10, a)  mem(7fffbc848568, 1f4c340) 
0x4087af: shl rdi, 0x4  reg(3, a) 
0x4087b3: call 0x406c50
operator new[](unsigned long)@plt: a0 1f4d2a0 1f4d29c a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x4087b8: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x4087ba: cmp qword ptr [rbp-0x38], 0x0  mem(7fffbc848568, a) 
0x4087bf: mov rdx, rax  reg(8, 1f4d2b0)  reg(10, 1f4d2b0) 
0x4087c2: jz 0x4087ef
0x4087c4: nop dword ptr [rax], eax
0x4087c8: xor esi, esi  reg(47, 1f4d350)  reg(47, 1f4d350) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d2b2, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d2b4, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d2b0, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d2b8, 0) 
0x4087dd: add rcx, 0x1  reg(9, 0) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d2b3, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d2b0) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 1)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d2c2, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d2c4, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d2c0, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d2c8, 0) 
0x4087dd: add rcx, 0x1  reg(9, 1) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d2c3, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d2c0) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 2)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d2d2, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d2d4, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d2d0, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d2d8, 0) 
0x4087dd: add rcx, 0x1  reg(9, 2) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d2d3, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d2d0) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 3)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d2e2, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d2e4, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d2e0, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d2e8, 0) 
0x4087dd: add rcx, 0x1  reg(9, 3) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d2e3, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d2e0) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 4)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d2f2, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d2f4, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d2f0, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d2f8, 0) 
0x4087dd: add rcx, 0x1  reg(9, 4) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d2f3, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d2f0) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 5)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d302, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d304, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d300, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d308, 0) 
0x4087dd: add rcx, 0x1  reg(9, 5) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d303, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d300) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 6)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d312, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d314, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d310, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d318, 0) 
0x4087dd: add rcx, 0x1  reg(9, 6) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d313, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d310) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 7)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d322, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d324, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d320, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d328, 0) 
0x4087dd: add rcx, 0x1  reg(9, 7) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d323, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d320) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 8)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d332, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d334, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d330, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d338, 0) 
0x4087dd: add rcx, 0x1  reg(9, 8) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d333, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d330) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, 9)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087c8: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x4087ca: mov byte ptr [rdx+0x2], 0x0  mem(1f4d342, 0) 
0x4087ce: mov byte ptr [rdx+0x4], 0x0  mem(1f4d344, 0) 
0x4087d2: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d340, 0) 
0x4087d5: mov qword ptr [rdx+0x8], 0x0  mem(1f4d348, 0) 
0x4087dd: add rcx, 0x1  reg(9, 9) 
0x4087e1: mov byte ptr [rdx+0x3], 0x2  mem(1f4d343, 0) 
0x4087e5: add rdx, 0x10  reg(8, 1f4d340) 
0x4087e9: cmp qword ptr [rbp-0x38], rcx  reg(9, a)  mem(7fffbc848568, a) 
0x4087ed: jnz 0x4087c8
0x4087ef: mov qword ptr [rbx+0x58], rax  reg(10, 1f4d2b0)  mem(7fffbc848698, 0) 
0x4087f3: movzx eax, word ptr [r12+0x6]  reg(56, 1f4d2b0) 
0x4087f9: mov esi, eax  reg(47, 0)  reg(56, a) 
0x4087fb: mov word ptr [rbx+0x68], ax  reg(29, a)  mem(7fffbc8486a8, 0) 
0x4087ff: lea rax, ptr [rip+0x2022f2]  reg(10, a) 
0x408806: add rax, 0x10  reg(10, 60aaf8) 
0x40880a: mov qword ptr [rbx+0x60], rax  reg(10, 60ab08)  mem(7fffbc8486a0, 0) 
0x40880e: movzx eax, si  reg(56, 60ab08)  reg(40, a) 
0x408811: lea rdi, ptr [rax+rax*2]  reg(3, 0) 
0x408815: mov qword ptr [rbp-0x38], rax  reg(10, a)  mem(7fffbc848568, a) 
0x408819: shl rdi, 0x2  reg(3, 1e) 
0x40881d: call 0x406c50
operator new[](unsigned long)@plt: 78 a 1f4d350 a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x408822: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x408824: cmp qword ptr [rbp-0x38], 0x0  mem(7fffbc848568, a) 
0x408829: mov rdx, rax  reg(8, 1f4d360)  reg(10, 1f4d360) 
0x40882c: jz 0x408858
0x40882e: data16 nop 
0x408830: xor r11d, r11d  reg(70, 7f02e7115f10)  reg(70, 7f02e7115f10) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d362, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d364, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d360, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d368, 0) 
0x408846: add rcx, 0x1  reg(9, 0) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d363, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d360) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 1)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d36e, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d370, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d36c, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d374, 0) 
0x408846: add rcx, 0x1  reg(9, 1) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d36f, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d36c) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 2)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d37a, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d37c, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d378, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d380, 0) 
0x408846: add rcx, 0x1  reg(9, 2) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d37b, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d378) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 3)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d386, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d388, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d384, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d38c, 0) 
0x408846: add rcx, 0x1  reg(9, 3) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d387, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d384) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 4)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d392, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d394, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d390, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d398, 0) 
0x408846: add rcx, 0x1  reg(9, 4) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d393, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d390) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 5)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d39e, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3a0, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d39c, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3a4, 0) 
0x408846: add rcx, 0x1  reg(9, 5) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d39f, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d39c) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 6)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3aa, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3ac, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d3a8, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3b0, 0) 
0x408846: add rcx, 0x1  reg(9, 6) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3ab, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d3a8) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 7)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3b6, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3b8, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d3b4, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3bc, 0) 
0x408846: add rcx, 0x1  reg(9, 7) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3b7, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d3b4) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 8)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3c2, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3c4, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d3c0, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3c8, 0) 
0x408846: add rcx, 0x1  reg(9, 8) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3c3, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d3c0) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, 9)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408830: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x408833: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3ce, 0) 
0x408837: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3d0, 0) 
0x40883b: mov word ptr [rdx], r11w  reg(69, 0)  mem(1f4d3cc, 0) 
0x40883f: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3d4, 1ec3100000000) 
0x408846: add rcx, 0x1  reg(9, 9) 
0x40884a: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3cf, 0) 
0x40884e: add rdx, 0xc  reg(8, 1f4d3cc) 
0x408852: cmp qword ptr [rbp-0x38], rcx  reg(9, a)  mem(7fffbc848568, a) 
0x408856: jnz 0x408830
0x408858: mov qword ptr [rbx+0x70], rax  reg(10, 1f4d360)  mem(7fffbc8486b0, 0) 
0x40885c: movzx eax, word ptr [r12+0x8]  reg(56, 1f4d360) 
0x408862: mov edi, eax  reg(45, 0)  reg(56, a) 
0x408864: mov word ptr [rbx+0x80], ax  reg(29, a)  mem(7fffbc8486c0, 0) 
0x40886b: lea rax, ptr [rip+0x2022a6]  reg(10, a) 
0x408872: add rax, 0x10  reg(10, 60ab18) 
0x408876: mov qword ptr [rbx+0x78], rax  reg(10, 60ab28)  mem(7fffbc8486b8, 0) 
0x40887a: movzx eax, di  reg(56, 60ab28)  reg(41, a) 
0x40887d: lea rdi, ptr [rax+rax*2]  reg(3, a) 
0x408881: mov qword ptr [rbp-0x38], rax  reg(10, a)  mem(7fffbc848568, a) 
0x408885: shl rdi, 0x2  reg(3, 1e) 
0x408889: call 0x406c50
operator new[](unsigned long)@plt: 78 1f4d3d0 1f4d3d8 a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x40888e: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x408890: cmp qword ptr [rbp-0x38], 0x0  mem(7fffbc848568, a) 
0x408895: mov rdx, rax  reg(8, 1f4d3e0)  reg(10, 1f4d3e0) 
0x408898: jz 0x4088c8
0x40889a: nop word ptr [rax+rax*1], ax
0x4088a0: xor r10d, r10d  reg(67, 6cc)  reg(67, 6cc) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3e2, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3e4, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d3e0, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3e8, 0) 
0x4088b6: add rcx, 0x1  reg(9, 0) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3e3, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d3e0) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 1)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3ee, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3f0, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d3ec, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d3f4, 0) 
0x4088b6: add rcx, 0x1  reg(9, 1) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3ef, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d3ec) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 2)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d3fa, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d3fc, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d3f8, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d400, 0) 
0x4088b6: add rcx, 0x1  reg(9, 2) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d3fb, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d3f8) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 3)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d406, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d408, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d404, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d40c, 0) 
0x4088b6: add rcx, 0x1  reg(9, 3) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d407, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d404) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 4)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d412, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d414, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d410, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d418, 0) 
0x4088b6: add rcx, 0x1  reg(9, 4) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d413, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d410) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 5)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d41e, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d420, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d41c, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d424, 0) 
0x4088b6: add rcx, 0x1  reg(9, 5) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d41f, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d41c) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 6)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d42a, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d42c, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d428, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d430, 0) 
0x4088b6: add rcx, 0x1  reg(9, 6) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d42b, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d428) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 7)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d436, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d438, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d434, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d43c, 0) 
0x4088b6: add rcx, 0x1  reg(9, 7) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d437, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d434) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 8)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d442, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d444, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d440, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d448, 0) 
0x4088b6: add rcx, 0x1  reg(9, 8) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d443, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d440) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, 9)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088a0: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x4088a3: mov byte ptr [rdx+0x2], 0x0  mem(1f4d44e, 0) 
0x4088a7: mov byte ptr [rdx+0x4], 0x0  mem(1f4d450, 0) 
0x4088ab: mov word ptr [rdx], r10w  reg(66, 0)  mem(1f4d44c, 0) 
0x4088af: mov dword ptr [rdx+0x8], 0x0  mem(1f4d454, 1ebb100000000) 
0x4088b6: add rcx, 0x1  reg(9, 9) 
0x4088ba: mov byte ptr [rdx+0x3], 0x2  mem(1f4d44f, 0) 
0x4088be: add rdx, 0xc  reg(8, 1f4d44c) 
0x4088c2: cmp qword ptr [rbp-0x38], rcx  reg(9, a)  mem(7fffbc848568, a) 
0x4088c6: jnz 0x4088a0
0x4088c8: mov qword ptr [rbx+0x88], rax  reg(10, 1f4d3e0)  mem(7fffbc8486c8, 0) 
0x4088cf: movzx eax, word ptr [r12+0xa]  reg(56, 1f4d3e0) 
0x4088d5: mov esi, eax  reg(47, 1f4d450)  reg(56, a) 
0x4088d7: mov word ptr [rbx+0x98], ax  reg(29, a)  mem(7fffbc8486d8, 0) 
0x4088de: lea rax, ptr [rip+0x202253]  reg(10, a) 
0x4088e5: add rax, 0x10  reg(10, 60ab38) 
0x4088e9: mov qword ptr [rbx+0x90], rax  reg(10, 60ab48)  mem(7fffbc8486d0, 0) 
0x4088f0: movzx eax, si  reg(56, 60ab48)  reg(40, a) 
0x4088f3: lea rdi, ptr [rax+rax*2]  reg(3, 0) 
0x4088f7: mov qword ptr [rbp-0x38], rax  reg(10, a)  mem(7fffbc848568, a) 
0x4088fb: add rdi, rdi  reg(3, 1e)  reg(3, 1e) 
0x4088fe: call 0x406c50
operator new[](unsigned long)@plt: 3c a 1f4d458 a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x408903: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x408905: cmp qword ptr [rbp-0x38], 0x0  mem(7fffbc848568, a) 
0x40890a: mov rdx, rax  reg(8, 1f4d460)  reg(10, 1f4d460) 
0x40890d: jz 0x408931
0x40890f: nop 
0x408910: xor r9d, r9d  reg(64, a)  reg(64, a) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d462, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d464, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d460, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d463, 0) 
0x408923: add rcx, 0x1  reg(9, 0) 
0x408927: add rdx, 0x6  reg(8, 1f4d460) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 1)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d468, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d46a, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d466, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d469, 0) 
0x408923: add rcx, 0x1  reg(9, 1) 
0x408927: add rdx, 0x6  reg(8, 1f4d466) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 2)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d46e, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d470, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d46c, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d46f, 0) 
0x408923: add rcx, 0x1  reg(9, 2) 
0x408927: add rdx, 0x6  reg(8, 1f4d46c) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 3)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d474, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d476, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d472, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d475, 0) 
0x408923: add rcx, 0x1  reg(9, 3) 
0x408927: add rdx, 0x6  reg(8, 1f4d472) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 4)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d47a, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d47c, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d478, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d47b, 0) 
0x408923: add rcx, 0x1  reg(9, 4) 
0x408927: add rdx, 0x6  reg(8, 1f4d478) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 5)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d480, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d482, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d47e, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d481, 0) 
0x408923: add rcx, 0x1  reg(9, 5) 
0x408927: add rdx, 0x6  reg(8, 1f4d47e) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 6)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d486, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d488, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d484, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d487, 0) 
0x408923: add rcx, 0x1  reg(9, 6) 
0x408927: add rdx, 0x6  reg(8, 1f4d484) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 7)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d48c, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d48e, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d48a, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d48d, 0) 
0x408923: add rcx, 0x1  reg(9, 7) 
0x408927: add rdx, 0x6  reg(8, 1f4d48a) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 8)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d492, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d494, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d490, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d493, 0) 
0x408923: add rcx, 0x1  reg(9, 8) 
0x408927: add rdx, 0x6  reg(8, 1f4d490) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, 9)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408910: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408913: mov byte ptr [rdx+0x2], 0x0  mem(1f4d498, 0) 
0x408917: mov byte ptr [rdx+0x4], 0x0  mem(1f4d49a, 0) 
0x40891b: mov word ptr [rdx], r9w  reg(63, 0)  mem(1f4d496, 0) 
0x40891f: mov byte ptr [rdx+0x3], 0x2  mem(1f4d499, 0) 
0x408923: add rcx, 0x1  reg(9, 9) 
0x408927: add rdx, 0x6  reg(8, 1f4d496) 
0x40892b: cmp qword ptr [rbp-0x38], rcx  reg(9, a)  mem(7fffbc848568, a) 
0x40892f: jnz 0x408910
0x408931: mov qword ptr [rbx+0xa0], rax  reg(10, 1f4d460)  mem(7fffbc8486e0, 0) 
0x408938: movzx eax, word ptr [r12+0xc]  reg(56, 1f4d460) 
0x40893e: mov edi, eax  reg(45, 0)  reg(56, a) 
0x408940: mov word ptr [rbx+0xb0], ax  reg(29, a)  mem(7fffbc8486f0, 0) 
0x408947: lea rax, ptr [rip+0x20220a]  reg(10, a) 
0x40894e: add rax, 0x10  reg(10, 60ab58) 
0x408952: mov qword ptr [rbx+0xa8], rax  reg(10, 60ab68)  mem(7fffbc8486e8, 0) 
0x408959: movzx eax, di  reg(56, 60ab68)  reg(41, a) 
0x40895c: mov rdi, rax  reg(3, a)  reg(10, a) 
0x40895f: mov qword ptr [rbp-0x38], rax  reg(10, a)  mem(7fffbc848568, a) 
0x408963: shl rdi, 0x4  reg(3, a) 
0x408967: call 0x406c50
operator new[](unsigned long)@plt: a0 1f4d4a0 1f4d49c a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x40896c: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x40896e: cmp qword ptr [rbp-0x38], 0x0  mem(7fffbc848568, a) 
0x408973: mov rdx, rax  reg(8, 1f4d4b0)  reg(10, 1f4d4b0) 
0x408976: jz 0x4089a9
0x408978: nop dword ptr [rax+rax*1], eax
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d4b2, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d4b4, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d4b0, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d4b8, 0) 
0x408997: add rcx, 0x1  reg(9, 0) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d4b3, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d4b0) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 1)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d4c2, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d4c4, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d4c0, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d4c8, 0) 
0x408997: add rcx, 0x1  reg(9, 1) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d4c3, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d4c0) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 2)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d4d2, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d4d4, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d4d0, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d4d8, 0) 
0x408997: add rcx, 0x1  reg(9, 2) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d4d3, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d4d0) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 3)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d4e2, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d4e4, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d4e0, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d4e8, 0) 
0x408997: add rcx, 0x1  reg(9, 3) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d4e3, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d4e0) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 4)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d4f2, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d4f4, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d4f0, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d4f8, 0) 
0x408997: add rcx, 0x1  reg(9, 4) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d4f3, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d4f0) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 5)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d502, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d504, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d500, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d508, 0) 
0x408997: add rcx, 0x1  reg(9, 5) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d503, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d500) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 6)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d512, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d514, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d510, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d518, 0) 
0x408997: add rcx, 0x1  reg(9, 6) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d513, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d510) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 7)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d522, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d524, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d520, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d528, 0) 
0x408997: add rcx, 0x1  reg(9, 7) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d523, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d520) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 8)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d532, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d534, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d530, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d538, 0) 
0x408997: add rcx, 0x1  reg(9, 8) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d533, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d530) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, 9)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x408980: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408983: mov byte ptr [rdx+0x2], 0x0  mem(1f4d542, 0) 
0x408987: mov byte ptr [rdx+0x4], 0x0  mem(1f4d544, 0) 
0x40898b: mov word ptr [rdx], r8w  reg(60, 0)  mem(1f4d540, 0) 
0x40898f: mov qword ptr [rdx+0x8], 0x0  mem(1f4d548, 0) 
0x408997: add rcx, 0x1  reg(9, 9) 
0x40899b: mov byte ptr [rdx+0x3], 0x2  mem(1f4d543, 0) 
0x40899f: add rdx, 0x10  reg(8, 1f4d540) 
0x4089a3: cmp qword ptr [rbp-0x38], rcx  reg(9, a)  mem(7fffbc848568, a) 
0x4089a7: jnz 0x408980
0x4089a9: mov qword ptr [rbx+0xb8], rax  reg(10, 1f4d4b0)  mem(7fffbc8486f8, 0) 
0x4089b0: movzx eax, word ptr [r12+0xe]  reg(56, 1f4d4b0) 
0x4089b6: mov esi, eax  reg(47, 1f4d550)  reg(56, a) 
0x4089b8: mov word ptr [rbx+0xc8], ax  reg(29, a)  mem(7fffbc848708, ffff000000) 
0x4089bf: lea rax, ptr [rip+0x2021b2]  reg(10, a) 
0x4089c6: add rax, 0x10  reg(10, 60ab78) 
0x4089ca: mov qword ptr [rbx+0xc0], rax  reg(10, 60ab88)  mem(7fffbc848700, ff0000000000) 
0x4089d1: movzx eax, si  reg(56, 60ab88)  reg(40, a) 
0x4089d4: lea rdi, ptr [rax*4]  reg(3, 0) 
0x4089dc: mov qword ptr [rbp-0x38], rax  reg(10, a)  mem(7fffbc848568, a) 
0x4089e0: call 0x406c50
operator new[](unsigned long)@plt: 28 a 1f4d550 a	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x4089e5: xor edx, edx  reg(54, 1f4d560)  reg(54, 1f4d560) 
0x4089e7: cmp qword ptr [rbp-0x38], 0x0  mem(7fffbc848568, a) 
0x4089ec: jz 0x408a05
0x4089ee: data16 nop 
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d562, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d560, 0) 
0x4089fb: add rdx, 0x1  reg(8, 0) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 1)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d566, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d564, 0) 
0x4089fb: add rdx, 0x1  reg(8, 1) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 2)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d56a, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d568, 0) 
0x4089fb: add rdx, 0x1  reg(8, 2) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 3)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d56e, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d56c, 0) 
0x4089fb: add rdx, 0x1  reg(8, 3) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 4)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d572, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d570, 0) 
0x4089fb: add rdx, 0x1  reg(8, 4) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 5)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d576, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d574, 0) 
0x4089fb: add rdx, 0x1  reg(8, 5) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 6)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d57a, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d578, 0) 
0x4089fb: add rdx, 0x1  reg(8, 6) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 7)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d57e, 0) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d57c, 0) 
0x4089fb: add rdx, 0x1  reg(8, 7) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 8)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d582, ea81000000000000) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d580, 0) 
0x4089fb: add rdx, 0x1  reg(8, 8) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, 9)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x4089f0: xor edi, edi  reg(45, 0)  reg(45, 0) 
0x4089f2: mov byte ptr [rax+rdx*4+0x2], 0x0  mem(1f4d586, 1ea810000) 
0x4089f7: mov word ptr [rax+rdx*4], di  reg(41, 0)  mem(1f4d584, 1ea8100000000) 
0x4089fb: add rdx, 0x1  reg(8, 9) 
0x4089ff: cmp qword ptr [rbp-0x38], rdx  reg(8, a)  mem(7fffbc848568, a) 
0x408a03: jnz 0x4089f0
0x408a05: mov qword ptr [rbx+0xd0], rax  reg(10, 1f4d560)  mem(7fffbc848710, 0) 
0x408a0c: movzx eax, word ptr [r12+0x10]  reg(56, 1f4d560) 
0x408a12: mov edi, eax  reg(45, 0)  reg(56, a) 
0x408a14: mov word ptr [rbx+0xe0], ax  reg(29, a)  mem(7fffbc848720, ff000000000000) 
0x408a1b: lea rax, ptr [rip+0x202176]  reg(10, a) 
0x408a22: add rax, 0x10  reg(10, 60ab98) 
0x408a26: mov qword ptr [rbx+0xd8], rax  reg(10, 60aba8)  mem(7fffbc848718, 0) 
0x408a2d: movzx eax, di  reg(56, 60aba8)  reg(41, a) 
0x408a30: lea rdi, ptr [rax+rax*2]  reg(3, a) 
0x408a34: mov r12, rax  reg(15, 7fffbc848620)  reg(10, a) 
0x408a37: add rdi, rdi  reg(3, 1e)  reg(3, 1e) 
0x408a3a: call 0x406c50
operator new[](unsigned long)@plt: 3c 1f4d580 a 7f02e6e67b20	_Znam@plt
0x406c50: jmp qword ptr [rip+0x2043c2]
0x408a3f: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x408a41: test r12, r12  reg(15, a)  reg(15, a) 
0x408a44: mov rdx, rax  reg(8, 1f4d590)  reg(10, 1f4d590) 
0x408a47: jz 0x408a6e
0x408a49: nop dword ptr [rax], eax
0x408a50: xor esi, esi  reg(47, 1f4d5d0)  reg(47, 1f4d5d0) 
0x408a52: add rcx, 0x1  reg(9, 0) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d592, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d590, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d594, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d590) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d593, 0) 
0x408a69: cmp rcx, r12  reg(9, 1)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 1) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d598, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d596, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d59a, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d596) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d599, 0) 
0x408a69: cmp rcx, r12  reg(9, 2)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 2) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d59e, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d59c, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5a0, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d59c) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d59f, 0) 
0x408a69: cmp rcx, r12  reg(9, 3)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 3) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5a4, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5a2, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5a6, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5a2) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5a5, 0) 
0x408a69: cmp rcx, r12  reg(9, 4)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 4) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5aa, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5a8, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5ac, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5a8) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5ab, 0) 
0x408a69: cmp rcx, r12  reg(9, 5)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 5) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5b0, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5ae, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5b2, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5ae) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5b1, 0) 
0x408a69: cmp rcx, r12  reg(9, 6)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 6) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5b6, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5b4, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5b8, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5b4) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5b7, 0) 
0x408a69: cmp rcx, r12  reg(9, 7)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 7) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5bc, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5ba, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5be, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5ba) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5bd, 0) 
0x408a69: cmp rcx, r12  reg(9, 8)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 8) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5c2, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5c0, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5c4, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5c0) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5c3, 0) 
0x408a69: cmp rcx, r12  reg(9, 9)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a50: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x408a52: add rcx, 0x1  reg(9, 9) 
0x408a56: mov byte ptr [rdx+0x2], 0x0  mem(1f4d5c8, 0) 
0x408a5a: mov word ptr [rdx], si  reg(40, 0)  mem(1f4d5c6, 0) 
0x408a5d: mov byte ptr [rdx+0x4], 0x0  mem(1f4d5ca, 0) 
0x408a61: add rdx, 0x6  reg(8, 1f4d5c6) 
0x408a65: mov byte ptr [rdx-0x3], 0x2  mem(1f4d5c9, 0) 
0x408a69: cmp rcx, r12  reg(9, a)  reg(15, a) 
0x408a6c: jnz 0x408a50
0x408a6e: movzx esi, word ptr [rbx+0x20]  reg(47, 0) 
0x408a72: mov qword ptr [rbx+0xe8], rax  reg(10, 1f4d590)  mem(7fffbc848728, 0) 
0x408a79: test esi, esi  reg(47, a)  reg(47, a) 
0x408a7b: jz 0x408a96
0x408a7d: mov rcx, qword ptr [rbx+0x28]  reg(9, a) 
0x408a81: xor edx, edx  reg(54, 1f4d5cc)  reg(54, 1f4d5cc) 
0x408a83: nop dword ptr [rax+rax*1], eax
0x408a88: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d210, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 0) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d210) 
0x408a92: cmp edx, esi  reg(54, 1)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d216, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 1) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d216) 
0x408a92: cmp edx, esi  reg(54, 2)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d21c, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 2) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d21c) 
0x408a92: cmp edx, esi  reg(54, 3)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d222, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 3) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d222) 
0x408a92: cmp edx, esi  reg(54, 4)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d228, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 4) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d228) 
0x408a92: cmp edx, esi  reg(54, 5)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d22e, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 5) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d22e) 
0x408a92: cmp edx, esi  reg(54, 6)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d234, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 6) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d234) 
0x408a92: cmp edx, esi  reg(54, 7)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d23a, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 7) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d23a) 
0x408a92: cmp edx, esi  reg(54, 8)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d240, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 8) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d240) 
0x408a92: cmp edx, esi  reg(54, 9)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a88: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d246, 2010000) 
0x408a8b: add edx, 0x1  reg(54, 9) 
0x408a8e: add rcx, 0x6  reg(9, 1f4d246) 
0x408a92: cmp edx, esi  reg(54, a)  reg(47, a) 
0x408a94: jnz 0x408a88
0x408a96: movzx esi, word ptr [rbx+0x38]  reg(47, a) 
0x408a9a: test esi, esi  reg(47, a)  reg(47, a) 
0x408a9c: jz 0x408ab6
0x408a9e: mov rcx, qword ptr [rbx+0x40]  reg(9, 1f4d24c) 
0x408aa2: xor edx, edx  reg(54, a)  reg(54, a) 
0x408aa4: nop dword ptr [rax], eax
0x408aa8: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d260, 2000000) 
0x408aab: add edx, 0x1  reg(54, 0) 
0x408aae: add rcx, 0x6  reg(9, 1f4d260) 
0x408ab2: cmp edx, esi  reg(54, 1)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d266, 2000000) 
0x408aab: add edx, 0x1  reg(54, 1) 
0x408aae: add rcx, 0x6  reg(9, 1f4d266) 
0x408ab2: cmp edx, esi  reg(54, 2)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d26c, 2000000) 
0x408aab: add edx, 0x1  reg(54, 2) 
0x408aae: add rcx, 0x6  reg(9, 1f4d26c) 
0x408ab2: cmp edx, esi  reg(54, 3)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d272, 2000000) 
0x408aab: add edx, 0x1  reg(54, 3) 
0x408aae: add rcx, 0x6  reg(9, 1f4d272) 
0x408ab2: cmp edx, esi  reg(54, 4)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d278, 2000000) 
0x408aab: add edx, 0x1  reg(54, 4) 
0x408aae: add rcx, 0x6  reg(9, 1f4d278) 
0x408ab2: cmp edx, esi  reg(54, 5)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d27e, 2000000) 
0x408aab: add edx, 0x1  reg(54, 5) 
0x408aae: add rcx, 0x6  reg(9, 1f4d27e) 
0x408ab2: cmp edx, esi  reg(54, 6)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d284, 2000000) 
0x408aab: add edx, 0x1  reg(54, 6) 
0x408aae: add rcx, 0x6  reg(9, 1f4d284) 
0x408ab2: cmp edx, esi  reg(54, 7)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d28a, 2000000) 
0x408aab: add edx, 0x1  reg(54, 7) 
0x408aae: add rcx, 0x6  reg(9, 1f4d28a) 
0x408ab2: cmp edx, esi  reg(54, 8)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d290, 2000000) 
0x408aab: add edx, 0x1  reg(54, 8) 
0x408aae: add rcx, 0x6  reg(9, 1f4d290) 
0x408ab2: cmp edx, esi  reg(54, 9)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408aa8: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d296, 2000000) 
0x408aab: add edx, 0x1  reg(54, 9) 
0x408aae: add rcx, 0x6  reg(9, 1f4d296) 
0x408ab2: cmp edx, esi  reg(54, a)  reg(47, a) 
0x408ab4: jnz 0x408aa8
0x408ab6: movzx esi, word ptr [rbx+0x50]  reg(47, a) 
0x408aba: test esi, esi  reg(47, a)  reg(47, a) 
0x408abc: jz 0x408ad6
0x408abe: mov rcx, qword ptr [rbx+0x58]  reg(9, 1f4d29c) 
0x408ac2: xor edx, edx  reg(54, a)  reg(54, a) 
0x408ac4: nop dword ptr [rax], eax
0x408ac8: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d2b0, 2000000) 
0x408acb: add edx, 0x1  reg(54, 0) 
0x408ace: add rcx, 0x10  reg(9, 1f4d2b0) 
0x408ad2: cmp edx, esi  reg(54, 1)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d2c0, 2000000) 
0x408acb: add edx, 0x1  reg(54, 1) 
0x408ace: add rcx, 0x10  reg(9, 1f4d2c0) 
0x408ad2: cmp edx, esi  reg(54, 2)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d2d0, 2000000) 
0x408acb: add edx, 0x1  reg(54, 2) 
0x408ace: add rcx, 0x10  reg(9, 1f4d2d0) 
0x408ad2: cmp edx, esi  reg(54, 3)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d2e0, 2000000) 
0x408acb: add edx, 0x1  reg(54, 3) 
0x408ace: add rcx, 0x10  reg(9, 1f4d2e0) 
0x408ad2: cmp edx, esi  reg(54, 4)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d2f0, 2000000) 
0x408acb: add edx, 0x1  reg(54, 4) 
0x408ace: add rcx, 0x10  reg(9, 1f4d2f0) 
0x408ad2: cmp edx, esi  reg(54, 5)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d300, 2000000) 
0x408acb: add edx, 0x1  reg(54, 5) 
0x408ace: add rcx, 0x10  reg(9, 1f4d300) 
0x408ad2: cmp edx, esi  reg(54, 6)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d310, 2000000) 
0x408acb: add edx, 0x1  reg(54, 6) 
0x408ace: add rcx, 0x10  reg(9, 1f4d310) 
0x408ad2: cmp edx, esi  reg(54, 7)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d320, 2000000) 
0x408acb: add edx, 0x1  reg(54, 7) 
0x408ace: add rcx, 0x10  reg(9, 1f4d320) 
0x408ad2: cmp edx, esi  reg(54, 8)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d330, 2000000) 
0x408acb: add edx, 0x1  reg(54, 8) 
0x408ace: add rcx, 0x10  reg(9, 1f4d330) 
0x408ad2: cmp edx, esi  reg(54, 9)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ac8: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d340, 2000000) 
0x408acb: add edx, 0x1  reg(54, 9) 
0x408ace: add rcx, 0x10  reg(9, 1f4d340) 
0x408ad2: cmp edx, esi  reg(54, a)  reg(47, a) 
0x408ad4: jnz 0x408ac8
0x408ad6: movzx esi, word ptr [rbx+0x68]  reg(47, a) 
0x408ada: test esi, esi  reg(47, a)  reg(47, a) 
0x408adc: jz 0x408af6
0x408ade: mov rcx, qword ptr [rbx+0x70]  reg(9, 1f4d350) 
0x408ae2: xor edx, edx  reg(54, a)  reg(54, a) 
0x408ae4: nop dword ptr [rax], eax
0x408ae8: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d360, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 0) 
0x408aee: add rcx, 0xc  reg(9, 1f4d360) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 1) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d36c, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 1) 
0x408aee: add rcx, 0xc  reg(9, 1f4d36c) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 2) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d378, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 2) 
0x408aee: add rcx, 0xc  reg(9, 1f4d378) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 3) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d384, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 3) 
0x408aee: add rcx, 0xc  reg(9, 1f4d384) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 4) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d390, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 4) 
0x408aee: add rcx, 0xc  reg(9, 1f4d390) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 5) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d39c, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 5) 
0x408aee: add rcx, 0xc  reg(9, 1f4d39c) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 6) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d3a8, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 6) 
0x408aee: add rcx, 0xc  reg(9, 1f4d3a8) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 7) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d3b4, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 7) 
0x408aee: add rcx, 0xc  reg(9, 1f4d3b4) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 8) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d3c0, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 8) 
0x408aee: add rcx, 0xc  reg(9, 1f4d3c0) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, 9) 
0x408af4: jnz 0x408ae8
0x408ae8: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d3cc, 2000000) 
0x408aeb: add edx, 0x1  reg(54, 9) 
0x408aee: add rcx, 0xc  reg(9, 1f4d3cc) 
0x408af2: cmp esi, edx  reg(47, a)  reg(54, a) 
0x408af4: jnz 0x408ae8
0x408af6: movzx esi, word ptr [rbx+0x80]  reg(47, a) 
0x408afd: test esi, esi  reg(47, a)  reg(47, a) 
0x408aff: jz 0x408b1e
0x408b01: mov rcx, qword ptr [rbx+0x88]  reg(9, 1f4d3d8) 
0x408b08: xor edx, edx  reg(54, a)  reg(54, a) 
0x408b0a: nop word ptr [rax+rax*1], ax
0x408b10: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d3e0, 2000000) 
0x408b13: add edx, 0x1  reg(54, 0) 
0x408b16: add rcx, 0xc  reg(9, 1f4d3e0) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 1) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d3ec, 2000000) 
0x408b13: add edx, 0x1  reg(54, 1) 
0x408b16: add rcx, 0xc  reg(9, 1f4d3ec) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 2) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d3f8, 2000000) 
0x408b13: add edx, 0x1  reg(54, 2) 
0x408b16: add rcx, 0xc  reg(9, 1f4d3f8) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 3) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d404, 2000000) 
0x408b13: add edx, 0x1  reg(54, 3) 
0x408b16: add rcx, 0xc  reg(9, 1f4d404) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 4) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d410, 2000000) 
0x408b13: add edx, 0x1  reg(54, 4) 
0x408b16: add rcx, 0xc  reg(9, 1f4d410) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 5) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d41c, 2000000) 
0x408b13: add edx, 0x1  reg(54, 5) 
0x408b16: add rcx, 0xc  reg(9, 1f4d41c) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 6) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d428, 2000000) 
0x408b13: add edx, 0x1  reg(54, 6) 
0x408b16: add rcx, 0xc  reg(9, 1f4d428) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 7) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d434, 2000000) 
0x408b13: add edx, 0x1  reg(54, 7) 
0x408b16: add rcx, 0xc  reg(9, 1f4d434) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 8) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d440, 2000000) 
0x408b13: add edx, 0x1  reg(54, 8) 
0x408b16: add rcx, 0xc  reg(9, 1f4d440) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, 9) 
0x408b1c: jnz 0x408b10
0x408b10: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d44c, 2000000) 
0x408b13: add edx, 0x1  reg(54, 9) 
0x408b16: add rcx, 0xc  reg(9, 1f4d44c) 
0x408b1a: cmp esi, edx  reg(47, a)  reg(54, a) 
0x408b1c: jnz 0x408b10
0x408b1e: movzx esi, word ptr [rbx+0x98]  reg(47, a) 
0x408b25: test esi, esi  reg(47, a)  reg(47, a) 
0x408b27: jz 0x408b46
0x408b29: mov rcx, qword ptr [rbx+0xa0]  reg(9, 1f4d458) 
0x408b30: xor edx, edx  reg(54, a)  reg(54, a) 
0x408b32: nop word ptr [rax+rax*1], ax
0x408b38: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d460, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 0) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d460) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 1) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d466, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 1) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d466) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 2) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d46c, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 2) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d46c) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 3) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d472, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 3) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d472) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 4) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d478, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 4) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d478) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 5) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d47e, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 5) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d47e) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 6) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d484, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 6) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d484) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 7) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d48a, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 7) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d48a) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 8) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d490, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 8) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d490) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, 9) 
0x408b44: jnz 0x408b38
0x408b38: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d496, 2000000) 
0x408b3b: add edx, 0x1  reg(54, 9) 
0x408b3e: add rcx, 0x6  reg(9, 1f4d496) 
0x408b42: cmp esi, edx  reg(47, a)  reg(54, a) 
0x408b44: jnz 0x408b38
0x408b46: movzx esi, word ptr [rbx+0xb0]  reg(47, a) 
0x408b4d: test esi, esi  reg(47, a)  reg(47, a) 
0x408b4f: jz 0x408b6e
0x408b51: mov rcx, qword ptr [rbx+0xb8]  reg(9, 1f4d49c) 
0x408b58: xor edx, edx  reg(54, a)  reg(54, a) 
0x408b5a: nop word ptr [rax+rax*1], ax
0x408b60: mov word ptr [rcx], dx  reg(35, 0)  mem(1f4d4b0, 2000000) 
0x408b63: add edx, 0x1  reg(54, 0) 
0x408b66: add rcx, 0x10  reg(9, 1f4d4b0) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 1) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 1)  mem(1f4d4c0, 2000000) 
0x408b63: add edx, 0x1  reg(54, 1) 
0x408b66: add rcx, 0x10  reg(9, 1f4d4c0) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 2) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 2)  mem(1f4d4d0, 2000000) 
0x408b63: add edx, 0x1  reg(54, 2) 
0x408b66: add rcx, 0x10  reg(9, 1f4d4d0) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 3) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 3)  mem(1f4d4e0, 2000000) 
0x408b63: add edx, 0x1  reg(54, 3) 
0x408b66: add rcx, 0x10  reg(9, 1f4d4e0) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 4) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 4)  mem(1f4d4f0, 2000000) 
0x408b63: add edx, 0x1  reg(54, 4) 
0x408b66: add rcx, 0x10  reg(9, 1f4d4f0) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 5) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 5)  mem(1f4d500, 2000000) 
0x408b63: add edx, 0x1  reg(54, 5) 
0x408b66: add rcx, 0x10  reg(9, 1f4d500) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 6) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 6)  mem(1f4d510, 2000000) 
0x408b63: add edx, 0x1  reg(54, 6) 
0x408b66: add rcx, 0x10  reg(9, 1f4d510) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 7) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 7)  mem(1f4d520, 2000000) 
0x408b63: add edx, 0x1  reg(54, 7) 
0x408b66: add rcx, 0x10  reg(9, 1f4d520) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 8) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 8)  mem(1f4d530, 2000000) 
0x408b63: add edx, 0x1  reg(54, 8) 
0x408b66: add rcx, 0x10  reg(9, 1f4d530) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, 9) 
0x408b6c: jnz 0x408b60
0x408b60: mov word ptr [rcx], dx  reg(35, 9)  mem(1f4d540, 2000000) 
0x408b63: add edx, 0x1  reg(54, 9) 
0x408b66: add rcx, 0x10  reg(9, 1f4d540) 
0x408b6a: cmp esi, edx  reg(47, a)  reg(54, a) 
0x408b6c: jnz 0x408b60
0x408b6e: movzx ecx, word ptr [rbx+0xc8]  reg(55, 1f4d550) 
0x408b75: test ecx, ecx  reg(55, a)  reg(55, a) 
0x408b77: jz 0x408b94
0x408b79: mov rsi, qword ptr [rbx+0xd0]  reg(4, a) 
0x408b80: xor edx, edx  reg(54, a)  reg(54, a) 
0x408b82: nop word ptr [rax+rax*1], ax
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 0)  mem(1f4d560, 0) 
0x408b8c: add rdx, 0x1  reg(8, 0) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 1) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 1)  mem(1f4d564, 0) 
0x408b8c: add rdx, 0x1  reg(8, 1) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 2) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 2)  mem(1f4d568, 0) 
0x408b8c: add rdx, 0x1  reg(8, 2) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 3) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 3)  mem(1f4d56c, 0) 
0x408b8c: add rdx, 0x1  reg(8, 3) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 4) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 4)  mem(1f4d570, 0) 
0x408b8c: add rdx, 0x1  reg(8, 4) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 5) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 5)  mem(1f4d574, 0) 
0x408b8c: add rdx, 0x1  reg(8, 5) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 6) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 6)  mem(1f4d578, 0) 
0x408b8c: add rdx, 0x1  reg(8, 6) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 7) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 7)  mem(1f4d57c, 0) 
0x408b8c: add rdx, 0x1  reg(8, 7) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 8) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 8)  mem(1f4d580, 0) 
0x408b8c: add rdx, 0x1  reg(8, 8) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, 9) 
0x408b92: jnle 0x408b88
0x408b88: mov word ptr [rsi+rdx*4], dx  reg(35, 9)  mem(1f4d584, 5100000000) 
0x408b8c: add rdx, 0x1  reg(8, 9) 
0x408b90: cmp ecx, edx  reg(55, a)  reg(54, a) 
0x408b92: jnle 0x408b88
0x408b94: movzx ecx, word ptr [rbx+0xe0]  reg(55, a) 
0x408b9b: xor edx, edx  reg(54, a)  reg(54, a) 
0x408b9d: test ecx, ecx  reg(55, a)  reg(55, a) 
0x408b9f: jz 0x408bb6
0x408ba1: nop dword ptr [rax], eax
0x408ba8: mov word ptr [rax], dx  reg(35, 0)  mem(1f4d590, 2000000) 
0x408bab: add edx, 0x1  reg(54, 0) 
0x408bae: add rax, 0x6  reg(10, 1f4d590) 
0x408bb2: cmp edx, ecx  reg(54, 1)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 1)  mem(1f4d596, 2000000) 
0x408bab: add edx, 0x1  reg(54, 1) 
0x408bae: add rax, 0x6  reg(10, 1f4d596) 
0x408bb2: cmp edx, ecx  reg(54, 2)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 2)  mem(1f4d59c, 2000000) 
0x408bab: add edx, 0x1  reg(54, 2) 
0x408bae: add rax, 0x6  reg(10, 1f4d59c) 
0x408bb2: cmp edx, ecx  reg(54, 3)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 3)  mem(1f4d5a2, 2000000) 
0x408bab: add edx, 0x1  reg(54, 3) 
0x408bae: add rax, 0x6  reg(10, 1f4d5a2) 
0x408bb2: cmp edx, ecx  reg(54, 4)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 4)  mem(1f4d5a8, 2000000) 
0x408bab: add edx, 0x1  reg(54, 4) 
0x408bae: add rax, 0x6  reg(10, 1f4d5a8) 
0x408bb2: cmp edx, ecx  reg(54, 5)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 5)  mem(1f4d5ae, 2000000) 
0x408bab: add edx, 0x1  reg(54, 5) 
0x408bae: add rax, 0x6  reg(10, 1f4d5ae) 
0x408bb2: cmp edx, ecx  reg(54, 6)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 6)  mem(1f4d5b4, 2000000) 
0x408bab: add edx, 0x1  reg(54, 6) 
0x408bae: add rax, 0x6  reg(10, 1f4d5b4) 
0x408bb2: cmp edx, ecx  reg(54, 7)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 7)  mem(1f4d5ba, 2000000) 
0x408bab: add edx, 0x1  reg(54, 7) 
0x408bae: add rax, 0x6  reg(10, 1f4d5ba) 
0x408bb2: cmp edx, ecx  reg(54, 8)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 8)  mem(1f4d5c0, 2000000) 
0x408bab: add edx, 0x1  reg(54, 8) 
0x408bae: add rax, 0x6  reg(10, 1f4d5c0) 
0x408bb2: cmp edx, ecx  reg(54, 9)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408ba8: mov word ptr [rax], dx  reg(35, 9)  mem(1f4d5c6, 2000000) 
0x408bab: add edx, 0x1  reg(54, 9) 
0x408bae: add rax, 0x6  reg(10, 1f4d5c6) 
0x408bb2: cmp edx, ecx  reg(54, a)  reg(55, a) 
0x408bb4: jnz 0x408ba8
0x408bb6: lea rax, ptr [rbx+0xf0]  reg(10, 1f4d5cc) 
0x408bbd: mov byte ptr [rbx+0xf0], 0x0  mem(7fffbc848730, 0) 
0x408bc4: mov byte ptr [rbx+0xf1], 0x10  mem(7fffbc848731, 0) 
0x408bcb: mov edi, 0xa  reg(45, 0) 
0x408bd0: mov r14, rax  reg(17, 60aab8)  reg(10, 7fffbc848730) 
0x408bd3: call 0x406ed0
openpal::TimeDuration::Seconds(long)@plt: a 1f4d560 a a	_ZN7openpal12TimeDuration7SecondsEl@plt
0x406ed0: jmp qword ptr [rip+0x204282]
0x406ed6: push 0x28 
0x406edb: jmp 0x406c40
0x408bd8: mov qword ptr [r14+0x8], rax  reg(10, 2710)  mem(7fffbc848738, 0) 
0x408bdc: mov rax, qword ptr [rip+0x2025cd]  reg(10, 2710) 
0x408be3: mov ecx, 0xffffffff  reg(55, a) 
0x408be8: mov dword ptr [rbx+0x118], 0x800  mem(7fffbc848758, 0) 
0x408bf2: mov dword ptr [rbx+0x11c], 0x800  mem(7fffbc84875c, 0) 
0x408bfc: mov byte ptr [rbx+0x120], 0x0  mem(7fffbc848760, 0) 
0x408c03: mov word ptr [rbx+0x122], cx  reg(32, ffffffff)  mem(7fffbc848762, 0) 
0x408c0a: mov qword ptr [rbx+0x100], rax  reg(10, 1388)  mem(7fffbc848740, 0) 
0x408c11: mov qword ptr [rbx+0x108], rax  reg(10, 1388)  mem(7fffbc848748, 0) 
0x408c18: mov qword ptr [rbx+0x110], rax  reg(10, 1388)  mem(7fffbc848750, 0) 
0x408c1f: call 0x406d60
opendnp3::ClassField::None()@plt: 7fffbc848540 2710 0 ffffffff	_ZN8opendnp310ClassField4NoneEv@plt
0x406d60: jmp qword ptr [rip+0x20433a]
0x406d66: push 0x11 
0x406d6b: jmp 0x406c40
opendnp3::ClassField::None(): 7fffbc848540 2710 0 ffffffff	_ZN8opendnp310ClassField4NoneEv
0x7f02e76aa1c0: sub rsp, 0x18
0x7f02e76aa1c4: lea rdi, ptr [rsp+0x7]  reg(3, 7fffbc848540) 
0x7f02e76aa1c9: mov rax, qword ptr fs:[0x28]  reg(10, 1388) 
0x7f02e76aa1d2: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848548, 7f02fbb05168) 
0x7f02e76aa1d7: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76aa1d9: call 0x7f02e76a7620
opendnp3::ClassField::ClassField()@plt: 7fffbc848547 2710 0 ffffffff	_ZN8opendnp310ClassFieldC1Ev@plt
0x7f02e76a7620: jmp qword ptr [rip+0x29846a]
0x7f02e76a7626: push 0x34f 
0x7f02e76a762b: jmp 0x7f02e76a4120
opendnp3::ClassField::ClassField(): 7fffbc848547 2710 0 ffffffff	_ZN8opendnp310ClassFieldC1Ev
0x7f02e76aa1b0: mov byte ptr [rdi], 0x0  mem(7fffbc848547, 33a0ca891b2d0000) 
0x7f02e76aa1b3: ret 
0x7f02e76aa1de: mov rdx, qword ptr [rsp+0x8]  reg(8, 0) 
0x7f02e76aa1e3: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76aa1ec: movzx eax, byte ptr [rsp+0x7]  reg(56, 0) 
0x7f02e76aa1f1: jnz 0x7f02e76aa1f8
0x7f02e76aa1f3: add rsp, 0x18
0x7f02e76aa1f7: ret 
0x408c24: sub rsp, 0x8
0x408c28: mov byte ptr [r14+0x34], al  reg(27, 0)  mem(7fffbc848764, 0) 
0x408c2c: lea rdi, ptr [rbx+0x128]  reg(3, 7fffbc848547) 
0x408c33: push 0x0 
0x408c35: push 0x0 
0x408c37: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x408c3a: push 0x0 
0x408c3c: mov byte ptr [rbx+0x125], 0x0  mem(7fffbc848765, 0) 
0x408c43: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x408c46: xor ecx, ecx  reg(55, ffffffff)  reg(55, ffffffff) 
0x408c48: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x408c4a: xor esi, esi  reg(47, 2710)  reg(47, 2710) 
0x408c4c: call 0x406cf0
opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt: 7fffbc848768 0 0 0	_ZN8opendnp317EventBufferConfigC1Etttttttt@plt
0x406cf0: jmp qword ptr [rip+0x204372]
0x406cf6: push 0xa 
0x406cfb: jmp 0x406c40
opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 7fffbc848768 0 0 0	_ZN8opendnp317EventBufferConfigC1Etttttttt
0x7f02e76f75c0: movzx r8d, r8w  reg(61, 0)  reg(60, 0) 
0x7f02e76f75c4: movzx ecx, cx  reg(55, 0)  reg(32, 0) 
0x7f02e76f75c7: movzx edx, dx  reg(54, 0)  reg(35, 0) 
0x7f02e76f75ca: shl r8, 0x10  reg(11, 0) 
0x7f02e76f75ce: movzx eax, word ptr [rsp+0x18]  reg(56, 0) 
0x7f02e76f75d3: movzx esi, si  reg(47, 0)  reg(40, 0) 
0x7f02e76f75d6: or r8, rcx  reg(11, 0)  reg(9, 0) 
0x7f02e76f75d9: movzx r9d, r9w  reg(64, 0)  reg(63, 0) 
0x7f02e76f75dd: shl r8, 0x10  reg(11, 0) 
0x7f02e76f75e1: or r8, rdx  reg(11, 0)  reg(8, 0) 
0x7f02e76f75e4: movzx edx, word ptr [rsp+0x10]  reg(54, 0) 
0x7f02e76f75e9: shl rax, 0x10  reg(10, 0) 
0x7f02e76f75ed: shl r8, 0x10  reg(11, 0) 
0x7f02e76f75f1: or r8, rsi  reg(11, 0)  reg(4, 0) 
0x7f02e76f75f4: mov qword ptr [rsp-0x18], r8  reg(11, 0)  mem(7fffbc848520, 7fffbc848640) 
0x7f02e76f75f9: or rax, rdx  reg(10, 0)  reg(8, 0) 
0x7f02e76f75fc: movzx edx, word ptr [rsp+0x8]  reg(54, 0) 
0x7f02e76f7601: shl rax, 0x10  reg(10, 0) 
0x7f02e76f7605: or rax, rdx  reg(10, 0)  reg(8, 0) 
0x7f02e76f7608: shl rax, 0x10  reg(10, 0) 
0x7f02e76f760c: or rax, r9  reg(10, 0)  reg(12, 0) 
0x7f02e76f760f: mov qword ptr [rsp-0x10], rax  reg(10, 0)  mem(7fffbc848528, 7f02fbb05168) 
0x7f02e76f7614: movdqa xmm0, xmmword ptr [rsp-0x18]
0x7f02e76f761a: movups xmmword ptr [rdi], xmm0
0x7f02e76f761d: ret 
0x408c51: lea rax, ptr [rbx+0x138]  reg(10, 0) 
0x408c58: mov edx, 0x1  reg(54, 0) 
0x408c5d: add rsp, 0x20
0x408c61: mov byte ptr [rbx+0x138], 0x0  mem(7fffbc848778, 0) 
0x408c68: mov byte ptr [rbx+0x139], 0x0  mem(7fffbc848779, ff00000000000000) 
0x408c6f: mov edi, 0x1  reg(45, 7fffbc848768) 
0x408c74: mov r15, rax  reg(18, 60aad8)  reg(10, 7fffbc848778) 
0x408c77: mov eax, 0x400  reg(56, 7fffbc848778) 
0x408c7c: mov dword ptr [rbx+0x13c], 0x0  mem(7fffbc84877c, ff7fffff00000000) 
0x408c86: mov word ptr [rbx+0x140], ax  reg(29, 400)  mem(7fffbc848780, ff7fffff) 
0x408c8d: mov word ptr [rbx+0x142], dx  reg(35, 1)  mem(7fffbc848782, ff7f) 
0x408c94: call 0x406ed0
openpal::TimeDuration::Seconds(long)@plt: 1 0 1 0	_ZN7openpal12TimeDuration7SecondsEl@plt
0x406ed0: jmp qword ptr [rip+0x204282]
0x408c99: mov qword ptr [r15+0x10], rax  reg(10, 3e8)  mem(7fffbc848788, 0) 
0x408c9d: mov edi, 0x1  reg(45, 7fffbc848540) 
0x408ca2: call 0x406c90
openpal::TimeDuration::Minutes(long)@plt: 1 3e8 0 0	_ZN7openpal12TimeDuration7MinutesEl@plt
0x406c90: jmp qword ptr [rip+0x2043a2]
0x406c96: push 0x4 
0x406c9b: jmp 0x406c40
0x408ca7: mov qword ptr [r15+0x18], rax  reg(10, ea60)  mem(7fffbc848790, 0) 
0x408cab: lea rsp, ptr [rbp-0x28]
0x408caf: pop rbx  reg(7, 7fffbc848640) 
0x408cb0: pop r12  reg(15, a) 
0x408cb2: pop r13  reg(16, 60aa98) 
0x408cb4: pop r14  reg(17, 7fffbc848730) 
0x408cb6: pop r15  reg(18, 7fffbc848778) 
0x408cb8: pop rbp
0x408cb9: ret 
0x407219: mov edi, 0xa  reg(45, 7fffbc848540) 
0x40721e: call 0x406d80
opendnp3::EventBufferConfig::AllTypes(unsigned short)@plt: a ea60 0 0	_ZN8opendnp317EventBufferConfig8AllTypesEt@plt
0x406d80: jmp qword ptr [rip+0x20432a]
0x406d86: push 0x13 
0x406d8b: jmp 0x406c40
opendnp3::EventBufferConfig::AllTypes(unsigned short): a ea60 0 0	_ZN8opendnp317EventBufferConfig8AllTypesEt
0x7f02e76f7620: sub rsp, 0x28
0x7f02e76f7624: movzx esi, di  reg(47, ea60)  reg(41, a) 
0x7f02e76f7627: mov rax, qword ptr fs:[0x28]  reg(10, ea60) 
0x7f02e76f7630: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848598, 7f02fbb05168) 
0x7f02e76f7635: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7637: mov rdi, rsp  reg(3, a) 
0x7f02e76f763a: sub rsp, 0x8
0x7f02e76f763e: mov ecx, esi  reg(55, 0)  reg(47, a) 
0x7f02e76f7640: push rsi  reg(4, a) 
0x7f02e76f7641: push rsi  reg(4, a) 
0x7f02e76f7642: mov edx, esi  reg(54, 0)  reg(47, a) 
0x7f02e76f7644: push rsi  reg(4, a) 
0x7f02e76f7645: mov r9d, esi  reg(64, 0)  reg(47, a) 
0x7f02e76f7648: mov r8d, esi  reg(61, 0)  reg(47, a) 
0x7f02e76f764b: call 0x7f02e76a54a0
opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)@plt: 7fffbc848580 a a a	_ZN8opendnp317EventBufferConfigC1Etttttttt@plt
0x7f02e76a54a0: jmp qword ptr [rip+0x29952a]
0x7f02e76a54a6: push 0x137 
0x7f02e76a54ab: jmp 0x7f02e76a4120
opendnp3::EventBufferConfig::EventBufferConfig(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short): 7fffbc848580 a a a	_ZN8opendnp317EventBufferConfigC1Etttttttt
0x7f02e76f75c0: movzx r8d, r8w  reg(61, a)  reg(60, a) 
0x7f02e76f75c4: movzx ecx, cx  reg(55, a)  reg(32, a) 
0x7f02e76f75c7: movzx edx, dx  reg(54, a)  reg(35, a) 
0x7f02e76f75ca: shl r8, 0x10  reg(11, a) 
0x7f02e76f75ce: movzx eax, word ptr [rsp+0x18]  reg(56, 0) 
0x7f02e76f75d3: movzx esi, si  reg(47, a)  reg(40, a) 
0x7f02e76f75d6: or r8, rcx  reg(11, a0000)  reg(9, a) 
0x7f02e76f75d9: movzx r9d, r9w  reg(64, a)  reg(63, a) 
0x7f02e76f75dd: shl r8, 0x10  reg(11, a000a) 
0x7f02e76f75e1: or r8, rdx  reg(11, a000a0000)  reg(8, a) 
0x7f02e76f75e4: movzx edx, word ptr [rsp+0x10]  reg(54, a) 
0x7f02e76f75e9: shl rax, 0x10  reg(10, a) 
0x7f02e76f75ed: shl r8, 0x10  reg(11, a000a000a) 
0x7f02e76f75f1: or r8, rsi  reg(11, a000a000a0000)  reg(4, a) 
0x7f02e76f75f4: mov qword ptr [rsp-0x18], r8  reg(11, a000a000a000a)  mem(7fffbc848540, 7fffbc8487e0) 
0x7f02e76f75f9: or rax, rdx  reg(10, a0000)  reg(8, a) 
0x7f02e76f75fc: movzx edx, word ptr [rsp+0x8]  reg(54, a) 
0x7f02e76f7601: shl rax, 0x10  reg(10, a000a) 
0x7f02e76f7605: or rax, rdx  reg(10, a000a0000)  reg(8, a) 
0x7f02e76f7608: shl rax, 0x10  reg(10, a000a000a) 
0x7f02e76f760c: or rax, r9  reg(10, a000a000a0000)  reg(12, a) 
0x7f02e76f760f: mov qword ptr [rsp-0x10], rax  reg(10, a000a000a000a)  mem(7fffbc848548, 7f02e7df3000) 
0x7f02e76f7614: movdqa xmm0, xmmword ptr [rsp-0x18]
0x7f02e76f761a: movups xmmword ptr [rdi], xmm0
0x7f02e76f761d: ret 
0x7f02e76f7650: add rsp, 0x20
0x7f02e76f7654: mov rax, qword ptr [rsp]  reg(10, a000a000a000a) 
0x7f02e76f7658: mov rdx, qword ptr [rsp+0x8]  reg(8, a) 
0x7f02e76f765d: mov rcx, qword ptr [rsp+0x18]  reg(9, a) 
0x7f02e76f7662: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76f766b: jnz 0x7f02e76f7672
0x7f02e76f766d: add rsp, 0x28
0x7f02e76f7671: ret 
0x407223: mov qword ptr [rbp-0xf8], rax  reg(10, a000a000a000a)  mem(7fffbc848768, 0) 
0x40722a: mov qword ptr [rbp-0xf0], rdx  reg(8, a000a000a000a)  mem(7fffbc848770, 0) 
0x407231: mov eax, 0xa  reg(56, a000a000a000a) 
0x407236: mov edx, 0x1  reg(54, a000a000a000a) 
0x40723b: mov byte ptr [rbp-0x100], 0x1  mem(7fffbc848760, ffff0000) 
0x407242: mov word ptr [rbp-0xe0], ax  reg(29, a)  mem(7fffbc848780, 10400) 
0x407249: mov word ptr [rbp-0xde], dx  reg(35, 1)  mem(7fffbc848782, 3e8000000000001) 
0x407250: call 0x406e50
openpal::TimeDuration::Max()@plt: 7fffbc848580 a 1 0	_ZN7openpal12TimeDuration3MaxEv@plt
0x406e50: jmp qword ptr [rip+0x2042c2]
0x406e56: push 0x20 
0x406e5b: jmp 0x406c40
0x407255: mov rdi, r15  reg(3, 7fffbc848590)  reg(18, 7fffbc848640) 
0x407258: mov qword ptr [rbp-0xd0], rax  reg(10, 7fffffffffffffff)  mem(7fffbc848790, ea60) 
0x40725f: call 0x407ad0
ConfigureDatabase(asiodnp3::DatabaseConfig&): 7fffbc848640 7fffffffffffffff 0 0	_Z17ConfigureDatabaseRN8asiodnp314DatabaseConfigE
0x407ad0: mov rax, qword ptr [rdi+0x58]  reg(10, 7fffffffffffffff) 
0x407ad4: mov byte ptr [rax+0x3], 0x4  mem(1f4d2b3, 2) 
0x407ad8: mov byte ptr [rax+0x2], 0x4  mem(1f4d2b2, 400) 
0x407adc: mov byte ptr [rax+0x4], 0x6  mem(1f4d2b4, 0) 
0x407ae0: ret 
0x407264: mov r12, qword ptr [rbp-0x280]  reg(15, a) 
0x40726b: mov edi, 0x18  reg(45, 7fffbc848640) 
0x407270: mov rax, qword ptr [r12]  reg(10, 1f4d2b0) 
0x407274: mov r15, qword ptr [rax+0x38]  reg(18, 7fffbc848640) 
0x407278: call 0x406da0
operator new(unsigned long)@plt: 18 7fffffffffffffff 0 0	_Znwm@plt
0x406da0: jmp qword ptr [rip+0x20431a]
0x40727d: mov r13, rax  reg(16, a)  reg(10, 1f4d5e0) 
0x407280: mov dword ptr [rax+0x8], 0x1  mem(1f4d5e8, 0) 
0x407287: mov dword ptr [rax+0xc], 0x1  mem(1f4d5ec, 0) 
0x40728e: lea rax, ptr [rip+0x203a1b]  reg(10, 1f4d5e0) 
0x407295: mov rdi, r13  reg(3, 0)  reg(16, 1f4d5e0) 
0x407298: mov rsi, r14  reg(4, 1f4d5f0)  reg(17, 60a980) 
0x40729b: add rax, 0x10  reg(10, 60acb0) 
0x40729f: mov qword ptr [r13], rax  reg(10, 60acc0)  mem(1f4d5e0, 0) 
0x4072a3: lea rax, ptr [rip+0x203746]  reg(10, 60acc0) 
0x4072aa: add rax, 0x10  reg(10, 60a9f0) 
0x4072ae: mov qword ptr [r13+0x10], rax  reg(10, 60aa00)  mem(1f4d5f0, 0) 
0x4072b2: call 0x407fb0
std::_Sp_counted_ptr_inplace<opendnp3::DefaultOutstationApplication, std::allocator<opendnp3::DefaultOutstationApplication>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): 1f4d5e0 60a980 1f4d5e0 7f02e6e67b20	_ZNSt23_Sp_counted_ptr_inplaceIN8opendnp328DefaultOutstationApplicationESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
0x407fb0: mov rdx, rdi  reg(8, 1f4d5e0)  reg(3, 1f4d5e0) 
0x407fb3: mov rsi, qword ptr [rsi+0x8]  reg(4, 60a980) 
0x407fb7: lea rdi, ptr [rip+0x15c2]  reg(3, 1f4d5e0) 
0x407fbe: cmp rsi, rdi  reg(4, 409580)  reg(3, 409580) 
0x407fc1: jz 0x407fd3
0x407fd3: lea rax, ptr [rdx+0x10]  reg(10, 60aa00) 
0x407fd7: ret 
0x4072b7: mov edi, 0x30  reg(45, 409580) 
0x4072bc: mov qword ptr [rbp-0x240], rax  reg(10, 1f4d5f0)  mem(7fffbc848620, a000a000a000a) 
0x4072c3: mov qword ptr [rbp-0x238], r13  reg(16, 1f4d5e0)  mem(7fffbc848628, a000a000a000a) 
0x4072ca: call 0x406da0
operator new(unsigned long)@plt: 30 409580 1f4d5e0 7f02e6e67b20	_Znwm@plt
0x406da0: jmp qword ptr [rip+0x20431a]
0x4072cf: mov r13, rax  reg(16, 1f4d5e0)  reg(10, 1f4d600) 
0x4072d2: mov dword ptr [rax+0x8], 0x1  mem(1f4d608, 0) 
0x4072d9: mov dword ptr [rax+0xc], 0x1  mem(1f4d60c, 0) 
0x4072e0: lea rax, ptr [rip+0x203a71]  reg(10, 1f4d600) 
0x4072e7: lea rdi, ptr [r13+0x10]  reg(3, 0) 
0x4072eb: xor esi, esi  reg(47, 1f4d630)  reg(47, 1f4d630) 
0x4072ed: add rax, 0x10  reg(10, 60ad58) 
0x4072f1: mov qword ptr [r13], rax  reg(10, 60ad68)  mem(1f4d600, 0) 
0x4072f5: call 0x406e60
opendnp3::SimpleCommandHandler::SimpleCommandHandler(opendnp3::CommandStatus)@plt: 1f4d610 0 1f4d600 7f02e6e67b20	_ZN8opendnp320SimpleCommandHandlerC2ENS_13CommandStatusE@plt
0x406e60: jmp qword ptr [rip+0x2042ba]
0x406e66: push 0x21 
0x406e6b: jmp 0x406c40
opendnp3::SimpleCommandHandler::SimpleCommandHandler(opendnp3::CommandStatus): 1f4d610 0 1f4d600 7f02e6e67b20	_ZN8opendnp320SimpleCommandHandlerC1ENS_13CommandStatusE
0x7f02e76fc2d0: mov rax, qword ptr [rip+0x240fb1]  reg(10, 60ad68) 
0x7f02e76fc2d7: pxor xmm0, xmm0
0x7f02e76fc2db: mov byte ptr [rdi+0x8], sil  reg(48, 0)  mem(1f4d618, 0) 
0x7f02e76fc2df: add rax, 0x10  reg(10, 7f02e793c5f0) 
0x7f02e76fc2e3: mov qword ptr [rdi], rax  reg(10, 7f02e793c600)  mem(1f4d610, 0) 
0x7f02e76fc2e6: movups xmmword ptr [rdi+0xc], xmm0
0x7f02e76fc2ea: ret 
0x4072fa: lea rax, ptr [rip+0x2038df]  reg(10, 7f02e793c600) 
0x407301: mov rsi, r14  reg(4, 0)  reg(17, 60a980) 
0x407304: mov rdi, r13  reg(3, 1f4d610)  reg(16, 1f4d600) 
0x407307: add rax, 0x10  reg(10, 60abe0) 
0x40730b: mov qword ptr [r13+0x10], rax  reg(10, 60abf0)  mem(1f4d610, 7f02e793c600) 
0x40730f: mov rax, qword ptr [r13]  reg(10, 60abf0) 
0x407313: call qword ptr [rax+0x20]
std::_Sp_counted_ptr_inplace<opendnp3::SuccessCommandHandler, std::allocator<opendnp3::SuccessCommandHandler>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): 1f4d600 60a980 1f4d600 7f02e6e67b20	_ZNSt23_Sp_counted_ptr_inplaceIN8opendnp321SuccessCommandHandlerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
0x408040: mov rdx, rdi  reg(8, 1f4d600)  reg(3, 1f4d600) 
0x408043: mov rsi, qword ptr [rsi+0x8]  reg(4, 60a980) 
0x408047: lea rdi, ptr [rip+0x1532]  reg(3, 1f4d600) 
0x40804e: cmp rsi, rdi  reg(4, 409580)  reg(3, 409580) 
0x408051: jz 0x408063
0x408063: lea rax, ptr [rdx+0x10]  reg(10, 60ad68) 
0x408067: ret 
0x407316: lea rsi, ptr [rip+0x1cd9]  reg(4, 409580) 
0x40731d: mov rdi, rbx  reg(3, 409580)  reg(7, 7fffbc8487e0) 
0x407320: mov qword ptr [rbp-0x250], rax  reg(10, 1f4d610)  mem(7fffbc848610, 7fffbc848768) 
0x407327: mov qword ptr [rbp-0x248], r13  reg(16, 1f4d600)  mem(7fffbc848618, 60b0a8) 
0x40732e: call 0x407a00
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) (.isra.37): 7fffbc8487e0 408ff6 1f4d600 7f02e6e67b20	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.37
0x407a00: push r13  reg(16, 1f4d600) 
0x407a02: push r12  reg(15, 1f4d030) 
0x407a04: lea r13, ptr [rdi+0x10]  reg(16, 1f4d600) 
0x407a08: push rbp
0x407a09: push rbx  reg(7, 7fffbc8487e0) 
0x407a0a: sub rsp, 0x18
0x407a0e: mov qword ptr [rdi], r13  reg(16, 7fffbc8487f0)  mem(7fffbc8487e0, 7f02e71260b0) 
0x407a11: mov rax, qword ptr fs:[0x28]  reg(10, 1f4d610) 
0x407a1a: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848578, 7f02e6b27184) 
0x407a1f: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x407a21: test rsi, rsi  reg(4, 408ff6)  reg(4, 408ff6) 
0x407a24: jz 0x407aac
0x407a2a: mov rbx, rdi  reg(7, 7fffbc8487e0)  reg(3, 7fffbc8487e0) 
0x407a2d: mov rdi, rsi  reg(3, 7fffbc8487e0)  reg(4, 408ff6) 
0x407a30: mov r12, rsi  reg(15, 1f4d030)  reg(4, 408ff6) 
0x407a33: call 0x406cc0
strlen@plt: 408ff6 408ff6 1f4d600 7f02e6e67b20	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x407a38: cmp rax, 0xf  reg(10, a) 
0x407a3c: mov rbp, rax
0x407a3f: mov qword ptr [rsp], rax  reg(10, a)  mem(7fffbc848570, a) 
0x407a43: jnbe 0x407a7a
0x407a45: cmp rax, 0x1  reg(10, a) 
0x407a49: jz 0x407aa2
0x407a4b: test rax, rax  reg(10, a)  reg(10, a) 
0x407a4e: jnz 0x407ab8
0x407ab8: mov rdi, r13  reg(3, 408ff6)  reg(16, 7fffbc8487f0) 
0x407abb: jmp 0x407a95
0x407a95: mov rdx, rbp  reg(8, 0) 
0x407a98: mov rsi, r12  reg(4, e1)  reg(15, 408ff6) 
0x407a9b: call 0x406d50
memcpy@plt: 7fffbc8487f0 408ff6 a 0	memcpy@plt
0x406d50: jmp qword ptr [rip+0x204342]
memcpy: 7fffbc8487f0 408ff6 a 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 0	dlsym@plt
0x407aa0: jmp 0x407a50
0x407a50: mov rax, qword ptr [rsp]  reg(10, 7fffbc8487f0) 
0x407a54: mov rdx, qword ptr [rbx]  reg(8, a) 
0x407a57: mov qword ptr [rbx+0x8], rax  reg(10, a)  mem(7fffbc8487e8, 408ee0) 
0x407a5b: mov byte ptr [rdx+rax*1], 0x0  mem(7fffbc8487fa, b190000000000040) 
0x407a5f: mov rax, qword ptr [rsp+0x8]  reg(10, a) 
0x407a64: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x407a6d: jnz 0x407abd
0x407a6f: add rsp, 0x18
0x407a73: pop rbx  reg(7, 7fffbc8487e0) 
0x407a74: pop rbp
0x407a75: pop r12  reg(15, 408ff6) 
0x407a77: pop r13  reg(16, 7fffbc8487f0) 
0x407a79: ret 
0x407333: lea r13, ptr [rbp-0x250]  reg(16, 1f4d600) 
0x40733a: lea rdi, ptr [rbp-0x270]  reg(3, 7fffbc8487f0) 
0x407341: mov r9, qword ptr [rbp-0x2a8]  reg(12, 7f02e7b674e8) 
0x407348: mov r8, qword ptr [rbp-0x2a0]  reg(11, 0) 
0x40734f: mov rdx, rbx  reg(8, 7fffbc8487f0)  reg(7, 7fffbc8487e0) 
0x407352: mov rsi, r12  reg(4, 697461747374756f)  reg(15, 1f4d030) 
0x407355: mov rcx, r13  reg(9, 6e6f697461747374)  reg(16, 7fffbc848610) 
0x407358: call r15
memcpy: 1f4d660 7fffbc8487f0 a 7f02e6e67b20	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 7f02e6e67b20	dlsym@plt
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d640 409580 1f4bc20 1f4bc28	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d640) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d648, 100000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d640) 
0x408e16: ret 
opendnp3::TransportStack::TransportStack(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::ILinkListener> const&, unsigned int, opendnp3::LinkLayerConfig const&): 1f4d708 7fffbc848510 7fffbc848380 7fffbc848370	_ZN8opendnp314TransportStackC2ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_13ILinkListenerEEjRKNS_15LinkLayerConfigE
0x7f02e7704d30: push r15  reg(18, 7fffbc848390) 
0x7f02e7704d32: push r14  reg(17, 7fffbc848620) 
0x7f02e7704d34: mov r15, r9  reg(18, 7fffbc848390)  reg(12, 7fffbc848390) 
0x7f02e7704d37: push r13  reg(16, 1f4d068) 
0x7f02e7704d39: push r12  reg(15, 7fffbc848510) 
0x7f02e7704d3b: mov r13, rdx  reg(16, 1f4d068)  reg(8, 7fffbc848380) 
0x7f02e7704d3e: push rbp
0x7f02e7704d3f: push rbx  reg(7, 1f4d690) 
0x7f02e7704d40: mov rbx, rdi  reg(7, 1f4d690)  reg(3, 1f4d708) 
0x7f02e7704d43: mov r12, rsi  reg(15, 7fffbc848510)  reg(4, 7fffbc848510) 
0x7f02e7704d46: mov r14, rcx  reg(17, 7fffbc848620)  reg(9, 7fffbc848370) 
0x7f02e7704d49: sub rsp, 0x38
0x7f02e7704d4d: mov qword ptr [rdi], 0x0  mem(1f4d708, 0) 
0x7f02e7704d54: mov qword ptr [rdi+0x8], 0x0  mem(1f4d710, 0) 
0x7f02e7704d5c: mov edi, 0x228  reg(45, 1f4d708) 
0x7f02e7704d61: mov dword ptr [rsp+0xc], r8d  reg(61, 800)  mem(7fffbc8482dc, bc84837000000000) 
0x7f02e7704d66: mov rax, qword ptr fs:[0x28]  reg(10, 7fffbc848370) 
0x7f02e7704d6f: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc8482f8, 7fffbc848510) 
0x7f02e7704d74: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e7704d76: call 0x7f02e76a6020
operator new(unsigned long)@plt: 228 7fffbc848510 7fffbc848380 7fffbc848370	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e76a6026: push 0x1ef 
0x7f02e76a602b: jmp 0x7f02e76a4120
0x7f02e7704d7b: mov rbp, rax
0x7f02e7704d7e: mov dword ptr [rax+0x8], 0x1  mem(1f4dc78, 0) 
0x7f02e7704d85: mov dword ptr [rax+0xc], 0x1  mem(1f4dc7c, 0) 
0x7f02e7704d8c: mov rax, qword ptr [rip+0x2385cd]  reg(10, 1f4dc70) 
0x7f02e7704d93: mov r8d, dword ptr [rsp+0xc]  reg(61, 800) 
0x7f02e7704d98: lea rdi, ptr [rbp+0x10]  reg(3, 1) 
0x7f02e7704d9c: mov rsi, r12  reg(4, 1f4de90)  reg(15, 7fffbc848510) 
0x7f02e7704d9f: add rax, 0x10  reg(10, 7f02e793ca38) 
0x7f02e7704da3: mov edx, r8d  reg(54, 1f4dc70)  reg(61, 800) 
0x7f02e7704da6: mov qword ptr [rbp], rax  reg(10, 7f02e793ca48)  mem(1f4dc70, 0) 
0x7f02e7704daa: call 0x7f02e76a4f80
opendnp3::TransportLayer::TransportLayer(openpal::Logger const&, unsigned int)@plt: 1f4dc80 7fffbc848510 800 7f02e6e67b20	_ZN8opendnp314TransportLayerC1ERKN7openpal6LoggerEj@plt
0x7f02e76a4f80: jmp qword ptr [rip+0x2997ba]
0x7f02e76a4f86: push 0xe5 
0x7f02e76a4f8b: jmp 0x7f02e76a4120
opendnp3::TransportLayer::TransportLayer(openpal::Logger const&, unsigned int): 1f4dc80 7fffbc848510 800 7f02e6e67b20	_ZN8opendnp314TransportLayerC1ERKN7openpal6LoggerEj
0x7f02e7703d80: mov rax, qword ptr [rip+0x239439]  reg(10, 7f02e793ca48) 
0x7f02e7703d87: push r12  reg(15, 7fffbc848510) 
0x7f02e7703d89: push rbp
0x7f02e7703d8a: push rbx  reg(7, 1f4d708) 
0x7f02e7703d8b: mov rbp, rsi
0x7f02e7703d8e: mov rbx, rdi  reg(7, 1f4d708)  reg(3, 1f4dc80) 
0x7f02e7703d91: lea rcx, ptr [rax+0x10]  reg(9, 7f02e6e67b20) 
0x7f02e7703d95: add rax, 0x58  reg(10, 7f02e793c998) 
0x7f02e7703d99: mov qword ptr [rdi+0x8], rax  reg(10, 7f02e793c9f0)  mem(1f4dc88, 0) 
0x7f02e7703d9d: mov rax, qword ptr [rsi]  reg(10, 7f02e793c9f0) 
0x7f02e7703da0: mov qword ptr [rdi], rcx  reg(9, 7f02e793c9a8)  mem(1f4dc80, 0) 
0x7f02e7703da3: mov qword ptr [rdi+0x10], rax  reg(10, 1f4bc30)  mem(1f4dc90, 0) 
0x7f02e7703da7: mov rax, qword ptr [rsi+0x8]  reg(10, 1f4bc30) 
0x7f02e7703dab: test rax, rax  reg(10, 1f4bc20)  reg(10, 1f4bc20) 
0x7f02e7703dae: mov qword ptr [rdi+0x18], rax  reg(10, 1f4bc20)  mem(1f4dc98, 0) 
0x7f02e7703db2: jz 0x7f02e7703e40
0x7f02e7703db8: cmp qword ptr [rip+0x2397b0], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e7703dc0: jz 0x7f02e7703e20
0x7f02e7703dc2: lock add dword ptr [rax+0x8], 0x1  mem(1f4bc28, 100000007) 
0x7f02e7703dc7: mov rcx, qword ptr [rsi+0x18]  reg(9, 7f02e793c9a8) 
0x7f02e7703dcb: mov rax, qword ptr [rsi+0x10]  reg(10, 1f4bc20) 
0x7f02e7703dcf: test rcx, rcx  reg(9, 1f4d640)  reg(9, 1f4d640) 
0x7f02e7703dd2: mov qword ptr [rdi+0x20], rax  reg(10, 1f4d650)  mem(1f4dca0, 0) 
0x7f02e7703dd6: mov qword ptr [rdi+0x28], rcx  reg(9, 1f4d640)  mem(1f4dca8, 0) 
0x7f02e7703dda: lea rax, ptr [rcx+0x8]  reg(10, 1f4d650) 
0x7f02e7703dde: jz 0x7f02e7703de4
0x7f02e7703de0: lock add dword ptr [rax], 0x1  mem(1f4d648, 100000002) 
0x7f02e7703de4: lea r12, ptr [rbx+0x48]  reg(15, 7fffbc848510) 
0x7f02e7703de8: mov qword ptr [rbx+0x30], 0x0  mem(1f4dcb0, 0) 
0x7f02e7703df0: mov qword ptr [rbx+0x38], 0x0  mem(1f4dcb8, 0) 
0x7f02e7703df8: mov byte ptr [rbx+0x40], 0x0  mem(1f4dcc0, 0) 
0x7f02e7703dfc: mov byte ptr [rbx+0x41], 0x0  mem(1f4dcc1, 0) 
0x7f02e7703e00: mov rsi, rbp  reg(4, 7fffbc848510) 
0x7f02e7703e03: mov rdi, r12  reg(3, 1f4dc80)  reg(15, 1f4dcc8) 
0x7f02e7703e06: call 0x7f02e76a79e0
opendnp3::TransportRx::TransportRx(openpal::Logger const&, unsigned int)@plt: 1f4dcc8 7fffbc848510 800 1f4d640	_ZN8opendnp311TransportRxC1ERKN7openpal6LoggerEj@plt
0x7f02e76a79e0: jmp qword ptr [rip+0x29828a]
0x7f02e76a79e6: push 0x38b 
0x7f02e76a79eb: jmp 0x7f02e76a4120
opendnp3::TransportRx::TransportRx(openpal::Logger const&, unsigned int): 1f4dcc8 7fffbc848510 800 1f4d640	_ZN8opendnp311TransportRxC2ERKN7openpal6LoggerEj
0x7f02e7704710: push rbp
0x7f02e7704711: push rbx  reg(7, 1f4dc80) 
0x7f02e7704712: mov rbx, rdi  reg(7, 1f4dc80)  reg(3, 1f4dcc8) 
0x7f02e7704715: sub rsp, 0x8
0x7f02e7704719: mov rax, qword ptr [rsi]  reg(10, 1f4d648) 
0x7f02e770471c: mov qword ptr [rdi], rax  reg(10, 1f4bc30)  mem(1f4dcc8, 0) 
0x7f02e770471f: mov rax, qword ptr [rsi+0x8]  reg(10, 1f4bc30) 
0x7f02e7704723: test rax, rax  reg(10, 1f4bc20)  reg(10, 1f4bc20) 
0x7f02e7704726: mov qword ptr [rdi+0x8], rax  reg(10, 1f4bc20)  mem(1f4dcd0, 0) 
0x7f02e770472a: jz 0x7f02e77047d0
0x7f02e7704730: cmp qword ptr [rip+0x238e38], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e7704738: jz 0x7f02e77047b0
0x7f02e770473a: lock add dword ptr [rax+0x8], 0x1  mem(1f4bc28, 100000008) 
0x7f02e770473f: mov rcx, qword ptr [rsi+0x18]  reg(9, 1f4d640) 
0x7f02e7704743: mov rax, qword ptr [rsi+0x10]  reg(10, 1f4bc20) 
0x7f02e7704747: test rcx, rcx  reg(9, 1f4d640)  reg(9, 1f4d640) 
0x7f02e770474a: mov qword ptr [rdi+0x10], rax  reg(10, 1f4d650)  mem(1f4dcd8, 0) 
0x7f02e770474e: mov qword ptr [rdi+0x18], rcx  reg(9, 1f4d640)  mem(1f4dce0, 0) 
0x7f02e7704752: lea rax, ptr [rcx+0x8]  reg(10, 1f4d650) 
0x7f02e7704756: jz 0x7f02e770475c
0x7f02e7704758: lock add dword ptr [rax], 0x1  mem(1f4d648, 100000003) 
0x7f02e770475c: lea rdi, ptr [rbx+0x38]  reg(3, 1f4dcc8) 
0x7f02e7704760: mov dword ptr [rbx+0x20], 0x0  mem(1f4dce8, 0) 
0x7f02e7704767: mov dword ptr [rbx+0x24], 0x0  mem(1f4dcec, 0) 
0x7f02e770476e: mov dword ptr [rbx+0x28], 0x0  mem(1f4dcf0, 0) 
0x7f02e7704775: mov dword ptr [rbx+0x2c], 0x0  mem(1f4dcf4, 0) 
0x7f02e770477c: mov esi, edx  reg(47, 7fffbc848510)  reg(54, 800) 
0x7f02e770477e: mov dword ptr [rbx+0x30], 0x0  mem(1f4dcf8, 0) 
0x7f02e7704785: call 0x7f02e76a7740
openpal::Buffer::Buffer(unsigned int)@plt: 1f4dd00 800 800 1f4d640	_ZN7openpal6BufferC1Ej@plt
0x7f02e76a7740: jmp qword ptr [rip+0x2983da]
0x7f02e76a7746: push 0x361 
0x7f02e76a774b: jmp 0x7f02e76a4120
0x7f02e770478a: xor eax, eax  reg(56, 7f02e7612cd8)  reg(56, 7f02e7612cd8) 
0x7f02e770478c: xor edx, edx  reg(54, 800)  reg(54, 800) 
0x7f02e770478e: mov dword ptr [rbx+0x50], 0x0  mem(1f4dd18, 0) 
0x7f02e7704795: mov word ptr [rbx+0x54], ax  reg(29, 0)  mem(1f4dd1c, 0) 
0x7f02e7704799: mov word ptr [rbx+0x56], dx  reg(35, 0)  mem(1f4dd1e, 0) 
0x7f02e770479d: mov byte ptr [rbx+0x58], 0x0  mem(1f4dd20, 0) 
0x7f02e77047a1: add rsp, 0x8
0x7f02e77047a5: pop rbx  reg(7, 1f4dcc8) 
0x7f02e77047a6: pop rbp
0x7f02e77047a7: ret 
0x7f02e7703e0b: lea rdi, ptr [rbx+0xa8]  reg(3, 1f4e640) 
0x7f02e7703e12: mov rsi, rbp  reg(4, 1f4e6a0) 
0x7f02e7703e15: call 0x7f02e76a5b60
opendnp3::TransportTx::TransportTx(openpal::Logger const&)@plt: 1f4dd28 7fffbc848510 0 ffffffe0	_ZN8opendnp311TransportTxC1ERKN7openpal6LoggerE@plt
0x7f02e76a5b60: jmp qword ptr [rip+0x2991ca]
0x7f02e76a5b66: push 0x1a3 
0x7f02e76a5b6b: jmp 0x7f02e76a4120
opendnp3::TransportTx::TransportTx(openpal::Logger const&): 1f4dd28 7fffbc848510 0 ffffffe0	_ZN8opendnp311TransportTxC2ERKN7openpal6LoggerE
0x7f02e77058d0: push rbp
0x7f02e77058d1: push rbx  reg(7, 1f4dc80) 
0x7f02e77058d2: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e77058d4: mov rbx, rdi  reg(7, 1f4dc80)  reg(3, 1f4dd28) 
0x7f02e77058d7: add rdi, 0x10  reg(3, 1f4dd28) 
0x7f02e77058db: mov rbp, rsi
0x7f02e77058de: sub rsp, 0x8
0x7f02e77058e2: mov rax, qword ptr [rip+0x23847f]  reg(10, 0) 
0x7f02e77058e9: mov word ptr [rdi-0x6], dx  reg(35, 0)  mem(1f4dd32, 0) 
0x7f02e77058ed: add rax, 0x10  reg(10, 7f02e793cb00) 
0x7f02e77058f1: mov qword ptr [rdi-0x10], rax  reg(10, 7f02e793cb10)  mem(1f4dd28, 0) 
0x7f02e77058f5: xor eax, eax  reg(56, 7f02e793cb10)  reg(56, 7f02e793cb10) 
0x7f02e77058f7: mov word ptr [rdi-0x8], ax  reg(29, 0)  mem(1f4dd30, 0) 
0x7f02e77058fb: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4dd38 7fffbc848510 0 ffffffe0	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e7705900: lea rdi, ptr [rbx+0x28]  reg(3, 1f4dd38) 
0x7f02e7705904: mov byte ptr [rbx+0x20], 0x0  mem(1f4dd48, 0) 
0x7f02e7705908: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4dd50 7fffbc848510 0 ffffffe0	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e770590d: mov rax, qword ptr [rip+0x238404]  reg(10, 0) 
0x7f02e7705914: add rax, 0x10  reg(10, 7f02e793cae0) 
0x7f02e7705918: mov qword ptr [rbx+0x38], rax  reg(10, 7f02e793caf0)  mem(1f4dd60, 0) 
0x7f02e770591c: mov rax, qword ptr [rbp]  reg(10, 7f02e793caf0) 
0x7f02e7705920: mov qword ptr [rbx+0x140], rax  reg(10, 1f4bc30)  mem(1f4de68, 0) 
0x7f02e7705927: mov rax, qword ptr [rbp+0x8]  reg(10, 1f4bc30) 
0x7f02e770592b: test rax, rax  reg(10, 1f4bc20)  reg(10, 1f4bc20) 
0x7f02e770592e: mov qword ptr [rbx+0x148], rax  reg(10, 1f4bc20)  mem(1f4de70, 0) 
0x7f02e7705935: jz 0x7f02e77059b8
0x7f02e770593b: cmp qword ptr [rip+0x237c2d], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e7705943: jz 0x7f02e7705990
0x7f02e7705945: lock add dword ptr [rax+0x8], 0x1  mem(1f4bc28, 100000009) 
0x7f02e770594a: mov rdx, qword ptr [rbp+0x18]  reg(8, 0) 
0x7f02e770594e: mov rax, qword ptr [rbp+0x10]  reg(10, 1f4bc20) 
0x7f02e7705952: test rdx, rdx  reg(8, 1f4d640)  reg(8, 1f4d640) 
0x7f02e7705955: mov qword ptr [rbx+0x150], rax  reg(10, 1f4d650)  mem(1f4de78, 0) 
0x7f02e770595c: mov qword ptr [rbx+0x158], rdx  reg(8, 1f4d640)  mem(1f4de80, 0) 
0x7f02e7705963: lea rax, ptr [rdx+0x8]  reg(10, 1f4d650) 
0x7f02e7705967: jz 0x7f02e770596d
0x7f02e7705969: lock add dword ptr [rax], 0x1  mem(1f4d648, 100000004) 
0x7f02e770596d: mov dword ptr [rbx+0x160], 0x0  mem(1f4de88, 0) 
0x7f02e7705977: mov byte ptr [rbx+0x164], 0x0  mem(1f4de8c, 0) 
0x7f02e770597e: mov dword ptr [rbx+0x168], 0x0  mem(1f4de90, 0) 
0x7f02e7705988: add rsp, 0x8
0x7f02e770598c: pop rbx  reg(7, 1f4dd28) 
0x7f02e770598d: pop rbp
0x7f02e770598e: ret 
0x7f02e7703e1a: pop rbx  reg(7, 1f4dc80) 
0x7f02e7703e1b: pop rbp
0x7f02e7703e1c: pop r12  reg(15, 1f4dcc8) 
0x7f02e7703e1e: ret 
0x7f02e7704daf: mov rax, qword ptr [rbp]  reg(10, 1f4d648) 
0x7f02e7704db3: mov rdi, rbp  reg(3, 1f4dd50) 
0x7f02e7704db6: mov qword ptr [rbx+0x8], rbp  mem(1f4d710, 0) 
0x7f02e7704dba: mov rsi, qword ptr [rip+0x238c3f]  reg(4, 7fffbc848510) 
0x7f02e7704dc1: call qword ptr [rax+0x20]
std::_Sp_counted_ptr_inplace<opendnp3::TransportLayer, std::allocator<opendnp3::TransportLayer>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): 1f4dc70 60a980 1f4d640 ffffffe0	_ZNSt23_Sp_counted_ptr_inplaceIN8opendnp314TransportLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
0x7f02e7704fb0: mov rdx, rdi  reg(8, 1f4d640)  reg(3, 1f4dc70) 
0x7f02e7704fb3: mov rsi, qword ptr [rsi+0x8]  reg(4, 60a980) 
0x7f02e7704fb7: mov rdi, qword ptr [rip+0x23877a]  reg(3, 1f4dc70) 
0x7f02e7704fbe: cmp rsi, rdi  reg(4, 409580)  reg(3, 409580) 
0x7f02e7704fc1: jz 0x7f02e7704fd3
0x7f02e7704fd3: lea rax, ptr [rdx+0x10]  reg(10, 7f02e793ca48) 
0x7f02e7704fd7: ret 
0x7f02e7704dc4: mov qword ptr [rbx+0x10], 0x0  mem(1f4d718, 0) 
0x7f02e7704dcc: mov qword ptr [rbx], rax  reg(10, 1f4dc80)  mem(1f4d708, 0) 
0x7f02e7704dcf: mov edi, 0x280  reg(45, 409580) 
0x7f02e7704dd4: mov qword ptr [rbx+0x18], 0x0  mem(1f4d720, 0) 
0x7f02e7704ddc: call 0x7f02e76a6020
operator new(unsigned long)@plt: 280 409580 1f4dc70 ffffffe0	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e7704de1: mov rbp, rax
0x7f02e7704de4: mov dword ptr [rax+0x8], 0x1  mem(1f4e6b8, 0) 
0x7f02e7704deb: mov dword ptr [rax+0xc], 0x1  mem(1f4e6bc, 0) 
0x7f02e7704df2: mov rax, qword ptr [rip+0x2381bf]  reg(10, 1f4e6b0) 
0x7f02e7704df9: lea rdi, ptr [rbp+0x10]  reg(3, 1) 
0x7f02e7704dfd: add rax, 0x10  reg(10, 7f02e793ca70) 
0x7f02e7704e01: mov qword ptr [rbp], rax  reg(10, 7f02e793ca80)  mem(1f4e6b0, 0) 
0x7f02e7704e05: mov rax, qword ptr [rbx]  reg(10, 7f02e793ca80) 
0x7f02e7704e08: mov qword ptr [rsp+0x10], rax  reg(10, 1f4dc80)  mem(7fffbc8482e0, 7fffbc848370) 
0x7f02e7704e0d: mov rax, qword ptr [rbx+0x8]  reg(10, 1f4dc80) 
0x7f02e7704e11: test rax, rax  reg(10, 1f4dc70)  reg(10, 1f4dc70) 
0x7f02e7704e14: mov qword ptr [rsp+0x18], rax  reg(10, 1f4dc70)  mem(7fffbc8482e8, 7fffbc848370) 
0x7f02e7704e19: jz 0x7f02e7704e2e
0x7f02e7704e1b: cmp qword ptr [rip+0x23874d], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e7704e23: jz 0x7f02e7704eb0
0x7f02e7704e29: lock add dword ptr [rax+0x8], 0x1  mem(1f4dc78, 100000001) 
0x7f02e7704e2e: lea rcx, ptr [rsp+0x10]  reg(9, 7f02e6e67b20) 
0x7f02e7704e33: mov r9, r15  reg(12, 7fffbc848390)  reg(18, 7fffbc848390) 
0x7f02e7704e36: mov r8, r14  reg(11, 800)  reg(17, 7fffbc848370) 
0x7f02e7704e39: mov rdx, r13  reg(8, 1f4e6b0)  reg(16, 7fffbc848380) 
0x7f02e7704e3c: mov rsi, r12  reg(4, 1f4e930)  reg(15, 7fffbc848510) 
0x7f02e7704e3f: call 0x7f02e76a6a00
opendnp3::LinkLayer::LinkLayer(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::LinkLayerConfig const&)@plt: 1f4e6c0 7fffbc848510 7fffbc848380 7fffbc8482e0	_ZN8opendnp39LinkLayerC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERKNS_15LinkLayerConfigE@plt
0x7f02e76a6a00: jmp qword ptr [rip+0x298a7a]
0x7f02e76a6a06: push 0x28d 
0x7f02e76a6a0b: jmp 0x7f02e76a4120
opendnp3::LinkLayer::LinkLayer(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::LinkLayerConfig const&): 1f4e6c0 7fffbc848510 7fffbc848380 7fffbc8482e0	_ZN8opendnp39LinkLayerC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERKNS_15LinkLayerConfigE
0x7f02e76be7b0: sub rsp, 0x10
0x7f02e76be7b4: mov rax, rdi  reg(10, 1f4dc70)  reg(3, 1f4e6c0) 
0x7f02e76be7b7: mov rdi, qword ptr [rip+0x27ec0a]  reg(3, 1f4e6c0) 
0x7f02e76be7be: push r9  reg(12, 7fffbc848390) 
0x7f02e76be7c0: lea r9, ptr [rax+0x8]  reg(12, 7fffbc848390) 
0x7f02e76be7c4: lea r10, ptr [rdi+0x10]  reg(13, bd1) 
0x7f02e76be7c8: add rdi, 0x58  reg(3, 7f02e7937bd8) 
0x7f02e76be7cc: mov qword ptr [rax+0x8], rdi  reg(3, 7f02e7937c30)  mem(1f4e6c8, 0) 
0x7f02e76be7d0: lea rdi, ptr [rax+0x10]  reg(3, 7f02e7937c30) 
0x7f02e76be7d4: mov qword ptr [rax], r10  reg(13, 7f02e7937be8)  mem(1f4e6c0, 0) 
0x7f02e76be7d7: call 0x7f02e76a5870
opendnp3::LinkContext::LinkContext(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::ILinkSession&, opendnp3::LinkLayerConfig const&)@plt: 1f4e6d0 7fffbc848510 7fffbc848380 7fffbc8482e0	_ZN8opendnp311LinkContextC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERNS_12ILinkSessionERKNS_15LinkLayerConfigE@plt
0x7f02e76a5870: jmp qword ptr [rip+0x299342]
0x7f02e76a5876: push 0x174 
0x7f02e76a587b: jmp 0x7f02e76a4120
opendnp3::LinkContext::LinkContext(openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::IUpperLayer> const&, std::shared_ptr<opendnp3::ILinkListener> const&, opendnp3::ILinkSession&, opendnp3::LinkLayerConfig const&): 1f4e6d0 7fffbc848510 7fffbc848380 7fffbc8482e0	_ZN8opendnp311LinkContextC1ERKN7openpal6LoggerERKSt10shared_ptrINS1_9IExecutorEERKS5_INS_11IUpperLayerEERKS5_INS_13ILinkListenerEERNS_12ILinkSessionERKNS_15LinkLayerConfigE
0x7f02e76bd580: push r15  reg(18, 7fffbc848390) 
0x7f02e76bd582: push r14  reg(17, 7fffbc848370) 
0x7f02e76bd584: mov r15, rcx  reg(18, 7fffbc848390)  reg(9, 7fffbc8482e0) 
0x7f02e76bd587: push r13  reg(16, 7fffbc848380) 
0x7f02e76bd589: push r12  reg(15, 7fffbc848510) 
0x7f02e76bd58b: mov r13, rsi  reg(16, 7fffbc848380)  reg(4, 7fffbc848510) 
0x7f02e76bd58e: push rbp
0x7f02e76bd58f: push rbx  reg(7, 1f4d708) 
0x7f02e76bd590: mov rbx, rdi  reg(7, 1f4d708)  reg(3, 1f4e6d0) 
0x7f02e76bd593: lea rdi, ptr [rdi+0x150]  reg(3, 1f4e6d0) 
0x7f02e76bd59a: mov rbp, rdx
0x7f02e76bd59d: mov r14, r8  reg(17, 7fffbc848370)  reg(11, 7fffbc848370) 
0x7f02e76bd5a0: sub rsp, 0x18
0x7f02e76bd5a4: mov rax, qword ptr [rip+0x27ff0d]  reg(10, 1f4e6c0) 
0x7f02e76bd5ab: mov byte ptr [rdi-0x8], 0x0  mem(1f4e818, 0) 
0x7f02e76bd5af: mov qword ptr [rsp+0x8], r9  reg(12, 1f4e6c8)  mem(7fffbc848268, 7fffbc848370) 
0x7f02e76bd5b4: mov r12, qword ptr [rsp+0x50]  reg(15, 7fffbc848510) 
0x7f02e76bd5b9: add rax, 0x10  reg(10, 7f02e7937b28) 
0x7f02e76bd5bd: mov qword ptr [rdi-0x150], rax  reg(10, 7f02e7937b38)  mem(1f4e6d0, 0) 
0x7f02e76bd5c4: mov rax, qword ptr [rip+0x280865]  reg(10, 7f02e7937b38) 
0x7f02e76bd5cb: add rax, 0x10  reg(10, 7f02e7937b48) 
0x7f02e76bd5cf: mov qword ptr [rdi-0x20], rax  reg(10, 7f02e7937b58)  mem(1f4e800, 0) 
0x7f02e76bd5d3: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4e820 7fffbc848510 7fffbc848380 7fffbc8482e0	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e76bd5d8: lea rdi, ptr [rbx+0x168]  reg(3, 1f4e820) 
0x7f02e76bd5df: mov byte ptr [rbx+0x160], 0x0  mem(1f4e830, 0) 
0x7f02e76bd5e6: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4e838 7fffbc848510 7fffbc848380 7fffbc8482e0	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e76bd5eb: mov rax, qword ptr [r13]  reg(10, 7f02e7937b58) 
0x7f02e76bd5ef: mov qword ptr [rbx+0x178], rax  reg(10, 1f4bc30)  mem(1f4e848, 0) 
0x7f02e76bd5f6: mov rax, qword ptr [r13+0x8]  reg(10, 1f4bc30) 
0x7f02e76bd5fa: test rax, rax  reg(10, 1f4bc20)  reg(10, 1f4bc20) 
0x7f02e76bd5fd: mov qword ptr [rbx+0x180], rax  reg(10, 1f4bc20)  mem(1f4e850, 0) 
0x7f02e76bd604: jz 0x7f02e76bd968
0x7f02e76bd60a: cmp qword ptr [rip+0x27ff5e], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bd612: jz 0x7f02e76bd7d8
0x7f02e76bd618: lock add dword ptr [rax+0x8], 0x1  mem(1f4bc28, 10000000a) 
0x7f02e76bd61d: mov rdx, qword ptr [r13+0x18]  reg(8, 7fffbc848380) 
0x7f02e76bd621: mov rax, qword ptr [r13+0x10]  reg(10, 1f4bc20) 
0x7f02e76bd625: test rdx, rdx  reg(8, 1f4d640)  reg(8, 1f4d640) 
0x7f02e76bd628: mov qword ptr [rbx+0x188], rax  reg(10, 1f4d650)  mem(1f4e858, 0) 
0x7f02e76bd62f: mov qword ptr [rbx+0x190], rdx  reg(8, 1f4d640)  mem(1f4e860, 0) 
0x7f02e76bd636: lea rax, ptr [rdx+0x8]  reg(10, 1f4d650) 
0x7f02e76bd63a: jz 0x7f02e76bd8b0
0x7f02e76bd640: lock add dword ptr [rax], 0x1  mem(1f4d648, 100000005) 
0x7f02e76bd644: mov rax, qword ptr [r12]  reg(10, 1f4d648) 
0x7f02e76bd648: mov rdx, qword ptr [rbp+0x8]  reg(8, 1f4d640) 
0x7f02e76bd64c: mov qword ptr [rbx+0x198], rax  reg(10, 0)  mem(1f4e868, 0) 
0x7f02e76bd653: mov rax, qword ptr [r12+0x8]  reg(10, 0) 
0x7f02e76bd658: test rdx, rdx  reg(8, 1f4c3a0)  reg(8, 1f4c3a0) 
0x7f02e76bd65b: mov qword ptr [rbx+0x1a0], rax  reg(10, 1000a)  mem(1f4e870, 0) 
0x7f02e76bd662: mov rax, qword ptr [r12+0x10]  reg(10, 1000a) 
0x7f02e76bd667: mov qword ptr [rbx+0x1a8], rax  reg(10, 3e8)  mem(1f4e878, 0) 
0x7f02e76bd66e: mov rax, qword ptr [r12+0x18]  reg(10, 3e8) 
0x7f02e76bd673: mov qword ptr [rbx+0x1b0], rax  reg(10, 7fffffffffffffff)  mem(1f4e880, 0) 
0x7f02e76bd67a: mov rax, qword ptr [r12+0x20]  reg(10, 7fffffffffffffff) 
0x7f02e76bd67f: mov qword ptr [rbx+0x1c0], 0x0  mem(1f4e890, 0) 
0x7f02e76bd68a: mov byte ptr [rbx+0x1c8], 0x0  mem(1f4e898, 0) 
0x7f02e76bd691: mov dword ptr [rbx+0x1cc], 0x0  mem(1f4e89c, 0) 
0x7f02e76bd69b: mov qword ptr [rbx+0x1b8], rax  reg(10, 0)  mem(1f4e888, 0) 
0x7f02e76bd6a2: mov rax, qword ptr [rbp]  reg(10, 0) 
0x7f02e76bd6a6: mov qword ptr [rbx+0x1d8], rdx  reg(8, 1f4c3a0)  mem(1f4e8a8, 0) 
0x7f02e76bd6ad: mov qword ptr [rbx+0x1d0], rax  reg(10, 1f4c3b0)  mem(1f4e8a0, 0) 
0x7f02e76bd6b4: lea rax, ptr [rdx+0x8]  reg(10, 1f4c3b0) 
0x7f02e76bd6b8: jz 0x7f02e76bd6be
0x7f02e76bd6ba: lock add dword ptr [rax], 0x1  mem(1f4c3a8, 200000005) 
0x7f02e76bd6be: lea r13, ptr [rbx+0x1e0]  reg(16, 7fffbc848510) 
0x7f02e76bd6c5: mov rsi, qword ptr [rbp]  reg(4, 7fffbc848510) 
0x7f02e76bd6c9: mov rdi, r13  reg(3, 1f4e838)  reg(16, 1f4e8b0) 
0x7f02e76bd6cc: call 0x7f02e76a4480
openpal::TimerRef::TimerRef(openpal::IExecutor&)@plt: 1f4e8b0 1f4c3b0 1f4c3a0 7fffbc8482e0	_ZN7openpal8TimerRefC1ERNS_9IExecutorE@plt
0x7f02e76a4480: jmp qword ptr [rip+0x299d3a]
0x7f02e76bd6d1: lea r12, ptr [rbx+0x1f0]  reg(15, 7fffbc848390) 
0x7f02e76bd6d8: mov rsi, qword ptr [rbp]  reg(4, 1f4c3b0) 
0x7f02e76bd6dc: mov rdi, r12  reg(3, 1f4e8b0)  reg(15, 1f4e8c0) 
0x7f02e76bd6df: call 0x7f02e76a4480
openpal::TimerRef::TimerRef(openpal::IExecutor&)@plt: 1f4e8c0 1f4c3b0 1f4c3a0 7fffbc8482e0	_ZN7openpal8TimerRefC1ERNS_9IExecutorE@plt
0x7f02e76a4480: jmp qword ptr [rip+0x299d3a]
0x7f02e76bd6e4: mov rdi, qword ptr [rbp]  reg(3, 1f4e8c0) 
0x7f02e76bd6e8: mov byte ptr [rbx+0x200], 0x0  mem(1f4e8d0, 0) 
0x7f02e76bd6ef: mov byte ptr [rbx+0x201], 0x0  mem(1f4e8d1, 0) 
0x7f02e76bd6f6: mov byte ptr [rbx+0x202], 0x0  mem(1f4e8d2, 0) 
0x7f02e76bd6fd: mov byte ptr [rbx+0x203], 0x0  mem(1f4e8d3, 0) 
0x7f02e76bd704: mov byte ptr [rbx+0x204], 0x0  mem(1f4e8d4, 0) 
0x7f02e76bd70b: mov rax, qword ptr [rdi]  reg(10, 1f4c3a8) 
0x7f02e76bd70e: call qword ptr [rax+0x10]
0x7f02e76bd711: mov qword ptr [rbx+0x208], rax  reg(10, 9882fd09)  mem(1f4e8d8, 0) 
0x7f02e76bd718: mov rax, qword ptr [rip+0x27ff01]  reg(10, 9882fd09) 
0x7f02e76bd71f: mov dword ptr [rbx+0x210], 0x0  mem(1f4e8e0, 0) 
0x7f02e76bd729: mov dword ptr [rbx+0x214], 0x0  mem(1f4e8e4, 0) 
0x7f02e76bd733: mov dword ptr [rbx+0x218], 0x0  mem(1f4e8e8, 0) 
0x7f02e76bd73d: mov dword ptr [rbx+0x21c], 0x0  mem(1f4e8ec, 0) 
0x7f02e76bd747: mov qword ptr [rbx+0x228], rax  reg(10, 7f02e79404b0)  mem(1f4e8f8, 0) 
0x7f02e76bd74e: mov rax, qword ptr [rip+0x2805bb]  reg(10, 7f02e79404b0) 
0x7f02e76bd755: mov qword ptr [rbx+0x220], 0x0  mem(1f4e8f0, 0) 
0x7f02e76bd760: mov qword ptr [rbx+0x230], rax  reg(10, 7f02e79404d0)  mem(1f4e900, 0) 
0x7f02e76bd767: mov rax, qword ptr [r14]  reg(10, 7f02e79404d0) 
0x7f02e76bd76a: mov qword ptr [rbx+0x238], rax  reg(10, 1f4d5f0)  mem(1f4e908, 0) 
0x7f02e76bd771: mov rax, qword ptr [r14+0x8]  reg(10, 1f4d5f0) 
0x7f02e76bd775: test rax, rax  reg(10, 1f4d5e0)  reg(10, 1f4d5e0) 
0x7f02e76bd778: mov qword ptr [rbx+0x240], rax  reg(10, 1f4d5e0)  mem(1f4e910, 0) 
0x7f02e76bd77f: jz 0x7f02e76bd930
0x7f02e76bd785: cmp qword ptr [rip+0x27fde3], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bd78d: jz 0x7f02e76bd880
0x7f02e76bd793: lock add dword ptr [rax+0x8], 0x1  mem(1f4d5e8, 100000002) 
0x7f02e76bd798: mov rdx, qword ptr [r15+0x8]  reg(8, 0) 
0x7f02e76bd79c: mov rax, qword ptr [r15]  reg(10, 1f4d5e0) 
0x7f02e76bd79f: test rdx, rdx  reg(8, 1f4dc70)  reg(8, 1f4dc70) 
0x7f02e76bd7a2: mov qword ptr [rbx+0x248], rax  reg(10, 1f4dc80)  mem(1f4e918, 0) 
0x7f02e76bd7a9: mov qword ptr [rbx+0x250], rdx  reg(8, 1f4dc70)  mem(1f4e920, 0) 
0x7f02e76bd7b0: lea rax, ptr [rdx+0x8]  reg(10, 1f4dc80) 
0x7f02e76bd7b4: jz 0x7f02e76bd7ba
0x7f02e76bd7b6: lock add dword ptr [rax], 0x1  mem(1f4dc78, 100000002) 
0x7f02e76bd7ba: mov rax, qword ptr [rsp+0x8]  reg(10, 1f4dc78) 
0x7f02e76bd7bf: mov qword ptr [rbx+0x258], rax  reg(10, 1f4e6c8)  mem(1f4e928, 0) 
0x7f02e76bd7c6: add rsp, 0x18
0x7f02e76bd7ca: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bd7cb: pop rbp
0x7f02e76bd7cc: pop r12  reg(15, 1f4e8c0) 
0x7f02e76bd7ce: pop r13  reg(16, 1f4e8b0) 
0x7f02e76bd7d0: pop r14  reg(17, 7fffbc848370) 
0x7f02e76bd7d2: pop r15  reg(18, 7fffbc8482e0) 
0x7f02e76bd7d4: ret 
0x7f02e76be7dc: add rsp, 0x18
0x7f02e76be7e0: ret 
0x7f02e7704e44: mov r12, qword ptr [rsp+0x18]  reg(15, 7fffbc848510) 
0x7f02e7704e49: test r12, r12  reg(15, 1f4dc70)  reg(15, 1f4dc70) 
0x7f02e7704e4c: jz 0x7f02e7704e65
0x7f02e7704e4e: cmp qword ptr [rip+0x23871a], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e7704e56: jz 0x7f02e7704ec0
0x7f02e7704e58: lock sub dword ptr [r12+0x8], 0x1  mem(1f4dc78, 100000003) 
0x7f02e7704e5f: jz 0x7f02e7704ef0
0x7f02e7704e65: mov rax, qword ptr [rbp]  reg(10, 1f4e6c8) 
0x7f02e7704e69: mov rsi, qword ptr [rip+0x238b90]  reg(4, 9882fd09) 
0x7f02e7704e70: mov rdi, rbp  reg(3, 7fffbc848220) 
0x7f02e7704e73: mov qword ptr [rbx+0x18], rbp  mem(1f4d720, 0) 
0x7f02e7704e77: call qword ptr [rax+0x20]
std::_Sp_counted_ptr_inplace<opendnp3::LinkLayer, std::allocator<opendnp3::LinkLayer>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): 1f4e6b0 60a980 1f4dc70 0	_ZNSt23_Sp_counted_ptr_inplaceIN8opendnp39LinkLayerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
0x7f02e7704fe0: mov rdx, rdi  reg(8, 1f4dc70)  reg(3, 1f4e6b0) 
0x7f02e7704fe3: mov rsi, qword ptr [rsi+0x8]  reg(4, 60a980) 
0x7f02e7704fe7: mov rdi, qword ptr [rip+0x23874a]  reg(3, 1f4e6b0) 
0x7f02e7704fee: cmp rsi, rdi  reg(4, 409580)  reg(3, 409580) 
0x7f02e7704ff1: jz 0x7f02e7705003
0x7f02e7705003: lea rax, ptr [rdx+0x10]  reg(10, 7f02e793ca80) 
0x7f02e7705007: ret 
0x7f02e7704e7a: mov rdi, qword ptr [rbx]  reg(3, 409580) 
0x7f02e7704e7d: mov qword ptr [rbx+0x10], rax  reg(10, 1f4e6c0)  mem(1f4d718, 0) 
0x7f02e7704e81: mov rsi, rax  reg(4, 409580)  reg(10, 1f4e6c0) 
0x7f02e7704e84: call 0x7f02e76a69b0
opendnp3::TransportLayer::SetLinkLayer(opendnp3::ILinkLayer&)@plt: 1f4dc80 1f4e6c0 1f4e6b0 0	_ZN8opendnp314TransportLayer12SetLinkLayerERNS_10ILinkLayerE@plt
0x7f02e76a69b0: jmp qword ptr [rip+0x298aa2]
0x7f02e76a69b6: push 0x288 
0x7f02e76a69bb: jmp 0x7f02e76a4120
opendnp3::TransportLayer::SetLinkLayer(opendnp3::ILinkLayer&): 1f4dc80 1f4e6c0 1f4e6b0 0	_ZN8opendnp314TransportLayer12SetLinkLayerERNS_10ILinkLayerE
0x7f02e7703ea0: mov qword ptr [rdi+0x38], rsi  reg(4, 1f4e6c0)  mem(1f4dcb8, 0) 
0x7f02e7703ea4: ret 
0x7f02e7704e89: mov rax, qword ptr [rsp+0x28]  reg(10, 1f4e6c0) 
0x7f02e7704e8e: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e7704e97: jnz 0x7f02e7704f1e
0x7f02e7704e9d: add rsp, 0x38
0x7f02e7704ea1: pop rbx  reg(7, 1f4d708) 
0x7f02e7704ea2: pop rbp
0x7f02e7704ea3: pop r12  reg(15, 1f4dc70) 
0x7f02e7704ea5: pop r13  reg(16, 7fffbc848380) 
0x7f02e7704ea7: pop r14  reg(17, 7fffbc848370) 
0x7f02e7704ea9: pop r15  reg(18, 7fffbc848390) 
0x7f02e7704eab: ret 
opendnp3::OContext::OContext(opendnp3::Addresses const&, opendnp3::OutstationConfig const&, opendnp3::DatabaseSizes const&, openpal::Logger const&, std::shared_ptr<openpal::IExecutor> const&, std::shared_ptr<opendnp3::ILowerLayer> const&, std::shared_ptr<opendnp3::ICommandHandler> const&, std::shared_ptr<opendnp3::IOutstationApplication> const&): 1f4d728 7fffbc848370 7fffbc848730 7fffbc848640	_ZN8opendnp38OContextC2ERKNS_9AddressesERKNS_16OutstationConfigERKNS_13DatabaseSizesERKN7openpal6LoggerERKSt10shared_ptrINSA_9IExecutorEERKSE_INS_11ILowerLayerEERKSE_INS_15ICommandHandlerEERKSE_INS_22IOutstationApplicationEE
0x7f02e76f8e90: mov rax, qword ptr [rip+0x244971]  reg(10, 1) 
0x7f02e76f8e97: push r14  reg(17, 7fffbc848620) 
0x7f02e76f8e99: push r13  reg(16, 1f4d728) 
0x7f02e76f8e9b: push r12  reg(15, 7fffbc848510) 
0x7f02e76f8e9d: mov r13, rcx  reg(16, 1f4d728)  reg(9, 7fffbc848640) 
0x7f02e76f8ea0: push rbp
0x7f02e76f8ea1: push rbx  reg(7, 1f4d690) 
0x7f02e76f8ea2: mov rbx, rdi  reg(7, 1f4d690)  reg(3, 1f4d728) 
0x7f02e76f8ea5: add rax, 0x10  reg(10, 7f02e793c230) 
0x7f02e76f8ea9: mov rbp, rdx
0x7f02e76f8eac: mov r12, r9  reg(15, 7fffbc848510)  reg(12, 7fffbc848380) 
0x7f02e76f8eaf: mov qword ptr [rbx], rax  reg(10, 7f02e793c240)  mem(1f4d728, 0) 
0x7f02e76f8eb2: mov eax, dword ptr [rsi]  reg(56, 7f02e793c240) 
0x7f02e76f8eb4: mov rcx, qword ptr [rsp+0x30]  reg(9, 7fffbc848640) 
0x7f02e76f8eb9: mov rdi, qword ptr [rsp+0x38]  reg(3, 1f4d728) 
0x7f02e76f8ebe: mov rdx, qword ptr [rsp+0x40]  reg(8, 7fffbc848730) 
0x7f02e76f8ec3: mov dword ptr [rbx+0x8], eax  reg(56, 1000a)  mem(1f4d730, 0) 
0x7f02e76f8ec6: mov rax, qword ptr [r8]  reg(10, 1000a) 
0x7f02e76f8ec9: mov qword ptr [rbx+0x10], rax  reg(10, 1f4bc30)  mem(1f4d738, 0) 
0x7f02e76f8ecd: mov rax, qword ptr [r8+0x8]  reg(10, 1f4bc30) 
0x7f02e76f8ed1: test rax, rax  reg(10, 1f4bc20)  reg(10, 1f4bc20) 
0x7f02e76f8ed4: mov qword ptr [rbx+0x18], rax  reg(10, 1f4bc20)  mem(1f4d740, 0) 
0x7f02e76f8ed8: jz 0x7f02e76f9308
0x7f02e76f8ede: cmp qword ptr [rip+0x24468a], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76f8ee6: jz 0x7f02e76f9188
0x7f02e76f8eec: lock add dword ptr [rax+0x8], 0x1  mem(1f4bc28, 10000000b) 
0x7f02e76f8ef1: mov rsi, qword ptr [r8+0x18]  reg(4, 7fffbc848370) 
0x7f02e76f8ef5: mov rax, qword ptr [r8+0x10]  reg(10, 1f4bc20) 
0x7f02e76f8ef9: test rsi, rsi  reg(4, 1f4d640)  reg(4, 1f4d640) 
0x7f02e76f8efc: mov qword ptr [rbx+0x20], rax  reg(10, 1f4d650)  mem(1f4d748, 0) 
0x7f02e76f8f00: mov qword ptr [rbx+0x28], rsi  reg(4, 1f4d640)  mem(1f4d750, 0) 
0x7f02e76f8f04: lea rax, ptr [rsi+0x8]  reg(10, 1f4d650) 
0x7f02e76f8f08: jz 0x7f02e76f9250
0x7f02e76f8f0e: lock add dword ptr [rax], 0x1  mem(1f4d648, 100000006) 
0x7f02e76f8f12: mov rsi, qword ptr [r12+0x8]  reg(4, 1f4d640) 
0x7f02e76f8f17: mov rax, qword ptr [r12]  reg(10, 1f4d648) 
0x7f02e76f8f1b: test rsi, rsi  reg(4, 1f4c3a0)  reg(4, 1f4c3a0) 
0x7f02e76f8f1e: mov qword ptr [rbx+0x30], rax  reg(10, 1f4c3b0)  mem(1f4d758, 0) 
0x7f02e76f8f22: mov qword ptr [rbx+0x38], rsi  reg(4, 1f4c3a0)  mem(1f4d760, 0) 
0x7f02e76f8f26: lea rax, ptr [rsi+0x8]  reg(10, 1f4c3b0) 
0x7f02e76f8f2a: jz 0x7f02e76f9270
0x7f02e76f8f30: lock add dword ptr [rax], 0x1  mem(1f4c3a8, 200000006) 
0x7f02e76f8f34: mov rax, qword ptr [rcx]  reg(10, 1f4c3a8) 
0x7f02e76f8f37: mov rcx, qword ptr [rcx+0x8]  reg(9, 7fffbc848390) 
0x7f02e76f8f3b: test rcx, rcx  reg(9, 1f4dc70)  reg(9, 1f4dc70) 
0x7f02e76f8f3e: mov qword ptr [rbx+0x40], rax  reg(10, 1f4dc88)  mem(1f4d768, 0) 
0x7f02e76f8f42: mov qword ptr [rbx+0x48], rcx  reg(9, 1f4dc70)  mem(1f4d770, 0) 
0x7f02e76f8f46: lea rax, ptr [rcx+0x8]  reg(10, 1f4dc88) 
0x7f02e76f8f4a: jz 0x7f02e76f92a0
0x7f02e76f8f50: lock add dword ptr [rax], 0x1  mem(1f4dc78, 100000003) 
0x7f02e76f8f54: mov rcx, qword ptr [rdi+0x8]  reg(9, 1f4dc70) 
0x7f02e76f8f58: mov rax, qword ptr [rdi]  reg(10, 1f4dc78) 
0x7f02e76f8f5b: test rcx, rcx  reg(9, 1f4d600)  reg(9, 1f4d600) 
0x7f02e76f8f5e: mov qword ptr [rbx+0x50], rax  reg(10, 1f4d610)  mem(1f4d778, 0) 
0x7f02e76f8f62: mov qword ptr [rbx+0x58], rcx  reg(9, 1f4d600)  mem(1f4d780, 0) 
0x7f02e76f8f66: lea rax, ptr [rcx+0x8]  reg(10, 1f4d610) 
0x7f02e76f8f6a: jz 0x7f02e76f9220
0x7f02e76f8f70: lock add dword ptr [rax], 0x1  mem(1f4d608, 100000001) 
0x7f02e76f8f74: mov rax, qword ptr [rdx]  reg(10, 1f4d608) 
0x7f02e76f8f77: mov rdx, qword ptr [rdx+0x8]  reg(8, 7fffbc848620) 
0x7f02e76f8f7b: test rdx, rdx  reg(8, 1f4d5e0)  reg(8, 1f4d5e0) 
0x7f02e76f8f7e: mov qword ptr [rbx+0x60], rax  reg(10, 1f4d5f0)  mem(1f4d788, 0) 
0x7f02e76f8f82: mov qword ptr [rbx+0x68], rdx  reg(8, 1f4d5e0)  mem(1f4d790, 0) 
0x7f02e76f8f86: lea rax, ptr [rdx+0x8]  reg(10, 1f4d5f0) 
0x7f02e76f8f8a: jz 0x7f02e76f8f90
0x7f02e76f8f8c: lock add dword ptr [rax], 0x1  mem(1f4d5e8, 100000002) 
0x7f02e76f8f90: lea r14, ptr [rbx+0x70]  reg(17, 7fffbc848620) 
0x7f02e76f8f94: lea rsi, ptr [rbp+0x38]  reg(4, 1f4c3a0) 
0x7f02e76f8f98: mov rdi, r14  reg(3, 7fffbc848610)  reg(17, 1f4d798) 
0x7f02e76f8f9b: call 0x7f02e76a79a0
opendnp3::EventBuffer::EventBuffer(opendnp3::EventBufferConfig const&)@plt: 1f4d798 7fffbc848768 1f4d5e0 1f4d600	_ZN8opendnp311EventBufferC1ERKNS_17EventBufferConfigE@plt
0x7f02e76a79a0: jmp qword ptr [rip+0x2982aa]
0x7f02e76a79a6: push 0x387 
0x7f02e76a79ab: jmp 0x7f02e76a4120
opendnp3::EventBuffer::EventBuffer(opendnp3::EventBufferConfig const&): 1f4d798 7fffbc848768 1f4d5e0 1f4d600	_ZN8opendnp311EventBufferC2ERKNS_17EventBufferConfigE
0x7f02e76f2630: sub rsp, 0x8
0x7f02e76f2634: mov rax, qword ptr [rip+0x24b7d5]  reg(10, 1f4d5e8) 
0x7f02e76f263b: mov byte ptr [rdi+0x18], 0x0  mem(1f4d7b0, 0) 
0x7f02e76f263f: add rdi, 0x20  reg(3, 1f4d798) 
0x7f02e76f2643: lea rdx, ptr [rax+0x10]  reg(8, 1f4d5e0) 
0x7f02e76f2647: mov qword ptr [rdi-0x20], rdx  reg(8, 7f02e793bca0)  mem(1f4d798, 0) 
0x7f02e76f264b: lea rdx, ptr [rax+0x98]  reg(8, 7f02e793bca0) 
0x7f02e76f2652: add rax, 0xb8  reg(10, 7f02e793bc90) 
0x7f02e76f2658: mov qword ptr [rdi-0x10], rax  reg(10, 7f02e793bd48)  mem(1f4d7a8, 0) 
0x7f02e76f265c: mov qword ptr [rdi-0x18], rdx  reg(8, 7f02e793bd28)  mem(1f4d7a0, 0) 
0x7f02e76f2660: call 0x7f02e76a80e0
opendnp3::EventStorage::EventStorage(opendnp3::EventBufferConfig const&)@plt: 1f4d7b8 7fffbc848768 7f02e793bd28 1f4d600	_ZN8opendnp312EventStorageC1ERKNS_17EventBufferConfigE@plt
0x7f02e76a80e0: jmp qword ptr [rip+0x297f0a]
0x7f02e76a80e6: push 0x3fb 
0x7f02e76a80eb: jmp 0x7f02e76a4120
opendnp3::EventStorage::EventStorage(opendnp3::EventBufferConfig const&): 1f4d7b8 7fffbc848768 7f02e793bd28 1f4d600	_ZN8opendnp312EventStorageC2ERKNS_17EventBufferConfigE
0x7f02e76f4390: jmp 0x7f02e76a7510
opendnp3::EventLists::EventLists(opendnp3::EventBufferConfig const&)@plt: 1f4d7b8 7fffbc848768 7f02e793bd28 1f4d600	_ZN8opendnp310EventListsC1ERKNS_17EventBufferConfigE@plt
0x7f02e76a7510: jmp qword ptr [rip+0x2984f2]
0x7f02e76a7516: push 0x33e 
0x7f02e76a751b: jmp 0x7f02e76a4120
opendnp3::EventLists::EventLists(opendnp3::EventBufferConfig const&): 1f4d7b8 7fffbc848768 7f02e793bd28 1f4d600	_ZN8opendnp310EventListsC2ERKNS_17EventBufferConfigE
0x7f02e76f35f0: push r15  reg(18, 7fffbc848390) 
0x7f02e76f35f2: push r14  reg(17, 1f4d798) 
0x7f02e76f35f4: mov r15, rsi  reg(18, 7fffbc848390)  reg(4, 7fffbc848768) 
0x7f02e76f35f7: push r13  reg(16, 7fffbc848640) 
0x7f02e76f35f9: push r12  reg(15, 7fffbc848380) 
0x7f02e76f35fb: push rbp
0x7f02e76f35fc: push rbx  reg(7, 1f4d728) 
0x7f02e76f35fd: mov rbp, rdi
0x7f02e76f3600: mov rdi, rsi  reg(3, 1f4d7b8)  reg(4, 7fffbc848768) 
0x7f02e76f3603: sub rsp, 0x18
0x7f02e76f3607: call 0x7f02e76a5380
opendnp3::EventBufferConfig::TotalEvents() const@plt: 7fffbc848768 7fffbc848768 7f02e793bd28 1f4d600	_ZNK8opendnp317EventBufferConfig11TotalEventsEv@plt
0x7f02e76a5380: jmp qword ptr [rip+0x2995ba]
0x7f02e76a5386: push 0x125 
0x7f02e76a538b: jmp 0x7f02e76a4120
opendnp3::EventBufferConfig::TotalEvents() const: 7fffbc848768 7fffbc848768 7f02e793bd28 1f4d600	_ZNK8opendnp317EventBufferConfig11TotalEventsEv
0x7f02e76f7680: movzx edx, word ptr [rdi]  reg(54, 7f02e793bd28) 
0x7f02e76f7683: movzx eax, word ptr [rdi+0x2]  reg(56, 7f02e793bd48) 
0x7f02e76f7687: add eax, edx  reg(56, a)  reg(54, a) 
0x7f02e76f7689: movzx edx, word ptr [rdi+0x4]  reg(54, a) 
0x7f02e76f768d: add eax, edx  reg(56, 14)  reg(54, a) 
0x7f02e76f768f: movzx edx, word ptr [rdi+0x6]  reg(54, a) 
0x7f02e76f7693: add eax, edx  reg(56, 1e)  reg(54, a) 
0x7f02e76f7695: movzx edx, word ptr [rdi+0x8]  reg(54, a) 
0x7f02e76f7699: add eax, edx  reg(56, 28)  reg(54, a) 
0x7f02e76f769b: movzx edx, word ptr [rdi+0xa]  reg(54, a) 
0x7f02e76f769f: add eax, edx  reg(56, 32)  reg(54, a) 
0x7f02e76f76a1: movzx edx, word ptr [rdi+0xc]  reg(54, a) 
0x7f02e76f76a5: add eax, edx  reg(56, 3c)  reg(54, a) 
0x7f02e76f76a7: movzx edx, word ptr [rdi+0xe]  reg(54, a) 
0x7f02e76f76ab: add eax, edx  reg(56, 46)  reg(54, a) 
0x7f02e76f76ad: ret 
0x7f02e76f360c: mov rsi, qword ptr [rip+0x24a0e5]  reg(4, 7fffbc848768) 
0x7f02e76f3613: mov ebx, eax  reg(53, 1f4d728)  reg(56, 50) 
0x7f02e76f3615: mov dword ptr [rbp], 0x0  mem(1f4d7b8, 0) 
0x7f02e76f361c: lea rdi, ptr [rbx+rbx*4]  reg(3, 7fffbc848768) 
0x7f02e76f3620: mov qword ptr [rbp+0x8], 0x0  mem(1f4d7c0, 0) 
0x7f02e76f3628: mov qword ptr [rbp+0x10], 0x0  mem(1f4d7c8, 0) 
0x7f02e76f3630: mov qword ptr [rbp+0x18], 0x0  mem(1f4d7d0, 0) 
0x7f02e76f3638: mov dword ptr [rbp+0x28], eax  reg(56, 50)  mem(1f4d7e0, 0) 
0x7f02e76f363b: lea rdx, ptr [rsi+0x10]  reg(8, a) 
0x7f02e76f363f: shl rdi, 0x3  reg(3, 190) 
0x7f02e76f3643: mov qword ptr [rbp+0x20], rdx  reg(8, 7f02e7ded9a8)  mem(1f4d7d8, 0) 
0x7f02e76f3647: call 0x7f02e76a4170
operator new[](unsigned long)@plt: c80 7f02e7ded998 7f02e7ded9a8 1f4d600	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76a4176: push 0x4 
0x7f02e76a417b: jmp 0x7f02e76a4120
0x7f02e76f364c: xor ecx, ecx  reg(55, 7f02e6e67b20)  reg(55, 7f02e6e67b20) 
0x7f02e76f364e: test rbx, rbx  reg(7, 50)  reg(7, 50) 
0x7f02e76f3651: mov rdx, rax  reg(8, 1f4e940)  reg(10, 1f4e940) 
0x7f02e76f3654: jz 0x7f02e76f3694
0x7f02e76f3656: nop word ptr [rax+rax*1], ax
0x7f02e76f3660: add rcx, 0x1  reg(9, 0) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4e940, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4e958, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4e960, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4e948, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4e940) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4e950, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4e968, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4e980, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4e988, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4e970, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4e968) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4e978, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4e990, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4e9a8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4e9b0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4e998, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4e990) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4e9a0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4e9b8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4e9d0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4e9d8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4e9c0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4e9b8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4e9c8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4e9e0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4e9f8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ea00, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4e9e8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4e9e0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4e9f0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 5) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 5) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ea08, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ea20, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ea28, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ea10, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ea08) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ea18, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 6) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 6) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ea30, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ea48, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ea50, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ea38, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ea30) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ea40, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 7) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 7) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ea58, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ea70, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ea78, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ea60, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ea58) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ea68, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 8) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 8) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ea80, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ea98, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eaa0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ea88, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ea80) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ea90, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 9) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 9) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eaa8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eac0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eac8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eab0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eaa8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eab8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, a) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, a) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ead0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eae8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eaf0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ead8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ead0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eae0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, b) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, b) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eaf8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eb10, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eb18, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eb00, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eaf8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eb08, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, c) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, c) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eb20, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eb38, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eb40, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eb28, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eb20) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eb30, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, d) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, d) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eb48, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eb60, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eb68, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eb50, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eb48) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eb58, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, e) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, e) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eb70, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eb88, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eb90, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eb78, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eb70) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eb80, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, f) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, f) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eb98, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ebb0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ebb8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eba0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eb98) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eba8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 10) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 10) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ebc0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ebd8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ebe0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ebc8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ebc0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ebd0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 11) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 11) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ebe8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ec00, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ec08, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ebf0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ebe8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ebf8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 12) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 12) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ec10, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ec28, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ec30, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ec18, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ec10) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ec20, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 13) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 13) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ec38, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ec50, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ec58, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ec40, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ec38) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ec48, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 14) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 14) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ec60, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ec78, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ec80, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ec68, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ec60) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ec70, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 15) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 15) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ec88, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eca0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eca8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ec90, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ec88) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ec98, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 16) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 16) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ecb0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ecc8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ecd0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ecb8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ecb0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ecc0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 17) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 17) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ecd8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ecf0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ecf8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ece0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ecd8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ece8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 18) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 18) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ed00, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ed18, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ed20, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ed08, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ed00) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ed10, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 19) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 19) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ed28, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ed40, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ed48, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ed30, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ed28) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ed38, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1a) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1a) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ed50, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ed68, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ed70, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ed58, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ed50) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ed60, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1b) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1b) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ed78, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ed90, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ed98, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ed80, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ed78) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ed88, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1c) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1c) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eda0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4edb8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4edc0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eda8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eda0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4edb0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1d) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1d) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4edc8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ede0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ede8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4edd0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4edc8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4edd8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1e) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1e) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4edf0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ee08, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ee10, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4edf8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4edf0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ee00, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 1f) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 1f) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ee18, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ee30, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ee38, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ee20, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ee18) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ee28, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 20) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 20) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ee40, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ee58, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ee60, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ee48, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ee40) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ee50, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 21) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 21) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ee68, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ee80, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ee88, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ee70, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ee68) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ee78, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 22) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 22) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ee90, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eea8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eeb0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ee98, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ee90) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eea0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 23) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 23) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eeb8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eed0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eed8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eec0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eeb8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eec8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 24) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 24) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eee0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4eef8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ef00, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4eee8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eee0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4eef0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 25) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 25) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ef08, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ef20, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ef28, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ef10, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ef08) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ef18, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 26) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 26) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ef30, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ef48, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ef50, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ef38, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ef30) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ef40, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 27) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 27) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ef58, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ef70, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4ef78, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ef60, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ef58) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ef68, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 28) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 28) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4ef80, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4ef98, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4efa0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4ef88, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4ef80) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4ef90, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 29) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 29) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4efa8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4efc0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4efc8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4efb0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4efa8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4efb8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2a) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2a) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4efd0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4efe8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4eff0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4efd8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4efd0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4efe0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2b) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2b) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4eff8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f010, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f018, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f000, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4eff8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f008, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2c) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2c) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f020, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f038, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f040, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f028, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f020) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f030, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2d) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2d) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f048, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f060, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f068, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f050, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f048) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f058, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2e) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2e) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f070, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f088, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f090, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f078, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f070) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f080, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 2f) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 2f) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f098, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f0b0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f0b8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f0a0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f098) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f0a8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 30) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 30) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f0c0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f0d8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f0e0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f0c8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f0c0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f0d0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 31) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 31) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f0e8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f100, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f108, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f0f0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f0e8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f0f8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 32) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 32) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f110, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f128, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f130, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f118, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f110) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f120, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 33) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 33) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f138, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f150, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f158, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f140, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f138) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f148, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 34) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 34) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f160, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f178, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f180, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f168, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f160) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f170, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 35) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 35) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f188, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f1a0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f1a8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f190, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f188) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f198, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 36) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 36) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f1b0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f1c8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f1d0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f1b8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f1b0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f1c0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 37) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 37) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f1d8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f1f0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f1f8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f1e0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f1d8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f1e8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 38) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 38) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f200, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f218, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f220, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f208, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f200) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f210, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 39) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 39) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f228, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f240, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f248, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f230, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f228) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f238, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3a) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3a) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f250, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f268, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f270, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f258, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f250) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f260, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3b) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3b) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f278, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f290, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f298, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f280, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f278) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f288, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3c) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3c) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f2a0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f2b8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f2c0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f2a8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f2a0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f2b0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3d) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3d) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f2c8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f2e0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f2e8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f2d0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f2c8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f2d8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3e) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3e) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f2f0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f308, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f310, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f2f8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f2f0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f300, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 3f) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 3f) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f318, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f330, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f338, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f320, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f318) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f328, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 40) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 40) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f340, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f358, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f360, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f348, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f340) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f350, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 41) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 41) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f368, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f380, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f388, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f370, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f368) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f378, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 42) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 42) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f390, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f3a8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f3b0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f398, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f390) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f3a0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 43) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 43) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f3b8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f3d0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f3d8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f3c0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f3b8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f3c8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 44) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 44) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f3e0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f3f8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f400, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f3e8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f3e0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f3f0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 45) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 45) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f408, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f420, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f428, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f410, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f408) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f418, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 46) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 46) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f430, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f448, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f450, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f438, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f430) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f440, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 47) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 47) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f458, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f470, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f478, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f460, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f458) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f468, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 48) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 48) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f480, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f498, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f4a0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f488, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f480) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f490, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 49) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 49) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f4a8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f4c0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f4c8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f4b0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f4a8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f4b8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4a) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4a) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f4d0, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f4e8, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f4f0, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f4d8, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f4d0) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f4e0, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4b) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4b) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f4f8, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f510, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f518, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f500, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f4f8) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f508, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4c) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4c) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f520, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f538, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f540, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f528, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f520) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f530, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4d) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4d) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f548, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f560, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f568, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f550, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f548) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f558, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4e) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4e) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f570, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f588, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f590, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f578, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f570) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f580, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 4f) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3660: add rcx, 0x1  reg(9, 4f) 
0x7f02e76f3664: mov qword ptr [rdx], 0x0  mem(1f4f598, 0) 
0x7f02e76f366b: mov qword ptr [rdx+0x18], 0x0  mem(1f4f5b0, 0) 
0x7f02e76f3673: mov qword ptr [rdx+0x20], 0x0  mem(1f4f5b8, 0) 
0x7f02e76f367b: mov qword ptr [rdx+0x8], 0x0  mem(1f4f5a0, 0) 
0x7f02e76f3683: add rdx, 0x28  reg(8, 1f4f598) 
0x7f02e76f3687: mov qword ptr [rdx-0x18], 0x0  mem(1f4f5a8, 0) 
0x7f02e76f368f: cmp rbx, rcx  reg(7, 50)  reg(9, 50) 
0x7f02e76f3692: jnz 0x7f02e76f3660
0x7f02e76f3694: mov edx, dword ptr [rbp+0x28]  reg(54, 1f4f5c0) 
0x7f02e76f3697: mov qword ptr [rbp+0x30], rax  reg(10, 1f4e940)  mem(1f4d7e8, 0) 
0x7f02e76f369b: test edx, edx  reg(54, 50)  reg(54, 50) 
0x7f02e76f369d: jz 0x7f02e76f36e6
0x7f02e76f369f: cmp edx, 0x1  reg(54, 50) 
0x7f02e76f36a2: mov qword ptr [rbp+0x18], rax  reg(10, 1f4e940)  mem(1f4d7d0, 0) 
0x7f02e76f36a6: jbe 0x7f02e76f36e6
0x7f02e76f36a8: sub edx, 0x2  reg(54, 50) 
0x7f02e76f36ab: lea rdi, ptr [rdx+rdx*4]  reg(3, 3) 
0x7f02e76f36af: xor edx, edx  reg(54, 4e)  reg(54, 4e) 
0x7f02e76f36b1: shl rdi, 0x3  reg(3, 186) 
0x7f02e76f36b5: jmp 0x7f02e76f36c7
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 1f4f5c0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 50) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4e968)  mem(1f4e960, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4e968)  reg(9, 1f4e968) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4e940)  mem(1f4e980, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4e940) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 0)  reg(4, 28) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 28) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4e968) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 28) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4e990)  mem(1f4e988, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4e990)  reg(9, 1f4e990) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4e968)  mem(1f4e9a8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 28) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4e968) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 28)  reg(4, 50) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 50) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4e990) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 50) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4e9b8)  mem(1f4e9b0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4e9b8)  reg(9, 1f4e9b8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4e990)  mem(1f4e9d0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 50) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4e990) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 50)  reg(4, 78) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 78) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4e9b8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 78) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4e9e0)  mem(1f4e9d8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4e9e0)  reg(9, 1f4e9e0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4e9b8)  mem(1f4e9f8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 78) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4e9b8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 78)  reg(4, a0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, a0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4e9e0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, a0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ea08)  mem(1f4ea00, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ea08)  reg(9, 1f4ea08) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4e9e0)  mem(1f4ea20, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, a0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4e9e0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, a0)  reg(4, c8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, c8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ea08) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, c8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ea30)  mem(1f4ea28, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ea30)  reg(9, 1f4ea30) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ea08)  mem(1f4ea48, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, c8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ea08) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, c8)  reg(4, f0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, f0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ea30) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, f0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ea58)  mem(1f4ea50, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ea58)  reg(9, 1f4ea58) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ea30)  mem(1f4ea70, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, f0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ea30) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, f0)  reg(4, 118) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 118) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ea58) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 118) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ea80)  mem(1f4ea78, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ea80)  reg(9, 1f4ea80) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ea58)  mem(1f4ea98, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 118) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ea58) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 118)  reg(4, 140) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 140) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ea80) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 140) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eaa8)  mem(1f4eaa0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eaa8)  reg(9, 1f4eaa8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ea80)  mem(1f4eac0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 140) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ea80) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 140)  reg(4, 168) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 168) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eaa8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 168) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ead0)  mem(1f4eac8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ead0)  reg(9, 1f4ead0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eaa8)  mem(1f4eae8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 168) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eaa8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 168)  reg(4, 190) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 190) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ead0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 190) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eaf8)  mem(1f4eaf0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eaf8)  reg(9, 1f4eaf8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ead0)  mem(1f4eb10, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 190) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ead0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 190)  reg(4, 1b8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 1b8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eaf8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 1b8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eb20)  mem(1f4eb18, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eb20)  reg(9, 1f4eb20) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eaf8)  mem(1f4eb38, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 1b8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eaf8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 1b8)  reg(4, 1e0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 1e0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eb20) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 1e0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eb48)  mem(1f4eb40, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eb48)  reg(9, 1f4eb48) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eb20)  mem(1f4eb60, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 1e0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eb20) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 1e0)  reg(4, 208) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 208) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eb48) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 208) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eb70)  mem(1f4eb68, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eb70)  reg(9, 1f4eb70) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eb48)  mem(1f4eb88, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 208) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eb48) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 208)  reg(4, 230) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 230) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eb70) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 230) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eb98)  mem(1f4eb90, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eb98)  reg(9, 1f4eb98) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eb70)  mem(1f4ebb0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 230) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eb70) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 230)  reg(4, 258) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 258) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eb98) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 258) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ebc0)  mem(1f4ebb8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ebc0)  reg(9, 1f4ebc0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eb98)  mem(1f4ebd8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 258) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eb98) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 258)  reg(4, 280) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 280) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ebc0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 280) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ebe8)  mem(1f4ebe0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ebe8)  reg(9, 1f4ebe8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ebc0)  mem(1f4ec00, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 280) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ebc0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 280)  reg(4, 2a8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 2a8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ebe8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 2a8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ec10)  mem(1f4ec08, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ec10)  reg(9, 1f4ec10) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ebe8)  mem(1f4ec28, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 2a8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ebe8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 2a8)  reg(4, 2d0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 2d0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ec10) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 2d0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ec38)  mem(1f4ec30, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ec38)  reg(9, 1f4ec38) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ec10)  mem(1f4ec50, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 2d0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ec10) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 2d0)  reg(4, 2f8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 2f8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ec38) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 2f8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ec60)  mem(1f4ec58, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ec60)  reg(9, 1f4ec60) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ec38)  mem(1f4ec78, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 2f8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ec38) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 2f8)  reg(4, 320) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 320) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ec60) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 320) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ec88)  mem(1f4ec80, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ec88)  reg(9, 1f4ec88) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ec60)  mem(1f4eca0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 320) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ec60) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 320)  reg(4, 348) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 348) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ec88) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 348) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ecb0)  mem(1f4eca8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ecb0)  reg(9, 1f4ecb0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ec88)  mem(1f4ecc8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 348) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ec88) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 348)  reg(4, 370) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 370) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ecb0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 370) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ecd8)  mem(1f4ecd0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ecd8)  reg(9, 1f4ecd8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ecb0)  mem(1f4ecf0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 370) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ecb0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 370)  reg(4, 398) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 398) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ecd8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 398) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ed00)  mem(1f4ecf8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ed00)  reg(9, 1f4ed00) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ecd8)  mem(1f4ed18, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 398) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ecd8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 398)  reg(4, 3c0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 3c0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ed00) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 3c0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ed28)  mem(1f4ed20, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ed28)  reg(9, 1f4ed28) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ed00)  mem(1f4ed40, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 3c0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ed00) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 3c0)  reg(4, 3e8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 3e8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ed28) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 3e8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ed50)  mem(1f4ed48, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ed50)  reg(9, 1f4ed50) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ed28)  mem(1f4ed68, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 3e8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ed28) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 3e8)  reg(4, 410) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 410) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ed50) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 410) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ed78)  mem(1f4ed70, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ed78)  reg(9, 1f4ed78) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ed50)  mem(1f4ed90, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 410) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ed50) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 410)  reg(4, 438) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 438) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ed78) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 438) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eda0)  mem(1f4ed98, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eda0)  reg(9, 1f4eda0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ed78)  mem(1f4edb8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 438) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ed78) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 438)  reg(4, 460) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 460) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eda0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 460) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4edc8)  mem(1f4edc0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4edc8)  reg(9, 1f4edc8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eda0)  mem(1f4ede0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 460) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eda0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 460)  reg(4, 488) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 488) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4edc8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 488) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4edf0)  mem(1f4ede8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4edf0)  reg(9, 1f4edf0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4edc8)  mem(1f4ee08, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 488) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4edc8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 488)  reg(4, 4b0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 4b0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4edf0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 4b0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ee18)  mem(1f4ee10, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ee18)  reg(9, 1f4ee18) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4edf0)  mem(1f4ee30, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 4b0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4edf0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 4b0)  reg(4, 4d8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 4d8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ee18) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 4d8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ee40)  mem(1f4ee38, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ee40)  reg(9, 1f4ee40) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ee18)  mem(1f4ee58, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 4d8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ee18) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 4d8)  reg(4, 500) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 500) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ee40) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 500) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ee68)  mem(1f4ee60, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ee68)  reg(9, 1f4ee68) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ee40)  mem(1f4ee80, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 500) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ee40) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 500)  reg(4, 528) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 528) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ee68) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 528) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ee90)  mem(1f4ee88, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ee90)  reg(9, 1f4ee90) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ee68)  mem(1f4eea8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 528) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ee68) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 528)  reg(4, 550) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 550) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ee90) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 550) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eeb8)  mem(1f4eeb0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eeb8)  reg(9, 1f4eeb8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ee90)  mem(1f4eed0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 550) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ee90) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 550)  reg(4, 578) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 578) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eeb8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 578) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eee0)  mem(1f4eed8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eee0)  reg(9, 1f4eee0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eeb8)  mem(1f4eef8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 578) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eeb8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 578)  reg(4, 5a0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 5a0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eee0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 5a0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ef08)  mem(1f4ef00, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ef08)  reg(9, 1f4ef08) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eee0)  mem(1f4ef20, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 5a0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eee0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 5a0)  reg(4, 5c8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 5c8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ef08) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 5c8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ef30)  mem(1f4ef28, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ef30)  reg(9, 1f4ef30) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ef08)  mem(1f4ef48, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 5c8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ef08) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 5c8)  reg(4, 5f0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 5f0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ef30) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 5f0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ef58)  mem(1f4ef50, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ef58)  reg(9, 1f4ef58) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ef30)  mem(1f4ef70, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 5f0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ef30) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 5f0)  reg(4, 618) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 618) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ef58) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 618) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4ef80)  mem(1f4ef78, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4ef80)  reg(9, 1f4ef80) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ef58)  mem(1f4ef98, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 618) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ef58) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 618)  reg(4, 640) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 640) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4ef80) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 640) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4efa8)  mem(1f4efa0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4efa8)  reg(9, 1f4efa8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4ef80)  mem(1f4efc0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 640) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4ef80) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 640)  reg(4, 668) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 668) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4efa8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 668) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4efd0)  mem(1f4efc8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4efd0)  reg(9, 1f4efd0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4efa8)  mem(1f4efe8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 668) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4efa8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 668)  reg(4, 690) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 690) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4efd0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 690) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4eff8)  mem(1f4eff0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4eff8)  reg(9, 1f4eff8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4efd0)  mem(1f4f010, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 690) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4efd0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 690)  reg(4, 6b8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 6b8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4eff8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 6b8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f020)  mem(1f4f018, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f020)  reg(9, 1f4f020) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4eff8)  mem(1f4f038, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 6b8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4eff8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 6b8)  reg(4, 6e0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 6e0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f020) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 6e0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f048)  mem(1f4f040, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f048)  reg(9, 1f4f048) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f020)  mem(1f4f060, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 6e0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f020) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 6e0)  reg(4, 708) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 708) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f048) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 708) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f070)  mem(1f4f068, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f070)  reg(9, 1f4f070) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f048)  mem(1f4f088, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 708) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f048) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 708)  reg(4, 730) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 730) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f070) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 730) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f098)  mem(1f4f090, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f098)  reg(9, 1f4f098) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f070)  mem(1f4f0b0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 730) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f070) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 730)  reg(4, 758) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 758) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f098) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 758) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f0c0)  mem(1f4f0b8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f0c0)  reg(9, 1f4f0c0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f098)  mem(1f4f0d8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 758) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f098) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 758)  reg(4, 780) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 780) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f0c0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 780) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f0e8)  mem(1f4f0e0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f0e8)  reg(9, 1f4f0e8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f0c0)  mem(1f4f100, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 780) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f0c0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 780)  reg(4, 7a8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 7a8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f0e8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 7a8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f110)  mem(1f4f108, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f110)  reg(9, 1f4f110) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f0e8)  mem(1f4f128, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 7a8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f0e8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 7a8)  reg(4, 7d0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 7d0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f110) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 7d0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f138)  mem(1f4f130, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f138)  reg(9, 1f4f138) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f110)  mem(1f4f150, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 7d0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f110) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 7d0)  reg(4, 7f8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 7f8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f138) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 7f8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f160)  mem(1f4f158, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f160)  reg(9, 1f4f160) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f138)  mem(1f4f178, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 7f8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f138) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 7f8)  reg(4, 820) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 820) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f160) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 820) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f188)  mem(1f4f180, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f188)  reg(9, 1f4f188) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f160)  mem(1f4f1a0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 820) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f160) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 820)  reg(4, 848) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 848) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f188) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 848) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f1b0)  mem(1f4f1a8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f1b0)  reg(9, 1f4f1b0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f188)  mem(1f4f1c8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 848) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f188) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 848)  reg(4, 870) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 870) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f1b0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 870) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f1d8)  mem(1f4f1d0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f1d8)  reg(9, 1f4f1d8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f1b0)  mem(1f4f1f0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 870) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f1b0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 870)  reg(4, 898) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 898) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f1d8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 898) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f200)  mem(1f4f1f8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f200)  reg(9, 1f4f200) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f1d8)  mem(1f4f218, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 898) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f1d8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 898)  reg(4, 8c0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 8c0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f200) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 8c0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f228)  mem(1f4f220, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f228)  reg(9, 1f4f228) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f200)  mem(1f4f240, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 8c0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f200) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 8c0)  reg(4, 8e8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 8e8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f228) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 8e8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f250)  mem(1f4f248, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f250)  reg(9, 1f4f250) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f228)  mem(1f4f268, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 8e8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f228) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 8e8)  reg(4, 910) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 910) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f250) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 910) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f278)  mem(1f4f270, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f278)  reg(9, 1f4f278) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f250)  mem(1f4f290, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 910) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f250) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 910)  reg(4, 938) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 938) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f278) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 938) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f2a0)  mem(1f4f298, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f2a0)  reg(9, 1f4f2a0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f278)  mem(1f4f2b8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 938) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f278) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 938)  reg(4, 960) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 960) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f2a0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 960) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f2c8)  mem(1f4f2c0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f2c8)  reg(9, 1f4f2c8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f2a0)  mem(1f4f2e0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 960) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f2a0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 960)  reg(4, 988) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 988) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f2c8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 988) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f2f0)  mem(1f4f2e8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f2f0)  reg(9, 1f4f2f0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f2c8)  mem(1f4f308, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 988) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f2c8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 988)  reg(4, 9b0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 9b0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f2f0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 9b0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f318)  mem(1f4f310, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f318)  reg(9, 1f4f318) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f2f0)  mem(1f4f330, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 9b0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f2f0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 9b0)  reg(4, 9d8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, 9d8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f318) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, 9d8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f340)  mem(1f4f338, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f340)  reg(9, 1f4f340) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f318)  mem(1f4f358, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, 9d8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f318) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, 9d8)  reg(4, a00) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, a00) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f340) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, a00) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f368)  mem(1f4f360, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f368)  reg(9, 1f4f368) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f340)  mem(1f4f380, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, a00) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f340) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, a00)  reg(4, a28) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, a28) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f368) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, a28) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f390)  mem(1f4f388, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f390)  reg(9, 1f4f390) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f368)  mem(1f4f3a8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, a28) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f368) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, a28)  reg(4, a50) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, a50) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f390) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, a50) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f3b8)  mem(1f4f3b0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f3b8)  reg(9, 1f4f3b8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f390)  mem(1f4f3d0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, a50) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f390) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, a50)  reg(4, a78) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, a78) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f3b8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, a78) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f3e0)  mem(1f4f3d8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f3e0)  reg(9, 1f4f3e0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f3b8)  mem(1f4f3f8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, a78) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f3b8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, a78)  reg(4, aa0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, aa0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f3e0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, aa0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f408)  mem(1f4f400, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f408)  reg(9, 1f4f408) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f3e0)  mem(1f4f420, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, aa0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f3e0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, aa0)  reg(4, ac8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, ac8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f408) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, ac8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f430)  mem(1f4f428, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f430)  reg(9, 1f4f430) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f408)  mem(1f4f448, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, ac8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f408) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, ac8)  reg(4, af0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, af0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f430) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, af0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f458)  mem(1f4f450, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f458)  reg(9, 1f4f458) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f430)  mem(1f4f470, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, af0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f430) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, af0)  reg(4, b18) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, b18) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f458) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, b18) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f480)  mem(1f4f478, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f480)  reg(9, 1f4f480) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f458)  mem(1f4f498, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, b18) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f458) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, b18)  reg(4, b40) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, b40) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f480) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, b40) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f4a8)  mem(1f4f4a0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f4a8)  reg(9, 1f4f4a8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f480)  mem(1f4f4c0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, b40) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f480) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, b40)  reg(4, b68) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, b68) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f4a8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, b68) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f4d0)  mem(1f4f4c8, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f4d0)  reg(9, 1f4f4d0) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f4a8)  mem(1f4f4e8, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, b68) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f4a8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, b68)  reg(4, b90) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, b90) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f4d0) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, b90) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f4f8)  mem(1f4f4f0, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f4f8)  reg(9, 1f4f4f8) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f4d0)  mem(1f4f510, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, b90) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f4d0) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, b90)  reg(4, bb8) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, bb8) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f4f8) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, bb8) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f520)  mem(1f4f518, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f520)  reg(9, 1f4f520) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f4f8)  mem(1f4f538, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, bb8) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f4f8) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, bb8)  reg(4, be0) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, be0) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f520) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, be0) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f548)  mem(1f4f540, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f548)  reg(9, 1f4f548) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f520)  mem(1f4f560, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, be0) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f520) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, be0)  reg(4, c08) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, c08) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f548) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, c08) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f570)  mem(1f4f568, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f570)  reg(9, 1f4f570) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f548)  mem(1f4f588, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, c08) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36c0: mov rax, qword ptr [rbp+0x30]  reg(10, 1f4f548) 
0x7f02e76f36c4: mov rdx, rsi  reg(8, c08)  reg(4, c30) 
0x7f02e76f36c7: lea rsi, ptr [rdx+0x28]  reg(4, c30) 
0x7f02e76f36cb: lea rcx, ptr [rax+rsi*1]  reg(9, 1f4f570) 
0x7f02e76f36cf: add rax, rdx  reg(10, 1f4e940)  reg(8, c30) 
0x7f02e76f36d2: jz 0x7f02e76f36d8
0x7f02e76f36d4: mov qword ptr [rax+0x20], rcx  reg(9, 1f4f598)  mem(1f4f590, 0) 
0x7f02e76f36d8: test rcx, rcx  reg(9, 1f4f598)  reg(9, 1f4f598) 
0x7f02e76f36db: jz 0x7f02e76f36e1
0x7f02e76f36dd: mov qword ptr [rcx+0x18], rax  reg(10, 1f4f570)  mem(1f4f5b0, 0) 
0x7f02e76f36e1: cmp rdi, rdx  reg(3, c30)  reg(8, c30) 
0x7f02e76f36e4: jnz 0x7f02e76f36c0
0x7f02e76f36e6: movzx eax, word ptr [r15]  reg(56, 1f4f570) 
0x7f02e76f36ea: mov dword ptr [rbp+0x38], 0x0  mem(1f4d7f0, 0) 
0x7f02e76f36f1: mov dword ptr [rbp+0x3c], 0x0  mem(1f4d7f4, 0) 
0x7f02e76f36f8: mov dword ptr [rbp+0x40], 0x0  mem(1f4d7f8, 0) 
0x7f02e76f36ff: mov dword ptr [rbp+0x44], 0x0  mem(1f4d7fc, 0) 
0x7f02e76f3706: mov dword ptr [rbp+0x48], 0x0  mem(1f4d800, 0) 
0x7f02e76f370d: mov dword ptr [rbp+0x4c], 0x0  mem(1f4d804, 0) 
0x7f02e76f3714: mov dword ptr [rbp+0x50], 0x0  mem(1f4d808, 0) 
0x7f02e76f371b: mov r12, rax  reg(15, 7fffbc848380)  reg(10, a) 
0x7f02e76f371e: mov dword ptr [rbp+0x80], eax  reg(56, a)  mem(1f4d838, 0) 
0x7f02e76f3724: mov rax, qword ptr [rip+0x24a22d]  reg(10, a) 
0x7f02e76f372b: mov rdi, r12  reg(3, c30)  reg(15, a) 
0x7f02e76f372e: mov dword ptr [rbp+0x58], 0x0  mem(1f4d810, 0) 
0x7f02e76f3735: mov qword ptr [rbp+0x60], 0x0  mem(1f4d818, 0) 
0x7f02e76f373d: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3741: mov qword ptr [rbp+0x68], 0x0  mem(1f4d820, 0) 
0x7f02e76f3749: mov qword ptr [rbp+0x70], 0x0  mem(1f4d828, 0) 
0x7f02e76f3751: add rax, 0x10  reg(10, 7f02e7ded9b8) 
0x7f02e76f3755: mov qword ptr [rbp+0x78], rax  reg(10, 7f02e7ded9c8)  mem(1f4d830, 0) 
0x7f02e76f3759: lea rax, ptr [r12*8]  reg(10, 7f02e7ded9c8) 
0x7f02e76f3761: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f3764: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 c58 c30 1f4f598	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3769: sub r12, 0x1  reg(15, a) 
0x7f02e76f376d: xor r14d, r14d  reg(79, 1f4d798)  reg(79, 1f4d798) 
0x7f02e76f3770: mov r13, rax  reg(16, 7fffbc848640)  reg(10, 1f4f5d0) 
0x7f02e76f3773: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f3777: mov rbx, rax  reg(7, 50)  reg(10, 1f4f5d0) 
0x7f02e76f377a: jz 0x7f02e76f37bc
0x7f02e76f377c: nop dword ptr [rax], eax
0x7f02e76f3780: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1)  reg(7, 1f4f5d0) 
0x7f02e76f3788: mov rax, r14  reg(10, 1f4f5d0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f608)  reg(7, 1f4f5d0) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f5d0 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
0x7f02e76a59b6: push 0x188 
0x7f02e76a59bb: jmp 0x7f02e76a4120
opendnp3::Binary::Binary(): 1f4f5d0 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f5d0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f5d8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f5e0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 9) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f5f0, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f5f8, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f600, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f5d0) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f5d0)  reg(7, 1f4f608) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f640)  reg(7, 1f4f608) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f608 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f608 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f608, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f610, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f618, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 8) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f628, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f630, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f638, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f608) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f608)  reg(7, 1f4f640) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f678)  reg(7, 1f4f640) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f640 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f640 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f640, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f648, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f650, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 7) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f660, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f668, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f670, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f640) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f640)  reg(7, 1f4f678) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f6b0)  reg(7, 1f4f678) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f678 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f678 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f678, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f680, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f688, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 6) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f698, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f6a0, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f6a8, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f678) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f678)  reg(7, 1f4f6b0) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f6e8)  reg(7, 1f4f6b0) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f6b0 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f6b0 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f6b0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f6b8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f6c0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 5) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f6d0, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f6d8, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f6e0, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f6b0) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f6b0)  reg(7, 1f4f6e8) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f720)  reg(7, 1f4f6e8) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f6e8 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f6e8 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f6e8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f6f0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f6f8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 4) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f708, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f710, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f718, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f6e8) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f6e8)  reg(7, 1f4f720) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f758)  reg(7, 1f4f720) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f720 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f720 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f720, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f728, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f730, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 3) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f740, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f748, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f750, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f720) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f720)  reg(7, 1f4f758) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f790)  reg(7, 1f4f758) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f758 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f758 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f758, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f760, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f768, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 2) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f778, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f780, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f788, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f758) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f758)  reg(7, 1f4f790) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f7c8)  reg(7, 1f4f790) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f790 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f790 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f790, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f798, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f7a0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 1) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f7b0, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f7b8, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f7c0, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f790) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f3780: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3785: mov rdi, rbx  reg(3, 1f4f790)  reg(7, 1f4f7c8) 
0x7f02e76f3788: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378b: rep stosq qword ptr [rdi]
0x7f02e76f378e: mov rdi, rbx  reg(3, 1f4f800)  reg(7, 1f4f7c8) 
0x7f02e76f3791: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f4f7c8 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f4f7c8 1f4f800 1f4f5d0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f4f7c8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f4f7d0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f4f7d8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3796: sub r12, 0x1  reg(15, 0) 
0x7f02e76f379a: mov qword ptr [rbx+0x20], 0x0  mem(1f4f7e8, 0) 
0x7f02e76f37a2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f7f0, 0) 
0x7f02e76f37aa: mov qword ptr [rbx+0x30], 0x0  mem(1f4f7f8, 0) 
0x7f02e76f37b2: add rbx, 0x38  reg(7, 1f4f7c8) 
0x7f02e76f37b6: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f37ba: jnz 0x7f02e76f3780
0x7f02e76f37bc: mov eax, dword ptr [rbp+0x80]  reg(56, 0) 
0x7f02e76f37c2: mov qword ptr [rbp+0x88], r13  reg(16, 1f4f5d0)  mem(1f4d840, 0) 
0x7f02e76f37c9: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f37cb: jz 0x7f02e76f381a
0x7f02e76f37cd: cmp eax, 0x1  reg(56, a) 
0x7f02e76f37d0: mov qword ptr [rbp+0x70], r13  reg(16, 1f4f5d0)  mem(1f4d828, 0) 
0x7f02e76f37d4: jbe 0x7f02e76f381a
0x7f02e76f37d6: lea esi, ptr [rax-0x2]  reg(47, 1f4f800) 
0x7f02e76f37d9: add rsi, 0x1  reg(4, 8) 
0x7f02e76f37dd: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f37e5: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f37e9: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f37ec: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f37ee: jmp 0x7f02e76f37fa
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 1f4f5d0) 
0x7f02e76f37fe: add rax, r13  reg(10, 0)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f608)  mem(1f4f600, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f608)  reg(9, 1f4f608) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f5d0)  mem(1f4f630, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 38) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f5d0)  reg(8, 38) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f37fe: add rax, r13  reg(10, 38)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f608) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f640)  mem(1f4f638, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f640)  reg(9, 1f4f640) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f608)  mem(1f4f668, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 70) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f608)  reg(8, 70) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f37fe: add rax, r13  reg(10, 70)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f640) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f678)  mem(1f4f670, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f678)  reg(9, 1f4f678) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f640)  mem(1f4f6a0, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, a8) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f640)  reg(8, a8) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f37fe: add rax, r13  reg(10, a8)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f678) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f6b0)  mem(1f4f6a8, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f6b0)  reg(9, 1f4f6b0) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f678)  mem(1f4f6d8, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, e0) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f678)  reg(8, e0) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f37fe: add rax, r13  reg(10, e0)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f6b0) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f6e8)  mem(1f4f6e0, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f6e8)  reg(9, 1f4f6e8) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f6b0)  mem(1f4f710, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 118) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f6b0)  reg(8, 118) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f37fe: add rax, r13  reg(10, 118)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f6e8) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f720)  mem(1f4f718, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f720)  reg(9, 1f4f720) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f6e8)  mem(1f4f748, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 150) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f6e8)  reg(8, 150) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f37fe: add rax, r13  reg(10, 150)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f720) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f758)  mem(1f4f750, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f758)  reg(9, 1f4f758) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f720)  mem(1f4f780, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 188) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f720)  reg(8, 188) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f37fe: add rax, r13  reg(10, 188)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f758) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f790)  mem(1f4f788, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f790)  reg(9, 1f4f790) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f758)  mem(1f4f7b8, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 1c0) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f37f0: mov r13, qword ptr [rbp+0x88]  reg(16, 1f4f5d0) 
0x7f02e76f37f7: mov rax, rdx  reg(10, 1f4f758)  reg(8, 1c0) 
0x7f02e76f37fa: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f37fe: add rax, r13  reg(10, 1c0)  reg(16, 1f4f5d0) 
0x7f02e76f3801: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f790) 
0x7f02e76f3806: jz 0x7f02e76f380c
0x7f02e76f3808: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f7c8)  mem(1f4f7c0, 0) 
0x7f02e76f380c: test rcx, rcx  reg(9, 1f4f7c8)  reg(9, 1f4f7c8) 
0x7f02e76f380f: jz 0x7f02e76f3815
0x7f02e76f3811: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f790)  mem(1f4f7f0, 0) 
0x7f02e76f3815: cmp rsi, rdx  reg(4, 1f8)  reg(8, 1f8) 
0x7f02e76f3818: jnz 0x7f02e76f37f0
0x7f02e76f381a: movzx eax, word ptr [r15+0x2]  reg(56, 1f4f790) 
0x7f02e76f381f: mov dword ptr [rbp+0x90], 0x0  mem(1f4d848, 0) 
0x7f02e76f3829: mov qword ptr [rbp+0x98], 0x0  mem(1f4d850, 0) 
0x7f02e76f3834: mov qword ptr [rbp+0xa0], 0x0  mem(1f4d858, 0) 
0x7f02e76f383f: mov qword ptr [rbp+0xa8], 0x0  mem(1f4d860, 0) 
0x7f02e76f384a: mov r12, rax  reg(15, ffffffffffffffff)  reg(10, a) 
0x7f02e76f384d: mov dword ptr [rbp+0xb8], eax  reg(56, a)  mem(1f4d870, 0) 
0x7f02e76f3853: mov rax, qword ptr [rip+0x24a04e]  reg(10, a) 
0x7f02e76f385a: mov rdi, r12  reg(3, 1f4f7c8)  reg(15, a) 
0x7f02e76f385d: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3861: add rax, 0x10  reg(10, 7f02e7ded9d8) 
0x7f02e76f3865: mov qword ptr [rbp+0xb0], rax  reg(10, 7f02e7ded9e8)  mem(1f4d868, 0) 
0x7f02e76f386c: lea rax, ptr [r12*8]  reg(10, 7f02e7ded9e8) 
0x7f02e76f3874: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f3877: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f8 1f8 1f4f7c8	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f387c: sub r12, 0x1  reg(15, a) 
0x7f02e76f3880: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f3883: mov r13, rax  reg(16, 1f4f5d0)  reg(10, 1f4f810) 
0x7f02e76f3886: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f388a: mov rbx, rax  reg(7, 1f4f800)  reg(10, 1f4f810) 
0x7f02e76f388d: jz 0x7f02e76f38cc
0x7f02e76f388f: nop 
0x7f02e76f3890: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1)  reg(7, 1f4f810) 
0x7f02e76f3898: mov rax, r14  reg(10, 1f4f810)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f848)  reg(7, 1f4f810) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f810 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
0x7f02e76a7246: push 0x311 
0x7f02e76a724b: jmp 0x7f02e76a4120
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f810 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f810, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f818, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f820, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 9) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f830, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f838, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f840, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f810) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f810)  reg(7, 1f4f848) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f880)  reg(7, 1f4f848) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f848 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f848 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f848, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f850, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f858, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 8) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f868, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f870, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f878, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f848) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f848)  reg(7, 1f4f880) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f8b8)  reg(7, 1f4f880) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f880 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f880 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f880, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f888, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f890, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 7) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f8a0, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f8a8, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f8b0, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f880) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f880)  reg(7, 1f4f8b8) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f8f0)  reg(7, 1f4f8b8) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f8b8 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f8b8 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f8b8, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f8c0, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f8c8, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 6) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f8d8, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f8e0, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f8e8, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f8b8) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f8b8)  reg(7, 1f4f8f0) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f928)  reg(7, 1f4f8f0) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f8f0 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f8f0 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f8f0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f8f8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f900, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 5) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f910, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f918, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f920, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f8f0) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f8f0)  reg(7, 1f4f928) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f960)  reg(7, 1f4f928) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f928 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f928 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f928, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f930, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f938, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 4) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f948, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f950, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f958, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f928) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f928)  reg(7, 1f4f960) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f998)  reg(7, 1f4f960) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f960 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f960 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f960, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f968, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f970, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 3) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f980, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f988, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f990, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f960) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f960)  reg(7, 1f4f998) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4f9d0)  reg(7, 1f4f998) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f998 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f998 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f998, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f9a0, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f9a8, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 2) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f9b8, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f9c0, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4f9c8, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f998) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f998)  reg(7, 1f4f9d0) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4fa08)  reg(7, 1f4f9d0) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4f9d0 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4f9d0 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4f9d0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4f9d8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4f9e0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 1) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4f9f0, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4f9f8, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4fa00, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4f9d0) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f3890: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3895: mov rdi, rbx  reg(3, 1f4f9d0)  reg(7, 1f4fa08) 
0x7f02e76f3898: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389b: rep stosq qword ptr [rdi]
0x7f02e76f389e: mov rdi, rbx  reg(3, 1f4fa40)  reg(7, 1f4fa08) 
0x7f02e76f38a1: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f4fa08 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f4fa08 1f4fa40 1f4f810 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f4fa08, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f4fa10, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f4fa18, 0) 
0x7f02e76aab4f: ret 
0x7f02e76f38a6: sub r12, 0x1  reg(15, 0) 
0x7f02e76f38aa: mov qword ptr [rbx+0x20], 0x0  mem(1f4fa28, 0) 
0x7f02e76f38b2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fa30, 0) 
0x7f02e76f38ba: mov qword ptr [rbx+0x30], 0x0  mem(1f4fa38, 0) 
0x7f02e76f38c2: add rbx, 0x38  reg(7, 1f4fa08) 
0x7f02e76f38c6: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f38ca: jnz 0x7f02e76f3890
0x7f02e76f38cc: mov eax, dword ptr [rbp+0xb8]  reg(56, 0) 
0x7f02e76f38d2: mov qword ptr [rbp+0xc0], r13  reg(16, 1f4f810)  mem(1f4d878, 0) 
0x7f02e76f38d9: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f38db: jz 0x7f02e76f3932
0x7f02e76f38dd: cmp eax, 0x1  reg(56, a) 
0x7f02e76f38e0: mov qword ptr [rbp+0xa8], r13  reg(16, 1f4f810)  mem(1f4d860, 0) 
0x7f02e76f38e7: jbe 0x7f02e76f3932
0x7f02e76f38e9: lea esi, ptr [rax-0x2]  reg(47, 1f4fa40) 
0x7f02e76f38ec: add rsi, 0x1  reg(4, 8) 
0x7f02e76f38f0: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f38f8: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f38fc: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f38ff: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f3901: jmp 0x7f02e76f3912
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 1f4f810) 
0x7f02e76f3916: add rax, r13  reg(10, 0)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f848)  mem(1f4f840, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f848)  reg(9, 1f4f848) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f810)  mem(1f4f870, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 38)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f810)  reg(8, 38) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f3916: add rax, r13  reg(10, 38)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f848) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f880)  mem(1f4f878, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f880)  reg(9, 1f4f880) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f848)  mem(1f4f8a8, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 70)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f848)  reg(8, 70) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f3916: add rax, r13  reg(10, 70)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f880) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f8b8)  mem(1f4f8b0, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f8b8)  reg(9, 1f4f8b8) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f880)  mem(1f4f8e0, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, a8)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f880)  reg(8, a8) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f3916: add rax, r13  reg(10, a8)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f8b8) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f8f0)  mem(1f4f8e8, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f8f0)  reg(9, 1f4f8f0) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f8b8)  mem(1f4f918, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, e0)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f8b8)  reg(8, e0) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f3916: add rax, r13  reg(10, e0)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f8f0) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f928)  mem(1f4f920, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f928)  reg(9, 1f4f928) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f8f0)  mem(1f4f950, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 118)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f8f0)  reg(8, 118) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f3916: add rax, r13  reg(10, 118)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f928) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f960)  mem(1f4f958, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f960)  reg(9, 1f4f960) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f928)  mem(1f4f988, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 150)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f928)  reg(8, 150) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f3916: add rax, r13  reg(10, 150)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f960) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f998)  mem(1f4f990, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f998)  reg(9, 1f4f998) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f960)  mem(1f4f9c0, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 188)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f960)  reg(8, 188) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f3916: add rax, r13  reg(10, 188)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f998) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4f9d0)  mem(1f4f9c8, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4f9d0)  reg(9, 1f4f9d0) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f998)  mem(1f4f9f8, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 1c0)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3908: mov r13, qword ptr [rbp+0xc0]  reg(16, 1f4f810) 
0x7f02e76f390f: mov rax, rdx  reg(10, 1f4f998)  reg(8, 1c0) 
0x7f02e76f3912: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f3916: add rax, r13  reg(10, 1c0)  reg(16, 1f4f810) 
0x7f02e76f3919: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4f9d0) 
0x7f02e76f391e: jz 0x7f02e76f3924
0x7f02e76f3920: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fa08)  mem(1f4fa00, 0) 
0x7f02e76f3924: test rcx, rcx  reg(9, 1f4fa08)  reg(9, 1f4fa08) 
0x7f02e76f3927: jz 0x7f02e76f392d
0x7f02e76f3929: mov qword ptr [rcx+0x28], rax  reg(10, 1f4f9d0)  mem(1f4fa30, 0) 
0x7f02e76f392d: cmp rdx, rsi  reg(8, 1f8)  reg(4, 1f8) 
0x7f02e76f3930: jnz 0x7f02e76f3908
0x7f02e76f3932: movzx eax, word ptr [r15+0x4]  reg(56, 1f4f9d0) 
0x7f02e76f3937: mov dword ptr [rbp+0xc8], 0x0  mem(1f4d880, 0) 
0x7f02e76f3941: mov qword ptr [rbp+0xd0], 0x0  mem(1f4d888, 0) 
0x7f02e76f394c: mov qword ptr [rbp+0xd8], 0x0  mem(1f4d890, 0) 
0x7f02e76f3957: mov qword ptr [rbp+0xe0], 0x0  mem(1f4d898, 0) 
0x7f02e76f3962: mov r12, rax  reg(15, ffffffffffffffff)  reg(10, a) 
0x7f02e76f3965: mov dword ptr [rbp+0xf0], eax  reg(56, a)  mem(1f4d8a8, 0) 
0x7f02e76f396b: mov rax, qword ptr [rip+0x249896]  reg(10, a) 
0x7f02e76f3972: mov rdi, r12  reg(3, 1f4fa08)  reg(15, a) 
0x7f02e76f3975: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3979: add rax, 0x10  reg(10, 7f02e7ded9f8) 
0x7f02e76f397d: mov qword ptr [rbp+0xe8], rax  reg(10, 7f02e7deda08)  mem(1f4d8a0, 0) 
0x7f02e76f3984: lea rax, ptr [r12*8]  reg(10, 7f02e7deda08) 
0x7f02e76f398c: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f398f: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f8 1f8 1f4fa08	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3994: sub r12, 0x1  reg(15, a) 
0x7f02e76f3998: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f399b: mov r13, rax  reg(16, 1f4f810)  reg(10, 1f4fa50) 
0x7f02e76f399e: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f39a2: mov rbx, rax  reg(7, 1f4fa40)  reg(10, 1f4fa50) 
0x7f02e76f39a5: jz 0x7f02e76f39ec
0x7f02e76f39a7: nop word ptr [rax+rax*1], ax
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1)  reg(7, 1f4fa50) 
0x7f02e76f39b8: mov rax, r14  reg(10, 1f4fa50)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fa88)  reg(7, 1f4fa50) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fa50 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
0x7f02e76a49d6: push 0x8a 
0x7f02e76a49db: jmp 0x7f02e76a4120
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fa50 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fa50, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fa58, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fa60, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 9) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fa70, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fa78, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fa80, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fa50) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fa50)  reg(7, 1f4fa88) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fac0)  reg(7, 1f4fa88) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fa88 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fa88 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fa88, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fa90, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fa98, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 8) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4faa8, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fab0, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fab8, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fa88) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fa88)  reg(7, 1f4fac0) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4faf8)  reg(7, 1f4fac0) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fac0 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fac0 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fac0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fac8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fad0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 7) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fae0, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fae8, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4faf0, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fac0) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fac0)  reg(7, 1f4faf8) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fb30)  reg(7, 1f4faf8) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4faf8 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4faf8 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4faf8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fb00, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fb08, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 6) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fb18, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fb20, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fb28, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4faf8) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4faf8)  reg(7, 1f4fb30) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fb68)  reg(7, 1f4fb30) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fb30 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fb30 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fb30, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fb38, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fb40, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 5) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fb50, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fb58, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fb60, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fb30) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fb30)  reg(7, 1f4fb68) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fba0)  reg(7, 1f4fb68) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fb68 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fb68 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fb68, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fb70, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fb78, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 4) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fb88, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fb90, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fb98, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fb68) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fb68)  reg(7, 1f4fba0) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fbd8)  reg(7, 1f4fba0) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fba0 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fba0 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fba0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fba8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fbb0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 3) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fbc0, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fbc8, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fbd0, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fba0) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fba0)  reg(7, 1f4fbd8) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fc10)  reg(7, 1f4fbd8) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fbd8 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fbd8 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fbd8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fbe0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fbe8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 2) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fbf8, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fc00, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fc08, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fbd8) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fbd8)  reg(7, 1f4fc10) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fc48)  reg(7, 1f4fc10) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fc10 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fc10 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fc10, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fc18, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fc20, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 1) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fc30, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fc38, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fc40, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fc10) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39b0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f39b5: mov rdi, rbx  reg(3, 1f4fc10)  reg(7, 1f4fc48) 
0x7f02e76f39b8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39bb: rep stosq qword ptr [rdi]
0x7f02e76f39be: mov rdi, rbx  reg(3, 1f4fc80)  reg(7, 1f4fc48) 
0x7f02e76f39c1: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f4fc48 1f4fc80 1f4fa50 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f4fc48 1f4fc80 1f4fa50 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f4fc48, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f4fc50, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f4fc58, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f39c6: sub r12, 0x1  reg(15, 0) 
0x7f02e76f39ca: mov qword ptr [rbx+0x20], 0x0  mem(1f4fc68, 0) 
0x7f02e76f39d2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fc70, 0) 
0x7f02e76f39da: mov qword ptr [rbx+0x30], 0x0  mem(1f4fc78, 0) 
0x7f02e76f39e2: add rbx, 0x38  reg(7, 1f4fc48) 
0x7f02e76f39e6: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f39ea: jnz 0x7f02e76f39b0
0x7f02e76f39ec: mov eax, dword ptr [rbp+0xf0]  reg(56, 0) 
0x7f02e76f39f2: mov qword ptr [rbp+0xf8], r13  reg(16, 1f4fa50)  mem(1f4d8b0, 0) 
0x7f02e76f39f9: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f39fb: jz 0x7f02e76f3a52
0x7f02e76f39fd: cmp eax, 0x1  reg(56, a) 
0x7f02e76f3a00: mov qword ptr [rbp+0xe0], r13  reg(16, 1f4fa50)  mem(1f4d898, 0) 
0x7f02e76f3a07: jbe 0x7f02e76f3a52
0x7f02e76f3a09: lea esi, ptr [rax-0x2]  reg(47, 1f4fc80) 
0x7f02e76f3a0c: add rsi, 0x1  reg(4, 8) 
0x7f02e76f3a10: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f3a18: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f3a1c: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f3a1f: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f3a21: jmp 0x7f02e76f3a32
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 1f4fa50) 
0x7f02e76f3a36: add rax, r13  reg(10, 0)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fa88)  mem(1f4fa80, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fa88)  reg(9, 1f4fa88) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fa50)  mem(1f4fab0, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 38)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fa50)  reg(8, 38) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f3a36: add rax, r13  reg(10, 38)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fa88) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fac0)  mem(1f4fab8, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fac0)  reg(9, 1f4fac0) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fa88)  mem(1f4fae8, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 70)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fa88)  reg(8, 70) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f3a36: add rax, r13  reg(10, 70)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fac0) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4faf8)  mem(1f4faf0, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4faf8)  reg(9, 1f4faf8) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fac0)  mem(1f4fb20, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, a8)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fac0)  reg(8, a8) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f3a36: add rax, r13  reg(10, a8)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4faf8) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fb30)  mem(1f4fb28, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fb30)  reg(9, 1f4fb30) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4faf8)  mem(1f4fb58, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, e0)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4faf8)  reg(8, e0) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f3a36: add rax, r13  reg(10, e0)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fb30) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fb68)  mem(1f4fb60, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fb68)  reg(9, 1f4fb68) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fb30)  mem(1f4fb90, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 118)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fb30)  reg(8, 118) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f3a36: add rax, r13  reg(10, 118)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fb68) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fba0)  mem(1f4fb98, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fba0)  reg(9, 1f4fba0) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fb68)  mem(1f4fbc8, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 150)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fb68)  reg(8, 150) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f3a36: add rax, r13  reg(10, 150)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fba0) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fbd8)  mem(1f4fbd0, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fbd8)  reg(9, 1f4fbd8) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fba0)  mem(1f4fc00, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 188)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fba0)  reg(8, 188) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f3a36: add rax, r13  reg(10, 188)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fbd8) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fc10)  mem(1f4fc08, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fc10)  reg(9, 1f4fc10) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fbd8)  mem(1f4fc38, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 1c0)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a28: mov r13, qword ptr [rbp+0xf8]  reg(16, 1f4fa50) 
0x7f02e76f3a2f: mov rax, rdx  reg(10, 1f4fbd8)  reg(8, 1c0) 
0x7f02e76f3a32: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f3a36: add rax, r13  reg(10, 1c0)  reg(16, 1f4fa50) 
0x7f02e76f3a39: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fc10) 
0x7f02e76f3a3e: jz 0x7f02e76f3a44
0x7f02e76f3a40: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fc48)  mem(1f4fc40, 0) 
0x7f02e76f3a44: test rcx, rcx  reg(9, 1f4fc48)  reg(9, 1f4fc48) 
0x7f02e76f3a47: jz 0x7f02e76f3a4d
0x7f02e76f3a49: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fc10)  mem(1f4fc70, 0) 
0x7f02e76f3a4d: cmp rdx, rsi  reg(8, 1f8)  reg(4, 1f8) 
0x7f02e76f3a50: jnz 0x7f02e76f3a28
0x7f02e76f3a52: movzx eax, word ptr [r15+0x6]  reg(56, 1f4fc10) 
0x7f02e76f3a57: mov dword ptr [rbp+0x100], 0x0  mem(1f4d8b8, 0) 
0x7f02e76f3a61: mov qword ptr [rbp+0x108], 0x0  mem(1f4d8c0, 0) 
0x7f02e76f3a6c: mov qword ptr [rbp+0x110], 0x0  mem(1f4d8c8, 0) 
0x7f02e76f3a77: mov qword ptr [rbp+0x118], 0x0  mem(1f4d8d0, 0) 
0x7f02e76f3a82: mov r12, rax  reg(15, ffffffffffffffff)  reg(10, a) 
0x7f02e76f3a85: mov dword ptr [rbp+0x128], eax  reg(56, a)  mem(1f4d8e0, 0) 
0x7f02e76f3a8b: mov rax, qword ptr [rip+0x24983e]  reg(10, a) 
0x7f02e76f3a92: mov rdi, r12  reg(3, 1f4fc48)  reg(15, a) 
0x7f02e76f3a95: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3a99: add rax, 0x10  reg(10, 7f02e7deda18) 
0x7f02e76f3a9d: mov qword ptr [rbp+0x120], rax  reg(10, 7f02e7deda28)  mem(1f4d8d8, 0) 
0x7f02e76f3aa4: lea rax, ptr [r12*8]  reg(10, 7f02e7deda28) 
0x7f02e76f3aac: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f3aaf: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f8 1f8 1f4fc48	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3ab4: sub r12, 0x1  reg(15, a) 
0x7f02e76f3ab8: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f3abb: mov r13, rax  reg(16, 1f4fa50)  reg(10, 1f4fc90) 
0x7f02e76f3abe: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f3ac2: mov rbx, rax  reg(7, 1f4fc80)  reg(10, 1f4fc90) 
0x7f02e76f3ac5: jz 0x7f02e76f3b0c
0x7f02e76f3ac7: nop word ptr [rax+rax*1], ax
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1)  reg(7, 1f4fc90) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 1f4fc90)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fcc8)  reg(7, 1f4fc90) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fc90 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
0x7f02e76a5376: push 0x124 
0x7f02e76a537b: jmp 0x7f02e76a4120
opendnp3::Counter::Counter(): 1f4fc90 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fc90, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fc98, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fca0, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 9) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fcb0, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fcb8, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fcc0, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fc90) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fc90)  reg(7, 1f4fcc8) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fd00)  reg(7, 1f4fcc8) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fcc8 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fcc8 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fcc8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fcd0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fcd8, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 8) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fce8, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fcf0, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fcf8, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fcc8) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fcc8)  reg(7, 1f4fd00) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fd38)  reg(7, 1f4fd00) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fd00 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fd00 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fd00, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fd08, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fd10, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 7) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fd20, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fd28, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fd30, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fd00) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fd00)  reg(7, 1f4fd38) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fd70)  reg(7, 1f4fd38) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fd38 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fd38 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fd38, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fd40, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fd48, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 6) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fd58, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fd60, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fd68, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fd38) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fd38)  reg(7, 1f4fd70) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fda8)  reg(7, 1f4fd70) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fd70 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fd70 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fd70, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fd78, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fd80, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 5) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fd90, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fd98, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fda0, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fd70) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fd70)  reg(7, 1f4fda8) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fde0)  reg(7, 1f4fda8) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fda8 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fda8 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fda8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fdb0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fdb8, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 4) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fdc8, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fdd0, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fdd8, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fda8) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fda8)  reg(7, 1f4fde0) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fe18)  reg(7, 1f4fde0) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fde0 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fde0 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fde0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fde8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fdf0, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 3) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fe00, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fe08, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fe10, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fde0) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fde0)  reg(7, 1f4fe18) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fe50)  reg(7, 1f4fe18) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fe18 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fe18 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fe18, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fe20, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fe28, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 2) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fe38, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fe40, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fe48, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fe18) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fe18)  reg(7, 1f4fe50) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fe88)  reg(7, 1f4fe50) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fe50 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fe50 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fe50, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fe58, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fe60, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 1) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fe70, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4fe78, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4fe80, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fe50) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3ad0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3ad5: mov rdi, rbx  reg(3, 1f4fe50)  reg(7, 1f4fe88) 
0x7f02e76f3ad8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3adb: rep stosq qword ptr [rdi]
0x7f02e76f3ade: mov rdi, rbx  reg(3, 1f4fec0)  reg(7, 1f4fe88) 
0x7f02e76f3ae1: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f4fe88 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f4fe88 1f4fec0 1f4fc90 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fe88, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fe90, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fe98, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3ae6: sub r12, 0x1  reg(15, 0) 
0x7f02e76f3aea: mov qword ptr [rbx+0x20], 0x0  mem(1f4fea8, 0) 
0x7f02e76f3af2: mov qword ptr [rbx+0x28], 0x0  mem(1f4feb0, 0) 
0x7f02e76f3afa: mov qword ptr [rbx+0x30], 0x0  mem(1f4feb8, 0) 
0x7f02e76f3b02: add rbx, 0x38  reg(7, 1f4fe88) 
0x7f02e76f3b06: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f3b0a: jnz 0x7f02e76f3ad0
0x7f02e76f3b0c: mov eax, dword ptr [rbp+0x128]  reg(56, 0) 
0x7f02e76f3b12: mov qword ptr [rbp+0x130], r13  reg(16, 1f4fc90)  mem(1f4d8e8, 0) 
0x7f02e76f3b19: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f3b1b: jz 0x7f02e76f3b72
0x7f02e76f3b1d: cmp eax, 0x1  reg(56, a) 
0x7f02e76f3b20: mov qword ptr [rbp+0x118], r13  reg(16, 1f4fc90)  mem(1f4d8d0, 0) 
0x7f02e76f3b27: jbe 0x7f02e76f3b72
0x7f02e76f3b29: lea esi, ptr [rax-0x2]  reg(47, 1f4fec0) 
0x7f02e76f3b2c: add rsi, 0x1  reg(4, 8) 
0x7f02e76f3b30: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f3b38: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f3b3c: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f3b3f: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f3b41: jmp 0x7f02e76f3b52
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 1f4fc90) 
0x7f02e76f3b56: add rax, r13  reg(10, 0)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fcc8)  mem(1f4fcc0, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fcc8)  reg(9, 1f4fcc8) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fc90)  mem(1f4fcf0, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 38)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fc90)  reg(8, 38) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f3b56: add rax, r13  reg(10, 38)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fcc8) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fd00)  mem(1f4fcf8, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fd00)  reg(9, 1f4fd00) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fcc8)  mem(1f4fd28, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 70)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fcc8)  reg(8, 70) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f3b56: add rax, r13  reg(10, 70)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fd00) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fd38)  mem(1f4fd30, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fd38)  reg(9, 1f4fd38) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fd00)  mem(1f4fd60, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, a8)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fd00)  reg(8, a8) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f3b56: add rax, r13  reg(10, a8)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fd38) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fd70)  mem(1f4fd68, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fd70)  reg(9, 1f4fd70) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fd38)  mem(1f4fd98, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, e0)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fd38)  reg(8, e0) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f3b56: add rax, r13  reg(10, e0)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fd70) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fda8)  mem(1f4fda0, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fda8)  reg(9, 1f4fda8) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fd70)  mem(1f4fdd0, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 118)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fd70)  reg(8, 118) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f3b56: add rax, r13  reg(10, 118)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fda8) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fde0)  mem(1f4fdd8, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fde0)  reg(9, 1f4fde0) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fda8)  mem(1f4fe08, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 150)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fda8)  reg(8, 150) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f3b56: add rax, r13  reg(10, 150)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fde0) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fe18)  mem(1f4fe10, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fe18)  reg(9, 1f4fe18) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fde0)  mem(1f4fe40, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 188)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fde0)  reg(8, 188) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f3b56: add rax, r13  reg(10, 188)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fe18) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fe50)  mem(1f4fe48, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fe50)  reg(9, 1f4fe50) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fe18)  mem(1f4fe78, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 1c0)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b48: mov r13, qword ptr [rbp+0x130]  reg(16, 1f4fc90) 
0x7f02e76f3b4f: mov rax, rdx  reg(10, 1f4fe18)  reg(8, 1c0) 
0x7f02e76f3b52: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f3b56: add rax, r13  reg(10, 1c0)  reg(16, 1f4fc90) 
0x7f02e76f3b59: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4fe50) 
0x7f02e76f3b5e: jz 0x7f02e76f3b64
0x7f02e76f3b60: mov qword ptr [rax+0x30], rcx  reg(9, 1f4fe88)  mem(1f4fe80, 0) 
0x7f02e76f3b64: test rcx, rcx  reg(9, 1f4fe88)  reg(9, 1f4fe88) 
0x7f02e76f3b67: jz 0x7f02e76f3b6d
0x7f02e76f3b69: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fe50)  mem(1f4feb0, 0) 
0x7f02e76f3b6d: cmp rdx, rsi  reg(8, 1f8)  reg(4, 1f8) 
0x7f02e76f3b70: jnz 0x7f02e76f3b48
0x7f02e76f3b72: movzx eax, word ptr [r15+0x8]  reg(56, 1f4fe50) 
0x7f02e76f3b77: mov dword ptr [rbp+0x138], 0x0  mem(1f4d8f0, 0) 
0x7f02e76f3b81: mov qword ptr [rbp+0x140], 0x0  mem(1f4d8f8, 0) 
0x7f02e76f3b8c: mov qword ptr [rbp+0x148], 0x0  mem(1f4d900, 0) 
0x7f02e76f3b97: mov qword ptr [rbp+0x150], 0x0  mem(1f4d908, 0) 
0x7f02e76f3ba2: mov r12, rax  reg(15, ffffffffffffffff)  reg(10, a) 
0x7f02e76f3ba5: mov dword ptr [rbp+0x160], eax  reg(56, a)  mem(1f4d918, 0) 
0x7f02e76f3bab: mov rax, qword ptr [rip+0x249786]  reg(10, a) 
0x7f02e76f3bb2: mov rdi, r12  reg(3, 1f4fe88)  reg(15, a) 
0x7f02e76f3bb5: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3bb9: add rax, 0x10  reg(10, 7f02e7deda38) 
0x7f02e76f3bbd: mov qword ptr [rbp+0x158], rax  reg(10, 7f02e7deda48)  mem(1f4d910, 0) 
0x7f02e76f3bc4: lea rax, ptr [r12*8]  reg(10, 7f02e7deda48) 
0x7f02e76f3bcc: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f3bcf: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f8 1f8 1f4fe88	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3bd4: sub r12, 0x1  reg(15, a) 
0x7f02e76f3bd8: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f3bdb: mov r13, rax  reg(16, 1f4fc90)  reg(10, 1f4fed0) 
0x7f02e76f3bde: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f3be2: mov rbx, rax  reg(7, 1f4fec0)  reg(10, 1f4fed0) 
0x7f02e76f3be5: jz 0x7f02e76f3c2c
0x7f02e76f3be7: nop word ptr [rax+rax*1], ax
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1)  reg(7, 1f4fed0) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 1f4fed0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f4ff08)  reg(7, 1f4fed0) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f4fed0 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
0x7f02e76a5b56: push 0x1a2 
0x7f02e76a5b5b: jmp 0x7f02e76a4120
opendnp3::Counter::Counter(): 1f4fed0 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4fed0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fed8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fee0, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 9) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f4fef0, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f4fef8, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f4ff00, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f4fed0) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f4fed0)  reg(7, 1f4ff08) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f4ff40)  reg(7, 1f4ff08) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f4ff08 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f4ff08 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4ff08, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4ff10, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4ff18, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 8) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f4ff28, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f4ff30, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f4ff38, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f4ff08) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f4ff08)  reg(7, 1f4ff40) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f4ff78)  reg(7, 1f4ff40) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f4ff40 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f4ff40 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4ff40, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4ff48, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4ff50, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 7) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f4ff60, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f4ff68, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f4ff70, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f4ff40) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f4ff40)  reg(7, 1f4ff78) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f4ffb0)  reg(7, 1f4ff78) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f4ff78 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f4ff78 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4ff78, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4ff80, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4ff88, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 6) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f4ff98, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f4ffa0, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f4ffa8, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f4ff78) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f4ff78)  reg(7, 1f4ffb0) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f4ffe8)  reg(7, 1f4ffb0) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f4ffb0 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f4ffb0 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4ffb0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4ffb8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4ffc0, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 5) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f4ffd0, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f4ffd8, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f4ffe0, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f4ffb0) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f4ffb0)  reg(7, 1f4ffe8) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f50020)  reg(7, 1f4ffe8) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f4ffe8 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f4ffe8 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f4ffe8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f4fff0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f4fff8, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 4) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f50008, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f50010, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f50018, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f4ffe8) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f4ffe8)  reg(7, 1f50020) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f50058)  reg(7, 1f50020) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f50020 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f50020 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f50020, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f50028, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f50030, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 3) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f50040, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f50048, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f50050, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f50020) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f50020)  reg(7, 1f50058) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f50090)  reg(7, 1f50058) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f50058 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f50058 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f50058, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f50060, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f50068, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 2) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f50078, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f50080, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f50088, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f50058) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f50058)  reg(7, 1f50090) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f500c8)  reg(7, 1f50090) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f50090 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f50090 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f50090, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f50098, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f500a0, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 1) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f500b0, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f500b8, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f500c0, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f50090) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3bf0: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3bf5: mov rdi, rbx  reg(3, 1f50090)  reg(7, 1f500c8) 
0x7f02e76f3bf8: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfb: rep stosq qword ptr [rdi]
0x7f02e76f3bfe: mov rdi, rbx  reg(3, 1f50100)  reg(7, 1f500c8) 
0x7f02e76f3c01: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f500c8 1f50100 1f4fed0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f500c8 1f50100 1f4fed0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f500c8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f500d0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f500d8, 0) 
0x7f02e76aad82: ret 
0x7f02e76f3c06: sub r12, 0x1  reg(15, 0) 
0x7f02e76f3c0a: mov qword ptr [rbx+0x20], 0x0  mem(1f500e8, 0) 
0x7f02e76f3c12: mov qword ptr [rbx+0x28], 0x0  mem(1f500f0, 0) 
0x7f02e76f3c1a: mov qword ptr [rbx+0x30], 0x0  mem(1f500f8, 0) 
0x7f02e76f3c22: add rbx, 0x38  reg(7, 1f500c8) 
0x7f02e76f3c26: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f3c2a: jnz 0x7f02e76f3bf0
0x7f02e76f3c2c: mov eax, dword ptr [rbp+0x160]  reg(56, 0) 
0x7f02e76f3c32: mov qword ptr [rbp+0x168], r13  reg(16, 1f4fed0)  mem(1f4d920, 0) 
0x7f02e76f3c39: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f3c3b: jz 0x7f02e76f3c92
0x7f02e76f3c3d: cmp eax, 0x1  reg(56, a) 
0x7f02e76f3c40: mov qword ptr [rbp+0x150], r13  reg(16, 1f4fed0)  mem(1f4d908, 0) 
0x7f02e76f3c47: jbe 0x7f02e76f3c92
0x7f02e76f3c49: lea esi, ptr [rax-0x2]  reg(47, 1f50100) 
0x7f02e76f3c4c: add rsi, 0x1  reg(4, 8) 
0x7f02e76f3c50: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f3c58: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f3c5c: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f3c5f: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f3c61: jmp 0x7f02e76f3c72
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 1f4fed0) 
0x7f02e76f3c76: add rax, r13  reg(10, 0)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f4ff08)  mem(1f4ff00, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f4ff08)  reg(9, 1f4ff08) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f4fed0)  mem(1f4ff30, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 38)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f4fed0)  reg(8, 38) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f3c76: add rax, r13  reg(10, 38)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4ff08) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f4ff40)  mem(1f4ff38, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f4ff40)  reg(9, 1f4ff40) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f4ff08)  mem(1f4ff68, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 70)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f4ff08)  reg(8, 70) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f3c76: add rax, r13  reg(10, 70)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4ff40) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f4ff78)  mem(1f4ff70, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f4ff78)  reg(9, 1f4ff78) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f4ff40)  mem(1f4ffa0, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, a8)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f4ff40)  reg(8, a8) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f3c76: add rax, r13  reg(10, a8)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4ff78) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f4ffb0)  mem(1f4ffa8, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f4ffb0)  reg(9, 1f4ffb0) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f4ff78)  mem(1f4ffd8, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, e0)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f4ff78)  reg(8, e0) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f3c76: add rax, r13  reg(10, e0)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4ffb0) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f4ffe8)  mem(1f4ffe0, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f4ffe8)  reg(9, 1f4ffe8) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f4ffb0)  mem(1f50010, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 118)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f4ffb0)  reg(8, 118) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f3c76: add rax, r13  reg(10, 118)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f4ffe8) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f50020)  mem(1f50018, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f50020)  reg(9, 1f50020) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f4ffe8)  mem(1f50048, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 150)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f4ffe8)  reg(8, 150) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f3c76: add rax, r13  reg(10, 150)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50020) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f50058)  mem(1f50050, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f50058)  reg(9, 1f50058) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f50020)  mem(1f50080, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 188)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f50020)  reg(8, 188) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f3c76: add rax, r13  reg(10, 188)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50058) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f50090)  mem(1f50088, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f50090)  reg(9, 1f50090) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f50058)  mem(1f500b8, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 1c0)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c68: mov r13, qword ptr [rbp+0x168]  reg(16, 1f4fed0) 
0x7f02e76f3c6f: mov rax, rdx  reg(10, 1f50058)  reg(8, 1c0) 
0x7f02e76f3c72: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f3c76: add rax, r13  reg(10, 1c0)  reg(16, 1f4fed0) 
0x7f02e76f3c79: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50090) 
0x7f02e76f3c7e: jz 0x7f02e76f3c84
0x7f02e76f3c80: mov qword ptr [rax+0x30], rcx  reg(9, 1f500c8)  mem(1f500c0, 0) 
0x7f02e76f3c84: test rcx, rcx  reg(9, 1f500c8)  reg(9, 1f500c8) 
0x7f02e76f3c87: jz 0x7f02e76f3c8d
0x7f02e76f3c89: mov qword ptr [rcx+0x28], rax  reg(10, 1f50090)  mem(1f500f0, 0) 
0x7f02e76f3c8d: cmp rdx, rsi  reg(8, 1f8)  reg(4, 1f8) 
0x7f02e76f3c90: jnz 0x7f02e76f3c68
0x7f02e76f3c92: movzx eax, word ptr [r15+0xa]  reg(56, 1f50090) 
0x7f02e76f3c97: mov dword ptr [rbp+0x170], 0x0  mem(1f4d928, 0) 
0x7f02e76f3ca1: mov qword ptr [rbp+0x178], 0x0  mem(1f4d930, 0) 
0x7f02e76f3cac: mov qword ptr [rbp+0x180], 0x0  mem(1f4d938, 0) 
0x7f02e76f3cb7: mov qword ptr [rbp+0x188], 0x0  mem(1f4d940, 0) 
0x7f02e76f3cc2: mov r12, rax  reg(15, ffffffffffffffff)  reg(10, a) 
0x7f02e76f3cc5: mov dword ptr [rbp+0x198], eax  reg(56, a)  mem(1f4d950, 0) 
0x7f02e76f3ccb: mov rax, qword ptr [rip+0x249fce]  reg(10, a) 
0x7f02e76f3cd2: mov rdi, r12  reg(3, 1f500c8)  reg(15, a) 
0x7f02e76f3cd5: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3cd9: add rax, 0x10  reg(10, 7f02e7deda58) 
0x7f02e76f3cdd: mov qword ptr [rbp+0x190], rax  reg(10, 7f02e7deda68)  mem(1f4d948, 0) 
0x7f02e76f3ce4: lea rax, ptr [r12*8]  reg(10, 7f02e7deda68) 
0x7f02e76f3cec: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f3cef: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f8 1f8 1f500c8	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3cf4: sub r12, 0x1  reg(15, a) 
0x7f02e76f3cf8: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f3cfb: mov r13, rax  reg(16, 1f4fed0)  reg(10, 1f50110) 
0x7f02e76f3cfe: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f3d02: mov rbx, rax  reg(7, 1f50100)  reg(10, 1f50110) 
0x7f02e76f3d05: jz 0x7f02e76f3d4c
0x7f02e76f3d07: nop word ptr [rax+rax*1], ax
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1)  reg(7, 1f50110) 
0x7f02e76f3d18: mov rax, r14  reg(10, 1f50110)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50148)  reg(7, 1f50110) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50110 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
0x7f02e76a5d96: push 0x1c6 
0x7f02e76a5d9b: jmp 0x7f02e76a4120
opendnp3::Binary::Binary(): 1f50110 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50110, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f50118, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50120, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 9) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f50130, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f50138, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50140, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50110) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f50110)  reg(7, 1f50148) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50180)  reg(7, 1f50148) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50148 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f50148 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50148, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f50150, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50158, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 8) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f50168, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f50170, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50178, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50148) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f50148)  reg(7, 1f50180) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f501b8)  reg(7, 1f50180) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50180 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f50180 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50180, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f50188, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50190, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 7) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f501a0, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f501a8, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f501b0, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50180) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f50180)  reg(7, 1f501b8) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f501f0)  reg(7, 1f501b8) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f501b8 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f501b8 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f501b8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f501c0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f501c8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 6) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f501d8, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f501e0, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f501e8, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f501b8) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f501b8)  reg(7, 1f501f0) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50228)  reg(7, 1f501f0) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f501f0 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f501f0 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f501f0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f501f8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50200, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 5) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f50210, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f50218, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50220, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f501f0) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f501f0)  reg(7, 1f50228) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50260)  reg(7, 1f50228) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50228 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f50228 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50228, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f50230, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50238, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 4) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f50248, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f50250, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50258, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50228) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f50228)  reg(7, 1f50260) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50298)  reg(7, 1f50260) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50260 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f50260 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50260, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f50268, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50270, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 3) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f50280, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f50288, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50290, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50260) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f50260)  reg(7, 1f50298) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f502d0)  reg(7, 1f50298) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50298 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f50298 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50298, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f502a0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f502a8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 2) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f502b8, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f502c0, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f502c8, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50298) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f50298)  reg(7, 1f502d0) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50308)  reg(7, 1f502d0) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f502d0 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f502d0 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f502d0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f502d8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f502e0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 1) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f502f0, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f502f8, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50300, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f502d0) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d10: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3d15: mov rdi, rbx  reg(3, 1f502d0)  reg(7, 1f50308) 
0x7f02e76f3d18: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1b: rep stosq qword ptr [rdi]
0x7f02e76f3d1e: mov rdi, rbx  reg(3, 1f50340)  reg(7, 1f50308) 
0x7f02e76f3d21: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f50308 1f50340 1f50110 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f50308 1f50340 1f50110 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f50308, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f50310, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f50318, 0) 
0x7f02e76aac7f: ret 
0x7f02e76f3d26: sub r12, 0x1  reg(15, 0) 
0x7f02e76f3d2a: mov qword ptr [rbx+0x20], 0x0  mem(1f50328, 0) 
0x7f02e76f3d32: mov qword ptr [rbx+0x28], 0x0  mem(1f50330, 0) 
0x7f02e76f3d3a: mov qword ptr [rbx+0x30], 0x0  mem(1f50338, 0) 
0x7f02e76f3d42: add rbx, 0x38  reg(7, 1f50308) 
0x7f02e76f3d46: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f3d4a: jnz 0x7f02e76f3d10
0x7f02e76f3d4c: mov eax, dword ptr [rbp+0x198]  reg(56, 0) 
0x7f02e76f3d52: mov qword ptr [rbp+0x1a0], r13  reg(16, 1f50110)  mem(1f4d958, 0) 
0x7f02e76f3d59: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f3d5b: jz 0x7f02e76f3db2
0x7f02e76f3d5d: cmp eax, 0x1  reg(56, a) 
0x7f02e76f3d60: mov qword ptr [rbp+0x188], r13  reg(16, 1f50110)  mem(1f4d940, 0) 
0x7f02e76f3d67: jbe 0x7f02e76f3db2
0x7f02e76f3d69: lea esi, ptr [rax-0x2]  reg(47, 1f50340) 
0x7f02e76f3d6c: add rsi, 0x1  reg(4, 8) 
0x7f02e76f3d70: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f3d78: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f3d7c: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f3d7f: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f3d81: jmp 0x7f02e76f3d92
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 1f50110) 
0x7f02e76f3d96: add rax, r13  reg(10, 0)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50148)  mem(1f50140, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f50148)  reg(9, 1f50148) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50110)  mem(1f50170, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 38)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f50110)  reg(8, 38) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f3d96: add rax, r13  reg(10, 38)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50148) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50180)  mem(1f50178, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f50180)  reg(9, 1f50180) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50148)  mem(1f501a8, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 70)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f50148)  reg(8, 70) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f3d96: add rax, r13  reg(10, 70)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50180) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f501b8)  mem(1f501b0, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f501b8)  reg(9, 1f501b8) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50180)  mem(1f501e0, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, a8)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f50180)  reg(8, a8) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f3d96: add rax, r13  reg(10, a8)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f501b8) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f501f0)  mem(1f501e8, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f501f0)  reg(9, 1f501f0) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f501b8)  mem(1f50218, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, e0)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f501b8)  reg(8, e0) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f3d96: add rax, r13  reg(10, e0)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f501f0) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50228)  mem(1f50220, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f50228)  reg(9, 1f50228) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f501f0)  mem(1f50250, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 118)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f501f0)  reg(8, 118) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f3d96: add rax, r13  reg(10, 118)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50228) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50260)  mem(1f50258, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f50260)  reg(9, 1f50260) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50228)  mem(1f50288, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 150)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f50228)  reg(8, 150) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f3d96: add rax, r13  reg(10, 150)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50260) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50298)  mem(1f50290, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f50298)  reg(9, 1f50298) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50260)  mem(1f502c0, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 188)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f50260)  reg(8, 188) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f3d96: add rax, r13  reg(10, 188)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50298) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f502d0)  mem(1f502c8, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f502d0)  reg(9, 1f502d0) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50298)  mem(1f502f8, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 1c0)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3d88: mov r13, qword ptr [rbp+0x1a0]  reg(16, 1f50110) 
0x7f02e76f3d8f: mov rax, rdx  reg(10, 1f50298)  reg(8, 1c0) 
0x7f02e76f3d92: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f3d96: add rax, r13  reg(10, 1c0)  reg(16, 1f50110) 
0x7f02e76f3d99: lea rcx, ptr [r13+rdx*1]  reg(9, 1f502d0) 
0x7f02e76f3d9e: jz 0x7f02e76f3da4
0x7f02e76f3da0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50308)  mem(1f50300, 0) 
0x7f02e76f3da4: test rcx, rcx  reg(9, 1f50308)  reg(9, 1f50308) 
0x7f02e76f3da7: jz 0x7f02e76f3dad
0x7f02e76f3da9: mov qword ptr [rcx+0x28], rax  reg(10, 1f502d0)  mem(1f50330, 0) 
0x7f02e76f3dad: cmp rdx, rsi  reg(8, 1f8)  reg(4, 1f8) 
0x7f02e76f3db0: jnz 0x7f02e76f3d88
0x7f02e76f3db2: movzx eax, word ptr [r15+0xc]  reg(56, 1f502d0) 
0x7f02e76f3db7: mov dword ptr [rbp+0x1a8], 0x0  mem(1f4d960, 0) 
0x7f02e76f3dc1: mov qword ptr [rbp+0x1b0], 0x0  mem(1f4d968, 0) 
0x7f02e76f3dcc: mov qword ptr [rbp+0x1b8], 0x0  mem(1f4d970, 0) 
0x7f02e76f3dd7: mov qword ptr [rbp+0x1c0], 0x0  mem(1f4d978, 0) 
0x7f02e76f3de2: mov r12, rax  reg(15, ffffffffffffffff)  reg(10, a) 
0x7f02e76f3de5: mov dword ptr [rbp+0x1d0], eax  reg(56, a)  mem(1f4d988, 0) 
0x7f02e76f3deb: mov rax, qword ptr [rip+0x249dc6]  reg(10, a) 
0x7f02e76f3df2: mov rdi, r12  reg(3, 1f50308)  reg(15, a) 
0x7f02e76f3df5: shl rdi, 0x6  reg(3, a) 
0x7f02e76f3df9: add rax, 0x10  reg(10, 7f02e7deda78) 
0x7f02e76f3dfd: mov qword ptr [rbp+0x1c8], rax  reg(10, 7f02e7deda88)  mem(1f4d980, 0) 
0x7f02e76f3e04: lea rax, ptr [r12*8]  reg(10, 7f02e7deda88) 
0x7f02e76f3e0c: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76f3e0f: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f8 1f8 1f50308	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3e14: sub r12, 0x1  reg(15, a) 
0x7f02e76f3e18: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f3e1b: mov r13, rax  reg(16, 1f50110)  reg(10, 1f50350) 
0x7f02e76f3e1e: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f3e22: mov rbx, rax  reg(7, 1f50340)  reg(10, 1f50350) 
0x7f02e76f3e25: jz 0x7f02e76f3e6c
0x7f02e76f3e27: nop word ptr [rax+rax*1], ax
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1)  reg(7, 1f50350) 
0x7f02e76f3e38: mov rax, r14  reg(10, 1f50350)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f50388)  reg(7, 1f50350) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f50350 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
0x7f02e76a80c6: push 0x3f9 
0x7f02e76a80cb: jmp 0x7f02e76a4120
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f50350 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f50350, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50358, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50360, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 9) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f50370, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50378, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50380, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f50350) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f50350)  reg(7, 1f50388) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f503c0)  reg(7, 1f50388) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f50388 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f50388 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f50388, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50390, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50398, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 8) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f503a8, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f503b0, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f503b8, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f50388) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f50388)  reg(7, 1f503c0) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f503f8)  reg(7, 1f503c0) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f503c0 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f503c0 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f503c0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f503c8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f503d0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 7) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f503e0, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f503e8, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f503f0, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f503c0) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f503c0)  reg(7, 1f503f8) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f50430)  reg(7, 1f503f8) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f503f8 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f503f8 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f503f8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50400, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50408, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 6) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f50418, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50420, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50428, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f503f8) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f503f8)  reg(7, 1f50430) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f50468)  reg(7, 1f50430) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f50430 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f50430 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f50430, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50438, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50440, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 5) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f50450, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50458, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50460, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f50430) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f50430)  reg(7, 1f50468) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f504a0)  reg(7, 1f50468) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f50468 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f50468 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f50468, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50470, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50478, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 4) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f50488, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50490, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50498, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f50468) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f50468)  reg(7, 1f504a0) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f504d8)  reg(7, 1f504a0) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f504a0 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f504a0 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f504a0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f504a8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f504b0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 3) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f504c0, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f504c8, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f504d0, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f504a0) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f504a0)  reg(7, 1f504d8) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f50510)  reg(7, 1f504d8) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f504d8 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f504d8 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f504d8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f504e0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f504e8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 2) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f504f8, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50500, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50508, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f504d8) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f504d8)  reg(7, 1f50510) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f50548)  reg(7, 1f50510) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f50510 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f50510 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f50510, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50518, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50520, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 1) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f50530, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50538, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50540, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f50510) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e30: mov ecx, 0x7  reg(55, 0) 
0x7f02e76f3e35: mov rdi, rbx  reg(3, 1f50510)  reg(7, 1f50548) 
0x7f02e76f3e38: mov rax, r14  reg(10, 0)  reg(17, 0) 
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3b: rep stosq qword ptr [rdi]
0x7f02e76f3e3e: mov rdi, rbx  reg(3, 1f50580)  reg(7, 1f50548) 
0x7f02e76f3e41: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f50548 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f50548 1f50580 1f50350 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f50548, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f50550, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f50558, 0) 
0x7f02e76aadd3: ret 
0x7f02e76f3e46: sub r12, 0x1  reg(15, 0) 
0x7f02e76f3e4a: mov qword ptr [rbx+0x20], 0x0  mem(1f50568, 0) 
0x7f02e76f3e52: mov qword ptr [rbx+0x28], 0x0  mem(1f50570, 0) 
0x7f02e76f3e5a: mov qword ptr [rbx+0x30], 0x0  mem(1f50578, 0) 
0x7f02e76f3e62: add rbx, 0x38  reg(7, 1f50548) 
0x7f02e76f3e66: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f3e6a: jnz 0x7f02e76f3e30
0x7f02e76f3e6c: mov eax, dword ptr [rbp+0x1d0]  reg(56, 0) 
0x7f02e76f3e72: mov qword ptr [rbp+0x1d8], r13  reg(16, 1f50350)  mem(1f4d990, 0) 
0x7f02e76f3e79: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f3e7b: jz 0x7f02e76f3ed2
0x7f02e76f3e7d: cmp eax, 0x1  reg(56, a) 
0x7f02e76f3e80: mov qword ptr [rbp+0x1c0], r13  reg(16, 1f50350)  mem(1f4d978, 0) 
0x7f02e76f3e87: jbe 0x7f02e76f3ed2
0x7f02e76f3e89: lea esi, ptr [rax-0x2]  reg(47, 1f50580) 
0x7f02e76f3e8c: add rsi, 0x1  reg(4, 8) 
0x7f02e76f3e90: lea rax, ptr [rsi*8]  reg(10, a) 
0x7f02e76f3e98: shl rsi, 0x6  reg(4, 9) 
0x7f02e76f3e9c: sub rsi, rax  reg(4, 240)  reg(10, 48) 
0x7f02e76f3e9f: xor eax, eax  reg(56, 48)  reg(56, 48) 
0x7f02e76f3ea1: jmp 0x7f02e76f3eb2
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 1f50350) 
0x7f02e76f3eb6: add rax, r13  reg(10, 0)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50388)  mem(1f50380, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f50388)  reg(9, 1f50388) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50350)  mem(1f503b0, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 38) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f50350)  reg(8, 38) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 38) 
0x7f02e76f3eb6: add rax, r13  reg(10, 38)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50388) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f503c0)  mem(1f503b8, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f503c0)  reg(9, 1f503c0) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50388)  mem(1f503e8, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 70) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f50388)  reg(8, 70) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 70) 
0x7f02e76f3eb6: add rax, r13  reg(10, 70)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f503c0) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f503f8)  mem(1f503f0, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f503f8)  reg(9, 1f503f8) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f503c0)  mem(1f50420, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, a8) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f503c0)  reg(8, a8) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, a8) 
0x7f02e76f3eb6: add rax, r13  reg(10, a8)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f503f8) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50430)  mem(1f50428, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f50430)  reg(9, 1f50430) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f503f8)  mem(1f50458, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, e0) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f503f8)  reg(8, e0) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, e0) 
0x7f02e76f3eb6: add rax, r13  reg(10, e0)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50430) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50468)  mem(1f50460, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f50468)  reg(9, 1f50468) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50430)  mem(1f50490, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 118) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f50430)  reg(8, 118) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 118) 
0x7f02e76f3eb6: add rax, r13  reg(10, 118)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50468) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f504a0)  mem(1f50498, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f504a0)  reg(9, 1f504a0) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50468)  mem(1f504c8, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 150) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f50468)  reg(8, 150) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 150) 
0x7f02e76f3eb6: add rax, r13  reg(10, 150)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f504a0) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f504d8)  mem(1f504d0, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f504d8)  reg(9, 1f504d8) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f504a0)  mem(1f50500, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 188) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f504a0)  reg(8, 188) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 188) 
0x7f02e76f3eb6: add rax, r13  reg(10, 188)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f504d8) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50510)  mem(1f50508, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f50510)  reg(9, 1f50510) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f504d8)  mem(1f50538, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 1c0) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ea8: mov r13, qword ptr [rbp+0x1d8]  reg(16, 1f50350) 
0x7f02e76f3eaf: mov rax, rdx  reg(10, 1f504d8)  reg(8, 1c0) 
0x7f02e76f3eb2: lea rdx, ptr [rax+0x38]  reg(8, 1c0) 
0x7f02e76f3eb6: add rax, r13  reg(10, 1c0)  reg(16, 1f50350) 
0x7f02e76f3eb9: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50510) 
0x7f02e76f3ebe: jz 0x7f02e76f3ec4
0x7f02e76f3ec0: mov qword ptr [rax+0x30], rcx  reg(9, 1f50548)  mem(1f50540, 0) 
0x7f02e76f3ec4: test rcx, rcx  reg(9, 1f50548)  reg(9, 1f50548) 
0x7f02e76f3ec7: jz 0x7f02e76f3ecd
0x7f02e76f3ec9: mov qword ptr [rcx+0x28], rax  reg(10, 1f50510)  mem(1f50570, 0) 
0x7f02e76f3ecd: cmp rsi, rdx  reg(4, 1f8)  reg(8, 1f8) 
0x7f02e76f3ed0: jnz 0x7f02e76f3ea8
0x7f02e76f3ed2: movzx eax, word ptr [r15+0xe]  reg(56, 1f50510) 
0x7f02e76f3ed7: mov dword ptr [rbp+0x1e0], 0x0  mem(1f4d998, 0) 
0x7f02e76f3ee1: mov qword ptr [rbp+0x1e8], 0x0  mem(1f4d9a0, 0) 
0x7f02e76f3eec: mov qword ptr [rbp+0x1f0], 0x0  mem(1f4d9a8, 0) 
0x7f02e76f3ef7: mov qword ptr [rbp+0x1f8], 0x0  mem(1f4d9b0, 0) 
0x7f02e76f3f02: mov r15, rax  reg(18, 7fffbc848768)  reg(10, a) 
0x7f02e76f3f05: mov dword ptr [rbp+0x208], eax  reg(56, a)  mem(1f4d9c0, 0) 
0x7f02e76f3f0b: mov rax, qword ptr [rip+0x249086]  reg(10, a) 
0x7f02e76f3f12: add rax, 0x10  reg(10, 7f02e7deda98) 
0x7f02e76f3f16: mov qword ptr [rbp+0x200], rax  reg(10, 7f02e7dedaa8)  mem(1f4d9b8, 0) 
0x7f02e76f3f1d: lea rax, ptr [r15+r15*8]  reg(10, 7f02e7dedaa8) 
0x7f02e76f3f21: lea rax, ptr [r15+rax*2]  reg(10, 5a) 
0x7f02e76f3f25: shl rax, 0x4  reg(10, be) 
0x7f02e76f3f29: add rax, 0x8  reg(10, be0) 
0x7f02e76f3f2d: mov rdi, rax  reg(3, 1f50548)  reg(10, be8) 
0x7f02e76f3f30: mov qword ptr [rsp], rax  reg(10, be8)  mem(7fffbc848290, 7f02e793bd28) 
0x7f02e76f3f34: call 0x7f02e76a4170
operator new[](unsigned long)@plt: be8 1f8 1f8 1f50548	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76f3f39: lea r12, ptr [r15-0x1]  reg(15, ffffffffffffffff) 
0x7f02e76f3f3d: lea r13, ptr [rax+0x8]  reg(16, 1f50350) 
0x7f02e76f3f41: xor r14d, r14d  reg(79, 0)  reg(79, 0) 
0x7f02e76f3f44: mov qword ptr [rsp+0x8], rax  reg(10, 1f50590)  mem(7fffbc848298, 7fffbc848768) 
0x7f02e76f3f49: mov qword ptr [rax], r15  reg(18, a)  mem(1f50590, 0) 
0x7f02e76f3f4c: cmp r12, 0xffffffffffffffff  reg(15, 9) 
0x7f02e76f3f50: mov rbx, r13  reg(7, 1f50580)  reg(16, 1f50598) 
0x7f02e76f3f53: jz 0x7f02e76f3fa0
0x7f02e76f3f55: nop dword ptr [rax], eax
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 7f02e6e67b20) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 3)  reg(7, 1f50598) 
0x7f02e76f3f60: mov rax, r14  reg(10, 1f50590)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f506c8)  reg(7, 1f50598) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50598 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
0x7f02e76a7d76: push 0x3c4 
0x7f02e76a7d7b: jmp 0x7f02e76a4120
opendnp3::OctetData::OctetData(): 1f50598 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f506a0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50598, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 9) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f506b0, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f506b8, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f506c0, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50598) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 8) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50598)  reg(7, 1f506c8) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f507f8)  reg(7, 1f506c8) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f506c8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f506c8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f507d0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f506c8, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 8) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f507e0, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f507e8, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f507f0, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f506c8) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 7) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f506c8)  reg(7, 1f507f8) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f50928)  reg(7, 1f507f8) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f507f8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f507f8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f50900, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f507f8, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 7) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f50910, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f50918, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f50920, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f507f8) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 6) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f507f8)  reg(7, 1f50928) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f50a58)  reg(7, 1f50928) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50928 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f50928 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f50a30, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50928, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 6) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f50a40, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f50a48, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f50a50, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50928) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 5) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50928)  reg(7, 1f50a58) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f50b88)  reg(7, 1f50a58) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50a58 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f50a58 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f50b60, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50a58, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 5) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f50b70, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f50b78, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f50b80, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50a58) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 4) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50a58)  reg(7, 1f50b88) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f50cb8)  reg(7, 1f50b88) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50b88 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f50b88 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f50c90, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50b88, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 4) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f50ca0, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f50ca8, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f50cb0, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50b88) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 3) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50b88)  reg(7, 1f50cb8) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f50de8)  reg(7, 1f50cb8) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50cb8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f50cb8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f50dc0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50cb8, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 3) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f50dd0, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f50dd8, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f50de0, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50cb8) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 2) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50cb8)  reg(7, 1f50de8) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f50f18)  reg(7, 1f50de8) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50de8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f50de8 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f50ef0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50de8, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 2) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f50f00, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f50f08, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f50f10, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50de8) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 1) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50de8)  reg(7, 1f50f18) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f51048)  reg(7, 1f50f18) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f50f18 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f50f18 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f51020, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f50f18, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 1) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f51030, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f51038, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f51040, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f50f18) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, 0) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3f58: mov ecx, 0x26  reg(55, 0) 
0x7f02e76f3f5d: mov rdi, rbx  reg(3, 1f50f18)  reg(7, 1f51048) 
0x7f02e76f3f60: mov rax, r14  reg(10, 7f02e7def608)  reg(17, 0) 
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f63: rep stosq qword ptr [rdi]
0x7f02e76f3f66: mov rdi, rbx  reg(3, 1f51178)  reg(7, 1f51048) 
0x7f02e76f3f69: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f51048 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f51048 1f51170 1f50590 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f51150, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f51048, 0) 
0x7f02e76aae95: ret 
0x7f02e76f3f6e: sub r12, 0x1  reg(15, 0) 
0x7f02e76f3f72: mov qword ptr [rbx+0x118], 0x0  mem(1f51160, 0) 
0x7f02e76f3f7d: mov qword ptr [rbx+0x120], 0x0  mem(1f51168, 0) 
0x7f02e76f3f88: mov qword ptr [rbx+0x128], 0x0  mem(1f51170, 0) 
0x7f02e76f3f93: add rbx, 0x130  reg(7, 1f51048) 
0x7f02e76f3f9a: cmp r12, 0xffffffffffffffff  reg(15, ffffffffffffffff) 
0x7f02e76f3f9e: jnz 0x7f02e76f3f58
0x7f02e76f3fa0: mov eax, dword ptr [rbp+0x208]  reg(56, 7f02e7def608) 
0x7f02e76f3fa6: mov qword ptr [rbp+0x210], r13  reg(16, 1f50598)  mem(1f4d9c8, 0) 
0x7f02e76f3fad: test eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76f3faf: jz 0x7f02e76f400b
0x7f02e76f3fb1: cmp eax, 0x1  reg(56, a) 
0x7f02e76f3fb4: mov qword ptr [rbp+0x1f8], r13  reg(16, 1f50598)  mem(1f4d9b0, 0) 
0x7f02e76f3fbb: jbe 0x7f02e76f400b
0x7f02e76f3fbd: sub eax, 0x2  reg(56, a) 
0x7f02e76f3fc0: add rax, 0x1  reg(10, 8) 
0x7f02e76f3fc4: lea rdx, ptr [rax+rax*8]  reg(8, 1f50590) 
0x7f02e76f3fc8: lea rsi, ptr [rax+rdx*2]  reg(4, 1f51170) 
0x7f02e76f3fcc: xor eax, eax  reg(56, 9)  reg(56, 9) 
0x7f02e76f3fce: shl rsi, 0x4  reg(4, ab) 
0x7f02e76f3fd2: jmp 0x7f02e76f3fe2
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 51) 
0x7f02e76f3fe9: add rax, r13  reg(10, 0)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 0) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f506c8)  mem(1f506c0, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f506c8)  reg(9, 1f506c8) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50598)  mem(1f507e8, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 130)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f50598)  reg(8, 130) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 130) 
0x7f02e76f3fe9: add rax, r13  reg(10, 130)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f506c8) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f507f8)  mem(1f507f0, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f507f8)  reg(9, 1f507f8) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f506c8)  mem(1f50918, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 260)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f506c8)  reg(8, 260) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 260) 
0x7f02e76f3fe9: add rax, r13  reg(10, 260)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f507f8) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f50928)  mem(1f50920, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f50928)  reg(9, 1f50928) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f507f8)  mem(1f50a48, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 390)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f507f8)  reg(8, 390) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 390) 
0x7f02e76f3fe9: add rax, r13  reg(10, 390)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50928) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f50a58)  mem(1f50a50, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f50a58)  reg(9, 1f50a58) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50928)  mem(1f50b78, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 4c0)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f50928)  reg(8, 4c0) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 4c0) 
0x7f02e76f3fe9: add rax, r13  reg(10, 4c0)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50a58) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f50b88)  mem(1f50b80, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f50b88)  reg(9, 1f50b88) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50a58)  mem(1f50ca8, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 5f0)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f50a58)  reg(8, 5f0) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 5f0) 
0x7f02e76f3fe9: add rax, r13  reg(10, 5f0)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50b88) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f50cb8)  mem(1f50cb0, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f50cb8)  reg(9, 1f50cb8) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50b88)  mem(1f50dd8, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 720)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f50b88)  reg(8, 720) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 720) 
0x7f02e76f3fe9: add rax, r13  reg(10, 720)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50cb8) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f50de8)  mem(1f50de0, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f50de8)  reg(9, 1f50de8) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50cb8)  mem(1f50f08, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 850)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f50cb8)  reg(8, 850) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 850) 
0x7f02e76f3fe9: add rax, r13  reg(10, 850)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50de8) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f50f18)  mem(1f50f10, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f50f18)  reg(9, 1f50f18) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50de8)  mem(1f51038, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, 980)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f3fd8: mov r13, qword ptr [rbp+0x210]  reg(16, 1f50598) 
0x7f02e76f3fdf: mov rax, rdx  reg(10, 1f50de8)  reg(8, 980) 
0x7f02e76f3fe2: lea rdx, ptr [rax+0x130]  reg(8, 980) 
0x7f02e76f3fe9: add rax, r13  reg(10, 980)  reg(16, 1f50598) 
0x7f02e76f3fec: lea rcx, ptr [r13+rdx*1]  reg(9, 1f50f18) 
0x7f02e76f3ff1: jz 0x7f02e76f3ffa
0x7f02e76f3ff3: mov qword ptr [rax+0x128], rcx  reg(9, 1f51048)  mem(1f51040, 0) 
0x7f02e76f3ffa: test rcx, rcx  reg(9, 1f51048)  reg(9, 1f51048) 
0x7f02e76f3ffd: jz 0x7f02e76f4006
0x7f02e76f3fff: mov qword ptr [rcx+0x120], rax  reg(10, 1f50f18)  mem(1f51168, 0) 
0x7f02e76f4006: cmp rdx, rsi  reg(8, ab0)  reg(4, ab0) 
0x7f02e76f4009: jnz 0x7f02e76f3fd8
0x7f02e76f400b: add rsp, 0x18
0x7f02e76f400f: pop rbx  reg(7, 1f51178) 
0x7f02e76f4010: pop rbp
0x7f02e76f4011: pop r12  reg(15, ffffffffffffffff) 
0x7f02e76f4013: pop r13  reg(16, 1f50598) 
0x7f02e76f4015: pop r14  reg(17, 0) 
0x7f02e76f4017: pop r15  reg(18, a) 
0x7f02e76f4019: ret 
0x7f02e76f2665: add rsp, 0x8
0x7f02e76f2669: ret 
0x7f02e76f8fa0: movzx r8d, word ptr [rbp+0x32]  reg(61, 7fffbc848510) 
0x7f02e76f8fa5: movzx ecx, byte ptr [rbp]  reg(55, 1f51048) 
0x7f02e76f8fa9: lea rdi, ptr [rbx+0x2a8]  reg(3, 1f51048) 
0x7f02e76f8fb0: mov rdx, r14  reg(8, ab0)  reg(17, 1f4d798) 
0x7f02e76f8fb3: mov rsi, r13  reg(4, ab0)  reg(16, 7fffbc848640) 
0x7f02e76f8fb6: call 0x7f02e76a6720
opendnp3::Database::Database(opendnp3::DatabaseSizes const&, opendnp3::IEventReceiver&, opendnp3::IndexMode, opendnp3::StaticTypeBitField)@plt: 1f4d9d0 7fffbc848640 1f4d798 0	_ZN8opendnp38DatabaseC1ERKNS_13DatabaseSizesERNS_14IEventReceiverENS_9IndexModeENS_18StaticTypeBitFieldE@plt
0x7f02e76a6720: jmp qword ptr [rip+0x298bea]
0x7f02e76a6726: push 0x25f 
0x7f02e76a672b: jmp 0x7f02e76a4120
opendnp3::Database::Database(opendnp3::DatabaseSizes const&, opendnp3::IEventReceiver&, opendnp3::IndexMode, opendnp3::StaticTypeBitField): 1f4d9d0 7fffbc848640 1f4d798 0	_ZN8opendnp38DatabaseC1ERKNS_13DatabaseSizesERNS_14IEventReceiverENS_9IndexModeENS_18StaticTypeBitFieldE
0x7f02e76e4820: sub rsp, 0x8
0x7f02e76e4824: mov rax, qword ptr [rip+0x25936d]  reg(10, 1f50f18) 
0x7f02e76e482b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d798)  mem(1f4d9d8, 0) 
0x7f02e76e482f: mov byte ptr [rdi+0x10], cl  reg(30, 0)  mem(1f4d9e0, 0) 
0x7f02e76e4832: mov edx, r8d  reg(54, 1f4d798)  reg(61, ffff) 
0x7f02e76e4835: add rdi, 0x18  reg(3, 1f4d9d0) 
0x7f02e76e4839: add rax, 0x10  reg(10, 7f02e793b550) 
0x7f02e76e483d: mov qword ptr [rdi-0x18], rax  reg(10, 7f02e793b560)  mem(1f4d9d0, 0) 
0x7f02e76e4841: call 0x7f02e76a4b40
opendnp3::DatabaseBuffers::DatabaseBuffers(opendnp3::DatabaseSizes const&, opendnp3::StaticTypeBitField, opendnp3::IndexMode)@plt: 1f4d9e8 7fffbc848640 ffff 0	_ZN8opendnp315DatabaseBuffersC1ERKNS_13DatabaseSizesENS_18StaticTypeBitFieldENS_9IndexModeE@plt
0x7f02e76a4b40: jmp qword ptr [rip+0x2999da]
0x7f02e76a4b46: push 0xa1 
0x7f02e76a4b4b: jmp 0x7f02e76a4120
opendnp3::DatabaseBuffers::DatabaseBuffers(opendnp3::DatabaseSizes const&, opendnp3::StaticTypeBitField, opendnp3::IndexMode): 1f4d9e8 7fffbc848640 ffff 0	_ZN8opendnp315DatabaseBuffersC1ERKNS_13DatabaseSizesENS_18StaticTypeBitFieldENS_9IndexModeE
0x7f02e76e7b40: mov rax, qword ptr [rip+0x255e29]  reg(10, 7f02e793b560) 
0x7f02e76e7b47: push r12  reg(15, 7fffbc848380) 
0x7f02e76e7b49: mov r12d, edx  reg(73, 7fffbc848380)  reg(54, ffff) 
0x7f02e76e7b4c: push rbp
0x7f02e76e7b4d: push rbx  reg(7, 1f4d728) 
0x7f02e76e7b4e: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4d9e8) 
0x7f02e76e7b51: lea rdi, ptr [rdi+0x18]  reg(3, 1f4d9e8) 
0x7f02e76e7b55: mov ebp, ecx
0x7f02e76e7b57: lea rdx, ptr [rax+0x10]  reg(8, ffff) 
0x7f02e76e7b5b: mov qword ptr [rdi-0x18], rdx  reg(8, 7f02e793b670)  mem(1f4d9e8, 0) 
0x7f02e76e7b5f: lea rdx, ptr [rax+0x58]  reg(8, 7f02e793b670) 
0x7f02e76e7b63: add rax, 0x78  reg(10, 7f02e793b660) 
0x7f02e76e7b67: mov qword ptr [rdi-0x8], rax  reg(10, 7f02e793b6d8)  mem(1f4d9f8, 0) 
0x7f02e76e7b6b: mov qword ptr [rdi-0x10], rdx  reg(8, 7f02e793b6b8)  mem(1f4d9f0, 0) 
0x7f02e76e7b6f: call 0x7f02e76a5a10
opendnp3::StaticBuffers::StaticBuffers(opendnp3::DatabaseSizes const&)@plt: 1f4da00 7fffbc848640 7f02e793b6b8 0	_ZN8opendnp313StaticBuffersC1ERKNS_13DatabaseSizesE@plt
0x7f02e76a5a10: jmp qword ptr [rip+0x299272]
0x7f02e76a5a16: push 0x18e 
0x7f02e76a5a1b: jmp 0x7f02e76a4120
opendnp3::StaticBuffers::StaticBuffers(opendnp3::DatabaseSizes const&): 1f4da00 7fffbc848640 7f02e793b6b8 0	_ZN8opendnp313StaticBuffersC2ERKNS_13DatabaseSizesE
0x7f02e76fc570: push r15  reg(18, 7fffbc848390) 
0x7f02e76fc572: push r14  reg(17, 1f4d798) 
0x7f02e76fc574: mov r14, rsi  reg(17, 1f4d798)  reg(4, 7fffbc848640) 
0x7f02e76fc577: push r13  reg(16, 7fffbc848640) 
0x7f02e76fc579: push r12  reg(15, ffff) 
0x7f02e76fc57b: mov r12, rdi  reg(15, ffff)  reg(3, 1f4da00) 
0x7f02e76fc57e: push rbp
0x7f02e76fc57f: push rbx  reg(7, 1f4d9e8) 
0x7f02e76fc580: xor r13d, r13d  reg(76, 7fffbc848640)  reg(76, 7fffbc848640) 
0x7f02e76fc583: sub rsp, 0x18
0x7f02e76fc587: movzx ebp, word ptr [rsi]
0x7f02e76fc58a: mov rax, qword ptr [rip+0x2411df]  reg(10, 7f02e793b6d8) 
0x7f02e76fc591: add rax, 0x10  reg(10, 7f02e7ded878) 
0x7f02e76fc595: mov word ptr [rdi+0x8], bp  mem(1f4da08, 0) 
0x7f02e76fc599: mov qword ptr [rdi], rax  reg(10, 7f02e7ded888)  mem(1f4da00, 0) 
0x7f02e76fc59c: mov rax, rbp  reg(10, 7f02e7ded888) 
0x7f02e76fc59f: mov rdi, rbp  reg(3, 1f4da00) 
0x7f02e76fc5a2: shl rax, 0x4  reg(10, a) 
0x7f02e76fc5a6: sub rbp, 0x1
0x7f02e76fc5aa: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc5ae: sub rdi, rax  reg(3, 500)  reg(10, a0) 
0x7f02e76fc5b1: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 460 7fffbc848640 7f02e793b6b8 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc5b6: cmp rbp, 0xffffffffffffffff
0x7f02e76fc5ba: mov r15, rax  reg(18, 7fffbc848390)  reg(10, 1f51180) 
0x7f02e76fc5bd: mov rbx, rax  reg(7, 1f4d9e8)  reg(10, 1f51180) 
0x7f02e76fc5c0: jz 0x7f02e76fc622
0x7f02e76fc5c2: nop word ptr [rax+rax*1], ax
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 7f02e6e67b20) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 2)  reg(7, 1f51180) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 1f51180)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f511f0)  reg(7, 1f51180) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51180 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51180 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51180, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51188, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51190, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 7f02e76fc570)  reg(70, 7f02e76fc570) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51180) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5119a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51198, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5119b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5119c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f511a0, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f511a8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f511a8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f511a8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f511b0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f511b8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f511a8) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f511c0, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f511c8, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f511d0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f511d0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f511d0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f511d8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f511e0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f511e8, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51180) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f511d0)  reg(7, 1f511f0) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f51260)  reg(7, 1f511f0) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f511f0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f511f0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f511f0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f511f8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51200, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f511f0) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5120a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51208, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5120b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5120c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f51210, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51218 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51218 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51218, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51220, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51228, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f51218) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f51230, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f51238, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51240 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51240 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51240, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51248, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51250, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f51258, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f511f0) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f51240)  reg(7, 1f51260) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f512d0)  reg(7, 1f51260) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51260 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51260 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51260, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51268, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51270, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51260) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5127a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51278, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5127b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5127c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f51280, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51288 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51288 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51288, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51290, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51298, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f51288) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f512a0, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f512a8, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f512b0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f512b0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f512b0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f512b8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f512c0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f512c8, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51260) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f512b0)  reg(7, 1f512d0) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f51340)  reg(7, 1f512d0) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f512d0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f512d0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f512d0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f512d8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f512e0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f512d0) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f512ea, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f512e8, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f512eb, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f512ec, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f512f0, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f512f8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f512f8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f512f8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51300, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51308, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f512f8) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f51310, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f51318, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51320 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51320 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51320, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51328, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51330, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f51338, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f512d0) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f51320)  reg(7, 1f51340) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f513b0)  reg(7, 1f51340) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51340 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51340 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51340, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51348, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51350, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51340) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5135a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51358, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5135b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5135c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f51360, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51368 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51368 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51368, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51370, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51378, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f51368) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f51380, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f51388, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51390 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51390 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51390, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51398, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f513a0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f513a8, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51340) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f51390)  reg(7, 1f513b0) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f51420)  reg(7, 1f513b0) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f513b0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f513b0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f513b0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f513b8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f513c0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f513b0) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f513ca, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f513c8, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f513cb, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f513cc, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f513d0, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f513d8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f513d8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f513d8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f513e0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f513e8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f513d8) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f513f0, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f513f8, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51400 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51400 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51400, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51408, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51410, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f51418, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f513b0) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f51400)  reg(7, 1f51420) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f51490)  reg(7, 1f51420) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51420 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51420 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51420, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51428, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51430, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51420) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5143a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51438, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5143b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5143c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f51440, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51448 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51448 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51448, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51450, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51458, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f51448) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f51460, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f51468, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51470 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51470 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51470, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51478, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51480, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f51488, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51420) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f51470)  reg(7, 1f51490) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f51500)  reg(7, 1f51490) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51490 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51490 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51490, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51498, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f514a0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51490) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f514aa, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f514a8, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f514ab, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f514ac, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f514b0, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f514b8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f514b8 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f514b8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f514c0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f514c8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f514b8) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f514d0, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f514d8, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f514e0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f514e0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f514e0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f514e8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f514f0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f514f8, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51490) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f514e0)  reg(7, 1f51500) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f51570)  reg(7, 1f51500) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51500 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51500 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51500, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51508, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51510, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51500) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5151a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51518, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5151b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5151c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f51520, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51528 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51528 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51528, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51530, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51538, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f51528) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f51540, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f51548, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51550 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51550 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51550, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51558, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51560, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f51568, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51500) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc5c8: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc5cd: mov rdi, rbx  reg(3, 1f51550)  reg(7, 1f51570) 
0x7f02e76fc5d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d3: rep stosq qword ptr [rdi]
0x7f02e76fc5d6: mov rdi, rbx  reg(3, 1f515e0)  reg(7, 1f51570) 
0x7f02e76fc5d9: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51570 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51570 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51570, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f51578, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f51580, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5de: xor r11d, r11d  reg(70, 0)  reg(70, 0) 
0x7f02e76fc5e1: lea rdi, ptr [rbx+0x28]  reg(3, 1f51570) 
0x7f02e76fc5e5: mov byte ptr [rbx+0x1a], 0x1  mem(1f5158a, 0) 
0x7f02e76fc5e9: mov word ptr [rbx+0x18], r11w  reg(69, 0)  mem(1f51588, 10000) 
0x7f02e76fc5ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5158b, 0) 
0x7f02e76fc5f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5158c, 0) 
0x7f02e76fc5f6: mov byte ptr [rbx+0x20], 0x2  mem(1f51590, 0) 
0x7f02e76fc5fa: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f51598 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f51598 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f51598, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f515a0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f515a8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc5ff: lea rdi, ptr [rbx+0x50]  reg(3, 1f51598) 
0x7f02e76fc603: mov byte ptr [rbx+0x40], 0x0  mem(1f515b0, 0) 
0x7f02e76fc607: mov byte ptr [rbx+0x48], 0x0  mem(1f515b8, 0) 
0x7f02e76fc60b: call 0x7f02e76a59b0
opendnp3::Binary::Binary()@plt: 1f515c0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev@plt
0x7f02e76a59b0: jmp qword ptr [rip+0x2992a2]
opendnp3::Binary::Binary(): 1f515c0 1f515e0 1f51180 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f515c0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f515c8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f515d0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc610: sub rbp, 0x1
0x7f02e76fc614: mov byte ptr [rbx+0x68], 0x1  mem(1f515d8, 0) 
0x7f02e76fc618: add rbx, 0x70  reg(7, 1f51570) 
0x7f02e76fc61c: cmp rbp, 0xffffffffffffffff
0x7f02e76fc620: jnz 0x7f02e76fc5c8
0x7f02e76fc622: movzx ebp, word ptr [r14+0x2]
0x7f02e76fc627: mov rax, qword ptr [rip+0x24179a]  reg(10, 0) 
0x7f02e76fc62e: mov qword ptr [r12+0x10], r15  reg(18, 1f51180)  mem(1f4da10, 0) 
0x7f02e76fc633: add rax, 0x10  reg(10, 7f02e7ded898) 
0x7f02e76fc637: mov qword ptr [r12+0x18], rax  reg(10, 7f02e7ded8a8)  mem(1f4da18, 0) 
0x7f02e76fc63c: mov rdi, rbp  reg(3, 1f515c0) 
0x7f02e76fc63f: mov rax, rbp  reg(10, 7f02e7ded8a8) 
0x7f02e76fc642: shl rax, 0x4  reg(10, a) 
0x7f02e76fc646: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc64a: mov word ptr [r12+0x20], bp  mem(1f4da20, 0) 
0x7f02e76fc650: sub rdi, rax  reg(3, 500)  reg(10, a0) 
0x7f02e76fc653: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 460 1f515e0 1f51180 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc658: sub rbp, 0x1
0x7f02e76fc65c: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fc65f: mov r15, rax  reg(18, 1f51180)  reg(10, 1f515f0) 
0x7f02e76fc662: cmp rbp, 0xffffffffffffffff
0x7f02e76fc666: mov rbx, rax  reg(7, 1f515e0)  reg(10, 1f515f0) 
0x7f02e76fc669: jz 0x7f02e76fc6ca
0x7f02e76fc66b: nop dword ptr [rax+rax*1], eax
0x7f02e76fc670: mov ecx, 0xe  reg(55, 7f02e6e67b20) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 2)  reg(7, 1f515f0) 
0x7f02e76fc678: mov rax, r13  reg(10, 1f515f0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51660)  reg(7, 1f515f0) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f515f0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f515f0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f515f0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f515f8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51600, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 5ea)  reg(67, 5ea) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f515f0) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f5160a, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f51608, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f5160b, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f5160c, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51610, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51618 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51618 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51618, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51620, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51628, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51618) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f51630, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f51638, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51640 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51640 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51640, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51648, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51650, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f51658, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f515f0) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f51640)  reg(7, 1f51660) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f516d0)  reg(7, 1f51660) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51660 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51660 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51660, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51668, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51670, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f51660) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f5167a, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f51678, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f5167b, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f5167c, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51680, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51688 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51688 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51688, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51690, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51698, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51688) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f516a0, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f516a8, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f516b0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f516b0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f516b0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f516b8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f516c0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f516c8, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f51660) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f516b0)  reg(7, 1f516d0) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51740)  reg(7, 1f516d0) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f516d0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f516d0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f516d0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f516d8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f516e0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f516d0) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f516ea, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f516e8, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f516eb, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f516ec, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f516f0, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f516f8 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f516f8 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f516f8, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51700, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51708, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f516f8) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f51710, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f51718, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51720 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51720 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51720, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51728, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51730, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f51738, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f516d0) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f51720)  reg(7, 1f51740) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f517b0)  reg(7, 1f51740) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51740 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51740 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51740, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51748, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51750, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f51740) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f5175a, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f51758, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f5175b, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f5175c, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51760, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51768 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51768 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51768, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51770, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51778, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51768) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f51780, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f51788, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51790 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51790 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51790, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51798, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f517a0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f517a8, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f51740) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f51790)  reg(7, 1f517b0) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51820)  reg(7, 1f517b0) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f517b0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f517b0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f517b0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f517b8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f517c0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f517b0) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f517ca, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f517c8, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f517cb, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f517cc, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f517d0, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f517d8 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f517d8 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f517d8, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f517e0, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f517e8, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f517d8) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f517f0, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f517f8, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51800 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51800 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51800, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51808, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51810, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f51818, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f517b0) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f51800)  reg(7, 1f51820) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51890)  reg(7, 1f51820) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51820 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51820 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51820, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51828, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51830, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f51820) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f5183a, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f51838, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f5183b, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f5183c, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51840, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51848 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51848 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51848, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51850, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51858, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51848) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f51860, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f51868, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51870 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51870 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51870, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51878, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51880, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f51888, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f51820) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f51870)  reg(7, 1f51890) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51900)  reg(7, 1f51890) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51890 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51890 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51890, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51898, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f518a0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f51890) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f518aa, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f518a8, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f518ab, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f518ac, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f518b0, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f518b8 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f518b8 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f518b8, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f518c0, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f518c8, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f518b8) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f518d0, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f518d8, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f518e0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f518e0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f518e0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f518e8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f518f0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f518f8, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f51890) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f518e0)  reg(7, 1f51900) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51970)  reg(7, 1f51900) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51900 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51900 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51900, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51908, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51910, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f51900) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f5191a, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f51918, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f5191b, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f5191c, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51920, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51928 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51928 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51928, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51930, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51938, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51928) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f51940, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f51948, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51950 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51950 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51950, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51958, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51960, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f51968, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f51900) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f51950)  reg(7, 1f51970) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f519e0)  reg(7, 1f51970) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51970 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51970 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51970, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51978, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51980, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f51970) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f5198a, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f51988, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f5198b, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f5198c, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51990, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51998 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51998 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51998, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f519a0, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f519a8, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51998) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f519b0, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f519b8, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f519c0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f519c0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f519c0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f519c8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f519d0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f519d8, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f51970) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc670: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc675: mov rdi, rbx  reg(3, 1f519c0)  reg(7, 1f519e0) 
0x7f02e76fc678: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67b: rep stosq qword ptr [rdi]
0x7f02e76fc67e: mov rdi, rbx  reg(3, 1f51a50)  reg(7, 1f519e0) 
0x7f02e76fc681: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f519e0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f519e0 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f519e0, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f519e8, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f519f0, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc686: xor r10d, r10d  reg(67, 0)  reg(67, 0) 
0x7f02e76fc689: lea rdi, ptr [rbx+0x28]  reg(3, 1f519e0) 
0x7f02e76fc68d: mov byte ptr [rbx+0x1a], 0x0  mem(1f519fa, 0) 
0x7f02e76fc691: mov word ptr [rbx+0x18], r10w  reg(66, 0)  mem(1f519f8, 0) 
0x7f02e76fc696: mov byte ptr [rbx+0x1b], 0x2  mem(1f519fb, 0) 
0x7f02e76fc69a: mov byte ptr [rbx+0x1c], 0x0  mem(1f519fc, 0) 
0x7f02e76fc69e: mov byte ptr [rbx+0x20], 0x2  mem(1f51a00, 0) 
0x7f02e76fc6a2: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51a08 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51a08 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51a08, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51a10, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51a18, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6a7: lea rdi, ptr [rbx+0x50]  reg(3, 1f51a08) 
0x7f02e76fc6ab: mov byte ptr [rbx+0x40], 0x0  mem(1f51a20, 0) 
0x7f02e76fc6af: mov byte ptr [rbx+0x48], 0x0  mem(1f51a28, 0) 
0x7f02e76fc6b3: call 0x7f02e76a7240
opendnp3::DoubleBitBinary::DoubleBitBinary()@plt: 1f51a30 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC1Ev@plt
0x7f02e76a7240: jmp qword ptr [rip+0x29865a]
opendnp3::DoubleBitBinary::DoubleBitBinary(): 1f51a30 1f51a50 1f515f0 0	_ZN8opendnp315DoubleBitBinaryC2Ev
0x7f02e76aab40: mov byte ptr [rdi], 0x2  mem(1f51a30, 0) 
0x7f02e76aab43: mov qword ptr [rdi+0x8], 0x0  mem(1f51a38, 0) 
0x7f02e76aab4b: mov byte ptr [rdi+0x10], 0x3  mem(1f51a40, 0) 
0x7f02e76aab4f: ret 
0x7f02e76fc6b8: sub rbp, 0x1
0x7f02e76fc6bc: mov byte ptr [rbx+0x68], 0x0  mem(1f51a48, 0) 
0x7f02e76fc6c0: add rbx, 0x70  reg(7, 1f519e0) 
0x7f02e76fc6c4: cmp rbp, 0xffffffffffffffff
0x7f02e76fc6c8: jnz 0x7f02e76fc670
0x7f02e76fc6ca: movzx ebp, word ptr [r14+0x4]
0x7f02e76fc6cf: mov rax, qword ptr [rip+0x2413ea]  reg(10, 0) 
0x7f02e76fc6d6: mov qword ptr [r12+0x28], r15  reg(18, 1f515f0)  mem(1f4da28, 0) 
0x7f02e76fc6db: add rax, 0x10  reg(10, 7f02e7ded8b8) 
0x7f02e76fc6df: mov qword ptr [r12+0x30], rax  reg(10, 7f02e7ded8c8)  mem(1f4da30, 0) 
0x7f02e76fc6e4: mov rdi, rbp  reg(3, 1f51a30) 
0x7f02e76fc6e7: lea rax, ptr [rbp*8]  reg(10, 7f02e7ded8c8) 
0x7f02e76fc6ef: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc6f3: mov word ptr [r12+0x38], bp  mem(1f4da38, 0) 
0x7f02e76fc6f9: sub rdi, rax  reg(3, 500)  reg(10, 50) 
0x7f02e76fc6fc: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 4b0 1f51a50 1f515f0 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc701: sub rbp, 0x1
0x7f02e76fc705: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fc708: mov r15, rax  reg(18, 1f515f0)  reg(10, 1f51a60) 
0x7f02e76fc70b: cmp rbp, 0xffffffffffffffff
0x7f02e76fc70f: mov rbx, rax  reg(7, 1f51a50)  reg(10, 1f51a60) 
0x7f02e76fc712: jz 0x7f02e76fc77a
0x7f02e76fc714: nop dword ptr [rax], eax
0x7f02e76fc718: mov ecx, 0xf  reg(55, 7f02e6e67b20) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 2)  reg(7, 1f51a60) 
0x7f02e76fc720: mov rax, r13  reg(10, 1f51a60)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51ad8)  reg(7, 1f51a60) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51a60 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51a60 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51a60, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51a68, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51a70, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 7fffbc848380)  reg(64, 7fffbc848380) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51a60) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51a7a, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51a78, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51a7b, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51a7c, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51a80, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51a88, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51a90 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51a90 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51a90, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51a98, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51aa0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51a90) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51aa8, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51ab0, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51ab8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51ab8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51ab8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51ac0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51ac8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51ad0, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51a60) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51ab8)  reg(7, 1f51ad8) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51b50)  reg(7, 1f51ad8) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51ad8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51ad8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51ad8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51ae0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51ae8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51ad8) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51af2, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51af0, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51af3, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51af4, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51af8, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51b00, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51b08 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51b08 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51b08, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51b10, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51b18, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51b08) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51b20, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51b28, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51b30 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51b30 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51b30, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51b38, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51b40, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51b48, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51ad8) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51b30)  reg(7, 1f51b50) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51bc8)  reg(7, 1f51b50) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51b50 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51b50 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51b50, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51b58, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51b60, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51b50) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51b6a, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51b68, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51b6b, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51b6c, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51b70, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51b78, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51b80 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51b80 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51b80, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51b88, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51b90, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51b80) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51b98, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51ba0, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51ba8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51ba8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51ba8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51bb0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51bb8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51bc0, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51b50) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51ba8)  reg(7, 1f51bc8) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51c40)  reg(7, 1f51bc8) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51bc8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51bc8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51bc8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51bd0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51bd8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51bc8) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51be2, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51be0, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51be3, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51be4, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51be8, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51bf0, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51bf8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51bf8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51bf8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51c00, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51c08, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51bf8) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51c10, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51c18, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51c20 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51c20 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51c20, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51c28, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51c30, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51c38, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51bc8) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51c20)  reg(7, 1f51c40) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51cb8)  reg(7, 1f51c40) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51c40 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51c40 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51c40, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51c48, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51c50, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51c40) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51c5a, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51c58, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51c5b, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51c5c, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51c60, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51c68, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51c70 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51c70 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51c70, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51c78, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51c80, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51c70) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51c88, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51c90, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51c98 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51c98 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51c98, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51ca0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51ca8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51cb0, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51c40) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51c98)  reg(7, 1f51cb8) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51d30)  reg(7, 1f51cb8) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51cb8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51cb8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51cb8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51cc0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51cc8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51cb8) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51cd2, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51cd0, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51cd3, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51cd4, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51cd8, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51ce0, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51ce8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51ce8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51ce8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51cf0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51cf8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51ce8) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51d00, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51d08, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51d10 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51d10 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51d10, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51d18, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51d20, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51d28, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51cb8) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51d10)  reg(7, 1f51d30) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51da8)  reg(7, 1f51d30) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51d30 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51d30 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51d30, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51d38, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51d40, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51d30) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51d4a, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51d48, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51d4b, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51d4c, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51d50, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51d58, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51d60 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51d60 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51d60, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51d68, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51d70, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51d60) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51d78, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51d80, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51d88 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51d88 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51d88, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51d90, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51d98, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51da0, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51d30) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51d88)  reg(7, 1f51da8) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51e20)  reg(7, 1f51da8) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51da8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51da8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51da8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51db0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51db8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51da8) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51dc2, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51dc0, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51dc3, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51dc4, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51dc8, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51dd0, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51dd8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51dd8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51dd8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51de0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51de8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51dd8) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51df0, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51df8, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51e00 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51e00 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51e00, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51e08, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51e10, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51e18, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51da8) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51e00)  reg(7, 1f51e20) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51e98)  reg(7, 1f51e20) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51e20 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51e20 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51e20, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51e28, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51e30, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51e20) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51e3a, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51e38, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51e3b, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51e3c, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51e40, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51e48, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51e50 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51e50 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51e50, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51e58, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51e60, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51e50) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51e68, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51e70, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51e78 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51e78 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51e78, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51e80, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51e88, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51e90, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51e20) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc718: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc71d: mov rdi, rbx  reg(3, 1f51e78)  reg(7, 1f51e98) 
0x7f02e76fc720: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc723: rep stosq qword ptr [rdi]
0x7f02e76fc726: mov rdi, rbx  reg(3, 1f51f10)  reg(7, 1f51e98) 
0x7f02e76fc729: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51e98 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51e98 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51e98, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51ea0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51ea8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc72e: xor r9d, r9d  reg(64, 0)  reg(64, 0) 
0x7f02e76fc731: lea rdi, ptr [rbx+0x30]  reg(3, 1f51e98) 
0x7f02e76fc735: mov byte ptr [rbx+0x1a], 0x0  mem(1f51eb2, 0) 
0x7f02e76fc739: mov word ptr [rbx+0x18], r9w  reg(63, 0)  mem(1f51eb0, 0) 
0x7f02e76fc73e: mov byte ptr [rbx+0x1b], 0x2  mem(1f51eb3, 0) 
0x7f02e76fc742: mov byte ptr [rbx+0x1c], 0x0  mem(1f51eb4, 0) 
0x7f02e76fc746: mov qword ptr [rbx+0x20], 0x0  mem(1f51eb8, 0) 
0x7f02e76fc74e: mov byte ptr [rbx+0x28], 0x2  mem(1f51ec0, 0) 
0x7f02e76fc752: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51ec8 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51ec8 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51ec8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51ed0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51ed8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc757: lea rdi, ptr [rbx+0x58]  reg(3, 1f51ec8) 
0x7f02e76fc75b: mov byte ptr [rbx+0x48], 0x0  mem(1f51ee0, 0) 
0x7f02e76fc75f: mov byte ptr [rbx+0x50], 0x0  mem(1f51ee8, 0) 
0x7f02e76fc763: call 0x7f02e76a49d0
opendnp3::Analog::Analog()@plt: 1f51ef0 1f51f10 1f51a60 0	_ZN8opendnp36AnalogC1Ev@plt
0x7f02e76a49d0: jmp qword ptr [rip+0x299a92]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f51ef0 1f51f10 1f51a60 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f51ef0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f51ef8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f51f00, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc768: sub rbp, 0x1
0x7f02e76fc76c: mov byte ptr [rbx+0x70], 0x0  mem(1f51f08, 0) 
0x7f02e76fc770: add rbx, 0x78  reg(7, 1f51e98) 
0x7f02e76fc774: cmp rbp, 0xffffffffffffffff
0x7f02e76fc778: jnz 0x7f02e76fc718
0x7f02e76fc77a: movzx ebp, word ptr [r14+0x6]
0x7f02e76fc77f: mov rax, qword ptr [rip+0x240f7a]  reg(10, 0) 
0x7f02e76fc786: mov qword ptr [r12+0x40], r15  reg(18, 1f51a60)  mem(1f4da40, 0) 
0x7f02e76fc78b: add rax, 0x10  reg(10, 7f02e7ded8d8) 
0x7f02e76fc78f: mov qword ptr [r12+0x48], rax  reg(10, 7f02e7ded8e8)  mem(1f4da48, 0) 
0x7f02e76fc794: mov rdi, rbp  reg(3, 1f51ef0) 
0x7f02e76fc797: lea rax, ptr [rbp*8]  reg(10, 7f02e7ded8e8) 
0x7f02e76fc79f: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc7a3: mov word ptr [r12+0x50], bp  mem(1f4da50, 0) 
0x7f02e76fc7a9: sub rdi, rax  reg(3, 500)  reg(10, 50) 
0x7f02e76fc7ac: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 4b0 1f51f10 1f51a60 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc7b1: sub rbp, 0x1
0x7f02e76fc7b5: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fc7b8: mov r15, rax  reg(18, 1f51a60)  reg(10, 1f51f20) 
0x7f02e76fc7bb: cmp rbp, 0xffffffffffffffff
0x7f02e76fc7bf: mov rbx, rax  reg(7, 1f51f10)  reg(10, 1f51f20) 
0x7f02e76fc7c2: jz 0x7f02e76fc829
0x7f02e76fc7c4: nop dword ptr [rax], eax
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 7f02e6e67b20) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 2)  reg(7, 1f51f20) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 1f51f20)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f51f98)  reg(7, 1f51f20) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f51f20 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f51f20 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f51f20, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f51f28, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f51f30, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, ffff)  reg(61, ffff) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f51f20) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f51f3a, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f51f38, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f51f3b, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f51f3c, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f51f40, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f51f48, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f51f50 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f51f50 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f51f50, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f51f58, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f51f60, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f51f50) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f51f68, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f51f70, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f51f78 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f51f78 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f51f78, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f51f80, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f51f88, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f51f90, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f51f20) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f51f78)  reg(7, 1f51f98) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f52010)  reg(7, 1f51f98) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f51f98 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f51f98 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f51f98, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f51fa0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f51fa8, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f51f98) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f51fb2, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f51fb0, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f51fb3, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f51fb4, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f51fb8, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f51fc0, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f51fc8 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f51fc8 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f51fc8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f51fd0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f51fd8, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f51fc8) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f51fe0, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f51fe8, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f51ff0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f51ff0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f51ff0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f51ff8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52000, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f52008, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f51f98) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f51ff0)  reg(7, 1f52010) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f52088)  reg(7, 1f52010) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52010 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52010 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52010, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52018, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52020, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f52010) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f5202a, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f52028, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5202b, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5202c, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52030, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f52038, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52040 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52040 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52040, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52048, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52050, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f52040) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f52058, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f52060, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52068 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52068 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52068, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52070, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52078, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f52080, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f52010) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f52068)  reg(7, 1f52088) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f52100)  reg(7, 1f52088) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52088 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52088 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52088, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52090, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52098, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f52088) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f520a2, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f520a0, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f520a3, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f520a4, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f520a8, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f520b0, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f520b8 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f520b8 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f520b8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f520c0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f520c8, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f520b8) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f520d0, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f520d8, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f520e0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f520e0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f520e0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f520e8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f520f0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f520f8, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f52088) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f520e0)  reg(7, 1f52100) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f52178)  reg(7, 1f52100) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52100 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52100 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52100, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52108, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52110, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f52100) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f5211a, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f52118, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5211b, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5211c, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52120, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f52128, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52130 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52130 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52130, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52138, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52140, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f52130) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f52148, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f52150, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52158 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52158 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52158, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52160, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52168, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f52170, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f52100) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f52158)  reg(7, 1f52178) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f521f0)  reg(7, 1f52178) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52178 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52178 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52178, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52180, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52188, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f52178) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f52192, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f52190, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f52193, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f52194, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52198, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f521a0, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f521a8 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f521a8 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f521a8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f521b0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f521b8, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f521a8) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f521c0, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f521c8, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f521d0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f521d0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f521d0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f521d8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f521e0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f521e8, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f52178) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f521d0)  reg(7, 1f521f0) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f52268)  reg(7, 1f521f0) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f521f0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f521f0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f521f0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f521f8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52200, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f521f0) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f5220a, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f52208, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f5220b, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f5220c, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52210, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f52218, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52220 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52220 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52220, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52228, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52230, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f52220) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f52238, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f52240, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52248 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52248 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52248, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52250, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52258, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f52260, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f521f0) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f52248)  reg(7, 1f52268) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f522e0)  reg(7, 1f52268) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52268 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52268 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52268, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52270, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52278, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f52268) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f52282, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f52280, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f52283, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f52284, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52288, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f52290, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52298 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52298 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52298, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f522a0, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f522a8, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f52298) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f522b0, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f522b8, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f522c0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f522c0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f522c0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f522c8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f522d0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f522d8, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f52268) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f522c0)  reg(7, 1f522e0) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f52358)  reg(7, 1f522e0) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f522e0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f522e0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f522e0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f522e8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f522f0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f522e0) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f522fa, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f522f8, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f522fb, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f522fc, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52300, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f52308, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52310 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52310 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52310, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52318, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52320, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f52310) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f52328, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f52330, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52338 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52338 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52338, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52340, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52348, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f52350, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f522e0) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc7c8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc7cd: mov rdi, rbx  reg(3, 1f52338)  reg(7, 1f52358) 
0x7f02e76fc7d0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d3: rep stosq qword ptr [rdi]
0x7f02e76fc7d6: mov rdi, rbx  reg(3, 1f523d0)  reg(7, 1f52358) 
0x7f02e76fc7d9: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52358 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52358 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52358, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52360, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52368, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc7de: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc7e1: lea rdi, ptr [rbx+0x30]  reg(3, 1f52358) 
0x7f02e76fc7e5: mov byte ptr [rbx+0x1a], 0x0  mem(1f52372, 0) 
0x7f02e76fc7e9: mov word ptr [rbx+0x18], r8w  reg(60, 0)  mem(1f52370, 0) 
0x7f02e76fc7ee: mov byte ptr [rbx+0x1b], 0x2  mem(1f52373, 0) 
0x7f02e76fc7f2: mov byte ptr [rbx+0x1c], 0x0  mem(1f52374, 0) 
0x7f02e76fc7f6: mov dword ptr [rbx+0x20], 0x0  mem(1f52378, 0) 
0x7f02e76fc7fd: mov byte ptr [rbx+0x28], 0x2  mem(1f52380, 0) 
0x7f02e76fc801: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f52388 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f52388 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52388, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52390, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52398, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc806: lea rdi, ptr [rbx+0x58]  reg(3, 1f52388) 
0x7f02e76fc80a: mov byte ptr [rbx+0x48], 0x0  mem(1f523a0, 0) 
0x7f02e76fc80e: mov byte ptr [rbx+0x50], 0x0  mem(1f523a8, 0) 
0x7f02e76fc812: call 0x7f02e76a5370
opendnp3::Counter::Counter()@plt: 1f523b0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev@plt
0x7f02e76a5370: jmp qword ptr [rip+0x2995c2]
opendnp3::Counter::Counter(): 1f523b0 1f523d0 1f51f20 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f523b0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f523b8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f523c0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc817: sub rbp, 0x1
0x7f02e76fc81b: mov byte ptr [rbx+0x70], 0x0  mem(1f523c8, 0) 
0x7f02e76fc81f: add rbx, 0x78  reg(7, 1f52358) 
0x7f02e76fc823: cmp rbp, 0xffffffffffffffff
0x7f02e76fc827: jnz 0x7f02e76fc7c8
0x7f02e76fc829: movzx ebp, word ptr [r14+0x8]
0x7f02e76fc82e: mov rax, qword ptr [rip+0x241333]  reg(10, 0) 
0x7f02e76fc835: mov qword ptr [r12+0x58], r15  reg(18, 1f51f20)  mem(1f4da58, 0) 
0x7f02e76fc83a: add rax, 0x10  reg(10, 7f02e7ded8f8) 
0x7f02e76fc83e: mov qword ptr [r12+0x60], rax  reg(10, 7f02e7ded908)  mem(1f4da60, 0) 
0x7f02e76fc843: mov rdi, rbp  reg(3, 1f523b0) 
0x7f02e76fc846: lea rax, ptr [rbp*8]  reg(10, 7f02e7ded908) 
0x7f02e76fc84e: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc852: mov word ptr [r12+0x68], bp  mem(1f4da68, 0) 
0x7f02e76fc858: sub rdi, rax  reg(3, 500)  reg(10, 50) 
0x7f02e76fc85b: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 4b0 1f523d0 1f51f20 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc860: sub rbp, 0x1
0x7f02e76fc864: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fc867: mov r15, rax  reg(18, 1f51f20)  reg(10, 1f523e0) 
0x7f02e76fc86a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc86e: mov rbx, rax  reg(7, 1f523d0)  reg(10, 1f523e0) 
0x7f02e76fc871: jz 0x7f02e76fc8d7
0x7f02e76fc873: nop dword ptr [rax+rax*1], eax
0x7f02e76fc878: mov ecx, 0xf  reg(55, 7f02e6e67b20) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 2)  reg(7, 1f523e0) 
0x7f02e76fc880: mov rax, r13  reg(10, 1f523e0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f52458)  reg(7, 1f523e0) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f523e0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f523e0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f523e0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f523e8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f523f0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f523e0)  reg(45, 1f523e0) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f523fa, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f523fb, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f523f8, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f523fc, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f52400, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f52408, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52410 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52410 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52410, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52418, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52420, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52410) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52428, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52430, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52438 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52438 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52438, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52440, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52448, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52450, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f523e0) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f52438)  reg(7, 1f52458) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f524d0)  reg(7, 1f52458) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52458 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52458 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52458, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52460, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52468, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f52458)  reg(45, 1f52458) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f52472, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f52473, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f52470, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f52474, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f52478, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f52480, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52488 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52488 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52488, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52490, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52498, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52488) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f524a0, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f524a8, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f524b0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f524b0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f524b0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f524b8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f524c0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f524c8, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f52458) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f524b0)  reg(7, 1f524d0) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f52548)  reg(7, 1f524d0) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f524d0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f524d0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f524d0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f524d8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f524e0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f524d0)  reg(45, 1f524d0) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f524ea, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f524eb, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f524e8, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f524ec, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f524f0, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f524f8, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52500 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52500 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52500, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52508, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52510, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52500) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52518, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52520, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52528 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52528 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52528, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52530, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52538, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52540, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f524d0) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f52528)  reg(7, 1f52548) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f525c0)  reg(7, 1f52548) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52548 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52548 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52548, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52550, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52558, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f52548)  reg(45, 1f52548) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f52562, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f52563, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f52560, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f52564, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f52568, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f52570, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52578 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52578 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52578, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52580, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52588, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52578) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52590, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52598, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f525a0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f525a0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f525a0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f525a8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f525b0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f525b8, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f52548) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f525a0)  reg(7, 1f525c0) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f52638)  reg(7, 1f525c0) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f525c0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f525c0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f525c0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f525c8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f525d0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f525c0)  reg(45, 1f525c0) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f525da, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f525db, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f525d8, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f525dc, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f525e0, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f525e8, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f525f0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f525f0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f525f0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f525f8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52600, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f525f0) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52608, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52610, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52618 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52618 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52618, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52620, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52628, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52630, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f525c0) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f52618)  reg(7, 1f52638) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f526b0)  reg(7, 1f52638) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52638 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52638 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52638, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52640, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52648, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f52638)  reg(45, 1f52638) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f52652, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f52653, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f52650, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f52654, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f52658, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f52660, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52668 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52668 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52668, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52670, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52678, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52668) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52680, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52688, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52690 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52690 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52690, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52698, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f526a0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f526a8, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f52638) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f52690)  reg(7, 1f526b0) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f52728)  reg(7, 1f526b0) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f526b0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f526b0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f526b0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f526b8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f526c0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f526b0)  reg(45, 1f526b0) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f526ca, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f526cb, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f526c8, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f526cc, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f526d0, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f526d8, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f526e0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f526e0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f526e0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f526e8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f526f0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f526e0) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f526f8, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52700, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52708 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52708 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52708, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52710, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52718, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52720, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f526b0) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f52708)  reg(7, 1f52728) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f527a0)  reg(7, 1f52728) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52728 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52728 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52728, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52730, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52738, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f52728)  reg(45, 1f52728) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f52742, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f52743, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f52740, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f52744, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f52748, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f52750, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52758 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52758 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52758, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52760, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52768, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52758) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52770, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52778, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52780 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52780 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52780, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52788, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52790, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52798, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f52728) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f52780)  reg(7, 1f527a0) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f52818)  reg(7, 1f527a0) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f527a0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f527a0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f527a0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f527a8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f527b0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f527a0)  reg(45, 1f527a0) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f527ba, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f527bb, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f527b8, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f527bc, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f527c0, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f527c8, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f527d0 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f527d0 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f527d0, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f527d8, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f527e0, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f527d0) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f527e8, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f527f0, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f527f8 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f527f8 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f527f8, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52800, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52808, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52810, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f527a0) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc878: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc87d: mov rdi, rbx  reg(3, 1f527f8)  reg(7, 1f52818) 
0x7f02e76fc880: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc883: rep stosq qword ptr [rdi]
0x7f02e76fc886: mov rdi, rbx  reg(3, 1f52890)  reg(7, 1f52818) 
0x7f02e76fc889: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52818 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52818 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52818, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52820, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52828, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc88e: xor edi, edi  reg(45, 1f52818)  reg(45, 1f52818) 
0x7f02e76fc890: mov byte ptr [rbx+0x1a], 0x0  mem(1f52832, 0) 
0x7f02e76fc894: mov byte ptr [rbx+0x1b], 0x2  mem(1f52833, 0) 
0x7f02e76fc898: mov word ptr [rbx+0x18], di  reg(41, 0)  mem(1f52830, 2000000) 
0x7f02e76fc89c: lea rdi, ptr [rbx+0x30]  reg(3, 0) 
0x7f02e76fc8a0: mov byte ptr [rbx+0x1c], 0x0  mem(1f52834, 0) 
0x7f02e76fc8a4: mov dword ptr [rbx+0x20], 0x0  mem(1f52838, 0) 
0x7f02e76fc8ab: mov byte ptr [rbx+0x28], 0x2  mem(1f52840, 0) 
0x7f02e76fc8af: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52848 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52848 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52848, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52850, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52858, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8b4: lea rdi, ptr [rbx+0x58]  reg(3, 1f52848) 
0x7f02e76fc8b8: mov byte ptr [rbx+0x48], 0x0  mem(1f52860, 0) 
0x7f02e76fc8bc: mov byte ptr [rbx+0x50], 0x0  mem(1f52868, 0) 
0x7f02e76fc8c0: call 0x7f02e76a5b50
opendnp3::FrozenCounter::FrozenCounter()@plt: 1f52870 1f52890 1f523e0 0	_ZN8opendnp313FrozenCounterC1Ev@plt
0x7f02e76a5b50: jmp qword ptr [rip+0x2991d2]
opendnp3::Counter::Counter(): 1f52870 1f52890 1f523e0 0	_ZN8opendnp37CounterC1Ev
0x7f02e76aad70: mov byte ptr [rdi], 0x2  mem(1f52870, 0) 
0x7f02e76aad73: mov qword ptr [rdi+0x8], 0x0  mem(1f52878, 0) 
0x7f02e76aad7b: mov dword ptr [rdi+0x10], 0x0  mem(1f52880, 0) 
0x7f02e76aad82: ret 
0x7f02e76fc8c5: sub rbp, 0x1
0x7f02e76fc8c9: mov byte ptr [rbx+0x70], 0x0  mem(1f52888, 0) 
0x7f02e76fc8cd: add rbx, 0x78  reg(7, 1f52818) 
0x7f02e76fc8d1: cmp rbp, 0xffffffffffffffff
0x7f02e76fc8d5: jnz 0x7f02e76fc878
0x7f02e76fc8d7: movzx ebp, word ptr [r14+0xa]
0x7f02e76fc8dc: mov rax, qword ptr [rip+0x240b55]  reg(10, 0) 
0x7f02e76fc8e3: mov qword ptr [r12+0x70], r15  reg(18, 1f523e0)  mem(1f4da70, 0) 
0x7f02e76fc8e8: add rax, 0x10  reg(10, 7f02e7ded918) 
0x7f02e76fc8ec: mov qword ptr [r12+0x78], rax  reg(10, 7f02e7ded928)  mem(1f4da78, 0) 
0x7f02e76fc8f1: mov rdi, rbp  reg(3, 1f52870) 
0x7f02e76fc8f4: mov rax, rbp  reg(10, 7f02e7ded928) 
0x7f02e76fc8f7: shl rax, 0x4  reg(10, a) 
0x7f02e76fc8fb: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc8ff: mov word ptr [r12+0x80], bp  mem(1f4da80, 0) 
0x7f02e76fc908: sub rdi, rax  reg(3, 500)  reg(10, a0) 
0x7f02e76fc90b: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 460 1f52890 1f523e0 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc910: sub rbp, 0x1
0x7f02e76fc914: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fc917: mov r15, rax  reg(18, 1f523e0)  reg(10, 1f528a0) 
0x7f02e76fc91a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc91e: mov rbx, rax  reg(7, 1f52890)  reg(10, 1f528a0) 
0x7f02e76fc921: jz 0x7f02e76fc980
0x7f02e76fc923: nop dword ptr [rax+rax*1], eax
0x7f02e76fc928: mov ecx, 0xe  reg(55, 7f02e6e67b20) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 2)  reg(7, 1f528a0) 
0x7f02e76fc930: mov rax, r13  reg(10, 1f528a0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52910)  reg(7, 1f528a0) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f528a0 1f52d00 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f528a0 1f52d00 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f528a0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f528a8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f528b0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 1f52d00)  reg(47, 1f52d00) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f528a0) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f528ba, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f528b8, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f528bb, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f528bc, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f528c0, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f528c8 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f528c8 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f528c8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f528d0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f528d8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f528c8) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f528e0, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f528e8, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f528f0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f528f0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f528f0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f528f8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52900, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52908, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f528a0) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f528f0)  reg(7, 1f52910) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52980)  reg(7, 1f52910) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52910 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52910 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52910, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52918, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52920, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52910) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f5292a, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52928, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f5292b, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f5292c, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52930, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52938 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52938 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52938, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52940, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52948, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52938) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52950, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52958, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52960 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52960 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52960, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52968, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52970, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52978, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52910) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52960)  reg(7, 1f52980) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f529f0)  reg(7, 1f52980) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52980 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52980 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52980, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52988, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52990, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52980) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f5299a, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52998, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f5299b, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f5299c, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f529a0, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f529a8 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f529a8 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f529a8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f529b0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f529b8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f529a8) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f529c0, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f529c8, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f529d0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f529d0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f529d0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f529d8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f529e0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f529e8, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52980) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f529d0)  reg(7, 1f529f0) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52a60)  reg(7, 1f529f0) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f529f0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f529f0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f529f0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f529f8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52a00, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f529f0) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52a0a, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52a08, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52a0b, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52a0c, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52a10, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52a18 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52a18 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52a18, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52a20, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52a28, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52a18) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52a30, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52a38, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52a40 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52a40 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52a40, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52a48, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52a50, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52a58, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f529f0) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52a40)  reg(7, 1f52a60) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52ad0)  reg(7, 1f52a60) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52a60 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52a60 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52a60, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52a68, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52a70, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52a60) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52a7a, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52a78, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52a7b, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52a7c, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52a80, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52a88 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52a88 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52a88, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52a90, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52a98, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52a88) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52aa0, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52aa8, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52ab0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52ab0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52ab0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52ab8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52ac0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52ac8, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52a60) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52ab0)  reg(7, 1f52ad0) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52b40)  reg(7, 1f52ad0) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52ad0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52ad0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52ad0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52ad8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52ae0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52ad0) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52aea, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52ae8, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52aeb, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52aec, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52af0, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52af8 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52af8 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52af8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52b00, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52b08, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52af8) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52b10, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52b18, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52b20 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52b20 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52b20, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52b28, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52b30, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52b38, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52ad0) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52b20)  reg(7, 1f52b40) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52bb0)  reg(7, 1f52b40) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52b40 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52b40 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52b40, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52b48, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52b50, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52b40) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52b5a, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52b58, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52b5b, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52b5c, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52b60, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52b68 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52b68 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52b68, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52b70, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52b78, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52b68) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52b80, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52b88, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52b90 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52b90 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52b90, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52b98, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52ba0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52ba8, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52b40) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52b90)  reg(7, 1f52bb0) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52c20)  reg(7, 1f52bb0) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52bb0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52bb0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52bb0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52bb8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52bc0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52bb0) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52bca, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52bc8, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52bcb, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52bcc, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52bd0, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52bd8 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52bd8 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52bd8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52be0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52be8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52bd8) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52bf0, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52bf8, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52c00 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52c00 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52c00, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52c08, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52c10, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52c18, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52bb0) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52c00)  reg(7, 1f52c20) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52c90)  reg(7, 1f52c20) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52c20 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52c20 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52c20, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52c28, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52c30, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52c20) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52c3a, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52c38, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52c3b, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52c3c, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52c40, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52c48 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52c48 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52c48, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52c50, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52c58, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52c48) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52c60, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52c68, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52c70 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52c70 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52c70, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52c78, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52c80, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52c88, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52c20) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc928: mov ecx, 0xe  reg(55, 0) 
0x7f02e76fc92d: mov rdi, rbx  reg(3, 1f52c70)  reg(7, 1f52c90) 
0x7f02e76fc930: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc933: rep stosq qword ptr [rdi]
0x7f02e76fc936: mov rdi, rbx  reg(3, 1f52d00)  reg(7, 1f52c90) 
0x7f02e76fc939: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52c90 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52c90 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52c90, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52c98, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52ca0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc93e: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76fc940: lea rdi, ptr [rbx+0x28]  reg(3, 1f52c90) 
0x7f02e76fc944: mov byte ptr [rbx+0x1a], 0x0  mem(1f52caa, 0) 
0x7f02e76fc948: mov word ptr [rbx+0x18], si  reg(40, 0)  mem(1f52ca8, 0) 
0x7f02e76fc94c: mov byte ptr [rbx+0x1b], 0x2  mem(1f52cab, 0) 
0x7f02e76fc950: mov byte ptr [rbx+0x1c], 0x0  mem(1f52cac, 0) 
0x7f02e76fc954: mov byte ptr [rbx+0x20], 0x2  mem(1f52cb0, 0) 
0x7f02e76fc958: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52cb8 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52cb8 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52cb8, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52cc0, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52cc8, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc95d: lea rdi, ptr [rbx+0x50]  reg(3, 1f52cb8) 
0x7f02e76fc961: mov byte ptr [rbx+0x40], 0x0  mem(1f52cd0, 0) 
0x7f02e76fc965: mov byte ptr [rbx+0x48], 0x0  mem(1f52cd8, 0) 
0x7f02e76fc969: call 0x7f02e76a5d90
opendnp3::BinaryOutputStatus::BinaryOutputStatus()@plt: 1f52ce0 0 1f528a0 0	_ZN8opendnp318BinaryOutputStatusC1Ev@plt
0x7f02e76a5d90: jmp qword ptr [rip+0x2990b2]
opendnp3::Binary::Binary(): 1f52ce0 0 1f528a0 0	_ZN8opendnp36BinaryC1Ev
0x7f02e76aac70: mov byte ptr [rdi], 0x2  mem(1f52ce0, 0) 
0x7f02e76aac73: mov qword ptr [rdi+0x8], 0x0  mem(1f52ce8, 0) 
0x7f02e76aac7b: mov byte ptr [rdi+0x10], 0x0  mem(1f52cf0, 0) 
0x7f02e76aac7f: ret 
0x7f02e76fc96e: sub rbp, 0x1
0x7f02e76fc972: mov byte ptr [rbx+0x68], 0x0  mem(1f52cf8, 0) 
0x7f02e76fc976: add rbx, 0x70  reg(7, 1f52c90) 
0x7f02e76fc97a: cmp rbp, 0xffffffffffffffff
0x7f02e76fc97e: jnz 0x7f02e76fc928
0x7f02e76fc980: movzx ebp, word ptr [r14+0xc]
0x7f02e76fc985: mov rax, qword ptr [rip+0x240ec4]  reg(10, 0) 
0x7f02e76fc98c: mov qword ptr [r12+0x88], r15  reg(18, 1f528a0)  mem(1f4da88, 0) 
0x7f02e76fc994: add rax, 0x10  reg(10, 7f02e7ded938) 
0x7f02e76fc998: mov qword ptr [r12+0x90], rax  reg(10, 7f02e7ded948)  mem(1f4da90, 0) 
0x7f02e76fc9a0: mov rdi, rbp  reg(3, 1f52ce0) 
0x7f02e76fc9a3: lea rax, ptr [rbp*8]  reg(10, 7f02e7ded948) 
0x7f02e76fc9ab: shl rdi, 0x7  reg(3, a) 
0x7f02e76fc9af: mov word ptr [r12+0x98], bp  mem(1f4da98, 0) 
0x7f02e76fc9b8: sub rdi, rax  reg(3, 500)  reg(10, 50) 
0x7f02e76fc9bb: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 4b0 0 1f528a0 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fc9c0: sub rbp, 0x1
0x7f02e76fc9c4: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fc9c7: mov r15, rax  reg(18, 1f528a0)  reg(10, 1f52d10) 
0x7f02e76fc9ca: cmp rbp, 0xffffffffffffffff
0x7f02e76fc9ce: mov rbx, rax  reg(7, 1f52d00)  reg(10, 1f52d10) 
0x7f02e76fc9d1: jz 0x7f02e76fca38
0x7f02e76fc9d3: nop dword ptr [rax+rax*1], eax
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 7f02e6e67b20) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 2)  reg(7, 1f52d10) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 1f52d10)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f52d88)  reg(7, 1f52d10) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52d10 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52d10 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52d10, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52d18, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52d20, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52d10) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52d2a, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52d28, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52d2b, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52d2c, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f52d30, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f52d38, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52d40 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52d40 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52d40, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52d48, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52d50, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f52d40) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f52d58, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f52d60, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52d68 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52d68 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52d68, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52d70, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52d78, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f52d80, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52d10) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f52d68)  reg(7, 1f52d88) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f52e00)  reg(7, 1f52d88) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52d88 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52d88 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52d88, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52d90, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52d98, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52d88) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52da2, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52da0, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52da3, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52da4, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f52da8, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f52db0, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52db8 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52db8 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52db8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52dc0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52dc8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f52db8) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f52dd0, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f52dd8, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52de0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52de0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52de0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52de8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52df0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f52df8, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52d88) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f52de0)  reg(7, 1f52e00) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f52e78)  reg(7, 1f52e00) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52e00 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52e00 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52e00, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52e08, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52e10, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52e00) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52e1a, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52e18, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52e1b, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52e1c, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f52e20, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f52e28, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52e30 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52e30 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52e30, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52e38, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52e40, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f52e30) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f52e48, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f52e50, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52e58 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52e58 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52e58, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52e60, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52e68, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f52e70, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52e00) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f52e58)  reg(7, 1f52e78) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f52ef0)  reg(7, 1f52e78) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52e78 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52e78 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52e78, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52e80, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52e88, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52e78) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52e92, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52e90, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52e93, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52e94, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f52e98, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f52ea0, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52ea8 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52ea8 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52ea8, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52eb0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52eb8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f52ea8) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f52ec0, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f52ec8, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52ed0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52ed0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52ed0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52ed8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52ee0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f52ee8, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52e78) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f52ed0)  reg(7, 1f52ef0) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f52f68)  reg(7, 1f52ef0) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52ef0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52ef0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52ef0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52ef8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52f00, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52ef0) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52f0a, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52f08, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52f0b, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52f0c, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f52f10, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f52f18, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52f20 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52f20 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52f20, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52f28, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52f30, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f52f20) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f52f38, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f52f40, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52f48 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52f48 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52f48, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52f50, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52f58, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f52f60, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52ef0) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f52f48)  reg(7, 1f52f68) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f52fe0)  reg(7, 1f52f68) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52f68 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52f68 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52f68, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52f70, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52f78, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52f68) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52f82, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52f80, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52f83, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52f84, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f52f88, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f52f90, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52f98 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52f98 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52f98, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52fa0, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52fa8, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f52f98) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f52fb0, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f52fb8, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52fc0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52fc0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52fc0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52fc8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52fd0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f52fd8, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52f68) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f52fc0)  reg(7, 1f52fe0) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f53058)  reg(7, 1f52fe0) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f52fe0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f52fe0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f52fe0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f52fe8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f52ff0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f52fe0) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f52ffa, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f52ff8, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f52ffb, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f52ffc, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f53000, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f53008, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53010 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53010 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53010, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53018, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53020, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f53010) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f53028, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f53030, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53038 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53038 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53038, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53040, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53048, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f53050, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f52fe0) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f53038)  reg(7, 1f53058) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f530d0)  reg(7, 1f53058) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53058 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53058 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53058, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53060, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53068, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f53058) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f53072, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f53070, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f53073, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f53074, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f53078, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f53080, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53088 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53088 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53088, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53090, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53098, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f53088) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f530a0, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f530a8, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f530b0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f530b0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f530b0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f530b8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f530c0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f530c8, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f53058) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f530b0)  reg(7, 1f530d0) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f53148)  reg(7, 1f530d0) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f530d0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f530d0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f530d0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f530d8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f530e0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f530d0) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f530ea, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f530e8, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f530eb, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f530ec, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f530f0, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f530f8, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53100 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53100 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53100, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53108, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53110, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f53100) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f53118, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f53120, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53128 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53128 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53128, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53130, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53138, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f53140, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f530d0) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fc9d8: mov ecx, 0xf  reg(55, 0) 
0x7f02e76fc9dd: mov rdi, rbx  reg(3, 1f53128)  reg(7, 1f53148) 
0x7f02e76fc9e0: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e3: rep stosq qword ptr [rdi]
0x7f02e76fc9e6: mov rdi, rbx  reg(3, 1f531c0)  reg(7, 1f53148) 
0x7f02e76fc9e9: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53148 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53148 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53148, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53150, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53158, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fc9ee: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fc9f0: lea rdi, ptr [rbx+0x30]  reg(3, 1f53148) 
0x7f02e76fc9f4: mov byte ptr [rbx+0x1a], 0x0  mem(1f53162, 0) 
0x7f02e76fc9f8: mov word ptr [rbx+0x18], cx  reg(32, 0)  mem(1f53160, 0) 
0x7f02e76fc9fc: mov byte ptr [rbx+0x1b], 0x2  mem(1f53163, 0) 
0x7f02e76fca00: mov byte ptr [rbx+0x1c], 0x0  mem(1f53164, 0) 
0x7f02e76fca04: mov qword ptr [rbx+0x20], 0x0  mem(1f53168, 0) 
0x7f02e76fca0c: mov byte ptr [rbx+0x28], 0x2  mem(1f53170, 0) 
0x7f02e76fca10: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f53178 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f53178 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f53178, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f53180, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f53188, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca15: lea rdi, ptr [rbx+0x58]  reg(3, 1f53178) 
0x7f02e76fca19: mov byte ptr [rbx+0x48], 0x0  mem(1f53190, 0) 
0x7f02e76fca1d: mov byte ptr [rbx+0x50], 0x0  mem(1f53198, 0) 
0x7f02e76fca21: call 0x7f02e76a80c0
opendnp3::AnalogOutputStatus::AnalogOutputStatus()@plt: 1f531a0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev@plt
0x7f02e76a80c0: jmp qword ptr [rip+0x297f1a]
opendnp3::AnalogOutputStatus::AnalogOutputStatus(): 1f531a0 1f531c0 1f52d10 0	_ZN8opendnp318AnalogOutputStatusC1Ev
0x7f02e76aadc0: mov byte ptr [rdi], 0x2  mem(1f531a0, 0) 
0x7f02e76aadc3: mov qword ptr [rdi+0x8], 0x0  mem(1f531a8, 0) 
0x7f02e76aadcb: mov qword ptr [rdi+0x10], 0x0  mem(1f531b0, 0) 
0x7f02e76aadd3: ret 
0x7f02e76fca26: sub rbp, 0x1
0x7f02e76fca2a: mov byte ptr [rbx+0x70], 0x0  mem(1f531b8, 0) 
0x7f02e76fca2e: add rbx, 0x78  reg(7, 1f53148) 
0x7f02e76fca32: cmp rbp, 0xffffffffffffffff
0x7f02e76fca36: jnz 0x7f02e76fc9d8
0x7f02e76fca38: movzx ebp, word ptr [r14+0xe]
0x7f02e76fca3d: mov rax, qword ptr [rip+0x240fac]  reg(10, 0) 
0x7f02e76fca44: mov qword ptr [r12+0xa0], r15  reg(18, 1f52d10)  mem(1f4daa0, 0) 
0x7f02e76fca4c: add rax, 0x10  reg(10, 7f02e7ded958) 
0x7f02e76fca50: mov qword ptr [r12+0xa8], rax  reg(10, 7f02e7ded968)  mem(1f4daa8, 0) 
0x7f02e76fca58: mov rdi, rbp  reg(3, 1f531a0) 
0x7f02e76fca5b: lea rax, ptr [rbp*8]  reg(10, 7f02e7ded968) 
0x7f02e76fca63: shl rdi, 0x6  reg(3, a) 
0x7f02e76fca67: mov word ptr [r12+0xb0], bp  mem(1f4dab0, 0) 
0x7f02e76fca70: sub rdi, rax  reg(3, 280)  reg(10, 50) 
0x7f02e76fca73: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 230 1f531c0 1f52d10 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fca78: sub rbp, 0x1
0x7f02e76fca7c: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fca7f: mov r15, rax  reg(18, 1f52d10)  reg(10, 1f531d0) 
0x7f02e76fca82: cmp rbp, 0xffffffffffffffff
0x7f02e76fca86: mov rbx, rax  reg(7, 1f531c0)  reg(10, 1f531d0) 
0x7f02e76fca89: jz 0x7f02e76fcacf
0x7f02e76fca8b: nop dword ptr [rax+rax*1], eax
0x7f02e76fca90: mov ecx, 0x7  reg(55, 7f02e6e67b20) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1)  reg(7, 1f531d0) 
0x7f02e76fca98: mov rax, r13  reg(10, 1f531d0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53208)  reg(7, 1f531d0) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f531d0 1f53400 1f531d0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
0x7f02e76a6f76: push 0x2e4 
0x7f02e76a6f7b: jmp 0x7f02e76a4120
opendnp3::TimeAndInterval::TimeAndInterval(): 1f531d0 1f53400 1f531d0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f531d0, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f531d8, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f531dc, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 1f531d0)  reg(54, 1f531d0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f531d0) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f531e2, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f531e0, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f531e8, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f531f0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f531f0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f531f0, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f531f8, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f531fc, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f53200, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f531d0) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f531f0)  reg(7, 1f53208) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53240)  reg(7, 1f53208) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53208 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53208 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53208, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53210, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f53214, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f53208) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f5321a, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f53218, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f53220, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53228 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53228 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53228, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53230, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f53234, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f53238, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f53208) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f53228)  reg(7, 1f53240) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53278)  reg(7, 1f53240) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53240 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53240 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53240, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53248, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f5324c, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f53240) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f53252, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f53250, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f53258, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53260 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53260 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53260, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53268, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f5326c, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f53270, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f53240) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f53260)  reg(7, 1f53278) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f532b0)  reg(7, 1f53278) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53278 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53278 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53278, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53280, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f53284, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f53278) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f5328a, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f53288, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f53290, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53298 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53298 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53298, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f532a0, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f532a4, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f532a8, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f53278) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f53298)  reg(7, 1f532b0) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f532e8)  reg(7, 1f532b0) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f532b0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f532b0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f532b0, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f532b8, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f532bc, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f532b0) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f532c2, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f532c0, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f532c8, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f532d0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f532d0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f532d0, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f532d8, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f532dc, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f532e0, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f532b0) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f532d0)  reg(7, 1f532e8) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53320)  reg(7, 1f532e8) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f532e8 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f532e8 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f532e8, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f532f0, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f532f4, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f532e8) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f532fa, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f532f8, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f53300, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53308 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53308 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53308, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53310, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f53314, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f53318, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f532e8) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f53308)  reg(7, 1f53320) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53358)  reg(7, 1f53320) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53320 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53320 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53320, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53328, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f5332c, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f53320) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f53332, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f53330, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f53338, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53340 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53340 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53340, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53348, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f5334c, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f53350, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f53320) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f53340)  reg(7, 1f53358) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53390)  reg(7, 1f53358) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53358 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53358 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53358, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53360, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f53364, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f53358) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f5336a, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f53368, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f53370, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53378 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53378 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53378, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53380, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f53384, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f53388, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f53358) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f53378)  reg(7, 1f53390) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f533c8)  reg(7, 1f53390) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f53390 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f53390 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f53390, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f53398, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f5339c, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f53390) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f533a2, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f533a0, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f533a8, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f533b0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f533b0 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f533b0, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f533b8, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f533bc, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f533c0, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f53390) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fca90: mov ecx, 0x7  reg(55, 0) 
0x7f02e76fca95: mov rdi, rbx  reg(3, 1f533b0)  reg(7, 1f533c8) 
0x7f02e76fca98: mov rax, r13  reg(10, 0)  reg(16, 0) 
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9b: rep stosq qword ptr [rdi]
0x7f02e76fca9e: mov rdi, rbx  reg(3, 1f53400)  reg(7, 1f533c8) 
0x7f02e76fcaa1: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f533c8 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f533c8 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f533c8, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f533d0, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f533d4, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcaa6: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76fcaa8: lea rdi, ptr [rbx+0x20]  reg(3, 1f533c8) 
0x7f02e76fcaac: mov byte ptr [rbx+0x12], 0x0  mem(1f533da, 0) 
0x7f02e76fcab0: mov word ptr [rbx+0x10], dx  reg(35, 0)  mem(1f533d8, 0) 
0x7f02e76fcab4: mov byte ptr [rbx+0x18], 0x0  mem(1f533e0, 0) 
0x7f02e76fcab8: call 0x7f02e76a6f70
opendnp3::TimeAndInterval::TimeAndInterval()@plt: 1f533e8 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev@plt
0x7f02e76a6f70: jmp qword ptr [rip+0x2987c2]
opendnp3::TimeAndInterval::TimeAndInterval(): 1f533e8 1f53400 0 0	_ZN8opendnp315TimeAndIntervalC1Ev
0x7f02e76aae30: mov qword ptr [rdi], 0x0  mem(1f533e8, 0) 
0x7f02e76aae37: mov dword ptr [rdi+0x8], 0x0  mem(1f533f0, 0) 
0x7f02e76aae3e: mov byte ptr [rdi+0xc], 0x0  mem(1f533f4, 0) 
0x7f02e76aae42: ret 
0x7f02e76fcabd: sub rbp, 0x1
0x7f02e76fcac1: mov byte ptr [rbx+0x30], 0x0  mem(1f533f8, 0) 
0x7f02e76fcac5: add rbx, 0x38  reg(7, 1f533c8) 
0x7f02e76fcac9: cmp rbp, 0xffffffffffffffff
0x7f02e76fcacd: jnz 0x7f02e76fca90
0x7f02e76fcacf: movzx r14d, word ptr [r14+0x10]  reg(79, 7fffbc848640) 
0x7f02e76fcad4: mov rax, qword ptr [rip+0x2407bd]  reg(10, 0) 
0x7f02e76fcadb: mov qword ptr [r12+0xb8], r15  reg(18, 1f531d0)  mem(1f4dab8, 0) 
0x7f02e76fcae3: add rax, 0x10  reg(10, 7f02e7ded978) 
0x7f02e76fcae7: mov qword ptr [r12+0xc0], rax  reg(10, 7f02e7ded988)  mem(1f4dac0, 0) 
0x7f02e76fcaef: mov word ptr [r12+0xc8], r14w  reg(78, a)  mem(1f4dac8, 0) 
0x7f02e76fcaf8: imul rax, r14, 0x358  reg(10, 7f02e7ded988)  reg(17, a) 
0x7f02e76fcaff: add rax, 0x8  reg(10, 2170) 
0x7f02e76fcb03: mov rdi, rax  reg(3, 1f533e8)  reg(10, 2178) 
0x7f02e76fcb06: mov qword ptr [rsp+0x8], rax  reg(10, 2178)  mem(7fffbc848278, 7fffbc848640) 
0x7f02e76fcb0b: call 0x7f02e76a4170
operator new[](unsigned long)@plt: 2178 1f53400 0 0	_Znam@plt
0x7f02e76a4170: jmp qword ptr [rip+0x299ec2]
0x7f02e76fcb10: lea rbp, ptr [r14-0x1]
0x7f02e76fcb14: mov r15, rax  reg(18, 1f531d0)  reg(10, 1f53410) 
0x7f02e76fcb17: mov qword ptr [rax], r14  reg(17, a)  mem(1f53410, 0) 
0x7f02e76fcb1a: lea rax, ptr [rax+0x8]  reg(10, 1f53410) 
0x7f02e76fcb1e: xor r13d, r13d  reg(76, 0)  reg(76, 0) 
0x7f02e76fcb21: lea rbx, ptr [r15+0x8]  reg(7, 1f53400) 
0x7f02e76fcb25: cmp rbp, 0xffffffffffffffff
0x7f02e76fcb29: mov qword ptr [rsp], rax  reg(10, 1f53418)  mem(7fffbc848270, 7f02e793b6b8) 
0x7f02e76fcb2d: jz 0x7f02e76fcba9
0x7f02e76fcb2f: nop 
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 7f02e6e67b20) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 3)  reg(7, 1f53418) 
0x7f02e76fcb38: mov rax, r13  reg(10, 1f53418)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f53770)  reg(7, 1f53418) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53418 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53418 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53520, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53418, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f53418) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f5352a, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f53528, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f5352b, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f5352c, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f53530, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53538 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53538 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53640, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53538, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f53538) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f53648, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f53650, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53658 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53658 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53760, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53658, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f53768, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f53418) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f53658)  reg(7, 1f53770) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f53ac8)  reg(7, 1f53770) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53770 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53770 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53878, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53770, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f53770) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f53882, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f53880, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f53883, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f53884, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f53888, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53890 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53890 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53998, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53890, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f53890) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f539a0, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f539a8, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f539b0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f539b0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53ab8, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f539b0, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f53ac0, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f53770) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f539b0)  reg(7, 1f53ac8) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f53e20)  reg(7, 1f53ac8) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53ac8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53ac8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53bd0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53ac8, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f53ac8) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f53bda, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f53bd8, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f53bdb, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f53bdc, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f53be0, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53be8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53be8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53cf0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53be8, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f53be8) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f53cf8, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f53d00, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53d08 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53d08 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53e10, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53d08, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f53e18, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f53ac8) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f53d08)  reg(7, 1f53e20) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f54178)  reg(7, 1f53e20) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53e20 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53e20 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f53f28, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53e20, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f53e20) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f53f32, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f53f30, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f53f33, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f53f34, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f53f38, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f53f40 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f53f40 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54048, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f53f40, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f53f40) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f54050, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f54058, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54060 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54060 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54168, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54060, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f54170, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f53e20) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f54060)  reg(7, 1f54178) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f544d0)  reg(7, 1f54178) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54178 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54178 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54280, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54178, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f54178) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f5428a, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f54288, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f5428b, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f5428c, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f54290, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54298 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54298 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f543a0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54298, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f54298) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f543a8, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f543b0, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f543b8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f543b8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f544c0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f543b8, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f544c8, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f54178) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f543b8)  reg(7, 1f544d0) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f54828)  reg(7, 1f544d0) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f544d0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f544d0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f545d8, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f544d0, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f544d0) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f545e2, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f545e0, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f545e3, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f545e4, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f545e8, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f545f0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f545f0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f546f8, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f545f0, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f545f0) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f54700, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f54708, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54710 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54710 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54818, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54710, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f54820, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f544d0) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f54710)  reg(7, 1f54828) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f54b80)  reg(7, 1f54828) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54828 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54828 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54930, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54828, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f54828) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f5493a, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f54938, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f5493b, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f5493c, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f54940, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54948 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54948 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54a50, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54948, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f54948) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f54a58, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f54a60, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54a68 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54a68 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54b70, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54a68, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f54b78, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f54828) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f54a68)  reg(7, 1f54b80) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f54ed8)  reg(7, 1f54b80) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54b80 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54b80 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54c88, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54b80, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f54b80) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f54c92, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f54c90, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f54c93, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f54c94, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f54c98, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54ca0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54ca0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54da8, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54ca0, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f54ca0) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f54db0, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f54db8, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54dc0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54dc0 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54ec8, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54dc0, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f54ed0, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f54b80) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f54dc0)  reg(7, 1f54ed8) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f55230)  reg(7, 1f54ed8) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54ed8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54ed8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f54fe0, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54ed8, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f54ed8) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f54fea, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f54fe8, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f54feb, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f54fec, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f54ff0, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f54ff8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f54ff8 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f55100, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f54ff8, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f54ff8) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f55108, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f55110, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f55118 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f55118 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f55220, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f55118, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f55228, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f54ed8) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcb30: mov ecx, 0x6b  reg(55, 0) 
0x7f02e76fcb35: mov rdi, rbx  reg(3, 1f55118)  reg(7, 1f55230) 
0x7f02e76fcb38: mov rax, r13  reg(10, 7f02e7def608)  reg(16, 0) 
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3b: rep stosq qword ptr [rdi]
0x7f02e76fcb3e: mov rdi, rbx  reg(3, 1f55588)  reg(7, 1f55230) 
0x7f02e76fcb41: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f55230 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f55230 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f55338, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f55230, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb46: xor eax, eax  reg(56, 7f02e7def608)  reg(56, 7f02e7def608) 
0x7f02e76fcb48: lea rdi, ptr [rbx+0x120]  reg(3, 1f55230) 
0x7f02e76fcb4f: mov byte ptr [rbx+0x112], 0x0  mem(1f55342, 0) 
0x7f02e76fcb56: mov word ptr [rbx+0x110], ax  reg(29, 0)  mem(1f55340, 0) 
0x7f02e76fcb5d: mov byte ptr [rbx+0x113], 0x2  mem(1f55343, 0) 
0x7f02e76fcb64: mov byte ptr [rbx+0x114], 0x0  mem(1f55344, 0) 
0x7f02e76fcb6b: mov byte ptr [rbx+0x118], 0x2  mem(1f55348, 0) 
0x7f02e76fcb72: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f55350 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f55350 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 0) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f55458, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f55350, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb77: lea rdi, ptr [rbx+0x240]  reg(3, 1f55350) 
0x7f02e76fcb7e: mov byte ptr [rbx+0x230], 0x0  mem(1f55460, 0) 
0x7f02e76fcb85: mov byte ptr [rbx+0x238], 0x0  mem(1f55468, 0) 
0x7f02e76fcb8c: call 0x7f02e76a7d70
opendnp3::OctetData::OctetData()@plt: 1f55470 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev@plt
0x7f02e76a7d70: jmp qword ptr [rip+0x2980c2]
opendnp3::OctetData::OctetData(): 1f55470 1f55580 1f53410 0	_ZN8opendnp39OctetDataC2Ev
0x7f02e76aae80: mov rax, qword ptr [rip+0x292149]  reg(10, 7f02e7def608) 
0x7f02e76aae87: mov byte ptr [rdi+0x108], 0x1  mem(1f55578, 0) 
0x7f02e76aae8e: add rax, 0x10  reg(10, 7f02e7def5f8) 
0x7f02e76aae92: mov qword ptr [rdi], rax  reg(10, 7f02e7def608)  mem(1f55470, 0) 
0x7f02e76aae95: ret 
0x7f02e76fcb91: sub rbp, 0x1
0x7f02e76fcb95: mov byte ptr [rbx+0x350], 0x0  mem(1f55580, 0) 
0x7f02e76fcb9c: add rbx, 0x358  reg(7, 1f55230) 
0x7f02e76fcba3: cmp rbp, 0xffffffffffffffff
0x7f02e76fcba7: jnz 0x7f02e76fcb30
0x7f02e76fcba9: mov rax, qword ptr [rsp]  reg(10, 7f02e7def608) 
0x7f02e76fcbad: mov rdi, r12  reg(3, 1f55470)  reg(15, 1f4da00) 
0x7f02e76fcbb0: mov qword ptr [r12+0xd0], rax  reg(10, 1f53418)  mem(1f4dad0, 0) 
0x7f02e76fcbb8: call 0x7f02e76a6220
openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinarySpec>()@plt: 1f4da00 1f55580 1f53410 0	_ZN8opendnp313StaticBuffers12GetArrayViewINS_10BinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a6220: jmp qword ptr [rip+0x298e6a]
0x7f02e76a6226: push 0x20f 
0x7f02e76a622b: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinarySpec>(): 1f4da00 1f55580 1f53410 0	_ZN8opendnp313StaticBuffers12GetArrayViewINS_10BinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc4a0: mov rdx, qword ptr [rdi+0x10]  reg(8, 1f53410) 
0x7f02e76fc4a4: xor eax, eax  reg(56, 1f53418)  reg(56, 1f53418) 
0x7f02e76fc4a6: mov ax, word ptr [rdi+0x8]  reg(29, 0) 
0x7f02e76fc4aa: ret 
0x7f02e76fcbbd: add rdx, 0x18  reg(8, 1f51180) 
0x7f02e76fcbc1: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76fcbc3: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcbc6: mov esi, eax  reg(47, 1f55580)  reg(56, a) 
0x7f02e76fcbc8: jz 0x7f02e76fcbdf
0x7f02e76fcbca: nop word ptr [rax+rax*1], ax
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 0)  mem(1f51198, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51198) 
0x7f02e76fcbda: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 1)  mem(1f51208, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51208) 
0x7f02e76fcbda: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 2)  mem(1f51278, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51278) 
0x7f02e76fcbda: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 3)  mem(1f512e8, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f512e8) 
0x7f02e76fcbda: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 4)  mem(1f51358, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51358) 
0x7f02e76fcbda: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 5)  mem(1f513c8, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f513c8) 
0x7f02e76fcbda: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 6)  mem(1f51438, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51438) 
0x7f02e76fcbda: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 7)  mem(1f514a8, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f514a8) 
0x7f02e76fcbda: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 8)  mem(1f51518, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51518) 
0x7f02e76fcbda: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbd0: mov word ptr [rdx], cx  reg(32, 9)  mem(1f51588, 2010000) 
0x7f02e76fcbd3: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcbd6: add rdx, 0x70  reg(8, 1f51588) 
0x7f02e76fcbda: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcbdd: jnz 0x7f02e76fcbd0
0x7f02e76fcbdf: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fcbe2: call 0x7f02e76a7fb0
openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::DoubleBitBinarySpec>()@plt: 1f4da00 a 1f515f8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_19DoubleBitBinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a7fb0: jmp qword ptr [rip+0x297fa2]
0x7f02e76a7fb6: push 0x3e8 
0x7f02e76a7fbb: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::DoubleBitBinarySpec>(): 1f4da00 a 1f515f8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_19DoubleBitBinarySpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc4b0: mov rdx, qword ptr [rdi+0x28]  reg(8, 1f515f8) 
0x7f02e76fc4b4: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc4b6: mov ax, word ptr [rdi+0x20]  reg(29, 0) 
0x7f02e76fc4ba: ret 
0x7f02e76fcbe7: add rdx, 0x18  reg(8, 1f515f0) 
0x7f02e76fcbeb: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fcbed: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcbf0: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcbf2: jz 0x7f02e76fcc07
0x7f02e76fcbf4: nop dword ptr [rax], eax
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 0)  mem(1f51608, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f51608) 
0x7f02e76fcc02: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 1)  mem(1f51678, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f51678) 
0x7f02e76fcc02: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 2)  mem(1f516e8, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f516e8) 
0x7f02e76fcc02: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 3)  mem(1f51758, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f51758) 
0x7f02e76fcc02: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 4)  mem(1f517c8, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f517c8) 
0x7f02e76fcc02: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 5)  mem(1f51838, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f51838) 
0x7f02e76fcc02: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 6)  mem(1f518a8, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f518a8) 
0x7f02e76fcc02: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 7)  mem(1f51918, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f51918) 
0x7f02e76fcc02: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 8)  mem(1f51988, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f51988) 
0x7f02e76fcc02: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcbf8: mov word ptr [rdx], cx  reg(32, 9)  mem(1f519f8, 2000000) 
0x7f02e76fcbfb: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcbfe: add rdx, 0x70  reg(8, 1f519f8) 
0x7f02e76fcc02: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcc05: jnz 0x7f02e76fcbf8
0x7f02e76fcc07: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fcc0a: call 0x7f02e76a42d0
openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::CounterSpec>()@plt: 1f4da00 a 1f51a68 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_11CounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a42d0: jmp qword ptr [rip+0x299e12]
0x7f02e76a42d6: push 0x1a 
0x7f02e76a42db: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::CounterSpec>(): 1f4da00 a 1f51a68 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_11CounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc4c0: mov rdx, qword ptr [rdi+0x58]  reg(8, 1f51a68) 
0x7f02e76fc4c4: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc4c6: mov ax, word ptr [rdi+0x50]  reg(29, 0) 
0x7f02e76fc4ca: ret 
0x7f02e76fcc0f: add rdx, 0x18  reg(8, 1f51f20) 
0x7f02e76fcc13: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fcc15: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcc18: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcc1a: jz 0x7f02e76fcc2f
0x7f02e76fcc1c: nop dword ptr [rax], eax
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 0)  mem(1f51f38, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f51f38) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 1)  mem(1f51fb0, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f51fb0) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 2)  mem(1f52028, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f52028) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 3)  mem(1f520a0, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f520a0) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 4)  mem(1f52118, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f52118) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 5)  mem(1f52190, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f52190) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 6)  mem(1f52208, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f52208) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 7)  mem(1f52280, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f52280) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 8)  mem(1f522f8, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f522f8) 
0x7f02e76fcc2a: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc20: mov word ptr [rdx], cx  reg(32, 9)  mem(1f52370, 2000000) 
0x7f02e76fcc23: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcc26: add rdx, 0x78  reg(8, 1f52370) 
0x7f02e76fcc2a: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcc2d: jnz 0x7f02e76fcc20
0x7f02e76fcc2f: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fcc32: call 0x7f02e76a5120
openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::FrozenCounterSpec>()@plt: 1f4da00 a 1f523e8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_17FrozenCounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a5120: jmp qword ptr [rip+0x2996ea]
0x7f02e76a5126: push 0xff 
0x7f02e76a512b: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::FrozenCounterSpec>(): 1f4da00 a 1f523e8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_17FrozenCounterSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc4d0: mov rdx, qword ptr [rdi+0x70]  reg(8, 1f523e8) 
0x7f02e76fc4d4: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc4d6: mov ax, word ptr [rdi+0x68]  reg(29, 0) 
0x7f02e76fc4da: ret 
0x7f02e76fcc37: add rdx, 0x18  reg(8, 1f523e0) 
0x7f02e76fcc3b: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fcc3d: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcc40: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcc42: jz 0x7f02e76fcc57
0x7f02e76fcc44: nop dword ptr [rax], eax
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 0)  mem(1f523f8, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f523f8) 
0x7f02e76fcc52: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 1)  mem(1f52470, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f52470) 
0x7f02e76fcc52: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 2)  mem(1f524e8, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f524e8) 
0x7f02e76fcc52: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 3)  mem(1f52560, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f52560) 
0x7f02e76fcc52: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 4)  mem(1f525d8, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f525d8) 
0x7f02e76fcc52: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 5)  mem(1f52650, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f52650) 
0x7f02e76fcc52: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 6)  mem(1f526c8, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f526c8) 
0x7f02e76fcc52: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 7)  mem(1f52740, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f52740) 
0x7f02e76fcc52: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 8)  mem(1f527b8, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f527b8) 
0x7f02e76fcc52: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc48: mov word ptr [rdx], cx  reg(32, 9)  mem(1f52830, 2000000) 
0x7f02e76fcc4b: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcc4e: add rdx, 0x78  reg(8, 1f52830) 
0x7f02e76fcc52: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcc55: jnz 0x7f02e76fcc48
0x7f02e76fcc57: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fcc5a: call 0x7f02e76a7360
openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogSpec>()@plt: 1f4da00 a 1f528a8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_10AnalogSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a7360: jmp qword ptr [rip+0x2985ca]
0x7f02e76a7366: push 0x323 
0x7f02e76a736b: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogSpec>(): 1f4da00 a 1f528a8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_10AnalogSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc4e0: mov rdx, qword ptr [rdi+0x40]  reg(8, 1f528a8) 
0x7f02e76fc4e4: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc4e6: mov ax, word ptr [rdi+0x38]  reg(29, 0) 
0x7f02e76fc4ea: ret 
0x7f02e76fcc5f: add rdx, 0x18  reg(8, 1f51a60) 
0x7f02e76fcc63: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fcc65: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcc68: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcc6a: jz 0x7f02e76fcc7f
0x7f02e76fcc6c: nop dword ptr [rax], eax
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 0)  mem(1f51a78, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51a78) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 1)  mem(1f51af0, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51af0) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 2)  mem(1f51b68, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51b68) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 3)  mem(1f51be0, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51be0) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 4)  mem(1f51c58, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51c58) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 5)  mem(1f51cd0, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51cd0) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 6)  mem(1f51d48, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51d48) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 7)  mem(1f51dc0, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51dc0) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 8)  mem(1f51e38, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51e38) 
0x7f02e76fcc7a: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc70: mov word ptr [rdx], cx  reg(32, 9)  mem(1f51eb0, 2000000) 
0x7f02e76fcc73: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcc76: add rdx, 0x78  reg(8, 1f51eb0) 
0x7f02e76fcc7a: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcc7d: jnz 0x7f02e76fcc70
0x7f02e76fcc7f: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fcc82: call 0x7f02e76a4bf0
openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinaryOutputStatusSpec>()@plt: 1f4da00 a 1f51f28 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_22BinaryOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a4bf0: jmp qword ptr [rip+0x299982]
0x7f02e76a4bf6: push 0xac 
0x7f02e76a4bfb: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::BinaryOutputStatusSpec>(): 1f4da00 a 1f51f28 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_22BinaryOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc4f0: mov rdx, qword ptr [rdi+0x88]  reg(8, 1f51f28) 
0x7f02e76fc4f7: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc4f9: mov ax, word ptr [rdi+0x80]  reg(29, 0) 
0x7f02e76fc500: ret 
0x7f02e76fcc87: add rdx, 0x18  reg(8, 1f528a0) 
0x7f02e76fcc8b: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fcc8d: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcc90: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcc92: jz 0x7f02e76fcca7
0x7f02e76fcc94: nop dword ptr [rax], eax
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 0)  mem(1f528b8, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f528b8) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 1) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 1)  mem(1f52928, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52928) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 2) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 2)  mem(1f52998, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52998) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 3) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 3)  mem(1f52a08, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52a08) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 4) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 4)  mem(1f52a78, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52a78) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 5) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 5)  mem(1f52ae8, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52ae8) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 6) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 6)  mem(1f52b58, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52b58) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 7) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 7)  mem(1f52bc8, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52bc8) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 8) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 8)  mem(1f52c38, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52c38) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, 9) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcc98: mov word ptr [rdx], cx  reg(32, 9)  mem(1f52ca8, 2000000) 
0x7f02e76fcc9b: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcc9e: add rdx, 0x70  reg(8, 1f52ca8) 
0x7f02e76fcca2: cmp si, cx  reg(40, a)  reg(32, a) 
0x7f02e76fcca5: jnz 0x7f02e76fcc98
0x7f02e76fcca7: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fccaa: call 0x7f02e76a5850
openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogOutputStatusSpec>()@plt: 1f4da00 a 1f52d18 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_22AnalogOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a5850: jmp qword ptr [rip+0x299352]
0x7f02e76a5856: push 0x172 
0x7f02e76a585b: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::AnalogOutputStatusSpec>(): 1f4da00 a 1f52d18 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_22AnalogOutputStatusSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc510: mov rdx, qword ptr [rdi+0xa0]  reg(8, 1f52d18) 
0x7f02e76fc517: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc519: mov ax, word ptr [rdi+0x98]  reg(29, 0) 
0x7f02e76fc520: ret 
0x7f02e76fccaf: add rdx, 0x18  reg(8, 1f52d10) 
0x7f02e76fccb3: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fccb5: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fccb8: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fccba: jz 0x7f02e76fcccf
0x7f02e76fccbc: nop dword ptr [rax], eax
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 0)  mem(1f52d28, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 0) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52d28) 
0x7f02e76fccca: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 1)  mem(1f52da0, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 1) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52da0) 
0x7f02e76fccca: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 2)  mem(1f52e18, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 2) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52e18) 
0x7f02e76fccca: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 3)  mem(1f52e90, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 3) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52e90) 
0x7f02e76fccca: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 4)  mem(1f52f08, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 4) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52f08) 
0x7f02e76fccca: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 5)  mem(1f52f80, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 5) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52f80) 
0x7f02e76fccca: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 6)  mem(1f52ff8, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 6) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f52ff8) 
0x7f02e76fccca: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 7)  mem(1f53070, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 7) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f53070) 
0x7f02e76fccca: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 8)  mem(1f530e8, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 8) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f530e8) 
0x7f02e76fccca: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fccc0: mov word ptr [rdx], cx  reg(32, 9)  mem(1f53160, 2000000) 
0x7f02e76fccc3: add ecx, 0x1  reg(55, 9) 
0x7f02e76fccc6: add rdx, 0x78  reg(8, 1f53160) 
0x7f02e76fccca: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcccd: jnz 0x7f02e76fccc0
0x7f02e76fcccf: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fccd2: call 0x7f02e76a6400
openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::TimeAndIntervalSpec>()@plt: 1f4da00 a 1f531d8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_19TimeAndIntervalSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a6400: jmp qword ptr [rip+0x298d7a]
0x7f02e76a6406: push 0x22d 
0x7f02e76a640b: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::TimeAndIntervalSpec>(): 1f4da00 a 1f531d8 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_19TimeAndIntervalSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc530: mov rdx, qword ptr [rdi+0xb8]  reg(8, 1f531d8) 
0x7f02e76fc537: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc539: mov ax, word ptr [rdi+0xb0]  reg(29, 0) 
0x7f02e76fc540: ret 
0x7f02e76fccd7: add rdx, 0x10  reg(8, 1f531d0) 
0x7f02e76fccdb: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fccdd: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcce0: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcce2: jz 0x7f02e76fccf7
0x7f02e76fcce4: nop dword ptr [rax], eax
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 0)  mem(1f531e0, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 0) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f531e0) 
0x7f02e76fccf2: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 1)  mem(1f53218, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 1) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f53218) 
0x7f02e76fccf2: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 2)  mem(1f53250, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 2) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f53250) 
0x7f02e76fccf2: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 3)  mem(1f53288, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 3) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f53288) 
0x7f02e76fccf2: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 4)  mem(1f532c0, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 4) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f532c0) 
0x7f02e76fccf2: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 5)  mem(1f532f8, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 5) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f532f8) 
0x7f02e76fccf2: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 6)  mem(1f53330, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 6) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f53330) 
0x7f02e76fccf2: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 7)  mem(1f53368, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 7) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f53368) 
0x7f02e76fccf2: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 8)  mem(1f533a0, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 8) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f533a0) 
0x7f02e76fccf2: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fcce8: mov word ptr [rdx], cx  reg(32, 9)  mem(1f533d8, 0) 
0x7f02e76fcceb: add ecx, 0x1  reg(55, 9) 
0x7f02e76fccee: add rdx, 0x38  reg(8, 1f533d8) 
0x7f02e76fccf2: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fccf5: jnz 0x7f02e76fcce8
0x7f02e76fccf7: mov rdi, r12  reg(3, 1f4da00)  reg(15, 1f4da00) 
0x7f02e76fccfa: call 0x7f02e76a4e60
openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::OctetStringSpec>()@plt: 1f4da00 a 1f53410 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_15OctetStringSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv@plt
0x7f02e76a4e60: jmp qword ptr [rip+0x29984a]
0x7f02e76a4e66: push 0xd3 
0x7f02e76a4e6b: jmp 0x7f02e76a4120
openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short> opendnp3::StaticBuffers::GetArrayView<opendnp3::OctetStringSpec>(): 1f4da00 a 1f53410 a	_ZN8opendnp313StaticBuffers12GetArrayViewINS_15OctetStringSpecEEEN7openpal9ArrayViewINS_4CellIT_EEtEEv
0x7f02e76fc550: mov rdx, qword ptr [rdi+0xd0]  reg(8, 1f53410) 
0x7f02e76fc557: xor eax, eax  reg(56, a)  reg(56, a) 
0x7f02e76fc559: mov ax, word ptr [rdi+0xc8]  reg(29, 0) 
0x7f02e76fc560: ret 
0x7f02e76fccff: add rdx, 0x110  reg(8, 1f53418) 
0x7f02e76fcd06: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76fcd08: test ax, ax  reg(29, a)  reg(29, a) 
0x7f02e76fcd0b: mov esi, eax  reg(47, a)  reg(56, a) 
0x7f02e76fcd0d: jz 0x7f02e76fcd22
0x7f02e76fcd0f: nop 
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 0)  mem(1f53528, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 0) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f53528) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 1)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 1)  mem(1f53880, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 1) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f53880) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 2)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 2)  mem(1f53bd8, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 2) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f53bd8) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 3)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 3)  mem(1f53f30, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 3) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f53f30) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 4)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 4)  mem(1f54288, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 4) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f54288) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 5)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 5)  mem(1f545e0, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 5) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f545e0) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 6)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 6)  mem(1f54938, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 6) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f54938) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 7)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 7)  mem(1f54c90, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 7) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f54c90) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 8)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 8)  mem(1f54fe8, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 8) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f54fe8) 
0x7f02e76fcd1d: cmp cx, si  reg(32, 9)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd10: mov word ptr [rdx], cx  reg(32, 9)  mem(1f55340, 2000000) 
0x7f02e76fcd13: add ecx, 0x1  reg(55, 9) 
0x7f02e76fcd16: add rdx, 0x358  reg(8, 1f55340) 
0x7f02e76fcd1d: cmp cx, si  reg(32, a)  reg(40, a) 
0x7f02e76fcd20: jnz 0x7f02e76fcd10
0x7f02e76fcd22: add rsp, 0x18
0x7f02e76fcd26: pop rbx  reg(7, 1f55588) 
0x7f02e76fcd27: pop rbp
0x7f02e76fcd28: pop r12  reg(15, 1f4da00) 
0x7f02e76fcd2a: pop r13  reg(16, 0) 
0x7f02e76fcd2c: pop r14  reg(17, a) 
0x7f02e76fcd2e: pop r15  reg(18, 1f53410) 
0x7f02e76fcd30: ret 
0x7f02e76e7b74: mov eax, 0x1  reg(56, a) 
0x7f02e76e7b79: xor edx, edx  reg(54, 1f55698)  reg(54, 1f55698) 
0x7f02e76e7b7b: mov ecx, 0x1  reg(55, a) 
0x7f02e76e7b80: mov word ptr [rbx+0xf4], ax  reg(29, 1)  mem(1f4dadc, 0) 
0x7f02e76e7b87: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76e7b89: xor esi, esi  reg(47, a)  reg(47, a) 
0x7f02e76e7b8b: mov word ptr [rbx+0x10a], ax  reg(29, 0)  mem(1f4daf2, 0) 
0x7f02e76e7b92: mov eax, 0x1  reg(56, 0) 
0x7f02e76e7b97: mov word ptr [rbx+0xf0], r12w  reg(72, ffff)  mem(1f4dad8, 100000000) 
0x7f02e76e7b9f: mov word ptr [rbx+0x10c], ax  reg(29, 1)  mem(1f4daf4, 0) 
0x7f02e76e7ba6: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76e7ba8: mov byte ptr [rbx+0xf2], bpl  mem(1f4dada, 10000) 
0x7f02e76e7baf: mov word ptr [rbx+0x10e], ax  reg(29, 0)  mem(1f4daf6, 0) 
0x7f02e76e7bb6: mov eax, 0x1  reg(56, 0) 
0x7f02e76e7bbb: mov word ptr [rbx+0xf6], dx  reg(35, 0)  mem(1f4dade, 0) 
0x7f02e76e7bc2: mov word ptr [rbx+0x110], ax  reg(29, 1)  mem(1f4daf8, 0) 
0x7f02e76e7bc9: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76e7bcb: mov word ptr [rbx+0xf8], cx  reg(32, 1)  mem(1f4dae0, 0) 
0x7f02e76e7bd2: mov word ptr [rbx+0xfa], si  reg(40, 0)  mem(1f4dae2, 0) 
0x7f02e76e7bd9: xor ebp, ebp
0x7f02e76e7bdb: mov r12d, 0x1  reg(73, ffff) 
0x7f02e76e7be1: mov word ptr [rbx+0x112], ax  reg(29, 0)  mem(1f4dafa, 0) 
0x7f02e76e7be8: mov edi, 0x1  reg(45, 1f4da00) 
0x7f02e76e7bed: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76e7bf0: mov r9d, 0x1  reg(64, 0) 
0x7f02e76e7bf6: xor r10d, r10d  reg(67, e0d)  reg(67, e0d) 
0x7f02e76e7bf9: mov r11d, 0x1  reg(70, 7f02e76fc550) 
0x7f02e76e7bff: mov eax, 0x1  reg(56, 0) 
0x7f02e76e7c04: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76e7c06: mov ecx, 0x1  reg(55, 1) 
0x7f02e76e7c0b: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76e7c0d: mov word ptr [rbx+0x106], bp  mem(1f4daee, 1000000000000) 
0x7f02e76e7c14: mov word ptr [rbx+0x108], r12w  reg(72, 1)  mem(1f4daf0, 100000000) 
0x7f02e76e7c1c: mov word ptr [rbx+0xfc], di  reg(41, 1)  mem(1f4dae4, 0) 
0x7f02e76e7c23: mov word ptr [rbx+0xfe], r8w  reg(60, 0)  mem(1f4dae6, 0) 
0x7f02e76e7c2b: mov word ptr [rbx+0x100], r9w  reg(63, 1)  mem(1f4dae8, 0) 
0x7f02e76e7c33: mov word ptr [rbx+0x102], r10w  reg(66, 0)  mem(1f4daea, 1000000000000) 
0x7f02e76e7c3b: mov word ptr [rbx+0x104], r11w  reg(69, 1)  mem(1f4daec, 100000000) 
0x7f02e76e7c43: mov word ptr [rbx+0x114], ax  reg(29, 1)  mem(1f4dafc, 0) 
0x7f02e76e7c4a: mov word ptr [rbx+0x116], dx  reg(35, 0)  mem(1f4dafe, 0) 
0x7f02e76e7c51: mov word ptr [rbx+0x118], cx  reg(32, 1)  mem(1f4db00, 0) 
0x7f02e76e7c58: mov word ptr [rbx+0x11a], si  reg(40, 0)  mem(1f4db02, 0) 
0x7f02e76e7c5f: pop rbx  reg(7, 1f4d9e8) 
0x7f02e76e7c60: pop rbp
0x7f02e76e7c61: pop r12  reg(15, 1) 
0x7f02e76e7c63: ret 
0x7f02e76e4846: add rsp, 0x8
0x7f02e76e484a: ret 
0x7f02e76f8fbb: lea rdx, ptr [rbx+0x80]  reg(8, 0) 
0x7f02e76f8fc2: lea rsi, ptr [rbx+0x2c8]  reg(4, 0) 
0x7f02e76f8fc9: lea rdi, ptr [rbx+0x3e0]  reg(3, 1) 
0x7f02e76f8fd0: call 0x7f02e76a5d50
opendnp3::ResponseContext::ResponseContext(opendnp3::IResponseLoader&, opendnp3::IResponseLoader&)@plt: 1f4db08 1f4d9f0 1f4d7a8 1	_ZN8opendnp315ResponseContextC1ERNS_15IResponseLoaderES2_@plt
0x7f02e76a5d50: jmp qword ptr [rip+0x2990d2]
0x7f02e76a5d56: push 0x1c2 
0x7f02e76a5d5b: jmp 0x7f02e76a4120
opendnp3::ResponseContext::ResponseContext(opendnp3::IResponseLoader&, opendnp3::IResponseLoader&): 1f4db08 1f4d9f0 1f4d7a8 1	_ZN8opendnp315ResponseContextC1ERNS_15IResponseLoaderES2_
0x7f02e76fbdd0: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76fbdd2: mov qword ptr [rdi+0x8], rsi  reg(4, 1f4d9f0)  mem(1f4db10, 0) 
0x7f02e76fbdd6: mov qword ptr [rdi+0x10], rdx  reg(8, 1f4d7a8)  mem(1f4db18, 0) 
0x7f02e76fbdda: mov word ptr [rdi], ax  reg(29, 0)  mem(1f4db08, 0) 
0x7f02e76fbddd: ret 
0x7f02e76f8fd5: mov rax, qword ptr [rbp]  reg(10, 0) 
0x7f02e76f8fd9: lea rdi, ptr [rbx+0x432]  reg(3, 1f4db08) 
0x7f02e76f8fe0: mov esi, 0x7  reg(47, 1f4d9f0) 
0x7f02e76f8fe5: mov qword ptr [rbx+0x3f8], rax  reg(10, 1000)  mem(1f4db20, 0) 
0x7f02e76f8fec: mov rax, qword ptr [rbp+0x8]  reg(10, 1000) 
0x7f02e76f8ff0: mov qword ptr [rbx+0x400], rax  reg(10, 2710)  mem(1f4db28, 0) 
0x7f02e76f8ff7: mov rax, qword ptr [rbp+0x10]  reg(10, 2710) 
0x7f02e76f8ffb: mov qword ptr [rbx+0x408], rax  reg(10, 1388)  mem(1f4db30, 0) 
0x7f02e76f9002: mov rax, qword ptr [rbp+0x18]  reg(10, 1388) 
0x7f02e76f9006: mov qword ptr [rbx+0x410], rax  reg(10, 1388)  mem(1f4db38, 0) 
0x7f02e76f900d: mov rax, qword ptr [rbp+0x20]  reg(10, 1388) 
0x7f02e76f9011: mov qword ptr [rbx+0x418], rax  reg(10, 1388)  mem(1f4db40, 0) 
0x7f02e76f9018: mov rax, qword ptr [rbp+0x28]  reg(10, 1388) 
0x7f02e76f901c: mov qword ptr [rbx+0x420], rax  reg(10, 80000000800)  mem(1f4db48, 0) 
0x7f02e76f9023: mov rax, qword ptr [rbp+0x30]  reg(10, 80000000800) 
0x7f02e76f9027: mov byte ptr [rbx+0x430], 0x0  mem(1f4db58, 0) 
0x7f02e76f902e: mov byte ptr [rbx+0x431], 0x0  mem(1f4db59, 0) 
0x7f02e76f9035: mov byte ptr [rbx+0x432], 0x0  mem(1f4db5a, 0) 
0x7f02e76f903c: mov byte ptr [rbx+0x433], 0x0  mem(1f4db5b, 0) 
0x7f02e76f9043: mov qword ptr [rbx+0x428], rax  reg(10, ffff0001)  mem(1f4db50, 0) 
0x7f02e76f904a: call 0x7f02e76a55e0
opendnp3::IINField::SetBit(opendnp3::IINBit)@plt: 1f4db5a 7 1f4d7a8 1	_ZN8opendnp38IINField6SetBitENS_6IINBitE@plt
0x7f02e76a55e0: jmp qword ptr [rip+0x29948a]
0x7f02e76a55e6: push 0x14b 
0x7f02e76a55eb: jmp 0x7f02e76a4120
opendnp3::IINField::SetBit(opendnp3::IINBit): 1f4db5a 7 1f4d7a8 1	_ZN8opendnp38IINField6SetBitENS_6IINBitE
0x7f02e76aa9a0: cmp esi, 0xf  reg(47, 7) 
0x7f02e76aa9a3: jnbe 0x7f02e76aa9c4
0x7f02e76aa9a5: lea rax, ptr [rip+0x5b648]  reg(10, ffff0001) 
0x7f02e76aa9ac: mov esi, esi  reg(47, 7)  reg(47, 7) 
0x7f02e76aa9ae: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 1f4d7a8) 
0x7f02e76aa9b2: add rax, rdx  reg(10, 7f02e7705ff4)  reg(8, fffffffffffa4a1c) 
0x7f02e76aa9b5: jmp rax
0x7f02e76aaa10: or byte ptr [rdi], 0x80  mem(1f4db5a, 0) 
0x7f02e76aaa13: ret 
0x7f02e76f904f: lea r13, ptr [rbx+0x438]  reg(16, 7fffbc848640) 
0x7f02e76f9056: mov rsi, qword ptr [r12]  reg(4, 7) 
0x7f02e76f905a: mov rdi, r13  reg(3, 1f4db5a)  reg(16, 1f4db60) 
0x7f02e76f905d: call 0x7f02e76a4480
openpal::TimerRef::TimerRef(openpal::IExecutor&)@plt: 1f4db60 1f4c3b0 fffffffffffa4a1c 1	_ZN7openpal8TimerRefC1ERNS_9IExecutorE@plt
0x7f02e76a4480: jmp qword ptr [rip+0x299d3a]
0x7f02e76f9062: lea rdi, ptr [rbx+0x448]  reg(3, 1f4db60) 
0x7f02e76f9069: call 0x7f02e76a52b0
opendnp3::RequestHistory::RequestHistory()@plt: 1f4db70 1f4c3b0 fffffffffffa4a1c 1	_ZN8opendnp314RequestHistoryC1Ev@plt
0x7f02e76a52b0: jmp qword ptr [rip+0x299622]
0x7f02e76a52b6: push 0x118 
0x7f02e76a52bb: jmp 0x7f02e76a4120
opendnp3::RequestHistory::RequestHistory(): 1f4db70 1f4c3b0 fffffffffffa4a1c 1	_ZN8opendnp314RequestHistoryC1Ev
0x7f02e76fbc60: xor eax, eax  reg(56, 7f02e76aaa10)  reg(56, 7f02e76aaa10) 
0x7f02e76fbc62: mov byte ptr [rdi], 0x0  mem(1f4db70, 0) 
0x7f02e76fbc65: mov byte ptr [rdi+0x1], 0x1  mem(1f4db71, 0) 
0x7f02e76fbc69: mov byte ptr [rdi+0x2], 0x1  mem(1f4db72, 0) 
0x7f02e76fbc6d: mov byte ptr [rdi+0x3], 0x0  mem(1f4db73, 0) 
0x7f02e76fbc71: mov byte ptr [rdi+0x4], 0x0  mem(1f4db74, 0) 
0x7f02e76fbc75: mov byte ptr [rdi+0x5], 0x0  mem(1f4db75, 0) 
0x7f02e76fbc79: mov byte ptr [rdi+0x6], 0xff  mem(1f4db76, 0) 
0x7f02e76fbc7d: mov word ptr [rdi+0x8], ax  reg(29, 0)  mem(1f4db78, 0) 
0x7f02e76fbc81: mov dword ptr [rdi+0xc], 0x0  mem(1f4db7c, 0) 
0x7f02e76fbc88: ret 
0x7f02e76f906e: mov esi, dword ptr [rbp+0x2c]  reg(47, 1f4c3b0) 
0x7f02e76f9071: lea rdi, ptr [rbx+0x458]  reg(3, 1f4db70) 
0x7f02e76f9078: call 0x7f02e76a6c80
opendnp3::DeferredRequest::DeferredRequest(unsigned int)@plt: 1f4db80 800 fffffffffffa4a1c 1	_ZN8opendnp315DeferredRequestC1Ej@plt
0x7f02e76a6c80: jmp qword ptr [rip+0x29893a]
0x7f02e76a6c86: push 0x2b5 
0x7f02e76a6c8b: jmp 0x7f02e76a4120
opendnp3::DeferredRequest::DeferredRequest(unsigned int): 1f4db80 800 fffffffffffa4a1c 1	_ZN8opendnp315DeferredRequestC2Ej
0x7f02e76ef000: push rbp
0x7f02e76ef001: push rbx  reg(7, 1f4d728) 
0x7f02e76ef002: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76ef004: xor edx, edx  reg(54, fffffffffffa4a1c)  reg(54, fffffffffffa4a1c) 
0x7f02e76ef006: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4db80) 
0x7f02e76ef009: lea rdi, ptr [rdi+0x10]  reg(3, 1f4db80) 
0x7f02e76ef00d: sub rsp, 0x8
0x7f02e76ef011: mov byte ptr [rdi-0x10], 0x0  mem(1f4db80, 0) 
0x7f02e76ef015: mov word ptr [rdi-0xe], ax  reg(29, 0)  mem(1f4db82, 0) 
0x7f02e76ef019: mov word ptr [rdi-0xc], dx  reg(35, 0)  mem(1f4db84, 0) 
0x7f02e76ef01d: mov byte ptr [rdi-0xa], 0x1  mem(1f4db86, 0) 
0x7f02e76ef021: mov ebp, esi
0x7f02e76ef023: mov byte ptr [rdi-0x9], 0x1  mem(1f4db87, 0) 
0x7f02e76ef027: mov byte ptr [rdi-0x8], 0x0  mem(1f4db88, 0) 
0x7f02e76ef02b: mov byte ptr [rdi-0x7], 0x0  mem(1f4db89, 0) 
0x7f02e76ef02f: mov byte ptr [rdi-0x6], 0x0  mem(1f4db8a, 0) 
0x7f02e76ef033: mov byte ptr [rdi-0x5], 0xff  mem(1f4db8b, 0) 
0x7f02e76ef037: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4db90 800 0 1	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e76ef03c: add rsp, 0x8
0x7f02e76ef040: lea rdi, ptr [rbx+0x20]  reg(3, 1f4db90) 
0x7f02e76ef044: mov esi, ebp  reg(47, 800) 
0x7f02e76ef046: pop rbx  reg(7, 1f4db80) 
0x7f02e76ef047: pop rbp
0x7f02e76ef048: jmp 0x7f02e76a7740
openpal::Buffer::Buffer(unsigned int)@plt: 1f4dba0 800 0 1	_ZN7openpal6BufferC1Ej@plt
0x7f02e76a7740: jmp qword ptr [rip+0x2983da]
0x7f02e76f907d: lea rdi, ptr [rbx+0x498]  reg(3, 1f55d20) 
0x7f02e76f9084: mov byte ptr [rbx+0x490], 0x0  mem(1f4dbb8, 0) 
0x7f02e76f908b: call 0x7f02e76a5e40
openpal::MonotonicTimestamp::MonotonicTimestamp()@plt: 1f4dbc0 1f55d90 800 fffffff0	_ZN7openpal18MonotonicTimestampC1Ev@plt
0x7f02e76a5e40: jmp qword ptr [rip+0x29905a]
0x7f02e76a5e46: push 0x1d1 
0x7f02e76a5e4b: jmp 0x7f02e76a4120
0x7f02e76f9090: xor eax, eax  reg(56, 7f02e7612cd8)  reg(56, 7f02e7612cd8) 
0x7f02e76f9092: lea rdi, ptr [rbx+0x4b0]  reg(3, 1f4dbc0) 
0x7f02e76f9099: mov dword ptr [rbx+0x4a4], 0x0  mem(1f4dbcc, 0) 
0x7f02e76f90a3: mov word ptr [rbx+0x4a0], ax  reg(29, 0)  mem(1f4dbc8, 0) 
0x7f02e76f90aa: mov byte ptr [rbx+0x4a8], 0x0  mem(1f4dbd0, 0) 
0x7f02e76f90b1: call 0x7f02e76a5e40
openpal::MonotonicTimestamp::MonotonicTimestamp()@plt: 1f4dbd8 1f55d90 800 fffffff0	_ZN7openpal18MonotonicTimestampC1Ev@plt
0x7f02e76a5e40: jmp qword ptr [rip+0x29905a]
0x7f02e76f90b6: lea rdi, ptr [rbx+0x4b8]  reg(3, 1f4dbd8) 
0x7f02e76f90bd: call 0x7f02e76a6b80
openpal::TimeDuration::TimeDuration()@plt: 1f4dbe0 1f55d90 800 fffffff0	_ZN7openpal12TimeDurationC1Ev@plt
0x7f02e76a6b80: jmp qword ptr [rip+0x2989ba]
0x7f02e76a6b86: push 0x2a5 
0x7f02e76a6b8b: jmp 0x7f02e76a4120
0x7f02e76f90c2: lea rdi, ptr [rbx+0x4d0]  reg(3, 1f4dbe0) 
0x7f02e76f90c9: mov byte ptr [rbx+0x4c0], 0x0  mem(1f4dbe8, 0) 
0x7f02e76f90d0: mov r12d, dword ptr [rbp+0x28]  reg(73, 7fffbc848380) 
0x7f02e76f90d4: mov byte ptr [rbx+0x4c8], 0x0  mem(1f4dbf0, 0) 
0x7f02e76f90db: mov byte ptr [rbx+0x4c9], 0x0  mem(1f4dbf1, 0) 
0x7f02e76f90e2: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4dbf8 1f55d90 800 fffffff0	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e76f90e7: lea rdi, ptr [rbx+0x4e8]  reg(3, 1f4dbf8) 
0x7f02e76f90ee: mov byte ptr [rbx+0x4e0], 0x1  mem(1f4dc08, 0) 
0x7f02e76f90f5: mov byte ptr [rbx+0x4e1], 0x1  mem(1f4dc09, 0) 
0x7f02e76f90fc: mov byte ptr [rbx+0x4e2], 0x0  mem(1f4dc0a, 0) 
0x7f02e76f9103: mov byte ptr [rbx+0x4e3], 0x0  mem(1f4dc0b, 0) 
0x7f02e76f910a: mov esi, r12d  reg(47, 1f55d90)  reg(73, 800) 
0x7f02e76f910d: mov byte ptr [rbx+0x4e4], 0x0  mem(1f4dc0c, 0) 
0x7f02e76f9114: call 0x7f02e76a7740
openpal::Buffer::Buffer(unsigned int)@plt: 1f4dc10 800 800 fffffff0	_ZN7openpal6BufferC1Ej@plt
0x7f02e76a7740: jmp qword ptr [rip+0x2983da]
0x7f02e76f9119: lea rdi, ptr [rbx+0x508]  reg(3, 1f56540) 
0x7f02e76f9120: mov ebp, dword ptr [rbp+0x28]
0x7f02e76f9123: mov byte ptr [rbx+0x500], 0x0  mem(1f4dc28, 0) 
0x7f02e76f912a: mov byte ptr [rbx+0x501], 0x0  mem(1f4dc29, 0) 
0x7f02e76f9131: mov byte ptr [rbx+0x502], 0x0  mem(1f4dc2a, 0) 
0x7f02e76f9138: call 0x7f02e76a6070
openpal::RSlice::RSlice()@plt: 1f4dc30 1f565a0 800 ffffffe0	_ZN7openpal6RSliceC1Ev@plt
0x7f02e76a6070: jmp qword ptr [rip+0x298f42]
0x7f02e76f913d: lea rdi, ptr [rbx+0x520]  reg(3, 1f4dc30) 
0x7f02e76f9144: mov byte ptr [rbx+0x518], 0x1  mem(1f4dc40, 0) 
0x7f02e76f914b: mov byte ptr [rbx+0x519], 0x1  mem(1f4dc41, 0) 
0x7f02e76f9152: mov byte ptr [rbx+0x51a], 0x0  mem(1f4dc42, 0) 
0x7f02e76f9159: mov byte ptr [rbx+0x51b], 0x0  mem(1f4dc43, 0) 
0x7f02e76f9160: mov esi, ebp  reg(47, 1f565a0) 
0x7f02e76f9162: mov byte ptr [rbx+0x51c], 0x0  mem(1f4dc44, 0) 
0x7f02e76f9169: call 0x7f02e76a7740
openpal::Buffer::Buffer(unsigned int)@plt: 1f4dc48 800 800 ffffffe0	_ZN7openpal6BufferC1Ej@plt
0x7f02e76a7740: jmp qword ptr [rip+0x2983da]
0x7f02e76f916e: mov rax, qword ptr [rip+0x244903]  reg(10, 7f02e7612cd8) 
0x7f02e76f9175: mov qword ptr [rbx+0x538], rax  reg(10, 7f02e7940610)  mem(1f4dc60, 0) 
0x7f02e76f917c: pop rbx  reg(7, 1f4d728) 
0x7f02e76f917d: pop rbp
0x7f02e76f917e: pop r12  reg(15, 800) 
0x7f02e76f9180: pop r13  reg(16, 1f4db60) 
0x7f02e76f9182: pop r14  reg(17, 1f4d798) 
0x7f02e76f9184: ret 
opendnp3::TransportLayer::SetAppLayer(opendnp3::IUpperLayer&): 1f4dc80 1f4d728 800 fffffff0	_ZN8opendnp314TransportLayer11SetAppLayerERNS_11IUpperLayerE
0x7f02e7703e90: mov qword ptr [rdi+0x30], rsi  reg(4, 1f4d728)  mem(1f4dcb0, 0) 
0x7f02e7703e94: ret 
opendnp3::OContext::GetConfigView(): 7fffbc848390 1f4d728 800 fffffff0	_ZN8opendnp38OContext13GetConfigViewEv
0x7f02e76f8470: push rbx  reg(7, 1f4d690) 
0x7f02e76f8471: add rsi, 0x2d8  reg(4, 1f4d728) 
0x7f02e76f8478: mov rbx, rdi  reg(7, 1f4d690)  reg(3, 7fffbc848390) 
0x7f02e76f847b: sub rsp, 0x10
0x7f02e76f847f: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7940610) 
0x7f02e76f8488: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7fffbc848328, 7f02e80ff550) 
0x7f02e76f848d: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f848f: call 0x7f02e76a49f0
opendnp3::StaticBuffers::GetView() const@plt: 7fffbc848390 1f4da00 800 fffffff0	_ZNK8opendnp313StaticBuffers7GetViewEv@plt
0x7f02e76a49f0: jmp qword ptr [rip+0x299a82]
0x7f02e76a49f6: push 0x8c 
0x7f02e76a49fb: jmp 0x7f02e76a4120
opendnp3::StaticBuffers::GetView() const: 7fffbc848390 1f4da00 800 fffffff0	_ZNK8opendnp313StaticBuffers7GetViewEv
0x7f02e76fc3b0: push r15  reg(18, 7fffbc848390) 
0x7f02e76fc3b2: push r14  reg(17, 7fffbc848620) 
0x7f02e76fc3b4: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76fc3b6: push r13  reg(16, 1f4d728) 
0x7f02e76fc3b8: push r12  reg(15, 1f4dc70) 
0x7f02e76fc3ba: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76fc3bd: push rbp
0x7f02e76fc3be: push rbx  reg(7, 7fffbc848390) 
0x7f02e76fc3bf: mov r10, rdi  reg(13, f6)  reg(3, 7fffbc848390) 
0x7f02e76fc3c2: xor r13d, r13d  reg(76, 1f4d728)  reg(76, 1f4d728) 
0x7f02e76fc3c5: xor r11d, r11d  reg(70, 7f02e76fc3b0)  reg(70, 7f02e76fc3b0) 
0x7f02e76fc3c8: xor ecx, ecx  reg(55, fffffff0)  reg(55, fffffff0) 
0x7f02e76fc3ca: sub rsp, 0x28
0x7f02e76fc3ce: mov ax, word ptr [rsi+0x80]  reg(29, 0) 
0x7f02e76fc3d5: mov r8w, word ptr [rsi+0x38]  reg(60, 0) 
0x7f02e76fc3da: mov r15, qword ptr [rsi+0x40]  reg(18, 7fffbc848390) 
0x7f02e76fc3de: mov cx, word ptr [rsi+0x98]  reg(32, 0) 
0x7f02e76fc3e5: xor edi, edi  reg(45, 7fffbc848390)  reg(45, 7fffbc848390) 
0x7f02e76fc3e7: mov rdx, qword ptr [rsi+0x70]  reg(8, 800) 
0x7f02e76fc3eb: mov di, word ptr [rsi+0x50]  reg(41, 0) 
0x7f02e76fc3ef: mov qword ptr [rsp+0x10], rax  reg(10, a)  mem(7fffbc8482d0, 800) 
0x7f02e76fc3f4: mov rax, qword ptr [rsi+0x88]  reg(10, a) 
0x7f02e76fc3fb: mov qword ptr [rsp], r8  reg(11, a)  mem(7fffbc8482c0, 0) 
0x7f02e76fc3ff: mov rbp, qword ptr [rsi+0x58]
0x7f02e76fc403: xor r8d, r8d  reg(61, a)  reg(61, a) 
0x7f02e76fc406: mov r13w, word ptr [rsi+0xc8]  reg(75, 0) 
0x7f02e76fc40e: mov r8w, word ptr [rsi+0x20]  reg(60, 0) 
0x7f02e76fc413: mov qword ptr [rsp+0x18], rax  reg(10, 1f528a0)  mem(7fffbc8482d8, 1f4da00) 
0x7f02e76fc418: mov r14, qword ptr [rsi+0xd0]  reg(17, 7fffbc848620) 
0x7f02e76fc41f: xor eax, eax  reg(56, 1f528a0)  reg(56, 1f528a0) 
0x7f02e76fc421: mov r11w, word ptr [rsi+0xb0]  reg(69, 0) 
0x7f02e76fc429: mov ax, word ptr [rsi+0x68]  reg(29, 0) 
0x7f02e76fc42d: mov r12, qword ptr [rsi+0xb8]  reg(15, 1f4dc70) 
0x7f02e76fc434: mov rbx, qword ptr [rsi+0xa0]  reg(7, 7fffbc848390) 
0x7f02e76fc43b: mov qword ptr [rsp+0x8], r15  reg(18, 1f51a60)  mem(7fffbc8482c8, fffffff0) 
0x7f02e76fc440: mov r9, qword ptr [rsi+0x10]  reg(12, 1) 
0x7f02e76fc444: xor r15d, r15d  reg(82, 1f51a60)  reg(82, 1f51a60) 
0x7f02e76fc447: mov r15w, word ptr [rsi+0x8]  reg(81, 0) 
0x7f02e76fc44c: push r14  reg(17, 1f53418) 
0x7f02e76fc44e: push r13  reg(16, a) 
0x7f02e76fc450: push r12  reg(15, 1f531d0) 
0x7f02e76fc452: push r11  reg(14, a) 
0x7f02e76fc454: push rbx  reg(7, 1f52d10) 
0x7f02e76fc455: mov rbx, r10  reg(7, 1f52d10)  reg(13, 7fffbc848390) 
0x7f02e76fc458: push rcx  reg(9, a) 
0x7f02e76fc459: mov ecx, r8d  reg(55, a)  reg(61, a) 
0x7f02e76fc45c: push qword ptr [rsp+0x48]  mem(7fffbc8482d8, 1f528a0) 
0x7f02e76fc460: push qword ptr [rsp+0x48]  mem(7fffbc8482d0, a) 
0x7f02e76fc464: push rdx  reg(8, 1f523e0) 
0x7f02e76fc465: mov rdx, r9  reg(8, 1f523e0)  reg(12, 1f51180) 
0x7f02e76fc468: push rax  reg(10, a) 
0x7f02e76fc469: push rbp
0x7f02e76fc46a: push rdi  reg(3, a) 
0x7f02e76fc46b: push qword ptr [rsp+0x68]  mem(7fffbc8482c8, 1f51a60) 
0x7f02e76fc46f: mov rdi, r10  reg(3, a)  reg(13, 7fffbc848390) 
0x7f02e76fc472: push qword ptr [rsp+0x68]  mem(7fffbc8482c0, a) 
0x7f02e76fc476: mov r8, qword ptr [rsi+0x28]  reg(11, a) 
0x7f02e76fc47a: mov esi, r15d  reg(47, 1f4da00)  reg(82, a) 
0x7f02e76fc47d: call 0x7f02e76a5090
opendnp3::DatabaseConfigView::DatabaseConfigView(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>)@plt: 7fffbc848390 a 1f51180 a	_ZN8opendnp318DatabaseConfigViewC1EN7openpal9ArrayViewINS_4CellINS_10BinarySpecEEEtEENS2_INS3_INS_19DoubleBitBinarySpecEEEtEENS2_INS3_INS_10AnalogSpecEEEtEENS2_INS3_INS_11CounterSpecEEEtEENS2_INS3_INS_17FrozenCounterSpecEEEtEENS2_INS3_INS_22BinaryOutputStatusSpecEEEtEENS2_INS3_INS_22AnalogOutputStatusSpecEEEtEENS2_INS3_INS_19TimeAndIntervalSpecEEEtEENS2_INS3_INS_15OctetStringSpecEEEtEE@plt
0x7f02e76a5090: jmp qword ptr [rip+0x299732]
0x7f02e76a5096: push 0xf6 
0x7f02e76a509b: jmp 0x7f02e76a4120
opendnp3::DatabaseConfigView::DatabaseConfigView(openpal::ArrayView<opendnp3::Cell<opendnp3::BinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::DoubleBitBinarySpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::CounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::FrozenCounterSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::BinaryOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::AnalogOutputStatusSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::TimeAndIntervalSpec>, unsigned short>, openpal::ArrayView<opendnp3::Cell<opendnp3::OctetStringSpec>, unsigned short>): 7fffbc848390 a 1f51180 a	_ZN8opendnp318DatabaseConfigViewC1EN7openpal9ArrayViewINS_4CellINS_10BinarySpecEEEtEENS2_INS3_INS_19DoubleBitBinarySpecEEEtEENS2_INS3_INS_10AnalogSpecEEEtEENS2_INS3_INS_11CounterSpecEEEtEENS2_INS3_INS_17FrozenCounterSpecEEEtEENS2_INS3_INS_22BinaryOutputStatusSpecEEEtEENS2_INS3_INS_22AnalogOutputStatusSpecEEEtEENS2_INS3_INS_19TimeAndIntervalSpecEEEtEENS2_INS3_INS_15OctetStringSpecEEEtEE
0x7f02e76eef60: mov rax, qword ptr [rsp+0x8]  reg(10, a) 
0x7f02e76eef65: mov qword ptr [rdi+0x8], rdx  reg(8, 1f51180)  mem(7fffbc848398, 1f4dc70) 
0x7f02e76eef69: mov rdx, qword ptr [rsp+0x10]  reg(8, 1f51180) 
0x7f02e76eef6e: mov qword ptr [rdi], rsi  reg(4, a)  mem(7fffbc848390, 1f4dc88) 
0x7f02e76eef71: mov qword ptr [rdi+0x10], rcx  reg(9, a)  mem(7fffbc8483a0, 3e8) 
0x7f02e76eef75: mov qword ptr [rdi+0x18], r8  reg(11, 1f515f0)  mem(7fffbc8483a8, 7fffffffffffffff) 
0x7f02e76eef79: mov qword ptr [rdi+0x20], rax  reg(10, a)  mem(7fffbc8483b0, 0) 
0x7f02e76eef7d: mov rax, qword ptr [rsp+0x18]  reg(10, a) 
0x7f02e76eef82: mov qword ptr [rdi+0x28], rdx  reg(8, 1f51a60)  mem(7fffbc8483b8, 0) 
0x7f02e76eef86: mov rdx, qword ptr [rsp+0x20]  reg(8, 1f51a60) 
0x7f02e76eef8b: mov qword ptr [rdi+0x30], rax  reg(10, a)  mem(7fffbc8483c0, 2) 
0x7f02e76eef8f: mov rax, qword ptr [rsp+0x28]  reg(10, a) 
0x7f02e76eef94: mov qword ptr [rdi+0x38], rdx  reg(8, 1f51f20)  mem(7fffbc8483c8, 0) 
0x7f02e76eef98: mov rdx, qword ptr [rsp+0x30]  reg(8, 1f51f20) 
0x7f02e76eef9d: mov qword ptr [rdi+0x40], rax  reg(10, a)  mem(7fffbc8483d0, 6e0000005d) 
0x7f02e76eefa1: mov rax, qword ptr [rsp+0x38]  reg(10, a) 
0x7f02e76eefa6: mov qword ptr [rdi+0x48], rdx  reg(8, 1f523e0)  mem(7fffbc8483d8, 0) 
0x7f02e76eefaa: mov rdx, qword ptr [rsp+0x40]  reg(8, 1f523e0) 
0x7f02e76eefaf: mov qword ptr [rdi+0x50], rax  reg(10, a)  mem(7fffbc8483e0, 0) 
0x7f02e76eefb3: mov rax, qword ptr [rsp+0x48]  reg(10, a) 
0x7f02e76eefb8: mov qword ptr [rdi+0x58], rdx  reg(8, 1f528a0)  mem(7fffbc8483e8, 7c00000077) 
0x7f02e76eefbc: mov rdx, qword ptr [rsp+0x50]  reg(8, 1f528a0) 
0x7f02e76eefc1: mov qword ptr [rdi+0x60], rax  reg(10, a)  mem(7fffbc8483f0, a) 
0x7f02e76eefc5: mov rax, qword ptr [rsp+0x58]  reg(10, a) 
0x7f02e76eefca: mov qword ptr [rdi+0x68], rdx  reg(8, 1f52d10)  mem(7fffbc8483f8, 7f02e68a009d) 
0x7f02e76eefce: mov rdx, qword ptr [rsp+0x60]  reg(8, 1f52d10) 
0x7f02e76eefd3: mov qword ptr [rdi+0x70], rax  reg(10, a)  mem(7fffbc848400, 7f02e7dedc70) 
0x7f02e76eefd7: mov rax, qword ptr [rsp+0x68]  reg(10, a) 
0x7f02e76eefdc: mov qword ptr [rdi+0x78], rdx  reg(8, 1f531d0)  mem(7fffbc848408, 7fffbc848610) 
0x7f02e76eefe0: mov rdx, qword ptr [rsp+0x70]  reg(8, 1f531d0) 
0x7f02e76eefe5: mov qword ptr [rdi+0x80], rax  reg(10, a)  mem(7fffbc848410, 1f4d068) 
0x7f02e76eefec: mov qword ptr [rdi+0x88], rdx  reg(8, 1f53418)  mem(7fffbc848418, 7fffbc848510) 
0x7f02e76eeff3: ret 
0x7f02e76fc482: add rsp, 0x98
0x7f02e76fc489: mov rax, rbx  reg(10, a)  reg(7, 7fffbc848390) 
0x7f02e76fc48c: pop rbx  reg(7, 7fffbc848390) 
0x7f02e76fc48d: pop rbp
0x7f02e76fc48e: pop r12  reg(15, 1f531d0) 
0x7f02e76fc490: pop r13  reg(16, a) 
0x7f02e76fc492: pop r14  reg(17, 1f53418) 
0x7f02e76fc494: pop r15  reg(18, a) 
0x7f02e76fc496: ret 
0x7f02e76f8494: mov rdx, qword ptr [rsp+0x8]  reg(8, 1f53418) 
0x7f02e76f8499: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76f84a2: jnz 0x7f02e76f84ad
0x7f02e76f84a4: add rsp, 0x10
0x7f02e76f84a8: mov rax, rbx  reg(10, 7fffbc848390)  reg(7, 7fffbc848390) 
0x7f02e76f84ab: pop rbx  reg(7, 7fffbc848390) 
0x7f02e76f84ac: ret 
opendnp3::LinkLayer::SetRouter(opendnp3::ILinkTx&): 1f4e6c0 1f4d6a0 1f4d680 0	_ZN8opendnp39LinkLayer9SetRouterERNS_7ILinkTxE
0x7f02e76be800: mov qword ptr [rdi+0x230], rsi  reg(4, 1f4d6a0)  mem(1f4e8f0, 0) 
0x7f02e76be807: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d640 1f4d6a0 1f4d680 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d640) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d648, 100000007) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d640) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4bc20 1f4d6a0 1f4d680 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4bc20) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4bc28, 10000000c) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4bc20) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d150 1f4d6a0 1f4d680 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d150) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d158, 100000003) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d150) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f56df0 0 1 80000001	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848420) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848420)  reg(3, 1f56df0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f56df8, 100000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f56df0) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d020 7fffbc848540 3 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f56dc0) 
0x408e09: mov rbx, rdi  reg(7, 1f56dc0)  reg(3, 1f4d020) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d028, 200000006) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d020) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d680 7fffbc848540 3 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 1f56dc0) 
0x408e09: mov rbx, rdi  reg(7, 1f56dc0)  reg(3, 1f4d680) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d688, 200000007) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d680) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d020 7f02e6e67b30 0 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d020) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d028, 200000005) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d020) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d680 7f02e6e67b30 0 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d680) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d688, 200000006) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d680) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d020 7f02e6e67b30 0 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d020) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d028, 200000004) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d020) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d680 7f02e6e67b30 0 0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d680) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d688, 200000005) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d680) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d020 0 1f4d168 1f4d1a0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d020) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d028, 200000003) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d020) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d680 0 1f4d168 1f4d1a0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d680) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d688, 200000005) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d680) 
0x408e16: ret 
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d680 0 1f4d168 1f4d1a0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc848510) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc848510)  reg(3, 1f4d680) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d688, 200000004) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d680) 
0x408e16: ret 
0x40735b: mov rdi, qword ptr [rbp-0x80]  reg(3, 1f4d680) 
0x40735f: add rbx, 0x10  reg(7, 7fffbc8487e0) 
0x407363: cmp rdi, rbx  reg(3, 7fffbc8487f0)  reg(7, 7fffbc8487f0) 
0x407366: jz 0x40736d
0x40736d: mov rdi, qword ptr [rbp-0x248]  reg(3, 7fffbc8487f0) 
0x407374: test rdi, rdi  reg(3, 1f4d600)  reg(3, 1f4d600) 
0x407377: jz 0x40737e
0x407379: call 0x408e00
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d600 0 1f4d168 1f4d1a0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc8487f0) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc8487f0)  reg(3, 1f4d600) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d608, 100000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d600) 
0x408e16: ret 
0x40737e: mov rdi, qword ptr [rbp-0x238]  reg(3, 1f4d600) 
0x407385: test rdi, rdi  reg(3, 1f4d5e0)  reg(3, 1f4d5e0) 
0x407388: jz 0x40738f
0x40738a: call 0x408e00
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f4d5e0 0 1f4d168 1f4d1a0	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc8487f0) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc8487f0)  reg(3, 1f4d5e0) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f4d5e8, 100000003) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f4d5e0) 
0x408e16: ret 
0x40738f: mov rdi, qword ptr [rbp-0x270]  reg(3, 1f4d5e0) 
0x407396: mov rax, qword ptr [rdi]  reg(10, 7fffbc8485f0) 
0x407399: call qword ptr [rax+0x18]
asiodnp3::PrintingChannelListener::OnStateChange(opendnp3::ChannelState): 1f4c350 1 7f02dc0008c0 1f4d698	_ZN8asiodnp323PrintingChannelListener13OnStateChangeEN8opendnp312ChannelStateE
0x4084a0: push rbp
0x4084a1: push rbx  reg(7, 1f4cae0) 
0x4084a2: mov edi, esi  reg(45, 1f4c350)  reg(47, 1) 
0x4084a4: sub rsp, 0x8
0x4084a8: call 0x406dd0
opendnp3::ChannelStateToString(opendnp3::ChannelState)@plt: 1 1 7f02dc0008c0 1f4d698	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE@plt
0x406dd0: jmp qword ptr [rip+0x204302]
0x406dd6: push 0x18 
0x406ddb: jmp 0x406c40
opendnp3::ChannelStateToString(opendnp3::ChannelState): 1 1 7f02dc0008c0 1f4d698	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE
0x7f02e76b9ba0: cmp dil, 0x1  reg(46, 1) 
0x7f02e76b9ba4: lea rax, ptr [rip+0x528ce]  reg(10, 60abc8) 
0x7f02e76b9bab: jz 0x7f02e76b9bcc
0x7f02e76b9bcc: ret 
0x4084ad: mov rbx, qword ptr [rip+0x202b24]  reg(7, 1f4cae0) 
0x4084b4: lea rsi, ptr [rip+0xb15]  reg(4, 1) 
0x4084bb: mov rbp, rax
0x4084be: mov edx, 0x16  reg(54, 7f02dc0008c0) 
0x4084c3: mov rdi, rbx  reg(3, 1)  reg(7, 7f02e7406f40) 
0x4084c6: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 408fd0 16 1f4d698	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x406df6: push 0x1a 
0x406dfb: jmp 0x406c40
0x4084cb: test rbp, rbp
0x4084ce: jz 0x408550
0x4084d4: mov rdi, rbp  reg(3, 7f02dc000b56) 
0x4084d7: call 0x406cc0
strlen@plt: 7f02e770c479 0 7f02e7401988 206574617473206c	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x4084dc: mov rsi, rbp  reg(4, 0) 
0x4084df: mov rdx, rax  reg(8, 1080)  reg(10, 7) 
0x4084e2: mov rdi, rbx  reg(3, 7f02e770c479)  reg(7, 7f02e7406f40) 
0x4084e5: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 7f02e770c479 7 479	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084ea: mov rax, qword ptr [rbx]  reg(10, 7f02e7406f40) 
0x4084ed: mov rax, qword ptr [rax-0x18]  reg(10, 7f02e7401988) 
0x4084f1: mov rbp, qword ptr [rax+rbx*1+0xf0]
0x4084f9: test rbp, rbp
0x4084fc: jz 0x408567
0x4084fe: cmp byte ptr [rbp+0x38], 0x0  mem(7f02e74081f8, 605040302010001) 
0x408502: jz 0x408520
0x408504: movsx esi, byte ptr [rbp+0x43]  reg(47, 0) 
0x408508: mov rdi, rbx  reg(3, 7f02dc000b5d)  reg(7, 7f02e7406f40) 
0x40850b: call 0x406c60
std::ostream::put(char)@plt: 7f02e7406f40 a 7f02e7401988 474e494e	_ZNSo3putEc@plt
0x406c60: jmp qword ptr [rip+0x2043ba]
0x406c66: push 0x1 
0x406c6b: jmp 0x406c40
0x408510: add rsp, 0x8
0x408514: mov rdi, rax  reg(3, 0)  reg(10, 7f02e7406f40) 
0x408517: pop rbx  reg(7, 7f02e7406f40) 
0x408518: pop rbp
0x408519: jmp 0x406d00
std::ostream::flush()@plt: 7f02e7406f40 7f02e6e69780 7f02e7401988 0	_ZNSo5flushEv@plt
0x406d00: jmp qword ptr [rip+0x20436a]
0x406d06: push 0xb 
0x406d0b: jmp 0x406c40
memcpy: 7f02e2957f00 7f02e29580b0 7 7f02e2957f00	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 7f02e2957f00	dlsym@plt
memcpy: 7f02dc000f51 7f02e2957f01 6 7f02dc000f50	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 7f02dc000f50	dlsym@plt
memcpy: 7f02dc000f57 7f02e2957ead 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f58 7f02e2957d73 5 32	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 5 32	dlsym@plt
memcpy: 7f02e2957e20 7f02dc000f50 d 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 0	dlsym@plt
memcpy: 7f02dc000f51 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f52 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f53 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f54 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f55 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f56 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f57 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f58 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f59 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f5a 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f5b 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc000f5c 7f02e2957eb0 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
opendnp3::LogFlagToString(int): 8 0 6 7f02e2957e20	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 8) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 8) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c124b: ret 
memcpy: 7f02dc001161 7f02e7bdc261 2 7f02dc001160	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc001160	dlsym@plt
memcpy: 7f02dc001163 7f02e2957dab d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc001170 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc001172 7f02e771077f 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc001179 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc00117a 1f4c380 6 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 0	dlsym@plt
memcpy: 7f02dc001180 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc001183 7f02e2958390 1b 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1b 0	dlsym@plt
memcpy: 7f02dc001370 7f02dc001160 3e 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3e 7f02dc000020	dlsym@plt
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): 1f56e90 0 1 80000001	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
0x408e00: cmp qword ptr [rip+0x2021d8], 0x0  mem(60afe0, 7f02e794f230) 
0x408e08: push rbx  reg(7, 7fffbc8484e0) 
0x408e09: mov rbx, rdi  reg(7, 7fffbc8484e0)  reg(3, 1f56e90) 
0x408e0c: jz 0x408e20
0x408e0e: lock sub dword ptr [rdi+0x8], 0x1  mem(1f56e98, 100000002) 
0x408e13: jz 0x408e40
0x408e15: pop rbx  reg(7, 1f56e90) 
0x408e16: ret 
0x40739c: mov rax, qword ptr [rbp-0x298]  reg(10, 1) 
0x4073a3: mov rbx, qword ptr [rip+0x203c2e]  reg(7, 7fffbc8487f0) 
0x4073aa: lea r14, ptr [rbp-0x260]  reg(17, 60a980) 
0x4073b1: mov qword ptr [rbp-0x58], 0x0  mem(7fffbc848808, 7f02e6add299) 
0x4073b9: mov byte ptr [rbp-0x50], 0x0  mem(7fffbc848810, 407eb0) 
0x4073bd: mov dword ptr [rbp-0x240], 0x0  mem(7fffbc848620, 1f4d5f0) 
0x4073c7: mov qword ptr [rbp-0x238], 0x0  mem(7fffbc848628, 1f4d5e0) 
0x4073d2: add rax, 0x10  reg(10, 7fffbc848800) 
0x4073d6: mov byte ptr [rbp-0x230], 0x0  mem(7fffbc848630, 7fffbc84000a) 
0x4073dd: mov byte ptr [rbp-0x22f], 0x1  mem(7fffbc848631, 100007fffbc8400) 
0x4073e4: mov qword ptr [rbp-0x60], rax  reg(10, 7fffbc848810)  mem(7fffbc848800, 60b190) 
0x4073e8: mov byte ptr [rbp-0x22e], 0x1  mem(7fffbc848632, 100007fffbc84) 
0x4073ef: nop 
0x4073f0: lea rsi, ptr [rip+0x1b41]  reg(4, 7f02e6e67b28) 
0x4073f7: mov edx, 0x38  reg(54, 1f56ec0) 
0x4073fc: mov rdi, rbx  reg(3, ffffffff)  reg(7, 7f02e7406f40) 
0x4073ff: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 408f38 38 0	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x407404: mov rax, qword ptr [rbx]  reg(10, 7f02e7406f40) 
0x407407: mov rax, qword ptr [rax-0x18]  reg(10, 7f02e7401988) 
0x40740b: mov r12, qword ptr [rax+rbx*1+0xf0]  reg(15, 1f4d030) 
0x407413: test r12, r12  reg(15, 7f02e74081c0)  reg(15, 7f02e74081c0) 
0x407416: jz 0x407707
0x40741c: cmp byte ptr [r12+0x38], 0x0  mem(7f02e74081f8, 605040302010001) 
0x407422: jz 0x407590
0x407428: movsx esi, byte ptr [r12+0x43]  reg(47, 0) 
0x40742e: mov rdi, rbx  reg(3, 7f02dc000b78)  reg(7, 7f02e7406f40) 
0x407431: call 0x406c60
std::ostream::put(char)@plt: 7f02e7406f40 a 7f02e7401988 7373657270206e65	_ZNSo3putEc@plt
0x406c60: jmp qword ptr [rip+0x2043ba]
0x407436: mov rdi, rax  reg(3, 0)  reg(10, 7f02e7406f40) 
0x407439: call 0x406d00
std::ostream::flush()@plt: 7f02e7406f40 7f02e6e69780 7f02e7401988 0	_ZNSo5flushEv@plt
0x406d00: jmp qword ptr [rip+0x20436a]
0x40743e: lea rsi, ptr [rip+0x1b33]  reg(4, 7f02e6e69780) 
0x407445: mov edx, 0x53  reg(54, 0) 
0x40744a: mov rdi, rbx  reg(3, 7f02e6e68620)  reg(7, 7f02e7406f40) 
0x40744d: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 408f78 53 0	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x407452: mov rax, qword ptr [rbx]  reg(10, 7f02e7406f40) 
0x407455: mov rax, qword ptr [rax-0x18]  reg(10, 7f02e7401988) 
0x407459: mov r12, qword ptr [rax+rbx*1+0xf0]  reg(15, 7f02e74081c0) 
0x407461: test r12, r12  reg(15, 7f02e74081c0)  reg(15, 7f02e74081c0) 
0x407464: jz 0x40776a
0x40746a: cmp byte ptr [r12+0x38], 0x0  mem(7f02e74081f8, 605040302010001) 
0x407470: jz 0x4075c0
0x407476: movsx esi, byte ptr [r12+0x43]  reg(47, 0) 
0x40747c: mov rdi, rbx  reg(3, 7f02dc000b93)  reg(7, 7f02e7406f40) 
0x40747f: call 0x406c60
std::ostream::put(char)@plt: 7f02e7406f40 a 7f02e7401988 7469757127202c67	_ZNSo3putEc@plt
0x406c60: jmp qword ptr [rip+0x2043ba]
0x407484: mov rdi, rax  reg(3, 0)  reg(10, 7f02e7406f40) 
0x407487: call 0x406d00
std::ostream::flush()@plt: 7f02e7406f40 7f02e6e69780 7f02e7401988 0	_ZNSo5flushEv@plt
0x406d00: jmp qword ptr [rip+0x20436a]
0x40748c: mov r15, qword ptr [rbp-0x298]  reg(18, 7f02e7ba09d0) 
0x407493: mov rdi, qword ptr [rip+0x203b4e]  reg(3, 7f02e6e68620) 
0x40749a: mov rsi, r15  reg(4, 7f02e6e69780)  reg(18, 7fffbc848800) 
0x40749d: call 0x406e20
std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt: 7f02e7407060 7fffbc848800 0 0	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt
0x406e20: jmp qword ptr [rip+0x2042da]
0x406e26: push 0x1d 
0x406e2b: jmp 0x406c40
std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt: 7f02e29582c0 7f02e2958310 9 7f02e2958310	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 9 7f02e2958310	dlsym@plt
opendnp3::LogFlagToString(int): 8 0 6 7f02e2957f30	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 8) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 8) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c124b: ret 
memcpy: 7f02dc0010c1 7f02e7bdc261 2 7f02dc0010c0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc0010c0	dlsym@plt
memcpy: 7f02dc0010c3 7f02e2957ebb d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc0010d0 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc0010d2 7f02e771077f 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc0010d9 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc0010da 1f4c380 6 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 0	dlsym@plt
memcpy: 7f02dc0010e0 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc0010e3 7f02e2958310 23 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 23 0	dlsym@plt
memcpy: 7f02dc001370 7f02dc0010c0 46 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 46 7f02dc000020	dlsym@plt
opendnp3::LinkLayerParser::Reset(): 1f4cbc0 7f02e2958140 7f02dc0010c0 7f02dc000020	_ZN8opendnp315LinkLayerParser5ResetEv
0x7f02e76bef10: mov dword ptr [rdi+0x44], 0x0  mem(1f4cc04, 0) 
0x7f02e76bef17: mov dword ptr [rdi+0x48], 0x0  mem(1f4cc08, 0) 
0x7f02e76bef1e: add rdi, 0x188  reg(3, 1f4cbc0) 
0x7f02e76bef25: jmp 0x7f02e76a5a20
opendnp3::ShiftableBuffer::Reset()@plt: 1f4cd48 7f02e2958140 7f02dc0010c0 7f02dc000020	_ZN8opendnp315ShiftableBuffer5ResetEv@plt
0x7f02e76a5a20: jmp qword ptr [rip+0x29926a]
0x7f02e76a5a26: push 0x18f 
0x7f02e76a5a2b: jmp 0x7f02e76a4120
opendnp3::ShiftableBuffer::Reset(): 1f4cd48 7f02e2958140 7f02dc0010c0 7f02dc000020	_ZN8opendnp315ShiftableBuffer5ResetEv
0x7f02e76c1120: mov dword ptr [rdi+0xc], 0x0  mem(1f4cd54, 0) 
0x7f02e76c1127: mov dword ptr [rdi+0x10], 0x0  mem(1f4cd58, 0) 
0x7f02e76c112e: ret 
asiodnp3::PrintingChannelListener::OnStateChange(opendnp3::ChannelState): 1f4c350 2 0 1f4ce10	_ZN8asiodnp323PrintingChannelListener13OnStateChangeEN8opendnp312ChannelStateE
0x4084a0: push rbp
0x4084a1: push rbx  reg(7, 1f4cad8) 
0x4084a2: mov edi, esi  reg(45, 1f4c350)  reg(47, 2) 
0x4084a4: sub rsp, 0x8
0x4084a8: call 0x406dd0
opendnp3::ChannelStateToString(opendnp3::ChannelState)@plt: 2 2 0 1f4ce10	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE@plt
0x406dd0: jmp qword ptr [rip+0x204302]
opendnp3::ChannelStateToString(opendnp3::ChannelState): 2 2 0 1f4ce10	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE
0x7f02e76b9ba0: cmp dil, 0x1  reg(46, 2) 
0x7f02e76b9ba4: lea rax, ptr [rip+0x528ce]  reg(10, 60abc8) 
0x7f02e76b9bab: jz 0x7f02e76b9bcc
0x7f02e76b9bad: lea rax, ptr [rip+0x528be]  reg(10, 7f02e770c479) 
0x7f02e76b9bb4: jb 0x7f02e76b9bcc
0x7f02e76b9bb6: lea rdx, ptr [rip+0x528c9]  reg(8, 0) 
0x7f02e76b9bbd: lea rax, ptr [rip+0x528bd]  reg(10, 7f02e770c472) 
0x7f02e76b9bc4: cmp dil, 0x2  reg(46, 2) 
0x7f02e76b9bcc: ret 
0x4084ad: mov rbx, qword ptr [rip+0x202b24]  reg(7, 1f4cad8) 
0x4084b4: lea rsi, ptr [rip+0xb15]  reg(4, 2) 
0x4084bb: mov rbp, rax
0x4084be: mov edx, 0x16  reg(54, 7f02e770c486) 
0x4084c3: mov rdi, rbx  reg(3, 2)  reg(7, 7f02e7406f40) 
0x4084c6: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 408fd0 16 1f4ce10	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084cb: test rbp, rbp
0x4084ce: jz 0x408550
0x4084d4: mov rdi, rbp  reg(3, 7f02dc000b56) 
0x4084d7: call 0x406cc0
strlen@plt: 7f02e770c481 0 7f02e7401988 206574617473206c	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x4084dc: mov rsi, rbp  reg(4, 0) 
0x4084df: mov rdx, rax  reg(8, 2010)  reg(10, 4) 
0x4084e2: mov rdi, rbx  reg(3, 7f02e770c481)  reg(7, 7f02e7406f40) 
0x4084e5: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 7f02e770c481 4 481	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084ea: mov rax, qword ptr [rbx]  reg(10, 7f02e7406f40) 
0x4084ed: mov rax, qword ptr [rax-0x18]  reg(10, 7f02e7401988) 
0x4084f1: mov rbp, qword ptr [rax+rbx*1+0xf0]
0x4084f9: test rbp, rbp
0x4084fc: jz 0x408567
0x4084fe: cmp byte ptr [rbp+0x38], 0x0  mem(7f02e74081f8, 605040302010001) 
0x408502: jz 0x408520
0x408504: movsx esi, byte ptr [rbp+0x43]  reg(47, 0) 
0x408508: mov rdi, rbx  reg(3, 7f02dc000b5a)  reg(7, 7f02e7406f40) 
0x40850b: call 0x406c60
std::ostream::put(char)@plt: 7f02e7406f40 a 7f02e7401988 4e45504f	_ZNSo3putEc@plt
0x406c60: jmp qword ptr [rip+0x2043ba]
0x408510: add rsp, 0x8
0x408514: mov rdi, rax  reg(3, 0)  reg(10, 7f02e7406f40) 
0x408517: pop rbx  reg(7, 7f02e7406f40) 
0x408518: pop rbp
0x408519: jmp 0x406d00
std::ostream::flush()@plt: 7f02e7406f40 7f02e6e69780 7f02e7401988 0	_ZNSo5flushEv@plt
0x406d00: jmp qword ptr [rip+0x20436a]
opendnp3::LinkLayerParser::WriteBuff() const: 1f4cbc0 7f02e6e69780 0 0	_ZNK8opendnp315LinkLayerParser9WriteBuffEv
0x7f02e76bef30: sub rsp, 0x28
0x7f02e76bef34: mov esi, dword ptr [rdi+0x194]  reg(47, 7f02e6e69780) 
0x7f02e76bef3a: mov edx, dword ptr [rdi+0x190]  reg(54, 0) 
0x7f02e76bef40: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7406f40) 
0x7f02e76bef49: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958008, 7f02e80ff550) 
0x7f02e76bef4e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bef50: sub edx, esi  reg(54, 124)  reg(47, 0) 
0x7f02e76bef52: add rsi, qword ptr [rdi+0x188]  reg(4, 0) 
0x7f02e76bef59: mov rdi, rsp  reg(3, 1f4cbc0) 
0x7f02e76bef5c: call 0x7f02e76a5480
openpal::WSlice::WSlice(unsigned char*, unsigned int)@plt: 7f02e2957ff0 1f4cc20 124 0	_ZN7openpal6WSliceC1EPhj@plt
0x7f02e76a5480: jmp qword ptr [rip+0x29953a]
0x7f02e76a5486: push 0x135 
0x7f02e76a548b: jmp 0x7f02e76a4120
0x7f02e76bef61: mov rcx, qword ptr [rsp+0x18]  reg(9, 0) 
0x7f02e76bef66: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bef6f: mov rax, qword ptr [rsp]  reg(10, 0) 
0x7f02e76bef73: mov rdx, qword ptr [rsp+0x8]  reg(8, 124) 
0x7f02e76bef78: jnz 0x7f02e76bef7f
0x7f02e76bef7a: add rsp, 0x28
0x7f02e76bef7e: ret 
recvmsg: 7 7f02e2957ee0 0 0	recvmsg
dlsym@plt: ffffffffffffffff 7f02e7ebeeee 0 0	dlsym@plt
fprintf@plt: 7f02e6e68540 7f02e7ebeef8 7 1f4cc20	fprintf@plt
opendnp3::LinkLayer::OnLowerLayerUp(): 1f4e6c0 1f4c160 1 0	_ZN8opendnp39LinkLayer14OnLowerLayerUpEv
0x7f02e76be6b0: add rdi, 0x10  reg(3, 1f4e6c0) 
0x7f02e76be6b4: jmp 0x7f02e76a4d30
opendnp3::LinkContext::OnLowerLayerUp()@plt: 1f4e6d0 1f4c160 1 0	_ZN8opendnp311LinkContext14OnLowerLayerUpEv@plt
0x7f02e76a4d30: jmp qword ptr [rip+0x2998e2]
0x7f02e76a4d36: push 0xc0 
0x7f02e76a4d3b: jmp 0x7f02e76a4120
opendnp3::LinkContext::OnLowerLayerUp(): 1f4e6d0 1f4c160 1 0	_ZN8opendnp311LinkContext14OnLowerLayerUpEv
0x7f02e76bce70: push rbp
0x7f02e76bce71: push rbx  reg(7, 7f02dc0008c0) 
0x7f02e76bce72: mov rbx, rdi  reg(7, 7f02dc0008c0)  reg(3, 1f4e6d0) 
0x7f02e76bce75: sub rsp, 0x28
0x7f02e76bce79: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7deedb8) 
0x7f02e76bce82: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958008, 0) 
0x7f02e76bce87: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bce89: cmp byte ptr [rdi+0x202], 0x0  mem(1f4e8d2, fd09000000000000) 
0x7f02e76bce90: jz 0x7f02e76bced8
0x7f02e76bced8: mov rdi, qword ptr [rdi+0x1d0]  reg(3, 1f4e6d0) 
0x7f02e76bcedf: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76bcee2: call qword ptr [rax+0x10]
0x7f02e76bcee5: lea rsi, ptr [rbx+0x1b0]  reg(4, 98830f36) 
0x7f02e76bceec: mov rdi, rsp  reg(3, 7f02e2957fb0) 
0x7f02e76bceef: mov byte ptr [rbx+0x202], 0x1  mem(1f4e8d2, fd09000000000000) 
0x7f02e76bcef6: mov qword ptr [rbx+0x208], rax  reg(10, 98830f36)  mem(1f4e8d8, 9882fd09) 
0x7f02e76bcefd: mov qword ptr [rsp], rax  reg(10, 98830f36)  mem(7f02e2957ff0, 39) 
0x7f02e76bcf01: call 0x7f02e76a6a90
openpal::MonotonicTimestamp::Add(openpal::TimeDuration const&) const@plt: 7f02e2957ff0 1f4e880 0 0	_ZNK7openpal18MonotonicTimestamp3AddERKNS_12TimeDurationE@plt
0x7f02e76a6a90: jmp qword ptr [rip+0x298a32]
0x7f02e76a6a96: push 0x296 
0x7f02e76a6a9b: jmp 0x7f02e76a4120
0x7f02e76bcf06: lea rsi, ptr [rsp+0x10]  reg(4, 7fffffffffffffff) 
0x7f02e76bcf0b: mov rdi, rbx  reg(3, 7f02e2957fb0)  reg(7, 1f4e6d0) 
0x7f02e76bcf0e: mov qword ptr [rsp+0x10], rax  reg(10, 7fffffffffffffff)  mem(7f02e2958000, 7f02e794f230) 
0x7f02e76bcf13: call 0x7f02e76a7a00
opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)@plt: 1f4e6d0 7f02e2958000 0 98830f36	_ZN8opendnp311LinkContext19StartKeepAliveTimerERKN7openpal18MonotonicTimestampE@plt
0x7f02e76a7a00: jmp qword ptr [rip+0x29827a]
0x7f02e76a7a06: push 0x38d 
0x7f02e76a7a0b: jmp 0x7f02e76a4120
opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&): 1f4e6d0 7f02e2958000 0 98830f36	_ZN8opendnp311LinkContext19StartKeepAliveTimerERKN7openpal18MonotonicTimestampE
0x7f02e76bcdc0: push rbp
0x7f02e76bcdc1: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bcdc2: lea rdx, ptr [rip-0xb49]  reg(8, 0) 
0x7f02e76bcdc9: lea rcx, ptr [rip+0x240]  reg(9, 98830f36) 
0x7f02e76bcdd0: sub rsp, 0x38
0x7f02e76bcdd4: mov rax, qword ptr fs:[0x28]  reg(10, 7fffffffffffffff) 
0x7f02e76bcddd: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957fc8, 7f02e740fd5d) 
0x7f02e76bcde2: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bcde4: lea rax, ptr [rdi+0x1f0]  reg(10, 0) 
0x7f02e76bcdeb: mov qword ptr [rsp+0x8], rdi  reg(3, 1f4e6d0)  mem(7f02e2957fa8, 0) 
0x7f02e76bcdf0: mov qword ptr [rsp+0x10], rdx  reg(8, 7f02e76bc280)  mem(7f02e2957fb0, 39) 
0x7f02e76bcdf5: mov rdx, rsp  reg(8, 7f02e76bc280) 
0x7f02e76bcdf8: mov qword ptr [rsp+0x18], rcx  reg(9, 7f02e76bd010)  mem(7f02e2957fb8, d533a0ca891b2d00) 
0x7f02e76bcdfd: mov rbx, rsp  reg(7, 1f4e6d0) 
0x7f02e76bce00: mov rdi, rax  reg(3, 1f4e6d0)  reg(10, 1f4e8c0) 
0x7f02e76bce03: mov qword ptr [rsp], rax  reg(10, 1f4e8c0)  mem(7f02e2957fa0, 1f4e6d0) 
0x7f02e76bce07: call 0x7f02e76a67c0
openpal::TimerRef::StartAction(openpal::MonotonicTimestamp const&, std::function<void ()> const&)@plt: 1f4e8c0 7f02e2958000 7f02e2957fa0 7f02e76bd010	_ZN7openpal8TimerRef11StartActionERKNS_18MonotonicTimestampERKSt8functionIFvvEE@plt
0x7f02e76a67c0: jmp qword ptr [rip+0x298b9a]
0x7f02e76a67c6: push 0x269 
0x7f02e76a67cb: jmp 0x7f02e76a4120
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e00 7f02e2957fa0 2 51	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2957e00)  reg(3, 7f02e2957e00) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2957e00, 67736d76636572) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2957e08, 636572206e690000) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e40 7f02e2957e00 2 a	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2957e40)  reg(3, 7f02e2957e40) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2957e40, ffffff00) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2957e48, ffffff00ffffff00) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e90 7f02e2957e40 2 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2957e90)  reg(3, 7f02e2957e90) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2957e90, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2957e98, 0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957ee0 7f02e2957e90 2 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2957ee0)  reg(3, 7f02e2957ee0) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2957ee0, 31203a6d6f726620) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2957ee8, 312e302e302e3732) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc0011e8 7f02e2957ee0 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02dc0011e8)  reg(3, 7f02dc0011e8) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02dc0011e8, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02dc0011f0, 0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957ee0 7f02e2957ee0 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e90 7f02e2957e90 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e40 7f02e2957e40 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e00 7f02e2957e00 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
0x7f02e76bce0c: mov rax, qword ptr [rsp+0x10]  reg(10, 1) 
0x7f02e76bce11: test rax, rax  reg(10, 7f02e76bc280)  reg(10, 7f02e76bc280) 
0x7f02e76bce14: jz 0x7f02e76bce23
0x7f02e76bce16: mov edx, 0x3  reg(54, 3) 
0x7f02e76bce1b: mov rsi, rsp  reg(4, 7f02dc001148) 
0x7f02e76bce1e: mov rdi, rsp  reg(3, 7f02e2957e00) 
0x7f02e76bce21: call rax
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957fa0 7f02e2957fa0 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
0x7f02e76bce23: mov rax, qword ptr [rsp+0x28]  reg(10, 0) 
0x7f02e76bce28: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76bce31: jnz 0x7f02e76bce3a
0x7f02e76bce33: add rsp, 0x38
0x7f02e76bce37: pop rbx  reg(7, 7f02e2957fa0) 
0x7f02e76bce38: pop rbp
0x7f02e76bce39: ret 
0x7f02e76bcf18: mov rdi, qword ptr [rbx+0x238]  reg(3, 7f02e2957fa0) 
0x7f02e76bcf1f: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76bcf22: mov rax, qword ptr [rax]  reg(10, 60aa00) 
0x7f02e76bcf25: cmp rax, qword ptr [rip+0x280b8c]  reg(10, 407c90) 
0x7f02e76bcf2c: jnz 0x7f02e76bcf70
0x7f02e76bcf2e: mov rdi, qword ptr [rbx+0x248]  reg(3, 1f4d5f0) 
0x7f02e76bcf35: mov rax, qword ptr [rdi]  reg(10, 407c90) 
0x7f02e76bcf38: call qword ptr [rax+0x10]
opendnp3::TransportLayer::OnLowerLayerUp(): 1f4dc80 7f02e2957fa0 3 0	_ZN8opendnp314TransportLayer14OnLowerLayerUpEv
0x7f02e7703990: push rbp
0x7f02e7703991: push rbx  reg(7, 1f4e6d0) 
0x7f02e7703992: sub rsp, 0x28
0x7f02e7703996: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e793c9a8) 
0x7f02e770399f: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957fc8, d533a0ca891b2d00) 
0x7f02e77039a4: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e77039a6: cmp byte ptr [rdi+0x40], 0x0  mem(1f4dcc0, 0) 
0x7f02e77039aa: jnz 0x7f02e7703a48
0x7f02e77039b0: mov byte ptr [rdi+0x40], 0x1  mem(1f4dcc0, 0) 
0x7f02e77039b4: mov rdi, qword ptr [rdi+0x30]  reg(3, 1f4dc80) 
0x7f02e77039b8: test rdi, rdi  reg(3, 1f4d728)  reg(3, 1f4d728) 
0x7f02e77039bb: jz 0x7f02e7703a22
0x7f02e77039bd: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e77039c0: lea rdx, ptr [rip-0x37]  reg(8, 3) 
0x7f02e77039c7: mov rax, qword ptr [rax+0x10]  reg(10, 7f02e793c240) 
0x7f02e77039cb: cmp rax, rdx  reg(10, 7f02e76f8320)  reg(8, 7f02e7703990) 
0x7f02e77039ce: jnz 0x7f02e7703a20
0x7f02e7703a20: call rax
opendnp3::OContext::OnLowerLayerUp(): 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext14OnLowerLayerUpEv
0x7f02e76f8320: push rbp
0x7f02e76f8321: push rbx  reg(7, 1f4e6d0) 
0x7f02e76f8322: sub rsp, 0x18
0x7f02e76f8326: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e76f8320) 
0x7f02e76f832f: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957f88, 7f02e741010d) 
0x7f02e76f8334: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f8336: cmp byte ptr [rdi+0x430], 0x0  mem(1f4db58, 800000) 
0x7f02e76f833d: jz 0x7f02e76f8370
0x7f02e76f8370: mov byte ptr [rdi+0x430], 0x1  mem(1f4db58, 800000) 
0x7f02e76f8377: call 0x7f02e76a7460
opendnp3::OContext::CheckForTaskStart()@plt: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext17CheckForTaskStartEv@plt
0x7f02e76a7460: jmp qword ptr [rip+0x29854a]
0x7f02e76a7466: push 0x333 
0x7f02e76a746b: jmp 0x7f02e76a4120
opendnp3::OContext::CheckForTaskStart(): 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext17CheckForTaskStartEv
0x7f02e76f8300: push rbx  reg(7, 1f4e6d0) 
0x7f02e76f8301: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4d728) 
0x7f02e76f8304: call 0x7f02e76a6fd0
opendnp3::OContext::CheckForDeferredRequest()@plt: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext23CheckForDeferredRequestEv@plt
0x7f02e76a6fd0: jmp qword ptr [rip+0x298792]
0x7f02e76a6fd6: push 0x2ea 
0x7f02e76a6fdb: jmp 0x7f02e76a4120
opendnp3::OContext::CheckForDeferredRequest(): 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext23CheckForDeferredRequestEv
0x7f02e76f7d10: push rbx  reg(7, 1f4d728) 
0x7f02e76f7d11: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4d728) 
0x7f02e76f7d14: sub rsp, 0x30
0x7f02e76f7d18: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76f7d21: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957f58, 7f02e7df3000) 
0x7f02e76f7d26: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7d28: call 0x7f02e76a58b0
opendnp3::OContext::CanTransmit() const@plt: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZNK8opendnp38OContext11CanTransmitEv@plt
0x7f02e76a58b0: jmp qword ptr [rip+0x299322]
0x7f02e76a58b6: push 0x178 
0x7f02e76a58bb: jmp 0x7f02e76a4120
opendnp3::OContext::CanTransmit() const: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZNK8opendnp38OContext11CanTransmitEv
0x7f02e76f7cf0: movzx eax, byte ptr [rdi+0x430]  reg(56, 0) 
0x7f02e76f7cf7: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f7cf9: jz 0x7f02e76f7d05
0x7f02e76f7cfb: movzx eax, byte ptr [rdi+0x431]  reg(56, 1) 
0x7f02e76f7d02: xor eax, 0x1  reg(56, 0) 
0x7f02e76f7d05: ret 
0x7f02e76f7d2d: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f7d2f: jnz 0x7f02e76f7d50
0x7f02e76f7d50: lea rdi, ptr [rbx+0x458]  reg(3, 1f4d728) 
0x7f02e76f7d57: call 0x7f02e76a4a70
opendnp3::DeferredRequest::IsSet() const@plt: 1f4db80 7f02e2957fa0 7f02e7703990 0	_ZNK8opendnp315DeferredRequest5IsSetEv@plt
0x7f02e76a4a70: jmp qword ptr [rip+0x299a42]
0x7f02e76a4a76: push 0x94 
0x7f02e76a4a7b: jmp 0x7f02e76a4120
opendnp3::DeferredRequest::IsSet() const: 1f4db80 7f02e2957fa0 7f02e7703990 0	_ZNK8opendnp315DeferredRequest5IsSetEv
0x7f02e76ef060: movzx eax, byte ptr [rdi]  reg(56, 1) 
0x7f02e76ef063: ret 
0x7f02e76f7d5c: test al, al  reg(27, 0)  reg(27, 0) 
0x7f02e76f7d5e: jz 0x7f02e76f7d31
0x7f02e76f7d31: mov rax, qword ptr [rsp+0x28]  reg(10, 0) 
0x7f02e76f7d36: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76f7d3f: jnz 0x7f02e76f7db9
0x7f02e76f7d41: add rsp, 0x30
0x7f02e76f7d45: pop rbx  reg(7, 1f4d728) 
0x7f02e76f7d46: ret 
0x7f02e76f8309: mov rdi, rbx  reg(3, 1f4db80)  reg(7, 1f4d728) 
0x7f02e76f830c: pop rbx  reg(7, 1f4d728) 
0x7f02e76f830d: jmp 0x7f02e76a7b70
opendnp3::OContext::CheckForUnsolicited()@plt: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext19CheckForUnsolicitedEv@plt
0x7f02e76a7b70: jmp qword ptr [rip+0x2981c2]
0x7f02e76a7b76: push 0x3a4 
0x7f02e76a7b7b: jmp 0x7f02e76a4120
opendnp3::OContext::CheckForUnsolicited(): 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp38OContext19CheckForUnsolicitedEv
0x7f02e76f80c0: push r14  reg(17, 0) 
0x7f02e76f80c2: push r13  reg(16, 7f02e794f230) 
0x7f02e76f80c4: push r12  reg(15, 1f4cae0) 
0x7f02e76f80c6: push rbp
0x7f02e76f80c7: push rbx  reg(7, 1f4e6d0) 
0x7f02e76f80c8: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4d728) 
0x7f02e76f80cb: sub rsp, 0x70
0x7f02e76f80cf: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76f80d8: mov qword ptr [rsp+0x68], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957f48, 0) 
0x7f02e76f80dd: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f80df: call 0x7f02e76a58b0
opendnp3::OContext::CanTransmit() const@plt: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZNK8opendnp38OContext11CanTransmitEv@plt
0x7f02e76a58b0: jmp qword ptr [rip+0x299322]
opendnp3::OContext::CanTransmit() const: 1f4d728 7f02e2957fa0 7f02e7703990 0	_ZNK8opendnp38OContext11CanTransmitEv
0x7f02e76f7cf0: movzx eax, byte ptr [rdi+0x430]  reg(56, 0) 
0x7f02e76f7cf7: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f7cf9: jz 0x7f02e76f7d05
0x7f02e76f7cfb: movzx eax, byte ptr [rdi+0x431]  reg(56, 1) 
0x7f02e76f7d02: xor eax, 0x1  reg(56, 0) 
0x7f02e76f7d05: ret 
0x7f02e76f80e4: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f80e6: jnz 0x7f02e76f8110
0x7f02e76f8110: mov rdi, qword ptr [rbx+0x538]  reg(3, 1f4d728) 
0x7f02e76f8117: mov rax, qword ptr [rdi]  reg(10, 1) 
0x7f02e76f811a: call qword ptr [rax]
opendnp3::StateIdle::IsIdle(): 7f02e7940610 7f02e2957fa0 7f02e7703990 0	_ZN8opendnp39StateIdle6IsIdleEv
0x7f02e76fbaf0: mov eax, 0x1  reg(56, 7f02e793c2f0) 
0x7f02e76fbaf5: ret 
0x7f02e76f811c: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f811e: jz 0x7f02e76f80e8
0x7f02e76f8120: cmp byte ptr [rbx+0x428], 0x0  mem(1f4db50, ffff0001) 
0x7f02e76f8127: jz 0x7f02e76f80e8
0x7f02e76f8129: cmp byte ptr [rbx+0x500], 0x0  mem(1f4dc28, 0) 
0x7f02e76f8130: jz 0x7f02e76f8240
0x7f02e76f8240: lea rbp, ptr [rsp+0x40]
0x7f02e76f8245: lea r12, ptr [rsp+0x20]  reg(15, 1f4cae0) 
0x7f02e76f824a: lea rdi, ptr [rbx+0x520]  reg(3, 7f02e7940610) 
0x7f02e76f8251: call 0x7f02e76a4490
openpal::Buffer::GetWSlice()@plt: 1f4dc48 7f02e2957fa0 7f02e7703990 0	_ZN7openpal6Buffer9GetWSliceEv@plt
0x7f02e76a4490: jmp qword ptr [rip+0x299d32]
0x7f02e76a4496: push 0x36 
0x7f02e76a449b: jmp 0x7f02e76a4120
0x7f02e76f8256: mov rsi, r12  reg(4, 1f565b0)  reg(15, 7f02e2957f00) 
0x7f02e76f8259: mov rdi, rbp  reg(3, 7f02e2957eb0) 
0x7f02e76f825c: mov qword ptr [rsp+0x28], rdx  reg(8, 1f565b0)  mem(7f02e2957f08, 0) 
0x7f02e76f8261: mov dword ptr [rsp+0x20], eax  reg(56, 800)  mem(7f02e2957f00, 0) 
0x7f02e76f8265: call 0x7f02e76a7c90
opendnp3::APDUResponse::APDUResponse(openpal::WSlice const&)@plt: 7f02e2957f20 7f02e2957f00 1f565b0 0	_ZN8opendnp312APDUResponseC1ERKN7openpal6WSliceE@plt
0x7f02e76a7c90: jmp qword ptr [rip+0x298132]
0x7f02e76a7c96: push 0x3b6 
0x7f02e76a7c9b: jmp 0x7f02e76a4120
opendnp3::APDUResponse::APDUResponse(openpal::WSlice const&): 7f02e2957f20 7f02e2957f00 1f565b0 0	_ZN8opendnp312APDUResponseC2ERKN7openpal6WSliceE
0x7f02e76a9d50: push rbx  reg(7, 1f4d728) 
0x7f02e76a9d51: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 7f02e2957f20) 
0x7f02e76a9d54: call 0x7f02e76a45e0
opendnp3::APDUWrapper::APDUWrapper(openpal::WSlice const&)@plt: 7f02e2957f20 7f02e2957f00 1f565b0 0	_ZN8opendnp311APDUWrapperC2ERKN7openpal6WSliceE@plt
0x7f02e76a45e0: jmp qword ptr [rip+0x299c8a]
0x7f02e76a45e6: push 0x4b 
0x7f02e76a45eb: jmp 0x7f02e76a4120
opendnp3::APDUWrapper::APDUWrapper(openpal::WSlice const&): 7f02e2957f20 7f02e2957f00 1f565b0 0	_ZN8opendnp311APDUWrapperC2ERKN7openpal6WSliceE
0x7f02e76a9dc0: mov rax, qword ptr [rsi]  reg(10, 800) 
0x7f02e76a9dc3: mov rdx, qword ptr [rsi+0x8]  reg(8, 1f565b0) 
0x7f02e76a9dc7: add rdi, 0x18  reg(3, 7f02e2957f20) 
0x7f02e76a9dcb: mov byte ptr [rdi-0x18], 0x1  mem(7f02e2957f20, 0) 
0x7f02e76a9dcf: mov qword ptr [rdi-0x10], rax  reg(10, 800)  mem(7f02e2957f28, 0) 
0x7f02e76a9dd3: mov qword ptr [rdi-0x8], rdx  reg(8, 1f565b0)  mem(7f02e2957f30, 7f02e7703990) 
0x7f02e76a9dd7: mov rax, qword ptr [rsi]  reg(10, 800) 
0x7f02e76a9dda: mov rdx, qword ptr [rsi+0x8]  reg(8, 1f565b0) 
0x7f02e76a9dde: mov esi, 0x2  reg(47, 7f02e2957f00) 
0x7f02e76a9de3: mov qword ptr [rdi], rax  reg(10, 800)  mem(7f02e2957f38, 7f02e2957fa0) 
0x7f02e76a9de6: mov qword ptr [rdi+0x8], rdx  reg(8, 1f565b0)  mem(7f02e2957f40, 1f4d728) 
0x7f02e76a9dea: jmp 0x7f02e76a4a40
openpal::WSlice::Advance(unsigned int)@plt: 7f02e2957f38 2 1f565b0 0	_ZN7openpal6WSlice7AdvanceEj@plt
0x7f02e76a4a40: jmp qword ptr [rip+0x299a5a]
0x7f02e76a4a46: push 0x91 
0x7f02e76a4a4b: jmp 0x7f02e76a4120
0x7f02e76a9d59: lea rdi, ptr [rbx+0x18]  reg(3, 7f02e2957f38) 
0x7f02e76a9d5d: mov esi, 0x2  reg(47, 2) 
0x7f02e76a9d62: pop rbx  reg(7, 7f02e2957f20) 
0x7f02e76a9d63: jmp 0x7f02e76a4a40
openpal::WSlice::Advance(unsigned int)@plt: 7f02e2957f38 2 7fe 2	_ZN7openpal6WSlice7AdvanceEj@plt
0x7f02e76a4a40: jmp qword ptr [rip+0x299a5a]
0x7f02e76f826a: mov rdi, rbx  reg(3, 7f02e2957f38)  reg(7, 1f4d728) 
0x7f02e76f826d: call 0x7f02e76a70f0
opendnp3::OContext::GetResponseIIN()@plt: 1f4d728 2 7fc 2	_ZN8opendnp38OContext14GetResponseIINEv@plt
0x7f02e76a70f0: jmp qword ptr [rip+0x298702]
0x7f02e76a70f6: push 0x2fc 
0x7f02e76a70fb: jmp 0x7f02e76a4120
opendnp3::OContext::GetResponseIIN(): 1f4d728 2 7fc 2	_ZN8opendnp38OContext14GetResponseIINEv
0x7f02e76f7e80: push rbp
0x7f02e76f7e81: push rbx  reg(7, 1f4d728) 
0x7f02e76f7e82: mov rbp, rdi
0x7f02e76f7e85: sub rsp, 0x18
0x7f02e76f7e89: mov rdi, qword ptr [rdi+0x60]  reg(3, 1f4d728) 
0x7f02e76f7e8d: mov rax, qword ptr fs:[0x28]  reg(10, 2) 
0x7f02e76f7e96: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957eb8, 7f02e7df3000) 
0x7f02e76f7e9b: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7e9d: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76f7ea0: mov rax, qword ptr [rax+0x60]  reg(10, 60aa00) 
0x7f02e76f7ea4: cmp rax, qword ptr [rip+0x2450dd]  reg(10, 407d50) 
0x7f02e76f7eab: jnz 0x7f02e76f7f10
0x7f02e76f7ead: mov byte ptr [rsp], 0x0  mem(7f02e2957eb0, 1f4bd30) 
0x7f02e76f7eb1: mov byte ptr [rsp+0x1], 0x0  mem(7f02e2957eb1, 1f4bd) 
0x7f02e76f7eb6: mov byte ptr [rsp+0x2], 0x0  mem(7f02e2957eb2, 2d000000000001f4) 
0x7f02e76f7ebb: mov byte ptr [rsp+0x3], 0x0  mem(7f02e2957eb3, 1b2d000000000001) 
0x7f02e76f7ec0: mov byte ptr [rsp+0x4], 0x0  mem(7f02e2957eb4, 891b2d0000000000) 
0x7f02e76f7ec5: mov rdi, rsp  reg(3, 1f4d5f0) 
0x7f02e76f7ec8: call 0x7f02e76a43a0
opendnp3::ApplicationIIN::ToIIN() const@plt: 7f02e2957eb0 2 7fc 2	_ZNK8opendnp314ApplicationIIN5ToIINEv@plt
0x7f02e76a43a0: jmp qword ptr [rip+0x299daa]
0x7f02e76a43a6: push 0x27 
0x7f02e76a43ab: jmp 0x7f02e76a4120
opendnp3::ApplicationIIN::ToIIN() const: 7f02e2957eb0 2 7fc 2	_ZNK8opendnp314ApplicationIIN5ToIINEv
0x7f02e76e1920: push rbp
0x7f02e76e1921: push rbx  reg(7, 1f4d728) 
0x7f02e76e1922: mov rbp, rdi
0x7f02e76e1925: mov esi, 0x4  reg(47, 2) 
0x7f02e76e192a: sub rsp, 0x18
0x7f02e76e192e: movzx edx, byte ptr [rdi]  reg(54, 7fc) 
0x7f02e76e1931: mov rdi, rsp  reg(3, 7f02e2957eb0) 
0x7f02e76e1934: mov byte ptr [rsp], 0x0  mem(7f02e2957e80, 2) 
0x7f02e76e1938: mov byte ptr [rsp+0x1], 0x0  mem(7f02e2957e81, 200000000000000) 
0x7f02e76e193d: mov rax, qword ptr fs:[0x28]  reg(10, 407d50) 
0x7f02e76e1946: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e88, 2) 
0x7f02e76e194b: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76e194d: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 4 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
0x7f02e76a62a6: push 0x217 
0x7f02e76a62ab: jmp 0x7f02e76a4120
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 4 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 4 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
0x7f02e76a6036: push 0x1f0 
0x7f02e76a603b: jmp 0x7f02e76a4120
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 4 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, 4) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, 4)  reg(47, 4) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4a74) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaaa8: and byte ptr [rdi], 0xef  mem(7f02e2957e80, 0) 
0x7f02e76aaaab: ret 
0x7f02e76e1952: movzx edx, byte ptr [rbp+0x1]  reg(54, fffffffffffa4a74) 
0x7f02e76e1956: mov esi, 0x5  reg(47, 4) 
0x7f02e76e195b: mov rdi, rsp  reg(3, 7f02e2957e80) 
0x7f02e76e195e: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 5 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 5 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 5 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 5 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, 5) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 7f02e76aaaa8) 
0x7f02e76aaa5c: mov esi, esi  reg(47, 5)  reg(47, 5) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4a7c) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaab0: and byte ptr [rdi], 0xdf  mem(7f02e2957e80, 0) 
0x7f02e76aaab3: ret 
0x7f02e76e1963: movzx edx, byte ptr [rbp+0x3]  reg(54, fffffffffffa4a7c) 
0x7f02e76e1967: mov esi, 0xd  reg(47, 5) 
0x7f02e76e196c: mov rdi, rsp  reg(3, 7f02e2957e80) 
0x7f02e76e196f: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 d 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 d 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 d 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 d 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, d) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 7f02e76aaab0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, d)  reg(47, d) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4abc) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaaf0: and byte ptr [rdi+0x1], 0xdf  mem(7f02e2957e81, 0) 
0x7f02e76aaaf4: ret 
0x7f02e76e1974: movzx edx, byte ptr [rbp+0x2]  reg(54, fffffffffffa4abc) 
0x7f02e76e1978: mov esi, 0x6  reg(47, d) 
0x7f02e76e197d: mov rdi, rsp  reg(3, 7f02e2957e80) 
0x7f02e76e1980: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 6 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 6 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 6 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 6 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, 6) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 7f02e76aaaf0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, 6)  reg(47, 6) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4a84) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaab8: and byte ptr [rdi], 0xbf  mem(7f02e2957e80, 0) 
0x7f02e76aaabb: ret 
0x7f02e76e1985: movzx edx, byte ptr [rbp+0x4]  reg(54, fffffffffffa4a84) 
0x7f02e76e1989: mov esi, 0xb  reg(47, 6) 
0x7f02e76e198e: mov rdi, rsp  reg(3, 7f02e2957e80) 
0x7f02e76e1991: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 b 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 b 0 2	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 b 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 b 0 2	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, b) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 7f02e76aaab8) 
0x7f02e76aaa5c: mov esi, esi  reg(47, b)  reg(47, b) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4aac) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaae0: and byte ptr [rdi+0x1], 0xf7  mem(7f02e2957e81, 0) 
0x7f02e76aaae4: ret 
0x7f02e76e1996: mov rcx, qword ptr [rsp+0x8]  reg(9, 2) 
0x7f02e76e199b: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76e19a4: movzx eax, word ptr [rsp]  reg(56, 7f02e76aaae0) 
0x7f02e76e19a8: jnz 0x7f02e76e19b1
0x7f02e76e19aa: add rsp, 0x18
0x7f02e76e19ae: pop rbx  reg(7, 1f4d728) 
0x7f02e76e19af: pop rbp
0x7f02e76e19b0: ret 
0x7f02e76f7ecd: mov rdi, rbp  reg(3, 7f02e2957e80) 
0x7f02e76f7ed0: mov ebx, eax  reg(53, 1f4d728)  reg(56, 0) 
0x7f02e76f7ed2: call 0x7f02e76a5840
opendnp3::OContext::GetDynamicIIN()@plt: 1f4d728 b fffffffffffa4aac 0	_ZN8opendnp38OContext13GetDynamicIINEv@plt
0x7f02e76a5840: jmp qword ptr [rip+0x29935a]
0x7f02e76a5846: push 0x171 
0x7f02e76a584b: jmp 0x7f02e76a4120
opendnp3::OContext::GetDynamicIIN(): 1f4d728 b fffffffffffa4aac 0	_ZN8opendnp38OContext13GetDynamicIINEv
0x7f02e76f7dc0: push r12  reg(15, 7f02e2957f00) 
0x7f02e76f7dc2: push rbp
0x7f02e76f7dc3: lea rbp, ptr [rdi+0x70]
0x7f02e76f7dc7: push rbx  reg(7, 0) 
0x7f02e76f7dc8: mov rdi, rbp  reg(3, 1f4d728) 
0x7f02e76f7dcb: sub rsp, 0x20
0x7f02e76f7dcf: lea r12, ptr [rsp+0xf]  reg(15, 7f02e2957f00) 
0x7f02e76f7dd4: lea rbx, ptr [rsp+0x10]  reg(7, 0) 
0x7f02e76f7dd9: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76f7de2: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e88, d533a0ca891b2d00) 
0x7f02e76f7de7: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7de9: call 0x7f02e76a76e0
opendnp3::EventBuffer::UnwrittenClassField() const@plt: 1f4d798 b fffffffffffa4aac 0	_ZNK8opendnp311EventBuffer19UnwrittenClassFieldEv@plt
0x7f02e76a76e0: jmp qword ptr [rip+0x29840a]
0x7f02e76a76e6: push 0x35b 
0x7f02e76a76eb: jmp 0x7f02e76a4120
opendnp3::EventBuffer::UnwrittenClassField() const: 1f4d798 b fffffffffffa4aac 0	_ZNK8opendnp311EventBuffer19UnwrittenClassFieldEv
0x7f02e76f2d80: push r12  reg(15, 7f02e2957e7f) 
0x7f02e76f2d82: push rbp
0x7f02e76f2d83: mov esi, 0x2  reg(47, b) 
0x7f02e76f2d88: push rbx  reg(7, 7f02e2957e80) 
0x7f02e76f2d89: lea rbx, ptr [rdi+0x20]  reg(7, 7f02e2957e80) 
0x7f02e76f2d8d: sub rsp, 0x10
0x7f02e76f2d91: mov rdi, rbx  reg(3, 1f4d798)  reg(7, 1f4d7b8) 
0x7f02e76f2d94: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76f2d9d: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e48, 0) 
0x7f02e76f2da2: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f2da4: call 0x7f02e76a5040
opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const@plt: 1f4d7b8 2 fffffffffffa4aac 0	_ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE@plt
0x7f02e76a5040: jmp qword ptr [rip+0x29975a]
0x7f02e76a5046: push 0xf1 
0x7f02e76a504b: jmp 0x7f02e76a4120
opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const: 1f4d7b8 2 fffffffffffa4aac 0	_ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE
0x7f02e76f43c0: test sil, sil  reg(48, 2)  reg(48, 2) 
0x7f02e76f43c3: jz 0x7f02e76f43f0
0x7f02e76f43c5: cmp sil, 0x1  reg(48, 2) 
0x7f02e76f43c9: jz 0x7f02e76f43e0
0x7f02e76f43cb: test sil, sil  reg(48, 2)  reg(48, 2) 
0x7f02e76f43ce: mov eax, dword ptr [rdi+0x40]  reg(56, 0) 
0x7f02e76f43d1: jz 0x7f02e76f43f3
0x7f02e76f43d3: cmp sil, 0x1  reg(48, 2) 
0x7f02e76f43d7: jz 0x7f02e76f43e3
0x7f02e76f43d9: mov edx, dword ptr [rdi+0x4c]  reg(54, fffffffffffa4aac) 
0x7f02e76f43dc: sub eax, edx  reg(56, 0)  reg(54, 0) 
0x7f02e76f43de: ret 
0x7f02e76f2da9: mov esi, 0x1  reg(47, 2) 
0x7f02e76f2dae: mov rdi, rbx  reg(3, 1f4d7b8)  reg(7, 1f4d7b8) 
0x7f02e76f2db1: mov r12d, eax  reg(73, 7f02e2957e7f)  reg(56, 0) 
0x7f02e76f2db4: call 0x7f02e76a5040
opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const@plt: 1f4d7b8 1 0 0	_ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE@plt
0x7f02e76a5040: jmp qword ptr [rip+0x29975a]
opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const: 1f4d7b8 1 0 0	_ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE
0x7f02e76f43c0: test sil, sil  reg(48, 1)  reg(48, 1) 
0x7f02e76f43c3: jz 0x7f02e76f43f0
0x7f02e76f43c5: cmp sil, 0x1  reg(48, 1) 
0x7f02e76f43c9: jz 0x7f02e76f43e0
0x7f02e76f43e0: mov eax, dword ptr [rdi+0x3c]  reg(56, 0) 
0x7f02e76f43e3: mov edx, dword ptr [rdi+0x48]  reg(54, 0) 
0x7f02e76f43e6: sub eax, edx  reg(56, 0)  reg(54, 0) 
0x7f02e76f43e8: ret 
0x7f02e76f2db9: xor esi, esi  reg(47, 1)  reg(47, 1) 
0x7f02e76f2dbb: mov rdi, rbx  reg(3, 1f4d7b8)  reg(7, 1f4d7b8) 
0x7f02e76f2dbe: mov ebp, eax
0x7f02e76f2dc0: call 0x7f02e76a5040
opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const@plt: 1f4d7b8 0 0 0	_ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE@plt
0x7f02e76a5040: jmp qword ptr [rip+0x29975a]
opendnp3::EventStorage::NumUnwritten(opendnp3::EventClass) const: 1f4d7b8 0 0 0	_ZNK8opendnp312EventStorage12NumUnwrittenENS_10EventClassE
0x7f02e76f43c0: test sil, sil  reg(48, 0)  reg(48, 0) 
0x7f02e76f43c3: jz 0x7f02e76f43f0
0x7f02e76f43f0: mov eax, dword ptr [rdi+0x38]  reg(56, 0) 
0x7f02e76f43f3: mov edx, dword ptr [rdi+0x44]  reg(54, 0) 
0x7f02e76f43f6: sub eax, edx  reg(56, 0)  reg(54, 0) 
0x7f02e76f43f8: ret 
0x7f02e76f2dc5: xor r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e76f2dc8: test r12d, r12d  reg(73, 0)  reg(73, 0) 
0x7f02e76f2dcb: lea rdi, ptr [rsp+0x7]  reg(3, 1f4d7b8) 
0x7f02e76f2dd0: setnz r8b  reg(59, 0) 
0x7f02e76f2dd4: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76f2dd6: test ebp, ebp
0x7f02e76f2dd8: setnz cl  reg(30, 0) 
0x7f02e76f2ddb: xor edx, edx  reg(54, 0)  reg(54, 0) 
0x7f02e76f2ddd: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76f2ddf: setnz dl  reg(33, 0) 
0x7f02e76f2de2: xor esi, esi  reg(47, 0)  reg(47, 0) 
0x7f02e76f2de4: call 0x7f02e76a5260
opendnp3::ClassField::ClassField(bool, bool, bool, bool)@plt: 7f02e2957e47 0 0 0	_ZN8opendnp310ClassFieldC1Ebbbb@plt
0x7f02e76a5260: jmp qword ptr [rip+0x29964a]
0x7f02e76a5266: push 0x113 
0x7f02e76a526b: jmp 0x7f02e76a4120
opendnp3::ClassField::ClassField(bool, bool, bool, bool): 7f02e2957e47 0 0 0	_ZN8opendnp310ClassFieldC2Ebbbb
0x7f02e76aa210: cmp dl, 0x1  reg(33, 0) 
0x7f02e76aa213: sbb eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76aa215: not eax
0x7f02e76aa217: and eax, 0x2  reg(56, 0) 
0x7f02e76aa21a: or esi, eax  reg(47, 0)  reg(56, 0) 
0x7f02e76aa21c: cmp cl, 0x1  reg(30, 0) 
0x7f02e76aa21f: sbb eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76aa221: not eax
0x7f02e76aa223: and eax, 0x4  reg(56, 0) 
0x7f02e76aa226: or esi, eax  reg(47, 0)  reg(56, 0) 
0x7f02e76aa228: cmp r8b, 0x1  reg(59, 0) 
0x7f02e76aa22c: sbb eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76aa22e: not eax
0x7f02e76aa230: and eax, 0x8  reg(56, 0) 
0x7f02e76aa233: or esi, eax  reg(47, 0)  reg(56, 0) 
0x7f02e76aa235: mov byte ptr [rdi], sil  reg(48, 0)  mem(7f02e2957e47, 33a0ca891b2d0000) 
0x7f02e76aa238: ret 
0x7f02e76f2de9: mov rdx, qword ptr [rsp+0x8]  reg(8, 0) 
0x7f02e76f2dee: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76f2df7: movzx eax, byte ptr [rsp+0x7]  reg(56, 0) 
0x7f02e76f2dfc: jnz 0x7f02e76f2e07
0x7f02e76f2dfe: add rsp, 0x10
0x7f02e76f2e02: pop rbx  reg(7, 1f4d7b8) 
0x7f02e76f2e03: pop rbp
0x7f02e76f2e04: pop r12  reg(15, 0) 
0x7f02e76f2e06: ret 
0x7f02e76f7dee: mov rdi, r12  reg(3, 7f02e2957e47)  reg(15, 7f02e2957e7f) 
0x7f02e76f7df1: mov byte ptr [rsp+0xf], al  reg(27, 0)  mem(7f02e2957e7f, 0) 
0x7f02e76f7df5: mov byte ptr [rsp+0x10], 0x0  mem(7f02e2957e80, 0) 
0x7f02e76f7dfa: mov byte ptr [rsp+0x11], 0x0  mem(7f02e2957e81, 0) 
0x7f02e76f7dff: call 0x7f02e76a5150
opendnp3::ClassField::HasClass1() const@plt: 7f02e2957e7f 0 0 0	_ZNK8opendnp310ClassField9HasClass1Ev@plt
0x7f02e76a5150: jmp qword ptr [rip+0x2996d2]
0x7f02e76a5156: push 0x102 
0x7f02e76a515b: jmp 0x7f02e76a4120
opendnp3::ClassField::HasClass1() const: 7f02e2957e7f 0 0 0	_ZNK8opendnp310ClassField9HasClass1Ev
0x7f02e76aa3d0: movzx eax, byte ptr [rdi]  reg(56, 0) 
0x7f02e76aa3d3: shr al, 0x1  reg(27, 0) 
0x7f02e76aa3d5: and eax, 0x1  reg(56, 0) 
0x7f02e76aa3d8: ret 
0x7f02e76f7e04: mov esi, 0x1  reg(47, 0) 
0x7f02e76f7e09: movzx edx, al  reg(54, 0)  reg(27, 0) 
0x7f02e76f7e0c: mov rdi, rbx  reg(3, 7f02e2957e7f)  reg(7, 7f02e2957e80) 
0x7f02e76f7e0f: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 1 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 1 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 1 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 1 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, 1) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, 1)  reg(47, 1) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4a5c) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaa90: and byte ptr [rdi], 0xfd  mem(7f02e2957e80, 0) 
0x7f02e76aaa93: ret 
0x7f02e76f7e14: mov rdi, r12  reg(3, 7f02e2957e80)  reg(15, 7f02e2957e7f) 
0x7f02e76f7e17: call 0x7f02e76a5240
opendnp3::ClassField::HasClass2() const@plt: 7f02e2957e7f 1 fffffffffffa4a5c 0	_ZNK8opendnp310ClassField9HasClass2Ev@plt
0x7f02e76a5240: jmp qword ptr [rip+0x29965a]
0x7f02e76a5246: push 0x111 
0x7f02e76a524b: jmp 0x7f02e76a4120
opendnp3::ClassField::HasClass2() const: 7f02e2957e7f 1 fffffffffffa4a5c 0	_ZNK8opendnp310ClassField9HasClass2Ev
0x7f02e76aa3e0: movzx eax, byte ptr [rdi]  reg(56, 7f02e76aaa90) 
0x7f02e76aa3e3: shr al, 0x2  reg(27, 0) 
0x7f02e76aa3e6: and eax, 0x1  reg(56, 0) 
0x7f02e76aa3e9: ret 
0x7f02e76f7e1c: mov esi, 0x2  reg(47, 1) 
0x7f02e76f7e21: movzx edx, al  reg(54, fffffffffffa4a5c)  reg(27, 0) 
0x7f02e76f7e24: mov rdi, rbx  reg(3, 7f02e2957e7f)  reg(7, 7f02e2957e80) 
0x7f02e76f7e27: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 2 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 2 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 2 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 2 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, 2) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, 2)  reg(47, 2) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4a64) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaa98: and byte ptr [rdi], 0xfb  mem(7f02e2957e80, 0) 
0x7f02e76aaa9b: ret 
0x7f02e76f7e2c: mov rdi, r12  reg(3, 7f02e2957e80)  reg(15, 7f02e2957e7f) 
0x7f02e76f7e2f: call 0x7f02e76a47d0
opendnp3::ClassField::HasClass3() const@plt: 7f02e2957e7f 2 fffffffffffa4a64 0	_ZNK8opendnp310ClassField9HasClass3Ev@plt
0x7f02e76a47d0: jmp qword ptr [rip+0x299b92]
0x7f02e76a47d6: push 0x6a 
0x7f02e76a47db: jmp 0x7f02e76a4120
opendnp3::ClassField::HasClass3() const: 7f02e2957e7f 2 fffffffffffa4a64 0	_ZNK8opendnp310ClassField9HasClass3Ev
0x7f02e76aa3f0: movzx eax, byte ptr [rdi]  reg(56, 7f02e76aaa98) 
0x7f02e76aa3f3: shr al, 0x3  reg(27, 0) 
0x7f02e76aa3f6: and eax, 0x1  reg(56, 0) 
0x7f02e76aa3f9: ret 
0x7f02e76f7e34: mov esi, 0x3  reg(47, 2) 
0x7f02e76f7e39: movzx edx, al  reg(54, fffffffffffa4a64)  reg(27, 0) 
0x7f02e76f7e3c: mov rdi, rbx  reg(3, 7f02e2957e7f)  reg(7, 7f02e2957e80) 
0x7f02e76f7e3f: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 3 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 3 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 3 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 3 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, 3) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, 3)  reg(47, 3) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4a6c) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaaa0: and byte ptr [rdi], 0xf7  mem(7f02e2957e80, 0) 
0x7f02e76aaaa3: ret 
0x7f02e76f7e44: mov rdi, rbp  reg(3, 7f02e2957e80) 
0x7f02e76f7e47: call 0x7f02e76a74e0
opendnp3::EventBuffer::IsOverflown()@plt: 1f4d798 3 fffffffffffa4a6c 0	_ZN8opendnp311EventBuffer11IsOverflownEv@plt
0x7f02e76a74e0: jmp qword ptr [rip+0x29850a]
0x7f02e76a74e6: push 0x33b 
0x7f02e76a74eb: jmp 0x7f02e76a4120
opendnp3::EventBuffer::IsOverflown(): 1f4d798 3 fffffffffffa4a6c 0	_ZN8opendnp311EventBuffer11IsOverflownEv
0x7f02e76f2e10: movzx eax, byte ptr [rdi+0x18]  reg(56, 7f02e76aaaa0) 
0x7f02e76f2e14: test al, al  reg(27, 0)  reg(27, 0) 
0x7f02e76f2e16: jnz 0x7f02e76f2e20
0x7f02e76f2e18: ret 
0x7f02e76f7e4c: mov esi, 0xb  reg(47, 3) 
0x7f02e76f7e51: movzx edx, al  reg(54, fffffffffffa4a6c)  reg(27, 0) 
0x7f02e76f7e54: mov rdi, rbx  reg(3, 1f4d798)  reg(7, 7f02e2957e80) 
0x7f02e76f7e57: call 0x7f02e76a62a0
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool)@plt: 7f02e2957e80 b 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb@plt
0x7f02e76a62a0: jmp qword ptr [rip+0x298e2a]
opendnp3::IINField::SetBitToValue(opendnp3::IINBit, bool): 7f02e2957e80 b 0 0	_ZN8opendnp38IINField13SetBitToValueENS_6IINBitEb
0x7f02e76aab00: test dl, dl  reg(33, 0)  reg(33, 0) 
0x7f02e76aab02: jnz 0x7f02e76aab10
0x7f02e76aab04: jmp 0x7f02e76a6030
opendnp3::IINField::ClearBit(opendnp3::IINBit)@plt: 7f02e2957e80 b 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE@plt
0x7f02e76a6030: jmp qword ptr [rip+0x298f62]
opendnp3::IINField::ClearBit(opendnp3::IINBit): 7f02e2957e80 b 0 0	_ZN8opendnp38IINField8ClearBitENS_6IINBitE
0x7f02e76aaa50: cmp esi, 0xf  reg(47, b) 
0x7f02e76aaa53: jnbe 0x7f02e76aaa74
0x7f02e76aaa55: lea rax, ptr [rip+0x5b5d8]  reg(10, 0) 
0x7f02e76aaa5c: mov esi, esi  reg(47, b)  reg(47, b) 
0x7f02e76aaa5e: movsxd rdx, dword ptr [rax+rsi*4]  reg(8, 0) 
0x7f02e76aaa62: add rax, rdx  reg(10, 7f02e7706034)  reg(8, fffffffffffa4aac) 
0x7f02e76aaa65: jmp rax
0x7f02e76aaae0: and byte ptr [rdi+0x1], 0xf7  mem(7f02e2957e81, 0) 
0x7f02e76aaae4: ret 
0x7f02e76f7e5c: mov rcx, qword ptr [rsp+0x18]  reg(9, 0) 
0x7f02e76f7e61: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76f7e6a: movzx eax, word ptr [rsp+0x10]  reg(56, 7f02e76aaae0) 
0x7f02e76f7e6f: jnz 0x7f02e76f7e7a
0x7f02e76f7e71: add rsp, 0x20
0x7f02e76f7e75: pop rbx  reg(7, 7f02e2957e80) 
0x7f02e76f7e76: pop rbp
0x7f02e76f7e77: pop r12  reg(15, 7f02e2957e7f) 
0x7f02e76f7e79: ret 
0x7f02e76f7ed7: movzx edx, ah  reg(54, fffffffffffa4aac)  reg(28, 0) 
0x7f02e76f7eda: or al, byte ptr [rbp+0x432]  reg(27, 0) 
0x7f02e76f7ee0: or dl, byte ptr [rbp+0x433]  reg(33, 0) 
0x7f02e76f7ee6: movzx ecx, bh  reg(55, 0)  reg(37, 0) 
0x7f02e76f7ee9: or edx, ecx  reg(54, 0)  reg(55, 0) 
0x7f02e76f7eeb: or ebx, eax  reg(53, 0)  reg(56, 80) 
0x7f02e76f7eed: xor eax, eax  reg(56, 80)  reg(56, 80) 
0x7f02e76f7eef: mov rsi, qword ptr [rsp+0x8]  reg(4, b) 
0x7f02e76f7ef4: xor rsi, qword ptr fs:[0x28]  reg(4, d533a0ca891b2d00) 
0x7f02e76f7efd: mov al, bl  reg(27, 0)  reg(36, 80) 
0x7f02e76f7eff: mov ah, dl  reg(28, 80)  reg(33, 0) 
0x7f02e76f7f01: jnz 0x7f02e76f7f3c
0x7f02e76f7f03: add rsp, 0x18
0x7f02e76f7f07: pop rbx  reg(7, 80) 
0x7f02e76f7f08: pop rbp
0x7f02e76f7f09: ret 
0x7f02e76f8272: movzx esi, byte ptr [rbx+0x501]  reg(47, 0) 
0x7f02e76f8279: mov rdx, r12  reg(8, 0)  reg(15, 7f02e2957f00) 
0x7f02e76f827c: mov rdi, rbp  reg(3, 7f02e2957e80) 
0x7f02e76f827f: mov word ptr [rsp+0x20], ax  reg(29, 80)  mem(7f02e2957f00, 800) 
0x7f02e76f8284: call 0x7f02e76a5ad0
opendnp3::build::NullUnsolicited(opendnp3::APDUResponse&, unsigned char, opendnp3::IINField const&)@plt: 7f02e2957f20 0 7f02e2957f00 0	_ZN8opendnp35build15NullUnsolicitedERNS_12APDUResponseEhRKNS_8IINFieldE@plt
0x7f02e76a5ad0: jmp qword ptr [rip+0x299212]
0x7f02e76a5ad6: push 0x19a 
0x7f02e76a5adb: jmp 0x7f02e76a4120
opendnp3::build::NullUnsolicited(opendnp3::APDUResponse&, unsigned char, opendnp3::IINField const&): 7f02e2957f20 0 7f02e2957f00 0	_ZN8opendnp35build15NullUnsolicitedERNS_12APDUResponseEhRKNS_8IINFieldE
0x7f02e76a9700: push rbp
0x7f02e76a9701: push rbx  reg(7, 1f4d728) 
0x7f02e76a9702: movzx r9d, sil  reg(64, 1f4bd30)  reg(48, 0) 
0x7f02e76a9706: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 7f02e2957f20) 
0x7f02e76a9709: mov r8d, 0x1  reg(61, 0) 
0x7f02e76a970f: mov ecx, 0x1  reg(55, 0) 
0x7f02e76a9714: sub rsp, 0x18
0x7f02e76a9718: mov rbp, rdx
0x7f02e76a971b: mov esi, 0x1  reg(47, 0) 
0x7f02e76a9720: mov edx, 0x1  reg(54, 7f02e2957f00) 
0x7f02e76a9725: mov rdi, rsp  reg(3, 7f02e2957f20) 
0x7f02e76a9728: mov rax, qword ptr fs:[0x28]  reg(10, 80) 
0x7f02e76a9731: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957eb8, d533a0ca891b2d00) 
0x7f02e76a9736: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76a9738: call 0x7f02e76a4770
opendnp3::AppControlField::AppControlField(bool, bool, bool, bool, unsigned char)@plt: 7f02e2957eb0 1 1 1	_ZN8opendnp315AppControlFieldC1Ebbbbh@plt
0x7f02e76a4770: jmp qword ptr [rip+0x299bc2]
opendnp3::AppControlField::AppControlField(bool, bool, bool, bool, unsigned char): 7f02e2957eb0 1 1 1	_ZN8opendnp315AppControlFieldC1Ebbbbh
0x7f02e76a9fc0: mov byte ptr [rdi], sil  reg(48, 1)  mem(7f02e2957eb0, 1f4bd30) 
0x7f02e76a9fc3: mov byte ptr [rdi+0x1], dl  reg(33, 1)  mem(7f02e2957eb1, 1f4bd) 
0x7f02e76a9fc6: mov byte ptr [rdi+0x2], cl  reg(30, 1)  mem(7f02e2957eb2, 2d000000000001f4) 
0x7f02e76a9fc9: mov byte ptr [rdi+0x3], r8b  reg(59, 1)  mem(7f02e2957eb3, 1b2d000000000001) 
0x7f02e76a9fcd: mov byte ptr [rdi+0x4], r9b  reg(62, 0)  mem(7f02e2957eb4, 891b2d0000000000) 
0x7f02e76a9fd1: ret 
0x7f02e76a973d: mov rsi, qword ptr [rsp]  reg(4, 1) 
0x7f02e76a9741: mov rdi, rbx  reg(3, 7f02e2957eb0)  reg(7, 7f02e2957f20) 
0x7f02e76a9744: call 0x7f02e76a5e00
opendnp3::APDUWrapper::SetControl(opendnp3::AppControlField)@plt: 7f02e2957f20 1010101 1 1	_ZN8opendnp311APDUWrapper10SetControlENS_15AppControlFieldE@plt
0x7f02e76a5e00: jmp qword ptr [rip+0x29907a]
0x7f02e76a5e06: push 0x1cd 
0x7f02e76a5e0b: jmp 0x7f02e76a4120
opendnp3::APDUWrapper::SetControl(opendnp3::AppControlField): 7f02e2957f20 1010101 1 1	_ZN8opendnp311APDUWrapper10SetControlENS_15AppControlFieldE
0x7f02e76a9f00: push rbx  reg(7, 7f02e2957f20) 
0x7f02e76a9f01: sub rsp, 0x10
0x7f02e76a9f05: mov qword ptr [rsp+0x8], rsi  reg(4, 1010101)  mem(7f02e2957e98, 7f02e7df3000) 
0x7f02e76a9f0a: mov rbx, qword ptr [rdi+0x10]  reg(7, 7f02e2957f20) 
0x7f02e76a9f0e: lea rdi, ptr [rsp+0x8]  reg(3, 7f02e2957f20) 
0x7f02e76a9f13: call 0x7f02e76a4700
opendnp3::AppControlField::ToByte() const@plt: 7f02e2957e98 1010101 1 1	_ZNK8opendnp315AppControlField6ToByteEv@plt
0x7f02e76a4700: jmp qword ptr [rip+0x299bfa]
0x7f02e76a4706: push 0x5d 
0x7f02e76a470b: jmp 0x7f02e76a4120
opendnp3::AppControlField::ToByte() const: 7f02e2957e98 1010101 1 1	_ZNK8opendnp315AppControlField6ToByteEv
0x7f02e76aa080: cmp byte ptr [rdi], 0x1  mem(7f02e2957e98, 1010101) 
0x7f02e76aa083: sbb edx, edx  reg(54, 1)  reg(54, 1) 
0x7f02e76aa085: and edx, 0xffffff80  reg(54, 0) 
0x7f02e76aa088: sub edx, 0x40  reg(54, 0) 
0x7f02e76aa08b: cmp byte ptr [rdi], 0x1  mem(7f02e2957e98, 1010101) 
0x7f02e76aa08e: sbb eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76aa090: not eax
0x7f02e76aa092: and eax, 0xffffff80  reg(56, ffffffff) 
0x7f02e76aa095: cmp byte ptr [rdi+0x1], 0x0  mem(7f02e2957e99, 2000000000010101) 
0x7f02e76aa09c: mov eax, edx  reg(56, ffffff80)  reg(54, ffffffc0) 
0x7f02e76aa09e: or eax, 0x20  reg(56, ffffffc0) 
0x7f02e76aa0a1: cmp byte ptr [rdi+0x2], 0x0  mem(7f02e2957e9a, 7f20000000000101) 
0x7f02e76aa0a5: cmovnz edx, eax  reg(54, ffffffc0)  reg(56, ffffffe0) 
0x7f02e76aa0a8: mov eax, edx  reg(56, ffffffe0)  reg(54, ffffffe0) 
0x7f02e76aa0aa: or eax, 0x10  reg(56, ffffffe0) 
0x7f02e76aa0ad: cmp byte ptr [rdi+0x3], 0x0  mem(7f02e2957e9b, 957f200000000001) 
0x7f02e76aa0b1: cmovnz edx, eax  reg(54, ffffffe0)  reg(56, fffffff0) 
0x7f02e76aa0b4: movzx eax, byte ptr [rdi+0x4]  reg(56, fffffff0) 
0x7f02e76aa0b8: and eax, 0xf  reg(56, 0) 
0x7f02e76aa0bb: or eax, edx  reg(56, 0)  reg(54, fffffff0) 
0x7f02e76aa0bd: ret 
0x7f02e76a9f18: mov byte ptr [rbx], al  reg(27, fffffff0)  mem(1f565b0, 0) 
0x7f02e76a9f1a: add rsp, 0x10
0x7f02e76a9f1e: pop rbx  reg(7, 1f565b0) 
0x7f02e76a9f1f: ret 
0x7f02e76a9749: mov esi, 0xffffff82  reg(47, 1010101) 
0x7f02e76a974e: mov rdi, rbx  reg(3, 7f02e2957e98)  reg(7, 7f02e2957f20) 
0x7f02e76a9751: call 0x7f02e76a82b0
opendnp3::APDUWrapper::SetFunction(opendnp3::FunctionCode)@plt: 7f02e2957f20 ffffff82 fffffff0 1	_ZN8opendnp311APDUWrapper11SetFunctionENS_12FunctionCodeE@plt
0x7f02e76a82b0: jmp qword ptr [rip+0x297e22]
0x7f02e76a82b6: push 0x418 
0x7f02e76a82bb: jmp 0x7f02e76a4120
opendnp3::APDUWrapper::SetFunction(opendnp3::FunctionCode): 7f02e2957f20 ffffff82 fffffff0 1	_ZN8opendnp311APDUWrapper11SetFunctionENS_12FunctionCodeE
0x7f02e76a9e30: push rbx  reg(7, 7f02e2957f20) 
0x7f02e76a9e31: mov rbx, qword ptr [rdi+0x10]  reg(7, 7f02e2957f20) 
0x7f02e76a9e35: mov edi, esi  reg(45, 7f02e2957f20)  reg(47, ffffff82) 
0x7f02e76a9e37: call 0x7f02e76a70e0
opendnp3::FunctionCodeToType(opendnp3::FunctionCode)@plt: ffffff82 ffffff82 fffffff0 1	_ZN8opendnp318FunctionCodeToTypeENS_12FunctionCodeE@plt
0x7f02e76a70e0: jmp qword ptr [rip+0x29870a]
0x7f02e76a70e6: push 0x2fb 
0x7f02e76a70eb: jmp 0x7f02e76a4120
opendnp3::FunctionCodeToType(opendnp3::FunctionCode): ffffff82 ffffff82 fffffff0 1	_ZN8opendnp318FunctionCodeToTypeENS_12FunctionCodeE
0x7f02e76ba120: mov eax, edi  reg(56, fffffff0)  reg(45, ffffff82) 
0x7f02e76ba122: ret 
0x7f02e76a9e3c: mov byte ptr [rbx+0x1], al  reg(27, ffffff82)  mem(1f565b1, 0) 
0x7f02e76a9e3f: pop rbx  reg(7, 1f565b0) 
0x7f02e76a9e40: ret 
0x7f02e76a9756: mov rsi, rbp  reg(4, ffffff82) 
0x7f02e76a9759: mov rdi, rbx  reg(3, ffffff82)  reg(7, 7f02e2957f20) 
0x7f02e76a975c: call 0x7f02e76a5880
opendnp3::APDUResponse::SetIIN(opendnp3::IINField const&)@plt: 7f02e2957f20 7f02e2957f00 fffffff0 1	_ZN8opendnp312APDUResponse6SetIINERKNS_8IINFieldE@plt
0x7f02e76a5880: jmp qword ptr [rip+0x29933a]
0x7f02e76a5886: push 0x175 
0x7f02e76a588b: jmp 0x7f02e76a4120
opendnp3::APDUResponse::SetIIN(opendnp3::IINField const&): 7f02e2957f20 7f02e2957f00 fffffff0 1	_ZN8opendnp312APDUResponse6SetIINERKNS_8IINFieldE
0x7f02e76a9d70: movzx edx, byte ptr [rsi]  reg(54, fffffff0) 
0x7f02e76a9d73: mov rax, qword ptr [rdi+0x10]  reg(10, ffffff82) 
0x7f02e76a9d77: mov byte ptr [rax+0x2], dl  reg(33, 80)  mem(1f565b2, 0) 
0x7f02e76a9d7a: movzx edx, byte ptr [rsi+0x1]  reg(54, 80) 
0x7f02e76a9d7e: mov rax, qword ptr [rdi+0x10]  reg(10, 1f565b0) 
0x7f02e76a9d82: mov byte ptr [rax+0x3], dl  reg(33, 0)  mem(1f565b3, 0) 
0x7f02e76a9d85: ret 
0x7f02e76a9761: mov rax, qword ptr [rsp+0x8]  reg(10, 1f565b0) 
0x7f02e76a9766: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76a976f: jnz 0x7f02e76a9778
0x7f02e76a9771: add rsp, 0x18
0x7f02e76a9775: pop rbx  reg(7, 7f02e2957f20) 
0x7f02e76a9776: pop rbp
0x7f02e76a9777: ret 
0x7f02e76f8289: mov rdi, rbx  reg(3, 7f02e2957f20)  reg(7, 1f4d728) 
0x7f02e76f828c: call 0x7f02e76a74a0
opendnp3::OContext::RestartConfirmTimer()@plt: 1f4d728 7f02e2957f00 0 1	_ZN8opendnp38OContext19RestartConfirmTimerEv@plt
0x7f02e76a74a0: jmp qword ptr [rip+0x29852a]
0x7f02e76a74a6: push 0x337 
0x7f02e76a74ab: jmp 0x7f02e76a4120
opendnp3::OContext::RestartConfirmTimer(): 1f4d728 7f02e2957f00 0 1	_ZN8opendnp38OContext19RestartConfirmTimerEv
0x7f02e76f7c40: push rbp
0x7f02e76f7c41: push rbx  reg(7, 1f4d728) 
0x7f02e76f7c42: mov rsi, rdi  reg(4, 7f02e2957f00)  reg(3, 1f4d728) 
0x7f02e76f7c45: lea rdi, ptr [rdi+0x438]  reg(3, 1f4d728) 
0x7f02e76f7c4c: sub rsp, 0x38
0x7f02e76f7c50: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76f7c59: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957eb8, d533a0ca891b2d00) 
0x7f02e76f7c5e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7c60: lea rax, ptr [rip+0x759]  reg(10, 0) 
0x7f02e76f7c67: mov qword ptr [rsp+0x8], rsi  reg(4, 1f4d728)  mem(7f02e2957e98, 7f02e2957f00) 
0x7f02e76f7c6c: mov rdx, rsp  reg(8, 0) 
0x7f02e76f7c6f: add rsi, 0x410  reg(4, 1f4d728) 
0x7f02e76f7c76: mov qword ptr [rsp], rdi  reg(3, 1f4db60)  mem(7f02e2957e90, 0) 
0x7f02e76f7c7a: mov rbx, rsp  reg(7, 1f4d728) 
0x7f02e76f7c7d: mov qword ptr [rsp+0x18], rax  reg(10, 7f02e76f83c0)  mem(7f02e2957ea8, 1) 
0x7f02e76f7c82: lea rax, ptr [rip-0x4d9]  reg(10, 7f02e76f83c0) 
0x7f02e76f7c89: mov qword ptr [rsp+0x10], rax  reg(10, 7f02e76f77b0)  mem(7f02e2957ea0, 1f4d728) 
0x7f02e76f7c8e: call 0x7f02e76a5140
openpal::TimerRef::RestartAction(openpal::TimeDuration const&, std::function<void ()> const&)@plt: 1f4db60 1f4db38 7f02e2957e90 1	_ZN7openpal8TimerRef13RestartActionERKNS_12TimeDurationERKSt8functionIFvvEE@plt
0x7f02e76a5140: jmp qword ptr [rip+0x2996da]
0x7f02e76a5146: push 0x101 
0x7f02e76a514b: jmp 0x7f02e76a4120
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957ce0 7f02e2957e90 2 51	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2957ce0)  reg(3, 7f02e2957ce0) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2957ce0, 7f02e76bc280) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2957ce8, 7f02e76bd010) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957d20 7f02e2957ce0 2 b	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2957d20)  reg(3, 7f02e2957d20) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2957d20, 67736d76636572) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2957d28, 636572206e690000) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957d70 7f02e2957d20 2 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2957d70)  reg(3, 7f02e2957d70) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2957d70, 0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2957d78, 0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957dc0 7f02e2957d70 2 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2957dc0)  reg(3, 7f02e2957dc0) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2957dc0, 6f726620) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2957dc8, 1) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001308 7f02e2957dc0 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02dc001308)  reg(3, 7f02dc001308) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02dc001308, 0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02dc001310, 0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957dc0 7f02e2957dc0 3 7f02e2957c10	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957d70 7f02e2957d70 3 7f02e2957c10	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957d20 7f02e2957d20 3 7f02e2957c10	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957ce0 7f02e2957ce0 3 7f02e2957c10	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
0x7f02e76f7c93: mov rax, qword ptr [rsp+0x10]  reg(10, 7f02dc001270) 
0x7f02e76f7c98: test rax, rax  reg(10, 7f02e76f77b0)  reg(10, 7f02e76f77b0) 
0x7f02e76f7c9b: jz 0x7f02e76f7caa
0x7f02e76f7c9d: mov edx, 0x3  reg(54, 3) 
0x7f02e76f7ca2: mov rsi, rsp  reg(4, 7f02dc001268) 
0x7f02e76f7ca5: mov rdi, rsp  reg(3, 7f02e2957ce0) 
0x7f02e76f7ca8: call rax
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2957e90 7f02e2957e90 3 7f02e2957c10	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
0x7f02e76f7caa: mov rax, qword ptr [rsp+0x28]  reg(10, 0) 
0x7f02e76f7caf: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76f7cb8: jnz 0x7f02e76f7cc1
0x7f02e76f7cba: add rsp, 0x38
0x7f02e76f7cbe: pop rbx  reg(7, 7f02e2957e90) 
0x7f02e76f7cbf: pop rbp
0x7f02e76f7cc0: ret 
0x7f02e76f8291: mov rax, qword ptr [rip+0x245cf8]  reg(10, 0) 
0x7f02e76f8298: mov rdi, rbp  reg(3, 7f02e2957e90) 
0x7f02e76f829b: mov qword ptr [rbx+0x538], rax  reg(10, 7f02e7940600)  mem(1f4dc60, 7f02e7940610) 
0x7f02e76f82a2: call 0x7f02e76a4db0
opendnp3::APDUWrapper::ToRSlice() const@plt: 7f02e2957f20 7f02e2957e90 3 7f02e2957c10	_ZNK8opendnp311APDUWrapper8ToRSliceEv@plt
0x7f02e76a4db0: jmp qword ptr [rip+0x2998a2]
0x7f02e76a4db6: push 0xc8 
0x7f02e76a4dbb: jmp 0x7f02e76a4120
opendnp3::APDUWrapper::ToRSlice() const: 7f02e2957f20 7f02e2957e90 3 7f02e2957c10	_ZNK8opendnp311APDUWrapper8ToRSliceEv
0x7f02e76a9f30: push rbp
0x7f02e76a9f31: push rbx  reg(7, 1f4d728) 
0x7f02e76a9f32: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 7f02e2957f20) 
0x7f02e76a9f35: sub rsp, 0x28
0x7f02e76a9f39: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7940600) 
0x7f02e76a9f42: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957eb8, d533a0ca891b2d00) 
0x7f02e76a9f47: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76a9f49: call 0x7f02e76a52d0
opendnp3::APDUWrapper::Size() const@plt: 7f02e2957f20 7f02e2957e90 3 7f02e2957c10	_ZNK8opendnp311APDUWrapper4SizeEv@plt
0x7f02e76a52d0: jmp qword ptr [rip+0x299612]
0x7f02e76a52d6: push 0x11a 
0x7f02e76a52db: jmp 0x7f02e76a4120
opendnp3::APDUWrapper::Size() const: 7f02e2957f20 7f02e2957e90 3 7f02e2957c10	_ZNK8opendnp311APDUWrapper4SizeEv
0x7f02e76a9f20: mov eax, dword ptr [rdi+0x8]  reg(56, 0) 
0x7f02e76a9f23: sub eax, dword ptr [rdi+0x18]  reg(56, 800) 
0x7f02e76a9f26: ret 
0x7f02e76a9f4e: lea rdi, ptr [rbx+0x8]  reg(3, 7f02e2957f20) 
0x7f02e76a9f52: mov ebp, eax
0x7f02e76a9f54: call 0x7f02e76a6ca0
openpal::WSlice::ToRSlice() const@plt: 7f02e2957f28 7f02e2957e90 3 7f02e2957c10	_ZNK7openpal6WSlice8ToRSliceEv@plt
0x7f02e76a6ca0: jmp qword ptr [rip+0x29892a]
0x7f02e76a6ca6: push 0x2b7 
0x7f02e76a6cab: jmp 0x7f02e76a4120
0x7f02e76a9f59: mov rdi, rsp  reg(3, 7f02e2957e70) 
0x7f02e76a9f5c: mov esi, ebp  reg(47, 1f565b0) 
0x7f02e76a9f5e: mov dword ptr [rsp], eax  reg(56, 7f0200000800)  mem(7f02e2957ea0, 7f02e2957f20) 
0x7f02e76a9f61: mov qword ptr [rsp+0x8], rdx  reg(8, 1f565b0)  mem(7f02e2957ea8, 0) 
0x7f02e76a9f66: call 0x7f02e76a6890
openpal::RSlice::Take(unsigned int) const@plt: 7f02e2957ea0 4 1f565b0 0	_ZNK7openpal6RSlice4TakeEj@plt
0x7f02e76a6890: jmp qword ptr [rip+0x298b32]
0x7f02e76a6896: push 0x276 
0x7f02e76a689b: jmp 0x7f02e76a4120
0x7f02e76a9f6b: mov rcx, qword ptr [rsp+0x18]  reg(9, 0) 
0x7f02e76a9f70: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76a9f79: jnz 0x7f02e76a9f82
0x7f02e76a9f7b: add rsp, 0x28
0x7f02e76a9f7f: pop rbx  reg(7, 7f02e2957f20) 
0x7f02e76a9f80: pop rbp
0x7f02e76a9f81: ret 
0x7f02e76f82a7: mov rdi, rbp  reg(3, 7f02e2957e70) 
0x7f02e76f82aa: mov qword ptr [rsp+0x28], rdx  reg(8, 1f565b0)  mem(7f02e2957f08, 1f565b0) 
0x7f02e76f82af: mov dword ptr [rsp+0x20], eax  reg(56, 7f0200000004)  mem(7f02e2957f00, 80) 
0x7f02e76f82b3: call 0x7f02e76a81a0
opendnp3::APDUWrapper::GetControl() const@plt: 7f02e2957f20 1f565b0 1f565b0 0	_ZNK8opendnp311APDUWrapper10GetControlEv@plt
0x7f02e76a81a0: jmp qword ptr [rip+0x297eaa]
0x7f02e76a81a6: push 0x407 
0x7f02e76a81ab: jmp 0x7f02e76a4120
opendnp3::APDUWrapper::GetControl() const: 7f02e2957f20 1f565b0 1f565b0 0	_ZNK8opendnp311APDUWrapper10GetControlEv
0x7f02e76a9e60: push rbx  reg(7, 1f4d728) 
0x7f02e76a9e61: sub rsp, 0x20
0x7f02e76a9e65: mov rax, qword ptr fs:[0x28]  reg(10, 7f0200000004) 
0x7f02e76a9e6e: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957ec8, 7f02e7df3000) 
0x7f02e76a9e73: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76a9e75: mov rax, qword ptr [rdi+0x10]  reg(10, 0) 
0x7f02e76a9e79: mov rdi, rsp  reg(3, 7f02e2957f20) 
0x7f02e76a9e7c: movzx esi, byte ptr [rax]  reg(47, 1f565b0) 
0x7f02e76a9e7f: call 0x7f02e76a5a30
opendnp3::AppControlField::AppControlField(unsigned char)@plt: 7f02e2957eb0 f0 1f565b0 0	_ZN8opendnp315AppControlFieldC1Eh@plt
0x7f02e76a5a30: jmp qword ptr [rip+0x299262]
0x7f02e76a5a36: push 0x190 
0x7f02e76a5a3b: jmp 0x7f02e76a4120
opendnp3::AppControlField::AppControlField(unsigned char): 7f02e2957eb0 f0 1f565b0 0	_ZN8opendnp315AppControlFieldC2Eh
0x7f02e76a9f90: mov eax, esi  reg(56, 1f565b0)  reg(47, f0) 
0x7f02e76a9f92: shr al, 0x7  reg(27, f0) 
0x7f02e76a9f95: mov byte ptr [rdi], al  reg(27, 1)  mem(7f02e2957eb0, 7f02dc001170) 
0x7f02e76a9f97: mov eax, esi  reg(56, 1)  reg(47, f0) 
0x7f02e76a9f99: shr al, 0x6  reg(27, f0) 
0x7f02e76a9f9c: and eax, 0x1  reg(56, 3) 
0x7f02e76a9f9f: mov byte ptr [rdi+0x1], al  reg(27, 1)  mem(7f02e2957eb1, 7f02dc0011) 
0x7f02e76a9fa2: mov eax, esi  reg(56, 1)  reg(47, f0) 
0x7f02e76a9fa4: shr al, 0x5  reg(27, f0) 
0x7f02e76a9fa7: and eax, 0x1  reg(56, 7) 
0x7f02e76a9faa: mov byte ptr [rdi+0x2], al  reg(27, 1)  mem(7f02e2957eb2, 2d0000007f02dc00) 
0x7f02e76a9fad: mov eax, esi  reg(56, 1)  reg(47, f0) 
0x7f02e76a9faf: and esi, 0xf  reg(47, f0) 
0x7f02e76a9fb2: shr al, 0x4  reg(27, f0) 
0x7f02e76a9fb5: mov byte ptr [rdi+0x4], sil  reg(48, 0)  mem(7f02e2957eb4, 891b2d0000007f02) 
0x7f02e76a9fb9: and eax, 0x1  reg(56, f) 
0x7f02e76a9fbc: mov byte ptr [rdi+0x3], al  reg(27, 1)  mem(7f02e2957eb3, 1b2d0000007f00dc) 
0x7f02e76a9fbf: ret 
0x7f02e76a9e84: mov ebx, dword ptr [rsp]  reg(53, 1f4d728) 
0x7f02e76a9e87: movzx edi, byte ptr [rsp+0x4]  reg(45, 7f02e2957eb0) 
0x7f02e76a9e8c: mov eax, ebx  reg(56, 1)  reg(53, 1010101) 
0x7f02e76a9e8e: movzx edx, bl  reg(54, 1f565b0)  reg(36, 1010101) 
0x7f02e76a9e91: mov dword ptr [rsp+0x10], ebx  reg(53, 1010101)  mem(7f02e2957ec0, 1f4d728) 
0x7f02e76a9e95: shr eax, 0x10  reg(56, 1010101) 
0x7f02e76a9e98: mov byte ptr [rsp+0x14], dil  reg(46, 0)  mem(7f02e2957ec4, 891b2d0000000000) 
0x7f02e76a9e9d: mov esi, eax  reg(47, 0)  reg(56, 101) 
0x7f02e76a9e9f: mov eax, ebx  reg(56, 101)  reg(53, 1010101) 
0x7f02e76a9ea1: movzx ebx, bh  reg(53, 1010101)  reg(37, 1010101) 
0x7f02e76a9ea4: shr eax, 0x18  reg(56, 1010101) 
0x7f02e76a9ea7: mov dh, bl  reg(34, 1)  reg(36, 1) 
0x7f02e76a9ea9: mov ecx, eax  reg(55, 0)  reg(56, 1) 
0x7f02e76a9eab: movzx eax, sil  reg(56, 1)  reg(48, 101) 
0x7f02e76a9eaf: shl rax, 0x10  reg(10, 1) 
0x7f02e76a9eb3: movzx ecx, cl  reg(55, 1)  reg(30, 1) 
0x7f02e76a9eb6: shl rcx, 0x18  reg(9, 1) 
0x7f02e76a9eba: or rax, rdx  reg(10, 10000)  reg(8, 101) 
0x7f02e76a9ebd: movzx edx, dil  reg(54, 101)  reg(46, 0) 
0x7f02e76a9ec1: or rax, rcx  reg(10, 10101)  reg(9, 1000000) 
0x7f02e76a9ec4: mov rcx, 0xffffff00ffffffff  reg(9, 1000000) 
0x7f02e76a9ece: shl rdx, 0x20  reg(8, 0) 
0x7f02e76a9ed2: and rax, rcx  reg(10, 1010101)  reg(9, ffffff00ffffffff) 
0x7f02e76a9ed5: or rax, rdx  reg(10, 1010101)  reg(8, 0) 
0x7f02e76a9ed8: mov rsi, qword ptr [rsp+0x18]  reg(4, 101) 
0x7f02e76a9edd: xor rsi, qword ptr fs:[0x28]  reg(4, d533a0ca891b2d00) 
0x7f02e76a9ee6: jnz 0x7f02e76a9eee
0x7f02e76a9ee8: add rsp, 0x20
0x7f02e76a9eec: pop rbx  reg(7, 1) 
0x7f02e76a9eed: ret 
0x7f02e76f82b8: movzx edx, ah  reg(54, 0)  reg(28, 1010101) 
0x7f02e76f82bb: lea rsi, ptr [rsp+0x10]  reg(4, 0) 
0x7f02e76f82c0: mov byte ptr [rsp+0x10], al  reg(27, 1010101)  mem(7f02e2957ef0, 1f4bd30) 
0x7f02e76f82c4: mov byte ptr [rsp+0x11], dl  reg(33, 1)  mem(7f02e2957ef1, 100000000001f4bd) 
0x7f02e76f82c8: mov rdx, rax  reg(8, 1)  reg(10, 1010101) 
0x7f02e76f82cb: mov rdi, rbx  reg(3, 0)  reg(7, 1f4d728) 
0x7f02e76f82ce: shr rdx, 0x10  reg(8, 1010101) 
0x7f02e76f82d2: mov byte ptr [rsp+0x12], dl  reg(33, 101)  mem(7f02e2957ef2, d0100000000001f4) 
0x7f02e76f82d6: mov rdx, rax  reg(8, 101)  reg(10, 1010101) 
0x7f02e76f82d9: shr rax, 0x20  reg(10, 1010101) 
0x7f02e76f82dd: shr rdx, 0x18  reg(8, 1010101) 
0x7f02e76f82e1: mov byte ptr [rsp+0x14], al  reg(27, 0)  mem(7f02e2957ef4, e76bd01000000000) 
0x7f02e76f82e5: mov byte ptr [rsp+0x13], dl  reg(33, 1)  mem(7f02e2957ef3, 6bd0100000000001) 
0x7f02e76f82e9: mov rdx, r12  reg(8, 1)  reg(15, 7f02e2957f00) 
0x7f02e76f82ec: call 0x7f02e76a4f60
opendnp3::OContext::BeginUnsolTx(opendnp3::AppControlField const&, openpal::RSlice const&)@plt: 1f4d728 7f02e2957ef0 7f02e2957f00 ffffff00ffffffff	_ZN8opendnp38OContext12BeginUnsolTxERKNS_15AppControlFieldERKN7openpal6RSliceE@plt
0x7f02e76a4f60: jmp qword ptr [rip+0x2997ca]
0x7f02e76a4f66: push 0xe3 
0x7f02e76a4f6b: jmp 0x7f02e76a4120
opendnp3::OContext::BeginUnsolTx(opendnp3::AppControlField const&, openpal::RSlice const&): 1f4d728 7f02e2957ef0 7f02e2957f00 ffffff00ffffffff	_ZN8opendnp38OContext12BeginUnsolTxERKNS_15AppControlFieldERKN7openpal6RSliceE
0x7f02e76f7b90: mov eax, dword ptr [rsi]  reg(56, 0) 
0x7f02e76f7b92: mov dword ptr [rdi+0x518], eax  reg(56, 1010101)  mem(1f4dc40, 101) 
0x7f02e76f7b98: movzx eax, byte ptr [rsi+0x4]  reg(56, 1010101) 
0x7f02e76f7b9c: movzx esi, word ptr [rdi+0xa]  reg(47, 7f02e2957ef0) 
0x7f02e76f7ba0: mov byte ptr [rdi+0x51c], al  reg(27, 0)  mem(1f4dc44, e7612cd800000000) 
0x7f02e76f7ba6: movzx eax, byte ptr [rdi+0x501]  reg(56, 0) 
0x7f02e76f7bad: mov r9, qword ptr [rdx]  reg(12, 7f02dc001170) 
0x7f02e76f7bb0: mov r10, qword ptr [rdx+0x8]  reg(13, 385) 
0x7f02e76f7bb4: mov byte ptr [rdi+0x502], al  reg(27, 0)  mem(1f4dc2a, 0) 
0x7f02e76f7bba: add eax, 0x1  reg(56, 0) 
0x7f02e76f7bbd: mov qword ptr [rdi+0x508], r9  reg(12, 4)  mem(1f4dc30, 0) 
0x7f02e76f7bc4: and eax, 0xf  reg(56, 1) 
0x7f02e76f7bc7: mov qword ptr [rdi+0x510], r10  reg(13, 1f565b0)  mem(1f4dc38, 0) 
0x7f02e76f7bce: mov byte ptr [rdi+0x501], al  reg(27, 1)  mem(1f4dc29, 400000000000000) 
0x7f02e76f7bd4: jmp 0x7f02e76a7f30
opendnp3::OContext::BeginTx(unsigned short, openpal::RSlice const&)@plt: 1f4d728 1 7f02e2957f00 ffffff00ffffffff	_ZN8opendnp38OContext7BeginTxEtRKN7openpal6RSliceE@plt
0x7f02e76a7f30: jmp qword ptr [rip+0x297fe2]
0x7f02e76a7f36: push 0x3e0 
0x7f02e76a7f3b: jmp 0x7f02e76a4120
opendnp3::OContext::BeginTx(unsigned short, openpal::RSlice const&): 1f4d728 1 7f02e2957f00 ffffff00ffffffff	_ZN8opendnp38OContext7BeginTxEtRKN7openpal6RSliceE
0x7f02e76f7ad0: push r12  reg(15, 7f02e2957f00) 
0x7f02e76f7ad2: push rbp
0x7f02e76f7ad3: mov r12d, esi  reg(73, 7f02e2957f00)  reg(47, 1) 
0x7f02e76f7ad6: push rbx  reg(7, 1f4d728) 
0x7f02e76f7ad7: mov rsi, rdx  reg(4, 1)  reg(8, 7f02e2957f00) 
0x7f02e76f7ada: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4d728) 
0x7f02e76f7add: add rdi, 0x10  reg(3, 1f4d728) 
0x7f02e76f7ae1: mov rbp, rdx
0x7f02e76f7ae4: sub rsp, 0x20
0x7f02e76f7ae8: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f02e76f7af1: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957eb8, d533a0ca891b2d00) 
0x7f02e76f7af6: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7af8: call 0x7f02e76a7a90
opendnp3::logging::ParseAndLogResponseTx(openpal::Logger&, openpal::RSlice const&)@plt: 1f4d738 7f02e2957f00 7f02e2957f00 ffffff00ffffffff	_ZN8opendnp37logging21ParseAndLogResponseTxERN7openpal6LoggerERKNS1_6RSliceE@plt
0x7f02e76a7a90: jmp qword ptr [rip+0x298232]
0x7f02e76a7a96: push 0x396 
0x7f02e76a7a9b: jmp 0x7f02e76a4120
opendnp3::logging::ParseAndLogResponseTx(openpal::Logger&, openpal::RSlice const&): 1f4d738 7f02e2957f00 7f02e2957f00 ffffff00ffffffff	_ZN8opendnp37logging21ParseAndLogResponseTxERN7openpal6LoggerERKNS1_6RSliceE
0x7f02e76a9be0: push r12  reg(15, 1) 
0x7f02e76a9be2: push rbp
0x7f02e76a9be3: mov r12, rsi  reg(15, 1)  reg(4, 7f02e2957f00) 
0x7f02e76a9be6: push rbx  reg(7, 1f4d728) 
0x7f02e76a9be7: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4d738) 
0x7f02e76a9bea: sub rsp, 0x40
0x7f02e76a9bee: lea rbp, ptr [rsp+0x10]
0x7f02e76a9bf3: mov dword ptr [rsp+0x10], 0x10000  mem(7f02e2957e50, 7f02e2957f00) 
0x7f02e76a9bfb: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76a9c04: mov qword ptr [rsp+0x38], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e78, 1f565b0) 
0x7f02e76a9c09: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76a9c0b: mov rsi, rbp  reg(4, 7f02e2957f00) 
0x7f02e76a9c0e: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4d738 7f02e2957e50 7f02e2957f00 ffffff00ffffffff	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76a7fe6: push 0x3eb 
0x7f02e76a7feb: jmp 0x7f02e76a4120
0x7f02e76a9c13: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76a9c15: jnz 0x7f02e76a9ca8
0x7f02e76a9ca8: mov r8d, 0x12  reg(61, 0) 
0x7f02e76a9cae: mov ecx, 0x12  reg(55, ffffff00ffffffff) 
0x7f02e76a9cb3: mov rdx, r12  reg(8, 7f02e2957f00)  reg(15, 7f02e2957f00) 
0x7f02e76a9cb6: mov rsi, rbp  reg(4, 7f02e2957e50) 
0x7f02e76a9cb9: mov rdi, rbx  reg(3, 1f4d738)  reg(7, 1f4d738) 
0x7f02e76a9cbc: mov dword ptr [rsp+0x10], 0x10000  mem(7f02e2957e50, 7f0200010000) 
0x7f02e76a9cc4: call 0x7f02e76a48a0
openpal::LogHex(openpal::Logger&, openpal::LogFilters const&, openpal::RSlice const&, unsigned int, unsigned int)@plt: 1f4d738 7f02e2957e50 7f02e2957f00 12	_ZN7openpal6LogHexERNS_6LoggerERKNS_10LogFiltersERKNS_6RSliceEjj@plt
0x7f02e76a48a0: jmp qword ptr [rip+0x299b2a]
0x7f02e76a48a6: push 0x77 
0x7f02e76a48ab: jmp 0x7f02e76a4120
opendnp3::LogFlagToString(int): 10000 0 6 7f02e2957a30	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 10000) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c1270: cmp edi, 0x1000  reg(45, 10000) 
0x7f02e76c1276: jz 0x7f02e76c12ce
0x7f02e76c1278: jnle 0x7f02e76c12b0
0x7f02e76c12b0: cmp edi, 0x4000  reg(45, 10000) 
0x7f02e76c12b6: jz 0x7f02e76c12ce
0x7f02e76c12b8: jle 0x7f02e76c12e0
0x7f02e76c12ba: cmp edi, 0x8000  reg(45, 10000) 
0x7f02e76c12c0: jz 0x7f02e76c12ec
0x7f02e76c12c2: cmp edi, 0x10000  reg(45, 10000) 
0x7f02e76c12c8: jnz 0x7f02e76c1244
0x7f02e76c12ce: lea rax, ptr [rip+0x4f4e2]  reg(10, 0) 
0x7f02e76c12d5: ret 
memcpy: 7f02dc0013c1 7f02e7bdc261 2 7f02dc0013c0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc0013c0	dlsym@plt
memcpy: 7f02dc0013c3 7f02e29579bb d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc0013d0 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc0013d2 7f02e77107b7 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc0013d9 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc0013da 1f4d660 a 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 0	dlsym@plt
memcpy: 7f02dc0013e4 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc0013e7 7f02e2957d80 c 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 c 0	dlsym@plt
memcpy: 7f02dc0015d0 7f02dc0013c0 33 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 33 7f02dc000020	dlsym@plt
0x7f02e76a9cc9: jmp 0x7f02e76a9c1b
0x7f02e76a9c1b: mov rsi, rbp  reg(4, 0) 
0x7f02e76a9c1e: mov rdi, rbx  reg(3, 7f02e2957c90)  reg(7, 1f4d738) 
0x7f02e76a9c21: mov dword ptr [rsp+0x10], 0x1000  mem(7f02e2957e50, 7f0200010000) 
0x7f02e76a9c29: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4d738 7f02e2957e50 7f02e7401c60 0	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76a9c2e: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76a9c30: jnz 0x7f02e76a9c50
0x7f02e76a9c50: mov rdx, rbx  reg(8, 7f02e7401c60)  reg(7, 1f4d738) 
0x7f02e76a9c53: mov rsi, r12  reg(4, 7f02e2957e50)  reg(15, 7f02e2957f00) 
0x7f02e76a9c56: mov rdi, rbp  reg(3, 1f4d738) 
0x7f02e76a9c59: call 0x7f02e76a52e0
opendnp3::APDUHeaderParser::ParseResponse(openpal::RSlice const&, openpal::Logger*)@plt: 7f02e2957e50 7f02e2957f00 1f4d738 0	_ZN8opendnp316APDUHeaderParser13ParseResponseERKN7openpal6RSliceEPNS1_6LoggerE@plt
0x7f02e76a52e0: jmp qword ptr [rip+0x29960a]
0x7f02e76a52e6: push 0x11b 
0x7f02e76a52eb: jmp 0x7f02e76a4120
opendnp3::APDUHeaderParser::ParseResponse(openpal::RSlice const&, openpal::Logger*): 7f02e2957e50 7f02e2957f00 1f4d738 0	_ZN8opendnp316APDUHeaderParser13ParseResponseERKN7openpal6RSliceEPNS1_6LoggerE
0x7f02e76ab350: push r15  reg(18, 7f02dc0010d0) 
0x7f02e76ab352: push r14  reg(17, 0) 
0x7f02e76ab354: push r13  reg(16, 7f02e794f230) 
0x7f02e76ab356: push r12  reg(15, 7f02e2957f00) 
0x7f02e76ab358: push rbp
0x7f02e76ab359: push rbx  reg(7, 1f4d738) 
0x7f02e76ab35a: mov rbp, rsi
0x7f02e76ab35d: mov rbx, rdi  reg(7, 1f4d738)  reg(3, 7f02e2957e50) 
0x7f02e76ab360: sub rsp, 0xa8
0x7f02e76ab367: mov rax, qword ptr fs:[0x28]  reg(10, 1fe01) 
0x7f02e76ab370: mov qword ptr [rsp+0x98], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957df8, 7f02e2957f00) 
0x7f02e76ab378: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76ab37a: cmp dword ptr [rsi], 0x3  mem(7f02e2957f00, 4) 
0x7f02e76ab37d: jnbe 0x7f02e76ab448
0x7f02e76ab448: mov esi, 0x4  reg(47, 7f02e2957f00) 
0x7f02e76ab44d: mov rdi, rbp  reg(3, 7f02e2957e50) 
0x7f02e76ab450: call 0x7f02e76a5ac0
openpal::RSlice::Skip(unsigned int) const@plt: 7f02e2957f00 4 1f4d738 0	_ZNK7openpal6RSlice4SkipEj@plt
0x7f02e76a5ac0: jmp qword ptr [rip+0x29921a]
0x7f02e76a5ac6: push 0x199 
0x7f02e76a5acb: jmp 0x7f02e76a4120
0x7f02e76ab455: mov r12, rax  reg(15, 7f02e2957f00)  reg(10, 0) 
0x7f02e76ab458: mov rax, qword ptr [rbp+0x8]  reg(10, 0) 
0x7f02e76ab45c: mov r13, rdx  reg(16, 7f02e794f230)  reg(8, 1f565b4) 
0x7f02e76ab45f: movzx edi, byte ptr [rax+0x1]  reg(45, 7f02e2957d30) 
0x7f02e76ab463: movzx r14d, byte ptr [rax+0x3]  reg(79, 0) 
0x7f02e76ab468: movzx r15d, byte ptr [rax+0x2]  reg(82, 7f02dc0010d0) 
0x7f02e76ab46d: call 0x7f02e76a5cc0
opendnp3::FunctionCodeFromType(unsigned char)@plt: 82 1f565b4 1f565b4 0	_ZN8opendnp320FunctionCodeFromTypeEh@plt
0x7f02e76a5cc0: jmp qword ptr [rip+0x29911a]
0x7f02e76a5cc6: push 0x1b9 
0x7f02e76a5ccb: jmp 0x7f02e76a4120
opendnp3::FunctionCodeFromType(unsigned char): 82 1f565b4 1f565b4 0	_ZN8opendnp320FunctionCodeFromTypeEh
0x7f02e76ba130: cmp dil, 0x83  reg(46, 82) 
0x7f02e76ba134: movzx edx, dil  reg(54, 1f565b4)  reg(46, 82) 
0x7f02e76ba138: mov eax, 0xffffffff  reg(56, 1f565b0) 
0x7f02e76ba13d: jnbe 0x7f02e76ba14a
0x7f02e76ba13f: lea rax, ptr [rip+0x52c9a]  reg(10, ffffffff) 
0x7f02e76ba146: movzx eax, byte ptr [rax+rdx*1]  reg(56, 7f02e770cde0) 
0x7f02e76ba14a: ret 
0x7f02e76ab472: mov rdx, qword ptr [rbp+0x8]  reg(8, 82) 
0x7f02e76ab476: lea rdi, ptr [rsp+0x10]  reg(3, 82) 
0x7f02e76ab47b: mov byte ptr [rsp+0xf], al  reg(27, 82)  mem(7f02e2957d6f, 6f) 
0x7f02e76ab47f: movzx esi, byte ptr [rdx]  reg(47, 1f565b4) 
0x7f02e76ab482: call 0x7f02e76a5a30
opendnp3::AppControlField::AppControlField(unsigned char)@plt: 7f02e2957d70 f0 1f565b0 0	_ZN8opendnp315AppControlFieldC1Eh@plt
0x7f02e76a5a30: jmp qword ptr [rip+0x299262]
opendnp3::AppControlField::AppControlField(unsigned char): 7f02e2957d70 f0 1f565b0 0	_ZN8opendnp315AppControlFieldC2Eh
0x7f02e76a9f90: mov eax, esi  reg(56, 82)  reg(47, f0) 
0x7f02e76a9f92: shr al, 0x7  reg(27, f0) 
0x7f02e76a9f95: mov byte ptr [rdi], al  reg(27, 1)  mem(7f02e2957d70, 0) 
0x7f02e76a9f97: mov eax, esi  reg(56, 1)  reg(47, f0) 
0x7f02e76a9f99: shr al, 0x6  reg(27, f0) 
0x7f02e76a9f9c: and eax, 0x1  reg(56, 3) 
0x7f02e76a9f9f: mov byte ptr [rdi+0x1], al  reg(27, 1)  mem(7f02e2957d71, 0) 
0x7f02e76a9fa2: mov eax, esi  reg(56, 1)  reg(47, f0) 
0x7f02e76a9fa4: shr al, 0x5  reg(27, f0) 
0x7f02e76a9fa7: and eax, 0x1  reg(56, 7) 
0x7f02e76a9faa: mov byte ptr [rdi+0x2], al  reg(27, 1)  mem(7f02e2957d72, 0) 
0x7f02e76a9fad: mov eax, esi  reg(56, 1)  reg(47, f0) 
0x7f02e76a9faf: and esi, 0xf  reg(47, f0) 
0x7f02e76a9fb2: shr al, 0x4  reg(27, f0) 
0x7f02e76a9fb5: mov byte ptr [rdi+0x4], sil  reg(48, 0)  mem(7f02e2957d74, 0) 
0x7f02e76a9fb9: and eax, 0x1  reg(56, f) 
0x7f02e76a9fbc: mov byte ptr [rdi+0x3], al  reg(27, 1)  mem(7f02e2957d73, 0) 
0x7f02e76a9fbf: ret 
0x7f02e76ab487: movzx edx, byte ptr [rsp+0x10]  reg(54, 1f565b0) 
0x7f02e76ab48c: movzx eax, byte ptr [rsp+0xf]  reg(56, 1) 
0x7f02e76ab491: mov byte ptr [rbx], 0x1  mem(7f02e2957e50, 7f0200001000) 
0x7f02e76ab494: mov byte ptr [rbx+0x7], r15b  reg(80, 80)  mem(7f02e2957e57, 7f02e2957f0000) 
0x7f02e76ab498: mov byte ptr [rbx+0x8], r14b  reg(77, 0)  mem(7f02e2957e58, 7f02e2957f00) 
0x7f02e76ab49c: mov qword ptr [rbx+0x10], r12  reg(15, 0)  mem(7f02e2957e60, 1f4d738) 
0x7f02e76ab4a0: mov qword ptr [rbx+0x18], r13  reg(16, 1f565b4)  mem(7f02e2957e68, 0) 
0x7f02e76ab4a4: mov byte ptr [rbx+0x1], dl  reg(33, 1)  mem(7f02e2957e51, 80007f02000010) 
0x7f02e76ab4a7: movzx edx, byte ptr [rsp+0x11]  reg(54, 1) 
0x7f02e76ab4ac: mov byte ptr [rbx+0x6], al  reg(27, 82)  mem(7f02e2957e56, 7f02e2957f008000) 
0x7f02e76ab4af: mov byte ptr [rbx+0x2], dl  reg(33, 1)  mem(7f02e2957e52, 7f0080827f020000) 
0x7f02e76ab4b2: movzx edx, byte ptr [rsp+0x12]  reg(54, 1) 
0x7f02e76ab4b7: mov byte ptr [rbx+0x3], dl  reg(33, 1)  mem(7f02e2957e53, 957f0080827f0200) 
0x7f02e76ab4ba: movzx edx, byte ptr [rsp+0x13]  reg(54, 1) 
0x7f02e76ab4bf: mov byte ptr [rbx+0x4], dl  reg(33, 1)  mem(7f02e2957e54, e2957f0080827f02) 
0x7f02e76ab4c2: movzx edx, byte ptr [rsp+0x14]  reg(54, 1) 
0x7f02e76ab4c7: mov byte ptr [rbx+0x5], dl  reg(33, 0)  mem(7f02e2957e55, 2e2957f0080827f) 
0x7f02e76ab4ca: jmp 0x7f02e76ab419
0x7f02e76ab419: mov rcx, qword ptr [rsp+0x98]  reg(9, 0) 
0x7f02e76ab421: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76ab42a: mov rax, rbx  reg(10, 82)  reg(7, 7f02e2957e50) 
0x7f02e76ab42d: jnz 0x7f02e76ab4cf
0x7f02e76ab433: add rsp, 0xa8
0x7f02e76ab43a: pop rbx  reg(7, 7f02e2957e50) 
0x7f02e76ab43b: pop rbp
0x7f02e76ab43c: pop r12  reg(15, 0) 
0x7f02e76ab43e: pop r13  reg(16, 1f565b4) 
0x7f02e76ab440: pop r14  reg(17, 0) 
0x7f02e76ab442: pop r15  reg(18, 80) 
0x7f02e76ab444: ret 
0x7f02e76a9c5e: cmp byte ptr [rsp+0x10], 0x0  mem(7f02e2957e50, 8082000101010101) 
0x7f02e76a9c63: jz 0x7f02e76a9c32
0x7f02e76a9c65: lea rdx, ptr [rbp+0x1]  reg(8, 0) 
0x7f02e76a9c69: mov esi, 0x1000  reg(47, 0) 
0x7f02e76a9c6e: mov rdi, rbx  reg(3, 7f02e2957d70)  reg(7, 1f4d738) 
0x7f02e76a9c71: call 0x7f02e76a4af0
opendnp3::logging::LogHeader(openpal::Logger&, int, opendnp3::APDUResponseHeader const&)@plt: 1f4d738 1000 7f02e2957e51 0	_ZN8opendnp37logging9LogHeaderERN7openpal6LoggerEiRKNS_18APDUResponseHeaderE@plt
0x7f02e76a4af0: jmp qword ptr [rip+0x299a02]
0x7f02e76a4af6: push 0x9c 
0x7f02e76a4afb: jmp 0x7f02e76a4120
opendnp3::logging::LogHeader(openpal::Logger&, int, opendnp3::APDUResponseHeader const&): 1f4d738 1000 7f02e2957e51 0	_ZN8opendnp37logging9LogHeaderERN7openpal6LoggerEiRKNS_18APDUResponseHeaderE
0x7f02e76a99e0: push r15  reg(18, 7f02dc0010d0) 
0x7f02e76a99e2: push r14  reg(17, 0) 
0x7f02e76a99e4: push r13  reg(16, 7f02e794f230) 
0x7f02e76a99e6: push r12  reg(15, 7f02e2957f00) 
0x7f02e76a99e8: mov r13d, esi  reg(76, 7f02e794f230)  reg(47, 1000) 
0x7f02e76a99eb: push rbp
0x7f02e76a99ec: push rbx  reg(7, 1f4d738) 
0x7f02e76a99ed: mov rbp, rdi
0x7f02e76a99f0: mov rbx, rdx  reg(7, 1f4d738)  reg(8, 7f02e2957e51) 
0x7f02e76a99f3: sub rsp, 0xa8
0x7f02e76a99fa: lea r12, ptr [rsp+0x10]  reg(15, 7f02e2957f00) 
0x7f02e76a99ff: mov dword ptr [rsp+0x10], esi  reg(47, 1000)  mem(7f02e2957d70, 0) 
0x7f02e76a9a03: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e2957e50) 
0x7f02e76a9a0c: mov qword ptr [rsp+0x98], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957df8, 1000) 
0x7f02e76a9a14: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76a9a16: mov rsi, r12  reg(4, 1000)  reg(15, 7f02e2957d70) 
0x7f02e76a9a19: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4d738 7f02e2957d70 7f02e2957e51 0	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76a9a1e: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76a9a20: jz 0x7f02e76a9a9f
0x7f02e76a9a22: movzx edx, byte ptr [rbx+0x7]  reg(54, 7f02e2957e51) 
0x7f02e76a9a26: movzx edi, byte ptr [rbx+0x5]  reg(45, 1f4d738) 
0x7f02e76a9a2a: lea r14, ptr [rsp+0x20]  reg(17, 0) 
0x7f02e76a9a2f: movzx r15d, byte ptr [rbx+0x6]  reg(82, 7f02dc0010d0) 
0x7f02e76a9a34: mov dword ptr [rsp+0xc], edx  reg(54, 0)  mem(7f02e2957d6c, 10006f697461) 
0x7f02e76a9a38: call 0x7f02e76a5a00
opendnp3::FunctionCodeToString(opendnp3::FunctionCode)@plt: 82 7f02e2957d70 0 0	_ZN8opendnp320FunctionCodeToStringENS_12FunctionCodeE@plt
0x7f02e76a5a00: jmp qword ptr [rip+0x29927a]
0x7f02e76a5a06: push 0x18d 
0x7f02e76a5a0b: jmp 0x7f02e76a4120
opendnp3::FunctionCodeToString(opendnp3::FunctionCode): 82 7f02e2957d70 0 0	_ZN8opendnp320FunctionCodeToStringENS_12FunctionCodeE
0x7f02e76ba150: cmp dil, 0x83  reg(46, 82) 
0x7f02e76ba154: jnbe 0x7f02e76ba3b0
0x7f02e76ba15a: lea rax, ptr [rip+0x52a5f]  reg(10, 1fe01) 
0x7f02e76ba161: movzx edx, dil  reg(54, 0)  reg(46, 82) 
0x7f02e76ba165: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 82) 
0x7f02e76ba169: add rax, rdx  reg(10, 7f02e770cbc0)  reg(8, fffffffffffad5d0) 
0x7f02e76ba16c: jmp rax
0x7f02e76ba190: lea rax, ptr [rip+0x529fe]  reg(10, 7f02e76ba190) 
0x7f02e76ba197: ret 
0x7f02e76a9a3d: sub rsp, 0x8
0x7f02e76a9a41: movzx r9d, byte ptr [rbx]  reg(64, 1) 
0x7f02e76a9a45: lea r8, ptr [rip+0x5c2c4]  reg(11, 0) 
0x7f02e76a9a4c: mov edx, dword ptr [rsp+0x14]  reg(54, fffffffffffad5d0) 
0x7f02e76a9a50: mov ecx, 0x78  reg(55, 0) 
0x7f02e76a9a55: mov esi, 0x78  reg(47, 7f02e2957d70) 
0x7f02e76a9a5a: mov rdi, r14  reg(3, 82)  reg(17, 7f02e2957d80) 
0x7f02e76a9a5d: push rdx  reg(8, 0) 
0x7f02e76a9a5e: push r15  reg(18, 80) 
0x7f02e76a9a60: mov edx, 0x1  reg(54, 0) 
0x7f02e76a9a65: push rax  reg(10, 7f02e770cb95) 
0x7f02e76a9a66: movzx eax, byte ptr [rbx+0x4]  reg(56, 7f02e770cb95) 
0x7f02e76a9a6a: push rax  reg(10, 0) 
0x7f02e76a9a6b: movzx eax, byte ptr [rbx+0x3]  reg(56, 0) 
0x7f02e76a9a6f: push rax  reg(10, 1) 
0x7f02e76a9a70: movzx eax, byte ptr [rbx+0x2]  reg(56, 1) 
0x7f02e76a9a74: push rax  reg(10, 1) 
0x7f02e76a9a75: movzx eax, byte ptr [rbx+0x1]  reg(56, 1) 
0x7f02e76a9a79: push rax  reg(10, 1) 
0x7f02e76a9a7a: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76a9a7c: call 0x7f02e76a5330
__snprintf_chk@plt: 7f02e2957d80 78 1 78	__snprintf_chk@plt
0x7f02e76a5330: jmp qword ptr [rip+0x2995e2]
0x7f02e76a5336: push 0x120 
0x7f02e76a533b: jmp 0x7f02e76a4120
0x7f02e76a9a81: lea rdx, ptr [rip+0x5c2d0]  reg(8, 7f02e2957dcf) 
0x7f02e76a9a88: mov dword ptr [rsp+0x50], r13d  reg(76, 1000)  mem(7f02e2957d70, 1000) 
0x7f02e76a9a8d: mov rcx, r14  reg(9, 7fffffb1)  reg(17, 7f02e2957d80) 
0x7f02e76a9a90: add rsp, 0x40
0x7f02e76a9a94: mov rsi, r12  reg(4, 1)  reg(15, 7f02e2957d70) 
0x7f02e76a9a97: mov rdi, rbp  reg(3, 7f02e2957dcf) 
0x7f02e76a9a9a: call 0x7f02e76a5270
openpal::Logger::Log(openpal::LogFilters const&, char const*, char const*)@plt: 1f4d738 7f02e2957d70 7f02e7705d58 7f02e2957d80	_ZN7openpal6Logger3LogERKNS_10LogFiltersEPKcS5_@plt
0x7f02e76a5270: jmp qword ptr [rip+0x299642]
0x7f02e76a5276: push 0x114 
0x7f02e76a527b: jmp 0x7f02e76a4120
opendnp3::LogFlagToString(int): 1000 0 6 7f02e2957a40	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 1000) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c1270: cmp edi, 0x1000  reg(45, 1000) 
0x7f02e76c1276: jz 0x7f02e76c12ce
0x7f02e76c12ce: lea rax, ptr [rip+0x4f4e2]  reg(10, 0) 
0x7f02e76c12d5: ret 
memcpy: 7f02dc0013c1 7f02e7bdc261 2 7f02dc0013c0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc0013c0	dlsym@plt
memcpy: 7f02dc0013c3 7f02e29579cb d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc0013d0 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc0013d2 7f02e77107b7 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc0013d9 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc0013da 1f4d660 a 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 0	dlsym@plt
memcpy: 7f02dc0013e4 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc0013e7 7f02e2957d80 4f 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 4f 0	dlsym@plt
memcpy: 7f02dc001610 7f02dc0013c0 76 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 76 7f02dc000020	dlsym@plt
0x7f02e76a9a9f: mov rax, qword ptr [rsp+0x98]  reg(10, 0) 
0x7f02e76a9aa7: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76a9ab0: jnz 0x7f02e76a9ac4
0x7f02e76a9ab2: add rsp, 0xa8
0x7f02e76a9ab9: pop rbx  reg(7, 7f02e2957e51) 
0x7f02e76a9aba: pop rbp
0x7f02e76a9abb: pop r12  reg(15, 7f02e2957d70) 
0x7f02e76a9abd: pop r13  reg(16, 1000) 
0x7f02e76a9abf: pop r14  reg(17, 7f02e2957d80) 
0x7f02e76a9ac1: pop r15  reg(18, 80) 
0x7f02e76a9ac3: ret 
0x7f02e76a9c76: mov rsi, rsp  reg(4, 0) 
0x7f02e76a9c79: mov rdi, rbx  reg(3, 7f02e2957ca0)  reg(7, 1f4d738) 
0x7f02e76a9c7c: mov dword ptr [rsp], 0x4000  mem(7f02e2957e40, 0) 
0x7f02e76a9c83: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4d738 7f02e2957e40 7f02e7401c60 0	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76a9c88: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76a9c8a: jz 0x7f02e76a9c32
0x7f02e76a9c8c: lea rdi, ptr [rbp+0x10]  reg(3, 1f4d738) 
0x7f02e76a9c90: mov rdx, 0x400000000001  reg(8, 7f02e7401c60) 
0x7f02e76a9c9a: mov rsi, rbx  reg(4, 7f02e2957e40)  reg(7, 1f4d738) 
0x7f02e76a9c9d: call 0x7f02e76a4300
opendnp3::APDUParser::ParseAndLogAll(openpal::RSlice const&, openpal::Logger*, opendnp3::ParserSettings)@plt: 7f02e2957e60 1f4d738 400000000001 0	_ZN8opendnp310APDUParser14ParseAndLogAllERKN7openpal6RSliceEPNS1_6LoggerENS_14ParserSettingsE@plt
0x7f02e76a4300: jmp qword ptr [rip+0x299dfa]
0x7f02e76a4306: push 0x1d 
0x7f02e76a430b: jmp 0x7f02e76a4120
opendnp3::APDUParser::ParseAndLogAll(openpal::RSlice const&, openpal::Logger*, opendnp3::ParserSettings): 7f02e2957e60 1f4d738 400000000001 0	_ZN8opendnp310APDUParser14ParseAndLogAllERKN7openpal6RSliceEPNS1_6LoggerENS_14ParserSettingsE
0x7f02e76abb40: sub rsp, 0x18
0x7f02e76abb44: xor ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e76abb46: mov qword ptr [rsp], rdx  reg(8, 400000000001)  mem(7f02e2957e20, 1f4d738) 
0x7f02e76abb4a: mov r8, rsp  reg(11, 0) 
0x7f02e76abb4d: xor edx, edx  reg(54, 400000000001)  reg(54, 400000000001) 
0x7f02e76abb4f: call 0x7f02e76a7ae0
opendnp3::APDUParser::ParseSinglePass(openpal::RSlice const&, openpal::Logger*, opendnp3::IAPDUHandler*, opendnp3::IWhiteList*, opendnp3::ParserSettings const&)@plt: 7f02e2957e60 1f4d738 0 0	_ZN8opendnp310APDUParser15ParseSinglePassERKN7openpal6RSliceEPNS1_6LoggerEPNS_12IAPDUHandlerEPNS_10IWhiteListERKNS_14ParserSettingsE@plt
0x7f02e76a7ae0: jmp qword ptr [rip+0x29820a]
0x7f02e76a7ae6: push 0x39b 
0x7f02e76a7aeb: jmp 0x7f02e76a4120
opendnp3::APDUParser::ParseSinglePass(openpal::RSlice const&, openpal::Logger*, opendnp3::IAPDUHandler*, opendnp3::IWhiteList*, opendnp3::ParserSettings const&): 7f02e2957e60 1f4d738 0 0	_ZN8opendnp310APDUParser15ParseSinglePassERKN7openpal6RSliceEPNS1_6LoggerEPNS_12IAPDUHandlerEPNS_10IWhiteListERKNS_14ParserSettingsE
0x7f02e76aba40: push r15  reg(18, 7f02dc0010d0) 
0x7f02e76aba42: push r14  reg(17, 0) 
0x7f02e76aba44: mov r14, rdx  reg(17, 0)  reg(8, 0) 
0x7f02e76aba47: push r13  reg(16, 7f02e794f230) 
0x7f02e76aba49: push r12  reg(15, 7f02e2957f00) 
0x7f02e76aba4b: mov r15, rsi  reg(18, 7f02dc0010d0)  reg(4, 1f4d738) 
0x7f02e76aba4e: push rbp
0x7f02e76aba4f: push rbx  reg(7, 1f4d738) 
0x7f02e76aba50: mov r13, rcx  reg(16, 7f02e794f230)  reg(9, 0) 
0x7f02e76aba53: mov r12, r8  reg(15, 7f02e2957f00)  reg(11, 7f02e2957e20) 
0x7f02e76aba56: xor ebx, ebx  reg(53, 1f4d738)  reg(53, 1f4d738) 
0x7f02e76aba58: sub rsp, 0x28
0x7f02e76aba5c: mov rdx, qword ptr [rdi+0x8]  reg(8, 0) 
0x7f02e76aba60: mov rax, qword ptr fs:[0x28]  reg(10, 1fe01) 
0x7f02e76aba69: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957dd8, 1f4d738) 
0x7f02e76aba6e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76aba70: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76aba73: mov rbp, rsp
0x7f02e76aba76: mov qword ptr [rsp+0x8], rdx  reg(8, 1f565b4)  mem(7f02e2957dc8, 0) 
0x7f02e76aba7b: mov qword ptr [rsp], rax  reg(10, 0)  mem(7f02e2957dc0, 1fe01) 
0x7f02e76aba7f: jmp 0x7f02e76abaa5
0x7f02e76abaa5: mov eax, dword ptr [rsp]  reg(56, 0) 
0x7f02e76abaa8: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76abaaa: jnz 0x7f02e76aba88
0x7f02e76abaac: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76abaae: mov rdx, qword ptr [rsp+0x18]  reg(8, 1f565b4) 
0x7f02e76abab3: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76ababc: jnz 0x7f02e76abacd
0x7f02e76ababe: add rsp, 0x28
0x7f02e76abac2: pop rbx  reg(7, 0) 
0x7f02e76abac3: pop rbp
0x7f02e76abac4: pop r12  reg(15, 7f02e2957e20) 
0x7f02e76abac6: pop r13  reg(16, 0) 
0x7f02e76abac8: pop r14  reg(17, 0) 
0x7f02e76abaca: pop r15  reg(18, 1f4d738) 
0x7f02e76abacc: ret 
0x7f02e76abb54: add rsp, 0x18
0x7f02e76abb58: ret 
0x7f02e76a9ca2: jmp 0x7f02e76a9c32
0x7f02e76a9c32: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f02e76a9c37: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76a9c40: jnz 0x7f02e76a9cce
0x7f02e76a9c46: add rsp, 0x40
0x7f02e76a9c4a: pop rbx  reg(7, 1f4d738) 
0x7f02e76a9c4b: pop rbp
0x7f02e76a9c4c: pop r12  reg(15, 7f02e2957f00) 
0x7f02e76a9c4e: ret 
0x7f02e76f7afd: mov rdi, qword ptr [rbx+0x40]  reg(3, 7f02e2957e60) 
0x7f02e76f7b01: movzx edx, word ptr [rbx+0x8]  reg(54, 0) 
0x7f02e76f7b05: mov rsi, rsp  reg(4, 1f4d738) 
0x7f02e76f7b08: mov byte ptr [rbx+0x431], 0x1  mem(1f4db59, b000000000008000) 
0x7f02e76f7b0f: mov rcx, qword ptr [rbp]  reg(9, 0) 
0x7f02e76f7b13: mov rbx, qword ptr [rbp+0x8]  reg(7, 1f4d728) 
0x7f02e76f7b17: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76f7b1a: mov word ptr [rsp+0x2], r12w  reg(72, 1)  mem(7f02e2957ea2, 1f4) 
0x7f02e76f7b20: mov word ptr [rsp], dx  reg(35, a)  mem(7f02e2957ea0, 1d728) 
0x7f02e76f7b24: mov rax, qword ptr [rax+0x10]  reg(10, 7f02e793c9f0) 
0x7f02e76f7b28: mov qword ptr [rsp+0x8], rcx  reg(9, 4)  mem(7f02e2957ea8, 0) 
0x7f02e76f7b2d: mov qword ptr [rsp+0x10], rbx  reg(7, 1f565b0)  mem(7f02e2957eb0, 4) 
0x7f02e76f7b32: call rax
non-virtual thunk to opendnp3::TransportLayer::BeginTransmit(opendnp3::Message const&): 1f4dc88 7f02e2957ea0 a 4	_ZThn8_N8opendnp314TransportLayer13BeginTransmitERKNS_7MessageE
0x7f02e7703890: sub rdi, 0x8  reg(3, 1f4dc88) 
0x7f02e7703894: jmp 0x7f02e77036e0
opendnp3::TransportLayer::BeginTransmit(opendnp3::Message const&): 1f4dc80 7f02e2957ea0 a 4	_ZN8opendnp314TransportLayer13BeginTransmitERKNS_7MessageE
0x7f02e77036e0: push r12  reg(15, 1) 
0x7f02e77036e2: push rbp
0x7f02e77036e3: push rbx  reg(7, 1f565b0) 
0x7f02e77036e4: mov rbx, rdi  reg(7, 1f565b0)  reg(3, 1f4dc80) 
0x7f02e77036e7: sub rsp, 0x10
0x7f02e77036eb: movzx ebp, byte ptr [rdi+0x40]
0x7f02e77036ef: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7703890) 
0x7f02e77036f8: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e78, d533a0ca891b2d00) 
0x7f02e77036fd: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e77036ff: test bpl, bpl 
0x7f02e7703702: jz 0x7f02e7703760
0x7f02e7703704: mov eax, dword ptr [rsi+0x8]  reg(56, 0) 
0x7f02e7703707: test eax, eax  reg(56, 4)  reg(56, 4) 
0x7f02e7703709: jz 0x7f02e7703788
0x7f02e770370b: cmp byte ptr [rdi+0x41], 0x0  mem(1f4dcc1, 3000000000000000) 
0x7f02e770370f: jnz 0x7f02e77037d0
0x7f02e7703715: cmp qword ptr [rdi+0x38], 0x0  mem(1f4dcb8, 1f4e6c0) 
0x7f02e770371a: jz 0x7f02e7703840
0x7f02e7703720: lea r12, ptr [rdi+0xa8]  reg(15, 1) 
0x7f02e7703727: mov byte ptr [rdi+0x41], 0x1  mem(1f4dcc1, 3000000000000000) 
0x7f02e770372b: mov rdi, r12  reg(3, 1f4dc80)  reg(15, 1f4dd28) 
0x7f02e770372e: call 0x7f02e76a6420
opendnp3::TransportTx::Configure(opendnp3::Message const&)@plt: 1f4dd28 7f02e2957ea0 a 4	_ZN8opendnp311TransportTx9ConfigureERKNS_7MessageE@plt
0x7f02e76a6420: jmp qword ptr [rip+0x298d6a]
0x7f02e76a6426: push 0x22f 
0x7f02e76a642b: jmp 0x7f02e76a4120
opendnp3::TransportTx::Configure(opendnp3::Message const&): 1f4dd28 7f02e2957ea0 a 4	_ZN8opendnp311TransportTx9ConfigureERKNS_7MessageE
0x7f02e77059f0: mov rax, qword ptr [rsi]  reg(10, 4) 
0x7f02e77059f3: mov byte ptr [rdi+0x20], 0x0  mem(1f4dd48, 0) 
0x7f02e77059f7: mov qword ptr [rdi+0x8], rax  reg(10, 1000a)  mem(1f4dd30, 0) 
0x7f02e77059fb: mov rax, qword ptr [rsi+0x8]  reg(10, 1000a) 
0x7f02e77059ff: mov qword ptr [rdi+0x10], rax  reg(10, 4)  mem(1f4dd38, 0) 
0x7f02e7705a03: mov rax, qword ptr [rsi+0x10]  reg(10, 4) 
0x7f02e7705a07: mov dword ptr [rdi+0x168], 0x0  mem(1f4de90, 0) 
0x7f02e7705a11: mov qword ptr [rdi+0x18], rax  reg(10, 1f565b0)  mem(1f4dd40, 0) 
0x7f02e7705a15: ret 
0x7f02e7703733: mov rdi, qword ptr [rbx+0x38]  reg(3, 1f4dd28) 
0x7f02e7703737: mov rsi, r12  reg(4, 7f02e2957ea0)  reg(15, 1f4dd28) 
0x7f02e770373a: mov rax, qword ptr [rdi]  reg(10, 1f565b0) 
0x7f02e770373d: call qword ptr [rax+0x10]
opendnp3::LinkLayer::Send(opendnp3::ITransportSegment&): 1f4e6c0 1f4dd28 a 4	_ZN8opendnp39LinkLayer4SendERNS_17ITransportSegmentE
0x7f02e76be760: push r12  reg(15, 1f4dd28) 
0x7f02e76be762: push rbp
0x7f02e76be763: push rbx  reg(7, 1f4dc80) 
0x7f02e76be764: movzx ebp, byte ptr [rdi+0x212]
0x7f02e76be76b: test bpl, bpl 
0x7f02e76be76e: jnz 0x7f02e76be780
0x7f02e76be780: lea rbx, ptr [rdi+0x10]  reg(7, 1f4dc80) 
0x7f02e76be784: mov rdi, rbx  reg(3, 1f4e6c0)  reg(7, 1f4e6d0) 
0x7f02e76be787: call 0x7f02e76a7130
opendnp3::LinkContext::SetTxSegment(opendnp3::ITransportSegment&)@plt: 1f4e6d0 1f4dd28 a 4	_ZN8opendnp311LinkContext12SetTxSegmentERNS_17ITransportSegmentE@plt
0x7f02e76a7130: jmp qword ptr [rip+0x2986e2]
0x7f02e76a7136: push 0x300 
0x7f02e76a713b: jmp 0x7f02e76a4120
opendnp3::LinkContext::SetTxSegment(opendnp3::ITransportSegment&): 1f4e6d0 1f4dd28 a 4	_ZN8opendnp311LinkContext12SetTxSegmentERNS_17ITransportSegmentE
0x7f02e76bc530: push r12  reg(15, 1f4dd28) 
0x7f02e76bc532: push rbp
0x7f02e76bc533: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bc534: sub rsp, 0x10
0x7f02e76bc538: movzx ebp, byte ptr [rdi+0x202]
0x7f02e76bc53f: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7937be8) 
0x7f02e76bc548: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e28, 7f02e2957e20) 
0x7f02e76bc54d: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bc54f: test bpl, bpl 
0x7f02e76bc552: jz 0x7f02e76bc5b0
0x7f02e76bc554: cmp qword ptr [rdi+0x1c0], 0x0  mem(1f4e890, 0) 
0x7f02e76bc55c: jz 0x7f02e76bc5a0
0x7f02e76bc5a0: mov qword ptr [rdi+0x1c0], rsi  reg(4, 1f4dd28)  mem(1f4e890, 0) 
0x7f02e76bc5a7: jmp 0x7f02e76bc57d
0x7f02e76bc57d: mov rdx, qword ptr [rsp+0x8]  reg(8, a) 
0x7f02e76bc582: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76bc58b: mov eax, ebp  reg(56, 0) 
0x7f02e76bc58d: jnz 0x7f02e76bc615
0x7f02e76bc593: add rsp, 0x10
0x7f02e76bc597: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bc598: pop rbp
0x7f02e76bc599: pop r12  reg(15, 1f4dd28) 
0x7f02e76bc59b: ret 
0x7f02e76be78c: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76be78e: mov r12d, eax  reg(73, 1f4dd28)  reg(56, 1) 
0x7f02e76be791: jz 0x7f02e76be770
0x7f02e76be793: mov ebp, r12d
0x7f02e76be796: mov rdi, rbx  reg(3, 1f4e6d0)  reg(7, 1f4e6d0) 
0x7f02e76be799: call 0x7f02e76a6210
opendnp3::LinkContext::TryStartTransmission()@plt: 1f4e6d0 1f4dd28 0 4	_ZN8opendnp311LinkContext20TryStartTransmissionEv@plt
0x7f02e76a6210: jmp qword ptr [rip+0x298e72]
0x7f02e76a6216: push 0x20e 
0x7f02e76a621b: jmp 0x7f02e76a4120
opendnp3::LinkContext::TryStartTransmission(): 1f4e6d0 1f4dd28 0 4	_ZN8opendnp311LinkContext20TryStartTransmissionEv
0x7f02e76bcc50: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bcc51: cmp byte ptr [rdi+0x204], 0x0  mem(1f4e8d4, 98830f3600000000) 
0x7f02e76bcc58: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4e6d0) 
0x7f02e76bcc5b: jnz 0x7f02e76bcc98
0x7f02e76bcc5d: mov rdx, qword ptr [rbx+0x1c0]  reg(8, 0) 
0x7f02e76bcc64: test rdx, rdx  reg(8, 1f4dd28)  reg(8, 1f4dd28) 
0x7f02e76bcc67: jz 0x7f02e76bcc89
0x7f02e76bcc69: cmp byte ptr [rbx+0x199], 0x0  mem(1f4e869, a00000000000000) 
0x7f02e76bcc70: mov rdi, qword ptr [rbx+0x228]  reg(3, 1f4e6d0) 
0x7f02e76bcc77: mov rsi, rbx  reg(4, 1f4dd28)  reg(7, 1f4e6d0) 
0x7f02e76bcc7a: mov rax, qword ptr [rdi]  reg(10, 1) 
0x7f02e76bcc7d: jnz 0x7f02e76bcc90
0x7f02e76bcc7f: call qword ptr [rax+0x38]
opendnp3::PLLS_Idle::TrySendUnconfirmed(opendnp3::LinkContext&, opendnp3::ITransportSegment&): 7f02e79404b0 1f4e6d0 1f4dd28 4	_ZN8opendnp39PLLS_Idle18TrySendUnconfirmedERNS_11LinkContextERNS_17ITransportSegmentE
0x7f02e76bfef0: push rbp
0x7f02e76bfef1: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bfef2: mov rbx, rdx  reg(7, 1f4e6d0)  reg(8, 1f4dd28) 
0x7f02e76bfef5: mov rbp, rsi
0x7f02e76bfef8: mov rdi, rdx  reg(3, 7f02e79404b0)  reg(8, 1f4dd28) 
0x7f02e76bfefb: sub rsp, 0x38
0x7f02e76bfeff: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7937da0) 
0x7f02e76bff08: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957e18, 7f02e2957ea0) 
0x7f02e76bff0d: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bff0f: mov rax, qword ptr [rdx]  reg(10, 0) 
0x7f02e76bff12: call qword ptr [rax+0x20]
opendnp3::TransportTx::GetSegment(): 1f4dd28 1f4e6d0 1f4dd28 4	_ZN8opendnp311TransportTx10GetSegmentEv
0x7f02e77056f0: push r15  reg(18, 7f02dc0010d0) 
0x7f02e77056f2: push r14  reg(17, 0) 
0x7f02e77056f4: push r13  reg(16, 7f02e794f230) 
0x7f02e77056f6: push r12  reg(15, 1) 
0x7f02e77056f8: push rbp
0x7f02e77056f9: push rbx  reg(7, 1f4dd28) 
0x7f02e77056fa: mov rbx, rdi  reg(7, 1f4dd28)  reg(3, 1f4dd28) 
0x7f02e77056fd: sub rsp, 0xb8
0x7f02e7705704: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e793cb10) 
0x7f02e770570d: mov qword ptr [rsp+0xa8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957da8, 5d30307830202c30) 
0x7f02e7705715: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e7705717: cmp byte ptr [rdi+0x20], 0x0  mem(1f4dd48, 0) 
0x7f02e770571b: jnz 0x7f02e7705850
0x7f02e7705721: mov r12d, dword ptr [rdi+0x10]  reg(73, 1) 
0x7f02e7705725: cmp r12d, 0xf8  reg(73, 4) 
0x7f02e770572c: jbe 0x7f02e7705840
0x7f02e7705840: lea eax, ptr [r12+0x1]  reg(56, 0) 
0x7f02e7705845: mov dword ptr [rsp+0x4], eax  reg(56, 5)  mem(7f02e2957d04, 2031203a4e4f4320) 
0x7f02e7705849: jmp 0x7f02e7705740
0x7f02e7705740: lea rbp, ptr [rsp+0x20]
0x7f02e7705745: lea r13, ptr [rbx+0x40]  reg(16, 7f02e794f230) 
0x7f02e7705749: mov edx, 0xfa  reg(54, 1f4dd28) 
0x7f02e770574e: xor r15d, r15d  reg(82, 7f02dc0010d0)  reg(82, 7f02dc0010d0) 
0x7f02e7705751: lea r14, ptr [rbx+0x140]  reg(17, 0) 
0x7f02e7705758: mov rsi, r13  reg(4, 1f4e6d0)  reg(16, 1f4dd68) 
0x7f02e770575b: mov rdi, rbp  reg(3, 1f4dd28) 
0x7f02e770575e: call 0x7f02e76a5480
openpal::WSlice::WSlice(unsigned char*, unsigned int)@plt: 7f02e2957d20 1f4dd68 fa 4	_ZN7openpal6WSliceC1EPhj@plt
0x7f02e76a5480: jmp qword ptr [rip+0x29953a]
0x7f02e7705763: mov esi, 0x1  reg(47, 1f4dd68) 
0x7f02e7705768: mov rdi, rbp  reg(3, 7f02e2957d20) 
0x7f02e770576b: call 0x7f02e76a51e0
openpal::WSlice::Skip(unsigned int) const@plt: 7f02e2957d20 1 fa 4	_ZNK7openpal6WSlice4SkipEj@plt
0x7f02e76a51e0: jmp qword ptr [rip+0x29968a]
0x7f02e76a51e6: push 0x10b 
0x7f02e76a51eb: jmp 0x7f02e76a4120
0x7f02e7705770: lea rdi, ptr [rbx+0x10]  reg(3, 7f02e2957cd0) 
0x7f02e7705774: mov esi, r12d  reg(47, 1f4dd69)  reg(73, 4) 
0x7f02e7705777: mov dword ptr [rsp+0x10], eax  reg(56, f9)  mem(7f02e2957d10, 0) 
0x7f02e770577b: mov qword ptr [rsp+0x18], rdx  reg(8, 1f4dd69)  mem(7f02e2957d18, 0) 
0x7f02e7705780: call 0x7f02e76a6890
openpal::RSlice::Take(unsigned int) const@plt: 1f4dd38 4 1f4dd69 0	_ZNK7openpal6RSlice4TakeEj@plt
0x7f02e76a6890: jmp qword ptr [rip+0x298b32]
0x7f02e7705785: lea rsi, ptr [rsp+0x10]  reg(4, 1f565b0) 
0x7f02e770578a: mov rdi, rbp  reg(3, 7f02e2957cd0) 
0x7f02e770578d: mov dword ptr [rsp+0x20], eax  reg(56, 4)  mem(7f02e2957d20, 4e552031000000fa) 
0x7f02e7705791: mov qword ptr [rsp+0x28], rdx  reg(8, 1f565b0)  mem(7f02e2957d28, 1f4dd68) 
0x7f02e7705796: call 0x7f02e76a7820
openpal::RSlice::CopyTo(openpal::WSlice&) const@plt: 7f02e2957d20 7f02e2957d10 1f565b0 0	_ZNK7openpal6RSlice6CopyToERNS_6WSliceE@plt
0x7f02e76a7820: jmp qword ptr [rip+0x29836a]
0x7f02e76a7826: push 0x36f 
0x7f02e76a782b: jmp 0x7f02e76a4120
memcpy: 1f4dd69 1f565b0 4 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 4 0	dlsym@plt
0x7f02e770579b: cmp dword ptr [rbx+0x10], r12d  reg(73, 4)  mem(1f4dd38, 4) 
0x7f02e770579f: mov eax, dword ptr [rbx+0x168]  reg(56, 4) 
0x7f02e77057a5: movzx edx, byte ptr [rbx+0x164]  reg(54, 1f4dd69) 
0x7f02e77057ac: setz r15b  reg(80, 0) 
0x7f02e77057b0: xor r9d, r9d  reg(64, 7f02e7b674e8)  reg(64, 7f02e7b674e8) 
0x7f02e77057b3: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e77057b5: setz r9b  reg(62, 0) 
0x7f02e77057b9: mov esi, r15d  reg(47, 1f4dd69)  reg(82, 1) 
0x7f02e77057bc: mov edi, r9d  reg(45, 7f02e2957c80)  reg(64, 1) 
0x7f02e77057bf: mov dword ptr [rsp+0x8], r9d  reg(64, 1)  mem(7f02e2957d08, 3a534e552031203a) 
0x7f02e77057c4: call 0x7f02e76a81b0
opendnp3::TransportHeader::ToByte(bool, bool, unsigned char)@plt: 1 1 0 0	_ZN8opendnp315TransportHeader6ToByteEbbh@plt
0x7f02e76a81b0: jmp qword ptr [rip+0x297ea2]
0x7f02e76a81b6: push 0x408 
0x7f02e76a81bb: jmp 0x7f02e76a4120
opendnp3::TransportHeader::ToByte(bool, bool, unsigned char): 1 1 0 0	_ZN8opendnp315TransportHeader6ToByteEbbh
0x7f02e77036b0: cmp dil, 0x1  reg(46, 1) 
0x7f02e77036b4: mov eax, edx  reg(56, 0)  reg(54, 0) 
0x7f02e77036b6: sbb r8d, r8d  reg(61, 0)  reg(61, 0) 
0x7f02e77036b9: not r8d
0x7f02e77036bc: and r8d, 0x40  reg(61, ffffffff) 
0x7f02e77036c0: cmp dil, 0x1  reg(46, 1) 
0x7f02e77036c4: sbb ecx, ecx  reg(55, 0)  reg(55, 0) 
0x7f02e77036c6: and ecx, 0xffffffc0  reg(55, 0) 
0x7f02e77036c9: sub ecx, 0x40  reg(55, 0) 
0x7f02e77036cc: test sil, sil  reg(48, 1)  reg(48, 1) 
0x7f02e77036d3: and eax, 0x3f  reg(56, 0) 
0x7f02e77036d6: or eax, ecx  reg(56, 0)  reg(55, ffffffc0) 
0x7f02e77036d8: ret 
0x7f02e77057c9: mov rsi, rbp  reg(4, 1) 
0x7f02e77057cc: mov byte ptr [rbx+0x40], al  reg(27, ffffffc0)  mem(1f4dd68, 8082f000) 
0x7f02e77057cf: mov rdi, r14  reg(3, 1)  reg(17, 1f4de68) 
0x7f02e77057d2: mov dword ptr [rsp+0x20], 0x400  mem(7f02e2957d20, 4e55203100000004) 
0x7f02e77057da: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4de68 7f02e2957d20 0 ffffffc0	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e77057df: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e77057e1: mov r9d, dword ptr [rsp+0x8]  reg(64, 1) 
0x7f02e77057e6: jnz 0x7f02e7705860
0x7f02e7705860: movzx eax, byte ptr [rbx+0x164]  reg(56, 1fe01) 
0x7f02e7705867: lea r10, ptr [rsp+0x30]  reg(13, a3f) 
0x7f02e770586c: sub rsp, 0x8
0x7f02e7705870: push r12  reg(15, 4) 
0x7f02e7705872: lea r8, ptr [rip+0x120a7]  reg(11, 40) 
0x7f02e7705879: mov ecx, 0x78  reg(55, ffffffc0) 
0x7f02e770587e: mov rdi, r10  reg(3, 1f4de68)  reg(13, 7f02e2957d30) 
0x7f02e7705881: mov edx, 0x1  reg(54, 0) 
0x7f02e7705886: mov esi, 0x78  reg(47, 7f02e2957d20) 
0x7f02e770588b: push rax  reg(10, 0) 
0x7f02e770588c: push r15  reg(18, 1) 
0x7f02e770588e: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e7705890: mov qword ptr [rsp+0x28], r10  reg(13, 7f02e2957d30)  mem(7f02e2957d08, 3a534e5500000001) 
0x7f02e7705895: call 0x7f02e76a5330
__snprintf_chk@plt: 7f02e2957d30 78 1 78	__snprintf_chk@plt
0x7f02e76a5330: jmp qword ptr [rip+0x2995e2]
0x7f02e770589a: mov dword ptr [rsp+0x40], 0x400  mem(7f02e2957d20, 4e55203100000400) 
0x7f02e77058a2: add rsp, 0x20
0x7f02e77058a6: mov r10, qword ptr [rsp+0x8]  reg(13, 0) 
0x7f02e77058ab: lea rdx, ptr [rip+0x124a6]  reg(8, 7f02e2957d4b) 
0x7f02e77058b2: mov rsi, rbp  reg(4, 0) 
0x7f02e77058b5: mov rdi, r14  reg(3, 7f02e2957a90)  reg(17, 1f4de68) 
0x7f02e77058b8: mov rcx, r10  reg(9, 7fffffe4)  reg(13, 7f02e2957d30) 
0x7f02e77058bb: call 0x7f02e76a5270
openpal::Logger::Log(openpal::LogFilters const&, char const*, char const*)@plt: 1f4de68 7f02e2957d20 7f02e7717d58 7f02e2957d30	_ZN7openpal6Logger3LogERKNS_10LogFiltersEPKcS5_@plt
0x7f02e76a5270: jmp qword ptr [rip+0x299642]
opendnp3::LogFlagToString(int): 400 0 6 7f02e29579e0	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 400) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c1270: cmp edi, 0x1000  reg(45, 400) 
0x7f02e76c1276: jz 0x7f02e76c12ce
0x7f02e76c1278: jnle 0x7f02e76c12b0
0x7f02e76c127a: cmp edi, 0x400  reg(45, 400) 
0x7f02e76c1280: lea rax, ptr [rip+0x4f520]  reg(10, 0) 
0x7f02e76c1287: jz 0x7f02e76c124b
0x7f02e76c124b: ret 
memcpy: 7f02dc0013c1 7f02e7bdc261 2 7f02dc0013c0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc0013c0	dlsym@plt
memcpy: 7f02dc0013c3 7f02e295796b d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc0013d0 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc0013d2 7f02e77107a7 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc0013d9 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc0013da 1f4d660 a 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 0	dlsym@plt
memcpy: 7f02dc0013e4 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc0013e7 7f02e2957d30 1b 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1b 0	dlsym@plt
memcpy: 7f02dc001690 7f02dc0013c0 42 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 42 7f02dc000020	dlsym@plt
0x7f02e77058c0: jmp 0x7f02e77057e8
0x7f02e77057e8: add dword ptr [rbx+0x160], 0x1  mem(1f4de88, 0) 
0x7f02e77057ef: mov edx, dword ptr [rsp+0x4]  reg(54, 7f02e7401c60) 
0x7f02e77057f3: mov rsi, r13  reg(4, 0)  reg(16, 1f4dd68) 
0x7f02e77057f6: mov rdi, rbp  reg(3, 7f02e2957c40) 
0x7f02e77057f9: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e2957d20 1f4dd68 5 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76a7f16: push 0x3de 
0x7f02e76a7f1b: jmp 0x7f02e76a4120
0x7f02e77057fe: mov eax, dword ptr [rsp+0x20]  reg(56, 0) 
0x7f02e7705802: mov rdx, qword ptr [rsp+0x28]  reg(8, 5) 
0x7f02e7705807: mov byte ptr [rbx+0x20], 0x1  mem(1f4dd48, 0) 
0x7f02e770580b: mov qword ptr [rbx+0x30], rdx  reg(8, 1f4dd68)  mem(1f4dd58, 0) 
0x7f02e770580f: mov dword ptr [rbx+0x28], eax  reg(56, 5)  mem(1f4dd50, 0) 
0x7f02e7705812: mov rcx, qword ptr [rsp+0xa8]  reg(9, 0) 
0x7f02e770581a: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e7705823: jnz 0x7f02e77058c5
0x7f02e7705829: add rsp, 0xb8
0x7f02e7705830: pop rbx  reg(7, 1f4dd28) 
0x7f02e7705831: pop rbp
0x7f02e7705832: pop r12  reg(15, 4) 
0x7f02e7705834: pop r13  reg(16, 1f4dd68) 
0x7f02e7705836: pop r14  reg(17, 1f4de68) 
0x7f02e7705838: pop r15  reg(18, 1) 
0x7f02e770583a: ret 
0x7f02e76bff15: mov dword ptr [rsp], eax  reg(56, 5)  mem(7f02e2957df0, 0) 
0x7f02e76bff18: mov rax, qword ptr [rbx]  reg(10, 5) 
0x7f02e76bff1b: mov rdi, rbx  reg(3, 7f02e2957d20)  reg(7, 1f4dd28) 
0x7f02e76bff1e: mov qword ptr [rsp+0x8], rdx  reg(8, 1f4dd68)  mem(7f02e2957df8, 1f4dd28) 
0x7f02e76bff23: call qword ptr [rax+0x10]
opendnp3::TransportTx::GetAddresses() const: 1f4dd28 1f4dd68 1f4dd68 0	_ZNK8opendnp311TransportTx12GetAddressesEv
0x7f02e7705a20: lea rax, ptr [rdi+0x8]  reg(10, 7f02e793cb10) 
0x7f02e7705a24: ret 
0x7f02e76bff26: mov rdx, rsp  reg(8, 1f4dd68) 
0x7f02e76bff29: mov rsi, rax  reg(4, 1f4dd68)  reg(10, 1f4dd30) 
0x7f02e76bff2c: mov rdi, rbp  reg(3, 1f4dd28) 
0x7f02e76bff2f: call 0x7f02e76a4cd0
opendnp3::LinkContext::FormatPrimaryBufferWithUnconfirmed(opendnp3::Addresses const&, openpal::RSlice const&)@plt: 1f4e6d0 1f4dd30 7f02e2957df0 0	_ZN8opendnp311LinkContext34FormatPrimaryBufferWithUnconfirmedERKNS_9AddressesERKN7openpal6RSliceE@plt
0x7f02e76a4cd0: jmp qword ptr [rip+0x299912]
0x7f02e76a4cd6: push 0xba 
0x7f02e76a4cdb: jmp 0x7f02e76a4120
opendnp3::LinkContext::FormatPrimaryBufferWithUnconfirmed(opendnp3::Addresses const&, openpal::RSlice const&): 1f4e6d0 1f4dd30 7f02e2957df0 0	_ZN8opendnp311LinkContext34FormatPrimaryBufferWithUnconfirmedERKNS_9AddressesERKN7openpal6RSliceE
0x7f02e76bc720: push r14  reg(17, 0) 
0x7f02e76bc722: push r13  reg(16, 7f02e794f230) 
0x7f02e76bc724: mov r13, rsi  reg(16, 7f02e794f230)  reg(4, 1f4dd30) 
0x7f02e76bc727: push r12  reg(15, 1) 
0x7f02e76bc729: push rbp
0x7f02e76bc72a: lea rsi, ptr [rdi+0x8]  reg(4, 1f4dd30) 
0x7f02e76bc72e: push rbx  reg(7, 1f4dd28) 
0x7f02e76bc72f: mov r12, rdx  reg(15, 1)  reg(8, 7f02e2957df0) 
0x7f02e76bc732: mov rbx, rdi  reg(7, 1f4dd28)  reg(3, 1f4e6d0) 
0x7f02e76bc735: mov edx, 0x124  reg(54, 7f02e2957df0) 
0x7f02e76bc73a: lea rbp, ptr [rbx+0x178]
0x7f02e76bc741: sub rsp, 0x40
0x7f02e76bc745: lea r14, ptr [rsp+0x20]  reg(17, 0) 
0x7f02e76bc74a: mov rax, qword ptr fs:[0x28]  reg(10, 1f4dd30) 
0x7f02e76bc753: mov qword ptr [rsp+0x38], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957db8, 1f4dd28) 
0x7f02e76bc758: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bc75a: mov rdi, r14  reg(3, 1f4e6d0)  reg(17, 7f02e2957da0) 
0x7f02e76bc75d: call 0x7f02e76a5480
openpal::WSlice::WSlice(unsigned char*, unsigned int)@plt: 7f02e2957da0 1f4e6d8 124 0	_ZN7openpal6WSliceC1EPhj@plt
0x7f02e76a5480: jmp qword ptr [rip+0x29953a]
0x7f02e76bc762: mov eax, dword ptr [rsp+0x20]  reg(56, 0) 
0x7f02e76bc766: movzx edx, word ptr [r13+0x2]  reg(54, 124) 
0x7f02e76bc76b: lea rdi, ptr [rsp+0x10]  reg(3, 7f02e2957da0) 
0x7f02e76bc770: movzx ecx, word ptr [r13]  reg(55, 0) 
0x7f02e76bc775: movzx esi, byte ptr [rbx+0x198]  reg(47, 1f4e6d8) 
0x7f02e76bc77c: sub rsp, 0x8
0x7f02e76bc780: movzx r9d, byte ptr [r12]  reg(64, 1) 
0x7f02e76bc785: mov r8, qword ptr [r12+0x8]  reg(11, 0) 
0x7f02e76bc78a: mov dword ptr [rsp+0x18], eax  reg(56, 124)  mem(7f02e2957d90, 7f02e2957df0) 
0x7f02e76bc78e: mov rax, qword ptr [rsp+0x30]  reg(10, 124) 
0x7f02e76bc793: mov qword ptr [rsp+0x20], rax  reg(10, 1f4e6d8)  mem(7f02e2957d98, 1f4dd30) 
0x7f02e76bc798: push rbp
0x7f02e76bc799: call 0x7f02e76a7300
opendnp3::LinkFrame::FormatUnconfirmedUserData(openpal::WSlice&, bool, unsigned short, unsigned short, unsigned char const*, unsigned char, openpal::Logger*)@plt: 7f02e2957d90 0 1 a	_ZN8opendnp39LinkFrame25FormatUnconfirmedUserDataERN7openpal6WSliceEbttPKhhPNS1_6LoggerE@plt
0x7f02e76a7300: jmp qword ptr [rip+0x2985fa]
0x7f02e76a7306: push 0x31d 
0x7f02e76a730b: jmp 0x7f02e76a4120
opendnp3::LinkFrame::FormatUnconfirmedUserData(openpal::WSlice&, bool, unsigned short, unsigned short, unsigned char const*, unsigned char, openpal::Logger*): 7f02e2957d90 0 1 a	_ZN8opendnp39LinkFrame25FormatUnconfirmedUserDataERN7openpal6WSliceEbttPKhhPNS1_6LoggerE
0x7f02e76be440: push r15  reg(18, 7f02dc0010d0) 
0x7f02e76be442: push r14  reg(17, 7f02e2957da0) 
0x7f02e76be444: mov r15, r8  reg(18, 7f02dc0010d0)  reg(11, 1f4dd68) 
0x7f02e76be447: push r13  reg(16, 1f4dd30) 
0x7f02e76be449: push r12  reg(15, 7f02e2957df0) 
0x7f02e76be44b: mov r13d, edx  reg(76, 1f4dd30)  reg(54, 1) 
0x7f02e76be44e: push rbp
0x7f02e76be44f: push rbx  reg(7, 1f4e6d0) 
0x7f02e76be450: movzx ebp, r9b
0x7f02e76be454: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 7f02e2957d90) 
0x7f02e76be457: mov edi, ebp  reg(45, 7f02e2957d90) 
0x7f02e76be459: movzx r13d, r13w  reg(76, 1)  reg(75, 1) 
0x7f02e76be45d: sub rsp, 0x48
0x7f02e76be461: mov dword ptr [rsp+0xc], esi  reg(47, 0)  mem(7f02e2957cfc, 1f4e6d800000000) 
0x7f02e76be465: mov dword ptr [rsp+0x1c], ecx  reg(55, a)  mem(7f02e2957d0c, 100000000) 
0x7f02e76be469: mov r12, qword ptr [rsp+0x80]  reg(15, 7f02e2957df0) 
0x7f02e76be471: mov rax, qword ptr fs:[0x28]  reg(10, 1f4e6d8) 
0x7f02e76be47a: mov qword ptr [rsp+0x38], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957d28, 1f4dd68) 
0x7f02e76be47f: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76be481: call 0x7f02e76a56c0
opendnp3::LinkFrame::CalcUserDataSize(unsigned char)@plt: 5 0 1 a	_ZN8opendnp39LinkFrame16CalcUserDataSizeEh@plt
0x7f02e76a56c0: jmp qword ptr [rip+0x29941a]
0x7f02e76a56c6: push 0x159 
0x7f02e76a56cb: jmp 0x7f02e76a4120
opendnp3::LinkFrame::CalcUserDataSize(unsigned char): 5 0 1 a	_ZN8opendnp39LinkFrame16CalcUserDataSizeEh
0x7f02e76bdf10: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bdf12: test dil, dil  reg(46, 5)  reg(46, 5) 
0x7f02e76bdf15: jz 0x7f02e76bdf31
0x7f02e76bdf17: mov eax, edi  reg(56, 0)  reg(45, 5) 
0x7f02e76bdf19: shr al, 0x4  reg(27, 5) 
0x7f02e76bdf1c: movzx eax, al  reg(56, 0)  reg(27, 0) 
0x7f02e76bdf1f: lea eax, ptr [rax+rax*8]  reg(56, 0) 
0x7f02e76bdf22: add eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bdf24: and edi, 0xf  reg(45, 5) 
0x7f02e76bdf27: jz 0x7f02e76bdf31
0x7f02e76bdf29: movzx edi, dil  reg(45, 5)  reg(46, 5) 
0x7f02e76bdf2d: lea eax, ptr [rax+rdi*1+0x2]  reg(56, 0) 
0x7f02e76bdf31: ret 
0x7f02e76be486: mov rdi, rbx  reg(3, 5)  reg(7, 7f02e2957d90) 
0x7f02e76be489: mov r14d, eax  reg(79, 7f02e2957da0)  reg(56, 7) 
0x7f02e76be48c: call 0x7f02e76a6ca0
openpal::WSlice::ToRSlice() const@plt: 7f02e2957d90 0 1 a	_ZNK7openpal6WSlice8ToRSliceEv@plt
0x7f02e76a6ca0: jmp qword ptr [rip+0x29892a]
0x7f02e76be491: lea rdi, ptr [rsp+0x20]  reg(3, 7f02e2957cc0) 
0x7f02e76be496: lea esi, ptr [r14+0xa]  reg(47, 1f4e6d8) 
0x7f02e76be49a: mov dword ptr [rsp+0x20], eax  reg(56, 3736343600000124)  mem(7f02e2957d10, 1) 
0x7f02e76be49e: mov qword ptr [rsp+0x28], rdx  reg(8, 1f4e6d8)  mem(7f02e2957d18, 0) 
0x7f02e76be4a3: call 0x7f02e76a6890
openpal::RSlice::Take(unsigned int) const@plt: 7f02e2957d10 11 1f4e6d8 0	_ZNK7openpal6RSlice4TakeEj@plt
0x7f02e76a6890: jmp qword ptr [rip+0x298b32]
0x7f02e76be4a8: sub rsp, 0x8
0x7f02e76be4ac: mov dword ptr [rsp+0x20], eax  reg(56, 3736343600000011)  mem(7f02e2957d08, a0000000a) 
0x7f02e76be4b0: mov qword ptr [rsp+0x18], rdx  reg(8, 1f4e6d8)  mem(7f02e2957d00, 1f4e6d8) 
0x7f02e76be4b5: movzx edx, byte ptr [rsp+0x14]  reg(54, 1f4e6d8) 
0x7f02e76be4ba: push r12  reg(15, 1f4e848) 
0x7f02e76be4bc: xor r8d, r8d  reg(61, 1f4dd68)  reg(61, 1f4dd68) 
0x7f02e76be4bf: mov ecx, dword ptr [rsp+0x2c]  reg(55, 0) 
0x7f02e76be4c3: mov r9d, 0x44  reg(64, 5) 
0x7f02e76be4c9: mov rdi, rbx  reg(3, 7f02e2957cc0)  reg(7, 7f02e2957d90) 
0x7f02e76be4cc: mov esi, ebp  reg(47, 1f4e6d8) 
0x7f02e76be4ce: movzx ecx, cx  reg(55, a)  reg(32, a) 
0x7f02e76be4d1: push rcx  reg(9, a) 
0x7f02e76be4d2: push r13  reg(16, 1) 
0x7f02e76be4d4: xor ecx, ecx  reg(55, a)  reg(55, a) 
0x7f02e76be4d6: call 0x7f02e76a6e50
opendnp3::LinkFrame::FormatHeader(openpal::WSlice&, unsigned char, bool, bool, bool, opendnp3::LinkFunction, unsigned short, unsigned short, openpal::Logger*)@plt: 7f02e2957d90 5 0 0	_ZN8opendnp39LinkFrame12FormatHeaderERN7openpal6WSliceEhbbbNS_12LinkFunctionEttPNS1_6LoggerE@plt
0x7f02e76a6e50: jmp qword ptr [rip+0x298852]
0x7f02e76a6e56: push 0x2d2 
0x7f02e76a6e5b: jmp 0x7f02e76a4120
opendnp3::LinkFrame::FormatHeader(openpal::WSlice&, unsigned char, bool, bool, bool, opendnp3::LinkFunction, unsigned short, unsigned short, openpal::Logger*): 7f02e2957d90 5 0 0	_ZN8opendnp39LinkFrame12FormatHeaderERN7openpal6WSliceEhbbbNS_12LinkFunctionEttPNS1_6LoggerE
0x7f02e76bdf60: push r15  reg(18, 1f4dd68) 
0x7f02e76bdf62: push r14  reg(17, 7) 
0x7f02e76bdf64: movzx ecx, cl  reg(55, 0)  reg(30, 0) 
0x7f02e76bdf67: push r13  reg(16, 1) 
0x7f02e76bdf69: push r12  reg(15, 1f4e848) 
0x7f02e76bdf6b: mov r15d, r9d  reg(82, 1f4dd68)  reg(64, 44) 
0x7f02e76bdf6e: push rbp
0x7f02e76bdf6f: push rbx  reg(7, 7f02e2957d90) 
0x7f02e76bdf70: mov rbx, rdi  reg(7, 7f02e2957d90)  reg(3, 7f02e2957d90) 
0x7f02e76bdf73: mov ebp, esi
0x7f02e76bdf75: add esi, 0x5  reg(47, 5) 
0x7f02e76bdf78: sub rsp, 0xb8
0x7f02e76bdf7f: movzx esi, sil  reg(47, a)  reg(48, a) 
0x7f02e76bdf83: movzx edi, word ptr [rsp+0xf8]  reg(45, 7f02e2957d90) 
0x7f02e76bdf8b: lea r14, ptr [rsp+0x10]  reg(17, 7) 
0x7f02e76bdf90: mov r12, qword ptr [rsp+0x100]  reg(15, 1f4e848) 
0x7f02e76bdf98: mov rax, qword ptr fs:[0x28]  reg(10, 3736343600000011) 
0x7f02e76bdfa1: mov qword ptr [rsp+0xa8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2957c88, 0) 
0x7f02e76bdfa9: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bdfab: movzx eax, word ptr [rsp+0xf0]  reg(56, 0) 
0x7f02e76bdfb3: mov dword ptr [rsp+0xc], edi  reg(45, a)  mem(7f02e2957bec, 3a4e4946) 
0x7f02e76bdfb7: mov dword ptr [rsp+0x8], eax  reg(56, 1)  mem(7f02e2957be8, a2031203a) 
0x7f02e76bdfbb: push r9  reg(12, 44) 
0x7f02e76bdfbd: movzx r9d, r8b  reg(64, 44)  reg(59, 0) 
0x7f02e76bdfc1: push rcx  reg(9, 0) 
0x7f02e76bdfc2: movzx r8d, dl  reg(61, 0)  reg(33, 0) 
0x7f02e76bdfc6: mov ecx, eax  reg(55, 0)  reg(56, 1) 
0x7f02e76bdfc8: mov edx, edi  reg(54, 0)  reg(45, a) 
0x7f02e76bdfca: mov rdi, r14  reg(3, a)  reg(17, 7f02e2957bf0) 
0x7f02e76bdfcd: call 0x7f02e76a4ed0
opendnp3::LinkHeader::LinkHeader(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction)@plt: 7f02e2957bf0 a a 1	_ZN8opendnp310LinkHeaderC1EhttbbbNS_12LinkFunctionE@plt
0x7f02e76a4ed0: jmp qword ptr [rip+0x299812]
0x7f02e76a4ed6: push 0xda 
0x7f02e76a4edb: jmp 0x7f02e76a4120
opendnp3::LinkHeader::LinkHeader(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction): 7f02e2957bf0 a a 1	_ZN8opendnp310LinkHeaderC2EhttbbbNS_12LinkFunctionE
0x7f02e76be5e0: movzx eax, byte ptr [rsp+0x8]  reg(56, 1) 
0x7f02e76be5e5: movzx ecx, cx  reg(55, 1)  reg(32, 1) 
0x7f02e76be5e8: movzx edx, dx  reg(54, a)  reg(35, a) 
0x7f02e76be5eb: movzx esi, sil  reg(47, a)  reg(48, a) 
0x7f02e76be5ef: movzx r9d, r9b  reg(64, 0)  reg(62, 0) 
0x7f02e76be5f3: movzx r8d, r8b  reg(61, 0)  reg(59, 0) 
0x7f02e76be5f7: mov dword ptr [rsp+0x8], eax  reg(56, 0)  mem(7f02e2957bd0, 0) 
0x7f02e76be5fb: jmp 0x7f02e76a7b30
opendnp3::LinkHeader::Set(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction)@plt: 7f02e2957bf0 a a 1	_ZN8opendnp310LinkHeader3SetEhttbbbNS_12LinkFunctionE@plt
0x7f02e76a7b30: jmp qword ptr [rip+0x2981e2]
0x7f02e76a7b36: push 0x3a0 
0x7f02e76a7b3b: jmp 0x7f02e76a4120
opendnp3::LinkHeader::Set(unsigned char, unsigned short, unsigned short, bool, bool, bool, opendnp3::LinkFunction): 7f02e2957bf0 a a 1	_ZN8opendnp310LinkHeader3SetEhttbbbNS_12LinkFunctionE
0x7f02e76be5b0: push rbx  reg(7, 7f02e2957d90) 
0x7f02e76be5b1: mov byte ptr [rdi], sil  reg(48, a)  mem(7f02e2957bf0, 0) 
0x7f02e76be5b4: mov rbx, rdi  reg(7, 7f02e2957d90)  reg(3, 7f02e2957bf0) 
0x7f02e76be5b7: mov word ptr [rdi+0x4], cx  reg(32, 1)  mem(7f02e2957bf4, 0) 
0x7f02e76be5bb: movzx esi, byte ptr [rsp+0x10]  reg(47, a) 
0x7f02e76be5c0: movzx ecx, byte ptr [rsp+0x18]  reg(55, 1) 
0x7f02e76be5c5: mov word ptr [rdi+0x2], dx  reg(35, a)  mem(7f02e2957bf2, 10000) 
0x7f02e76be5c9: movzx edx, r9b  reg(54, a)  reg(62, 0) 
0x7f02e76be5cd: movzx edi, r8b  reg(45, 7f02e2957bf0)  reg(59, 0) 
0x7f02e76be5d1: call 0x7f02e76a7290
opendnp3::LinkHeader::ControlByte(bool, bool, bool, opendnp3::LinkFunction)@plt: 0 0 0 44	_ZN8opendnp310LinkHeader11ControlByteEbbbNS_12LinkFunctionE@plt
0x7f02e76a7290: jmp qword ptr [rip+0x298632]
0x7f02e76a7296: push 0x316 
0x7f02e76a729b: jmp 0x7f02e76a4120
opendnp3::LinkHeader::ControlByte(bool, bool, bool, opendnp3::LinkFunction): 0 0 0 44	_ZN8opendnp310LinkHeader11ControlByteEbbbNS_12LinkFunctionE
0x7f02e76be570: push r12  reg(15, 1f4e848) 
0x7f02e76be572: push rbp
0x7f02e76be573: mov r12d, edi  reg(73, 1f4e848)  reg(45, 0) 
0x7f02e76be576: push rbx  reg(7, 7f02e2957bf0) 
0x7f02e76be577: mov edi, ecx  reg(45, 0)  reg(55, 44) 
0x7f02e76be579: mov ebx, edx  reg(53, 7f02e2957bf0)  reg(54, 0) 
0x7f02e76be57b: mov ebp, esi
0x7f02e76be57d: call 0x7f02e76a75b0
opendnp3::LinkFunctionToType(opendnp3::LinkFunction)@plt: 44 0 0 44	_ZN8opendnp318LinkFunctionToTypeENS_12LinkFunctionE@plt
0x7f02e76a75b0: jmp qword ptr [rip+0x2984a2]
0x7f02e76a75b6: push 0x348 
0x7f02e76a75bb: jmp 0x7f02e76a4120
opendnp3::LinkFunctionToType(opendnp3::LinkFunction): 44 0 0 44	_ZN8opendnp318LinkFunctionToTypeENS_12LinkFunctionE
0x7f02e76bbb60: mov eax, edi  reg(56, 0)  reg(45, 44) 
0x7f02e76bbb62: ret 
0x7f02e76be582: mov edx, eax  reg(54, 0)  reg(56, 44) 
0x7f02e76be584: or edx, 0xffffff80  reg(54, 44) 
0x7f02e76be587: test r12b, r12b  reg(71, 0)  reg(71, 0) 
0x7f02e76be58d: mov edx, eax  reg(54, ffffffc4)  reg(56, 44) 
0x7f02e76be58f: or edx, 0x20  reg(54, 44) 
0x7f02e76be592: test bpl, bpl 
0x7f02e76be598: mov ecx, eax  reg(55, 44)  reg(56, 44) 
0x7f02e76be59a: or ecx, 0x10  reg(55, 44) 
0x7f02e76be59d: test bl, bl  reg(36, 0)  reg(36, 0) 
0x7f02e76be5a2: pop rbx  reg(7, 0) 
0x7f02e76be5a3: pop rbp
0x7f02e76be5a4: pop r12  reg(15, 0) 
0x7f02e76be5a6: ret 
0x7f02e76be5d6: mov byte ptr [rbx+0x6], al  reg(27, 44)  mem(7f02e2957bf6, 0) 
0x7f02e76be5d9: pop rbx  reg(7, 7f02e2957bf0) 
0x7f02e76be5da: ret 
0x7f02e76bdfd2: pop rax  reg(10, 44) 
0x7f02e76bdfd3: pop rdx  reg(8, 64) 
0x7f02e76bdfd4: test r12, r12  reg(15, 1f4e848)  reg(15, 1f4e848) 
0x7f02e76bdfd7: lea r13, ptr [rsp+0x20]  reg(16, 1) 
0x7f02e76bdfdc: jz 0x7f02e76be062
0x7f02e76bdfe2: lea r13, ptr [rsp+0x20]  reg(16, 7f02e2957c00) 
0x7f02e76bdfe7: mov rdi, r12  reg(3, 44)  reg(15, 1f4e848) 
0x7f02e76bdfea: mov dword ptr [rsp+0x20], 0x80  mem(7f02e2957c00, 203a514553203120) 
0x7f02e76bdff2: mov rsi, r13  reg(4, 0)  reg(16, 7f02e2957c00) 
0x7f02e76bdff5: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4e848 7f02e2957c00 44 54	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76bdffa: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76bdffc: jz 0x7f02e76be062
0x7f02e76bdffe: mov edi, r15d  reg(45, 1f4e848)  reg(82, 44) 
0x7f02e76be001: movzx ebp, bpl
0x7f02e76be005: lea r15, ptr [rsp+0x30]  reg(18, 44) 
0x7f02e76be00a: call 0x7f02e76a8130
opendnp3::LinkFunctionToString(opendnp3::LinkFunction)@plt: 44 7f02e2957c00 44 54	_ZN8opendnp320LinkFunctionToStringENS_12LinkFunctionE@plt
0x7f02e76a8130: jmp qword ptr [rip+0x297ee2]
0x7f02e76a8136: push 0x400 
0x7f02e76a813b: jmp 0x7f02e76a4120
opendnp3::LinkFunctionToString(opendnp3::LinkFunction): 44 7f02e2957c00 44 54	_ZN8opendnp320LinkFunctionToStringENS_12LinkFunctionE
0x7f02e76bbc20: cmp dil, 0x49  reg(46, 44) 
0x7f02e76bbc24: jnbe 0x7f02e76bbcd0
0x7f02e76bbc2a: lea rax, ptr [rip+0x52ce3]  reg(10, 1fe01) 
0x7f02e76bbc31: movzx edx, dil  reg(54, 44)  reg(46, 44) 
0x7f02e76bbc35: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 44) 
0x7f02e76bbc39: add rax, rdx  reg(10, 7f02e770e914)  reg(8, fffffffffffad35c) 
0x7f02e76bbc3c: jmp rax
0x7f02e76bbc70: lea rax, ptr [rip+0x52e08]  reg(10, 7f02e76bbc70) 
0x7f02e76bbc77: ret 
0x7f02e76be00f: sub rsp, 0x8
0x7f02e76be013: mov r9, rax  reg(12, 0)  reg(10, 7f02e770ea7f) 
0x7f02e76be016: lea r8, ptr [rip+0x51303]  reg(11, 0) 
0x7f02e76be01d: push rbp
0x7f02e76be01e: mov eax, dword ptr [rsp+0x1c]  reg(56, 7f02e770ea7f) 
0x7f02e76be022: mov ecx, 0x78  reg(55, 54) 
0x7f02e76be027: mov edx, 0x1  reg(54, fffffffffffad35c) 
0x7f02e76be02c: mov esi, 0x78  reg(47, 7f02e2957c00) 
0x7f02e76be031: mov rdi, r15  reg(3, 44)  reg(18, 7f02e2957c10) 
0x7f02e76be034: push rax  reg(10, a) 
0x7f02e76be035: mov eax, dword ptr [rsp+0x20]  reg(56, a) 
0x7f02e76be039: push rax  reg(10, 1) 
0x7f02e76be03a: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76be03c: call 0x7f02e76a5330
__snprintf_chk@plt: 7f02e2957c10 78 1 78	__snprintf_chk@plt
0x7f02e76a5330: jmp qword ptr [rip+0x2995e2]
0x7f02e76be041: lea rdx, ptr [rip+0x51308]  reg(8, 7f02e2957c50) 
0x7f02e76be048: mov dword ptr [rsp+0x40], 0x80  mem(7f02e2957c00, 203a514500000080) 
0x7f02e76be050: mov rcx, r15  reg(9, 7fffffbf)  reg(18, 7f02e2957c10) 
0x7f02e76be053: add rsp, 0x20
0x7f02e76be057: mov rsi, r13  reg(4, 0)  reg(16, 7f02e2957c00) 
0x7f02e76be05a: mov rdi, r12  reg(3, 7f02e2957970)  reg(15, 1f4e848) 
0x7f02e76be05d: call 0x7f02e76a5270
openpal::Logger::Log(openpal::LogFilters const&, char const*, char const*)@plt: 1f4e848 7f02e2957c00 7f02e770f350 7f02e2957c10	_ZN7openpal6Logger3LogERKNS_10LogFiltersEPKcS5_@plt
0x7f02e76a5270: jmp qword ptr [rip+0x299642]
opendnp3::LogFlagToString(int): 80 0 6 7f02e29578c0	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 80) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 80) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c121a: jnle 0x7f02e76c1250
0x7f02e76c1250: cmp edi, 0x20  reg(45, 80) 
0x7f02e76c1253: jz 0x7f02e76c12a8
0x7f02e76c1255: jnle 0x7f02e76c12f8
0x7f02e76c12f8: cmp edi, 0x40  reg(45, 80) 
0x7f02e76c12fb: jz 0x7f02e76c12a8
0x7f02e76c12fd: add edi, 0xffffff80  reg(45, 80) 
0x7f02e76c1300: jnz 0x7f02e76c1244
0x7f02e76c1306: lea rax, ptr [rip+0x4f48a]  reg(10, 7f02e771077f) 
0x7f02e76c130d: ret 
memcpy: 7f02dc0013c1 7f02e7bdc261 2 7f02dc0013c0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc0013c0	dlsym@plt
memcpy: 7f02dc0013c3 7f02e295784b d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc0013d0 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc0013d2 7f02e7710797 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc0013d9 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc0013da 1f4d660 a 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 0	dlsym@plt
memcpy: 7f02dc0013e4 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc0013e7 7f02e2957c10 40 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 40 0	dlsym@plt
memcpy: 7f02dc0016e0 7f02dc0013c0 67 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 67 7f02dc000020	dlsym@plt
0x7f02e76be062: mov rsi, qword ptr [rbx+0x8]  reg(4, 0) 
0x7f02e76be066: mov rdi, r14  reg(3, 7f02e2957b20)  reg(17, 7f02e2957bf0) 
0x7f02e76be069: call 0x7f02e76a4fa0
opendnp3::LinkHeader::Write(unsigned char*) const@plt: 7f02e2957bf0 1f4e6d8 7f02e7401c60 0	_ZNK8opendnp310LinkHeader5WriteEPh@plt
0x7f02e76a4fa0: jmp qword ptr [rip+0x2997aa]
0x7f02e76a4fa6: push 0xe7 
0x7f02e76a4fab: jmp 0x7f02e76a4120
opendnp3::LinkHeader::Write(unsigned char*) const: 7f02e2957bf0 1f4e6d8 7f02e7401c60 0	_ZNK8opendnp310LinkHeader5WriteEPh
0x7f02e76be630: mov byte ptr [rsi], 0x5  mem(1f4e6d8, 0) 
0x7f02e76be633: mov byte ptr [rsi+0x1], 0x64  mem(1f4e6d9, 0) 
0x7f02e76be637: mov rax, rsi  reg(10, 0)  reg(4, 1f4e6d8) 
0x7f02e76be63a: movzx edx, byte ptr [rdi]  reg(54, 7f02e7401c60) 
0x7f02e76be63d: mov byte ptr [rsi+0x2], dl  reg(33, a)  mem(1f4e6da, 0) 
0x7f02e76be640: movzx edx, word ptr [rdi+0x4]  reg(54, a) 
0x7f02e76be644: mov byte ptr [rsi+0x4], dl  reg(33, 1)  mem(1f4e6dc, 0) 
0x7f02e76be647: shr dx, 0x8  reg(35, 1) 
0x7f02e76be64b: mov byte ptr [rsi+0x5], dl  reg(33, 0)  mem(1f4e6dd, 0) 
0x7f02e76be64e: movzx edx, word ptr [rdi+0x2]  reg(54, 0) 
0x7f02e76be652: mov byte ptr [rsi+0x6], dl  reg(33, a)  mem(1f4e6de, 0) 
0x7f02e76be655: shr dx, 0x8  reg(35, a) 
0x7f02e76be659: mov byte ptr [rsi+0x7], dl  reg(33, 0)  mem(1f4e6df, 0) 
0x7f02e76be65c: movzx edx, byte ptr [rdi+0x6]  reg(54, 0) 
0x7f02e76be660: mov rdi, rax  reg(3, 7f02e2957bf0)  reg(10, 1f4e6d8) 
0x7f02e76be663: mov byte ptr [rsi+0x3], dl  reg(33, 44)  mem(1f4e6db, a000100) 
0x7f02e76be666: mov esi, 0x8  reg(47, 1f4e6d8) 
0x7f02e76be66b: jmp 0x7f02e76a53f0
opendnp3::CRC::AddCrc(unsigned char*, unsigned int)@plt: 1f4e6d8 8 44 0	_ZN8opendnp33CRC6AddCrcEPhj@plt
0x7f02e76a53f0: jmp qword ptr [rip+0x299582]
0x7f02e76a53f6: push 0x12c 
0x7f02e76a53fb: jmp 0x7f02e76a4120
opendnp3::CRC::AddCrc(unsigned char*, unsigned int): 1f4e6d8 8 44 0	_ZN8opendnp33CRC6AddCrcEPhj
0x7f02e76bc1d0: push rbp
0x7f02e76bc1d1: push rbx  reg(7, 7f02e2957d90) 
0x7f02e76bc1d2: mov ebx, esi  reg(53, 7f02e2957d90)  reg(47, 8) 
0x7f02e76bc1d4: mov rbp, rdi
0x7f02e76bc1d7: sub rsp, 0x8
0x7f02e76bc1db: call 0x7f02e76a4590
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int)@plt: 1f4e6d8 8 44 0	_ZN8opendnp33CRC7CalcCrcEPKhj@plt
0x7f02e76a4590: jmp qword ptr [rip+0x299cb2]
0x7f02e76a4596: push 0x46 
0x7f02e76a459b: jmp 0x7f02e76a4120
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int): 1f4e6d8 8 44 0	_ZN8opendnp33CRC7CalcCrcEPKhj
0x7f02e76bc180: test esi, esi  reg(47, 8)  reg(47, 8) 
0x7f02e76bc182: mov eax, 0xffffffff  reg(56, 1f4e6d8) 
0x7f02e76bc187: jz 0x7f02e76bc1b9
0x7f02e76bc189: lea eax, ptr [rsi-0x1]  reg(56, ffffffff) 
0x7f02e76bc18c: mov rcx, qword ptr [rip+0x280ee5]  reg(9, 0) 
0x7f02e76bc193: lea rsi, ptr [rdi+rax*1+0x1]  reg(4, 8) 
0x7f02e76bc198: xor eax, eax  reg(56, 7)  reg(56, 7) 
0x7f02e76bc19a: nop word ptr [rax+rax*1], ax
0x7f02e76bc1a0: mov edx, eax  reg(54, 44)  reg(56, 0) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 0) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6d8) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 0)  reg(28, 0) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 5)  reg(33, 5) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 0) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6d9)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 5)  reg(56, ef26) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, ef26) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6d9) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, ef26)  reg(28, ef26) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, ef42)  reg(33, ef42) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, ef) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6da)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 42)  reg(56, 3f0d) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 3f0d) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6da) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 3f0d)  reg(28, 3f0d) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 3f07)  reg(33, 3f07) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 3f) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6db)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 7)  reg(56, 83a5) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 83a5) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6db) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 83a5)  reg(28, 83a5) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 83e1)  reg(33, 83e1) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 83) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6dc)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, e1)  reg(56, ea90) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, ea90) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6dc) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, ea90)  reg(28, ea90) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, ea91)  reg(33, ea91) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, ea) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6dd)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 91)  reg(56, 2263) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 2263) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6dd) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 2263)  reg(28, 2263) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 2263)  reg(33, 2263) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 22) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6de)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 63)  reg(56, 2031) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 2031) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6de) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 2031)  reg(28, 2031) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 203b)  reg(33, 203b) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 20) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6df)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 3b)  reg(56, 3e8f) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 3e8f) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6df) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 3e8f)  reg(28, 3e8f) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 3e8f)  reg(33, 3e8f) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 3e) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6e0)  reg(4, 1f4e6e0) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1b7: not eax
0x7f02e76bc1b9: ret 
0x7f02e76bc1e0: mov edi, ebx  reg(45, 1f4e6e0)  reg(53, 8) 
0x7f02e76bc1e2: add rdi, rbp  reg(3, 8) 
0x7f02e76bc1e5: mov byte ptr [rdi], al  reg(27, ffff256e)  mem(1f4e6e0, 0) 
0x7f02e76bc1e7: shr ax, 0x8  reg(29, ffff256e) 
0x7f02e76bc1eb: mov byte ptr [rdi+0x1], al  reg(27, ffff0025)  mem(1f4e6e1, 0) 
0x7f02e76bc1ee: add rsp, 0x8
0x7f02e76bc1f2: pop rbx  reg(7, 8) 
0x7f02e76bc1f3: pop rbp
0x7f02e76bc1f4: ret 
0x7f02e76be06e: mov rdi, rbx  reg(3, 1f4e6e0)  reg(7, 7f02e2957d90) 
0x7f02e76be071: call 0x7f02e76a6ca0
openpal::WSlice::ToRSlice() const@plt: 7f02e2957d90 1f4e6e0 8f 7f02e79401e0	_ZNK7openpal6WSlice8ToRSliceEv@plt
0x7f02e76a6ca0: jmp qword ptr [rip+0x29892a]
0x7f02e76be076: mov esi, 0xa  reg(47, 1f4e6d8) 
0x7f02e76be07b: mov rdi, r13  reg(3, 7f02e2957bb0)  reg(16, 7f02e2957c00) 
0x7f02e76be07e: mov qword ptr [rsp+0x28], rdx  reg(8, 1f4e6d8)  mem(7f02e2957c08, 34203a4e454c2030) 
0x7f02e76be083: mov dword ptr [rsp+0x20], eax  reg(56, 124)  mem(7f02e2957c00, 203a514500000080) 
0x7f02e76be087: call 0x7f02e76a6890
openpal::RSlice::Take(unsigned int) const@plt: 7f02e2957c00 a 1f4e6d8 0	_ZNK7openpal6RSlice4TakeEj@plt
0x7f02e76a6890: jmp qword ptr [rip+0x298b32]
0x7f02e76be08c: mov rdi, rbx  reg(3, 7f02e2957bb0)  reg(7, 7f02e2957d90) 
0x7f02e76be08f: mov esi, 0xa  reg(47, 1f4e6d8) 
0x7f02e76be094: mov r12d, eax  reg(73, 1f4e848)  reg(56, a) 
0x7f02e76be097: mov rbp, rdx
0x7f02e76be09a: call 0x7f02e76a4a40
openpal::WSlice::Advance(unsigned int)@plt: 7f02e2957d90 a 1f4e6d8 0	_ZN7openpal6WSlice7AdvanceEj@plt
0x7f02e76a4a40: jmp qword ptr [rip+0x299a5a]
0x7f02e76be09f: mov rbx, qword ptr [rsp+0xa8]  reg(7, 7f02e2957d90) 
0x7f02e76be0a7: xor rbx, qword ptr fs:[0x28]  reg(7, d533a0ca891b2d00) 
0x7f02e76be0b0: mov eax, r12d  reg(56, a)  reg(73, a) 
0x7f02e76be0b3: mov rdx, rbp  reg(8, 11a) 
0x7f02e76be0b6: jnz 0x7f02e76be0ca
0x7f02e76be0b8: add rsp, 0xb8
0x7f02e76be0bf: pop rbx  reg(7, 0) 
0x7f02e76be0c0: pop rbp
0x7f02e76be0c1: pop r12  reg(15, a) 
0x7f02e76be0c3: pop r13  reg(16, 7f02e2957c00) 
0x7f02e76be0c5: pop r14  reg(17, 7f02e2957bf0) 
0x7f02e76be0c7: pop r15  reg(18, 7f02e2957c10) 
0x7f02e76be0c9: ret 
0x7f02e76be4db: mov rsi, qword ptr [rbx+0x8]  reg(4, a) 
0x7f02e76be4df: add rsp, 0x20
0x7f02e76be4e3: mov edx, ebp  reg(54, 1f4e6d8) 
0x7f02e76be4e5: mov rdi, r15  reg(3, 7f02e2957d90)  reg(18, 1f4dd68) 
0x7f02e76be4e8: call 0x7f02e76a5ed0
opendnp3::LinkFrame::WriteUserData(unsigned char const*, unsigned char*, unsigned char)@plt: 1f4dd68 1f4e6e2 5 a	_ZN8opendnp39LinkFrame13WriteUserDataEPKhPhh@plt
0x7f02e76a5ed0: jmp qword ptr [rip+0x299012]
0x7f02e76a5ed6: push 0x1da 
0x7f02e76a5edb: jmp 0x7f02e76a4120
opendnp3::LinkFrame::WriteUserData(unsigned char const*, unsigned char*, unsigned char): 1f4dd68 1f4e6e2 5 a	_ZN8opendnp39LinkFrame13WriteUserDataEPKhPhh
0x7f02e76be230: test dl, dl  reg(33, 5)  reg(33, 5) 
0x7f02e76be232: jz 0x7f02e76be2b0
0x7f02e76be234: push r15  reg(18, 1f4dd68) 
0x7f02e76be236: push r14  reg(17, 7) 
0x7f02e76be238: mov r15, rdi  reg(18, 1f4dd68)  reg(3, 1f4dd68) 
0x7f02e76be23b: push r13  reg(16, 1) 
0x7f02e76be23d: push r12  reg(15, 1f4e848) 
0x7f02e76be23f: mov r13d, edx  reg(76, 1)  reg(54, 5) 
0x7f02e76be242: push rbp
0x7f02e76be243: push rbx  reg(7, 7f02e2957d90) 
0x7f02e76be244: mov rbp, rsi
0x7f02e76be247: mov r12d, 0x10  reg(73, 1f4e848) 
0x7f02e76be24d: sub rsp, 0x8
0x7f02e76be251: nop dword ptr [rax], eax
0x7f02e76be258: cmp r13b, 0x10  reg(74, 5) 
0x7f02e76be25c: mov r14d, r12d  reg(79, 7)  reg(73, 10) 
0x7f02e76be25f: cmovbe r14d, r13d  reg(79, 10)  reg(76, 5) 
0x7f02e76be263: movzx ebx, r14b  reg(53, 7f02e2957d90)  reg(77, 5) 
0x7f02e76be267: cmp ebx, 0x8  reg(53, 5) 
0x7f02e76be26a: jnb 0x7f02e76be2b8
0x7f02e76be26c: test bl, 0x4  reg(36, 5) 
0x7f02e76be26f: jnz 0x7f02e76be308
0x7f02e76be308: mov eax, dword ptr [r15]  reg(56, a) 
0x7f02e76be30b: mov dword ptr [rbp], eax  reg(56, 8082f0c0)  mem(1f4e6e2, 0) 
0x7f02e76be30e: mov eax, ebx  reg(56, 8082f0c0)  reg(53, 5) 
0x7f02e76be310: mov edx, dword ptr [r15+rax*1-0x4]  reg(54, 5) 
0x7f02e76be315: mov dword ptr [rbp+rax*1-0x4], edx  reg(54, 8082f0)  mem(1f4e6e3, 8082f0) 
0x7f02e76be319: jmp 0x7f02e76be289
0x7f02e76be289: mov rdi, rbp  reg(3, 1f4dd68) 
0x7f02e76be28c: movzx esi, r14b  reg(47, 1f4e6e2)  reg(77, 5) 
0x7f02e76be290: add r15, rbx  reg(18, 1f4dd68)  reg(7, 5) 
0x7f02e76be293: call 0x7f02e76a53f0
opendnp3::CRC::AddCrc(unsigned char*, unsigned int)@plt: 1f4e6e2 5 8082f0 a	_ZN8opendnp33CRC6AddCrcEPhj@plt
0x7f02e76a53f0: jmp qword ptr [rip+0x299582]
opendnp3::CRC::AddCrc(unsigned char*, unsigned int): 1f4e6e2 5 8082f0 a	_ZN8opendnp33CRC6AddCrcEPhj
0x7f02e76bc1d0: push rbp
0x7f02e76bc1d1: push rbx  reg(7, 5) 
0x7f02e76bc1d2: mov ebx, esi  reg(53, 5)  reg(47, 5) 
0x7f02e76bc1d4: mov rbp, rdi
0x7f02e76bc1d7: sub rsp, 0x8
0x7f02e76bc1db: call 0x7f02e76a4590
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int)@plt: 1f4e6e2 5 8082f0 a	_ZN8opendnp33CRC7CalcCrcEPKhj@plt
0x7f02e76a4590: jmp qword ptr [rip+0x299cb2]
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int): 1f4e6e2 5 8082f0 a	_ZN8opendnp33CRC7CalcCrcEPKhj
0x7f02e76bc180: test esi, esi  reg(47, 5)  reg(47, 5) 
0x7f02e76bc182: mov eax, 0xffffffff  reg(56, 5) 
0x7f02e76bc187: jz 0x7f02e76bc1b9
0x7f02e76bc189: lea eax, ptr [rsi-0x1]  reg(56, ffffffff) 
0x7f02e76bc18c: mov rcx, qword ptr [rip+0x280ee5]  reg(9, a) 
0x7f02e76bc193: lea rsi, ptr [rdi+rax*1+0x1]  reg(4, 5) 
0x7f02e76bc198: xor eax, eax  reg(56, 4)  reg(56, 4) 
0x7f02e76bc19a: nop word ptr [rax+rax*1], ax
0x7f02e76bc1a0: mov edx, eax  reg(54, 8082f0)  reg(56, 0) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 0) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6e2) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 0)  reg(28, 0) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, c0)  reg(33, c0) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 0) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6e3)  reg(4, 1f4e6e7) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, c0)  reg(56, f5e2) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, f5e2) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6e3) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, f5e2)  reg(28, f5e2) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, f512)  reg(33, f512) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, f5) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6e4)  reg(4, 1f4e6e7) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 12)  reg(56, de22) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, de22) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6e4) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, de22)  reg(28, de22) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, dea0)  reg(33, dea0) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, de) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6e5)  reg(4, 1f4e6e7) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, a0)  reg(56, 8fcd) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 8fcd) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6e5) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 8fcd)  reg(28, 8fcd) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 8f4d)  reg(33, 8f4d) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 8f) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6e6)  reg(4, 1f4e6e7) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 4d)  reg(56, 437e) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 437e) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4e6e6) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 437e)  reg(28, 437e) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 437e)  reg(33, 437e) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 43) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4e6e7)  reg(4, 1f4e6e7) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1b7: not eax
0x7f02e76bc1b9: ret 
0x7f02e76bc1e0: mov edi, ebx  reg(45, 1f4e6e7)  reg(53, 5) 
0x7f02e76bc1e2: add rdi, rbp  reg(3, 5) 
0x7f02e76bc1e5: mov byte ptr [rdi], al  reg(27, ffff7d6b)  mem(1f4e6e7, 0) 
0x7f02e76bc1e7: shr ax, 0x8  reg(29, ffff7d6b) 
0x7f02e76bc1eb: mov byte ptr [rdi+0x1], al  reg(27, ffff007d)  mem(1f4e6e8, 0) 
0x7f02e76bc1ee: add rsp, 0x8
0x7f02e76bc1f2: pop rbx  reg(7, 5) 
0x7f02e76bc1f3: pop rbp
0x7f02e76bc1f4: ret 
0x7f02e76be298: sub r13b, r14b  reg(74, 5)  reg(77, 5) 
0x7f02e76be29b: lea rbp, ptr [rbp+rbx*1+0x2]
0x7f02e76be2a0: jnz 0x7f02e76be258
0x7f02e76be2a2: add rsp, 0x8
0x7f02e76be2a6: pop rbx  reg(7, 5) 
0x7f02e76be2a7: pop rbp
0x7f02e76be2a8: pop r12  reg(15, 10) 
0x7f02e76be2aa: pop r13  reg(16, 0) 
0x7f02e76be2ac: pop r14  reg(17, 5) 
0x7f02e76be2ae: pop r15  reg(18, 1f4dd6d) 
0x7f02e76be2b0: ret 
0x7f02e76be4ed: mov rdi, rbx  reg(3, 1f4e6e7)  reg(7, 7f02e2957d90) 
0x7f02e76be4f0: mov esi, r14d  reg(47, 1f4e6e7)  reg(79, 7) 
0x7f02e76be4f3: call 0x7f02e76a4a40
openpal::WSlice::Advance(unsigned int)@plt: 7f02e2957d90 7 7e 7f02e79401e0	_ZN7openpal6WSlice7AdvanceEj@plt
0x7f02e76a4a40: jmp qword ptr [rip+0x299a5a]
0x7f02e76be4f8: mov rbx, qword ptr [rsp+0x38]  reg(7, 7f02e2957d90) 
0x7f02e76be4fd: xor rbx, qword ptr fs:[0x28]  reg(7, d533a0ca891b2d00) 
0x7f02e76be506: mov eax, dword ptr [rsp+0x18]  reg(56, 7) 
0x7f02e76be50a: mov rdx, qword ptr [rsp+0x10]  reg(8, 113) 
0x7f02e76be50f: jnz 0x7f02e76be520
0x7f02e76be511: add rsp, 0x48
0x7f02e76be515: pop rbx  reg(7, 0) 
0x7f02e76be516: pop rbp
0x7f02e76be517: pop r12  reg(15, 1f4e848) 
0x7f02e76be519: pop r13  reg(16, 1) 
0x7f02e76be51b: pop r14  reg(17, 7) 
0x7f02e76be51d: pop r15  reg(18, 1f4dd68) 
0x7f02e76be51f: ret 
0x7f02e76bc79e: mov dword ptr [rsp+0x10], 0x100  mem(7f02e2957d80, 1f4dd30) 
0x7f02e76bc7a6: mov dword ptr [rsp+0x30], eax  reg(56, 11)  mem(7f02e2957da0, 124) 
0x7f02e76bc7aa: mov rdi, rbp  reg(3, 7f02e2957d90) 
0x7f02e76bc7ad: mov qword ptr [rsp+0x38], rdx  reg(8, 1f4e6d8)  mem(7f02e2957da8, 1f4e6d8) 
0x7f02e76bc7b2: pop rax  reg(10, 11) 
0x7f02e76bc7b3: pop rdx  reg(8, 1f4e6d8) 
0x7f02e76bc7b4: mov rsi, rsp  reg(4, 7) 
0x7f02e76bc7b7: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4e848 7f02e2957d80 7f02e76bc762 7	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76bc7bc: test al, al  reg(27, 1fe00)  reg(27, 1fe00) 
0x7f02e76bc7be: jz 0x7f02e76bc7e0
0x7f02e76bc7e0: mov rcx, qword ptr [rsp+0x38]  reg(9, 7) 
0x7f02e76bc7e5: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bc7ee: mov rax, qword ptr [rsp+0x20]  reg(10, 1fe00) 
0x7f02e76bc7f3: mov rdx, qword ptr [rsp+0x28]  reg(8, 7f02e76bc762) 
0x7f02e76bc7f8: jnz 0x7f02e76bc807
0x7f02e76bc7fa: add rsp, 0x40
0x7f02e76bc7fe: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bc7ff: pop rbp
0x7f02e76bc800: pop r12  reg(15, 7f02e2957df0) 
0x7f02e76bc802: pop r13  reg(16, 1f4dd30) 
0x7f02e76bc804: pop r14  reg(17, 7f02e2957da0) 
0x7f02e76bc806: ret 
0x7f02e76bff34: lea rsi, ptr [rsp+0x10]  reg(4, 7f02e2957d80) 
0x7f02e76bff39: mov qword ptr [rsp+0x18], rdx  reg(8, 1f4e6d8)  mem(7f02e2957e08, 7f02e2957e20) 
0x7f02e76bff3e: mov rdi, rbp  reg(3, 1f4e848) 
0x7f02e76bff41: mov edx, 0x1  reg(54, 1f4e6d8) 
0x7f02e76bff46: mov dword ptr [rsp+0x10], eax  reg(56, 11)  mem(7f02e2957e00, 1f4e6d0) 
0x7f02e76bff4a: call 0x7f02e76a6260
opendnp3::LinkContext::QueueTransmit(openpal::RSlice const&, bool)@plt: 1f4e6d0 7f02e2957e00 1 0	_ZN8opendnp311LinkContext13QueueTransmitERKN7openpal6RSliceEb@plt
0x7f02e76a6260: jmp qword ptr [rip+0x298e4a]
0x7f02e76a6266: push 0x213 
0x7f02e76a626b: jmp 0x7f02e76a4120
opendnp3::LinkContext::QueueTransmit(openpal::RSlice const&, bool): 1f4e6d0 7f02e2957e00 1 0	_ZN8opendnp311LinkContext13QueueTransmitERKN7openpal6RSliceEb
0x7f02e76bc810: cmp byte ptr [rdi+0x1c8], 0x0  mem(1f4e898, 0) 
0x7f02e76bc817: jnz 0x7f02e76bc848
0x7f02e76bc819: cmp dl, 0x1  reg(33, 1) 
0x7f02e76bc81c: mov rdx, qword ptr [rdi+0x258]  reg(8, 1) 
0x7f02e76bc823: sbb eax, eax  reg(56, 11)  reg(56, 11) 
0x7f02e76bc825: not eax
0x7f02e76bc827: add eax, 0x2  reg(56, ffffffff) 
0x7f02e76bc82a: mov byte ptr [rdi+0x1c8], al  reg(27, 1)  mem(1f4e898, 0) 
0x7f02e76bc830: mov rax, qword ptr [rdi+0x220]  reg(10, 1) 
0x7f02e76bc837: mov rcx, qword ptr [rax]  reg(9, 0) 
0x7f02e76bc83a: mov rdi, rax  reg(3, 1f4e6d0)  reg(10, 1f4d6a0) 
0x7f02e76bc83d: mov rcx, qword ptr [rcx+0x10]  reg(9, 7f02e7deedf8) 
0x7f02e76bc841: jmp rcx
sendmsg: 7 7f02e2957b20 4000 0	sendmsg
dlsym@plt: ffffffffffffffff 7f02e7ebeeae 4000 0	dlsym@plt
fprintf@plt: 7f02e6e68540 7f02e7ebeeb8 7 1f4e6d8	fprintf@plt
0x7f02e76bff4f: mov rcx, qword ptr [rsp+0x28]  reg(9, 0) 
0x7f02e76bff54: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bff5d: mov rax, qword ptr [rip+0x27d494]  reg(10, 0) 
0x7f02e76bff64: jnz 0x7f02e76bff6d
0x7f02e76bff66: add rsp, 0x38
0x7f02e76bff6a: pop rbx  reg(7, 1f4dd28) 
0x7f02e76bff6b: pop rbp
0x7f02e76bff6c: ret 
0x7f02e76bcc82: mov qword ptr [rbx+0x228], rax  reg(10, 7f02e79404a8)  mem(1f4e8f8, 7f02e79404b0) 
0x7f02e76bcc89: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bcc8a: ret 
0x7f02e76be79e: mov eax, ebp  reg(56, 7f02e79404a8) 
0x7f02e76be7a0: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76be7a1: pop rbp
0x7f02e76be7a2: pop r12  reg(15, 1) 
0x7f02e76be7a4: ret 
0x7f02e7703740: mov rdx, qword ptr [rsp+0x8]  reg(8, 7f02dc000f90) 
0x7f02e7703745: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e770374e: mov eax, ebp  reg(56, 1) 
0x7f02e7703750: jnz 0x7f02e7703885
0x7f02e7703756: add rsp, 0x10
0x7f02e770375a: pop rbx  reg(7, 1f4dc80) 
0x7f02e770375b: pop rbp
0x7f02e770375c: pop r12  reg(15, 1f4dd28) 
0x7f02e770375e: ret 
0x7f02e76f7b34: mov rax, qword ptr [rsp+0x18]  reg(10, 1) 
0x7f02e76f7b39: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76f7b42: jnz 0x7f02e76f7b4d
0x7f02e76f7b44: add rsp, 0x20
0x7f02e76f7b48: pop rbx  reg(7, 1f565b0) 
0x7f02e76f7b49: pop rbp
0x7f02e76f7b4a: pop r12  reg(15, 1) 
0x7f02e76f7b4c: ret 
0x7f02e76f82f1: jmp 0x7f02e76f80e8
0x7f02e76f80e8: mov rax, qword ptr [rsp+0x68]  reg(10, 0) 
0x7f02e76f80ed: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76f80f6: jnz 0x7f02e76f82f6
0x7f02e76f80fc: add rsp, 0x70
0x7f02e76f8100: pop rbx  reg(7, 1f4d728) 
0x7f02e76f8101: pop rbp
0x7f02e76f8102: pop r12  reg(15, 7f02e2957f00) 
0x7f02e76f8104: pop r13  reg(16, 7f02e794f230) 
0x7f02e76f8106: pop r14  reg(17, 0) 
0x7f02e76f8108: ret 
0x7f02e76f837c: mov eax, 0x1  reg(56, 0) 
0x7f02e76f8381: jmp 0x7f02e76f8359
0x7f02e76f8359: mov rdx, qword ptr [rsp+0x8]  reg(8, 0) 
0x7f02e76f835e: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76f8367: jnz 0x7f02e76f83ac
0x7f02e76f8369: add rsp, 0x18
0x7f02e76f836d: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76f836e: pop rbp
0x7f02e76f836f: ret 
0x7f02e7703a22: mov eax, 0x1  reg(56, 1) 
0x7f02e7703a27: mov rcx, qword ptr [rsp+0x18]  reg(9, 0) 
0x7f02e7703a2c: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e7703a35: jnz 0x7f02e7703af4
0x7f02e7703a3b: add rsp, 0x28
0x7f02e7703a3f: pop rbx  reg(7, 1f4e6d0) 
0x7f02e7703a40: pop rbp
0x7f02e7703a41: ret 
0x7f02e76bcf3b: mov eax, 0x1  reg(56, 1) 
0x7f02e76bcf40: jmp 0x7f02e76bceb9
0x7f02e76bceb9: mov rdx, qword ptr [rsp+0x18]  reg(8, 0) 
0x7f02e76bcebe: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76bcec7: jnz 0x7f02e76bcf76
0x7f02e76bcecd: add rsp, 0x28
0x7f02e76bced1: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bced2: pop rbp
0x7f02e76bced3: ret 
opendnp3::LinkLayerParser::OnRead(unsigned int, opendnp3::IFrameSink&): 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser6OnReadEjRNS_10IFrameSinkE
0x7f02e76bfb00: push r12  reg(15, 7f02e2958660) 
0x7f02e76bfb02: lea r12, ptr [rdi+0x188]  reg(15, 7f02e2958660) 
0x7f02e76bfb09: push rbp
0x7f02e76bfb0a: push rbx  reg(7, 1f4cae0) 
0x7f02e76bfb0b: mov rbx, rdi  reg(7, 1f4cae0)  reg(3, 1f4cbc0) 
0x7f02e76bfb0e: mov rbp, rdx
0x7f02e76bfb11: mov rdi, r12  reg(3, 1f4cbc0)  reg(15, 1f4cd48) 
0x7f02e76bfb14: call 0x7f02e76a6550
opendnp3::ShiftableBuffer::AdvanceWrite(unsigned int)@plt: 1f4cd48 19 1f4cae0 0	_ZN8opendnp315ShiftableBuffer12AdvanceWriteEj@plt
0x7f02e76a6550: jmp qword ptr [rip+0x298cd2]
0x7f02e76a6556: push 0x242 
0x7f02e76a655b: jmp 0x7f02e76a4120
opendnp3::ShiftableBuffer::AdvanceWrite(unsigned int): 1f4cd48 19 1f4cae0 0	_ZN8opendnp315ShiftableBuffer12AdvanceWriteEj
0x7f02e76c1140: add dword ptr [rdi+0xc], esi  reg(47, 19)  mem(1f4cd54, 0) 
0x7f02e76c1143: ret 
0x7f02e76bfb19: jmp 0x7f02e76bfb36
0x7f02e76bfb36: mov rdi, rbx  reg(3, 1f4cd48)  reg(7, 1f4cbc0) 
0x7f02e76bfb39: call 0x7f02e76a4640
opendnp3::LinkLayerParser::ParseUntilComplete()@plt: 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser18ParseUntilCompleteEv@plt
0x7f02e76a4640: jmp qword ptr [rip+0x299c5a]
0x7f02e76a4646: push 0x51 
0x7f02e76a464b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ParseUntilComplete(): 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser18ParseUntilCompleteEv
0x7f02e76bfad0: push rbp
0x7f02e76bfad1: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bfad2: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bfad5: sub rsp, 0x8
0x7f02e76bfad9: mov ebp, dword ptr [rdi+0x44]
0x7f02e76bfadc: jmp 0x7f02e76bfae2
0x7f02e76bfae2: mov rdi, rbx  reg(3, 1f4cbc0)  reg(7, 1f4cbc0) 
0x7f02e76bfae5: call 0x7f02e76a4130
opendnp3::LinkLayerParser::ParseOneStep()@plt: 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv@plt
0x7f02e76a4130: jmp qword ptr [rip+0x299ee2]
0x7f02e76a4136: push 0x0 
0x7f02e76a413b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ParseOneStep(): 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv
0x7f02e76bfaa0: mov eax, dword ptr [rdi+0x44]  reg(56, 0) 
0x7f02e76bfaa3: cmp eax, 0x1  reg(56, 0) 
0x7f02e76bfaa6: jz 0x7f02e76bfac8
0x7f02e76bfaa8: cmp eax, 0x2  reg(56, 0) 
0x7f02e76bfaab: jz 0x7f02e76bfac0
0x7f02e76bfaad: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bfaaf: jz 0x7f02e76bfab8
0x7f02e76bfab8: jmp 0x7f02e76a5790
opendnp3::LinkLayerParser::ParseSync()@plt: 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser9ParseSyncEv@plt
0x7f02e76a5790: jmp qword ptr [rip+0x2993b2]
0x7f02e76a5796: push 0x166 
0x7f02e76a579b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ParseSync(): 1f4cbc0 19 1f4cae0 0	_ZN8opendnp315LinkLayerParser9ParseSyncEv
0x7f02e76bef90: push r13  reg(16, 1f4c3f0) 
0x7f02e76bef92: push r12  reg(15, 1f4cd48) 
0x7f02e76bef94: push rbp
0x7f02e76bef95: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bef96: sub rsp, 0x98
0x7f02e76bef9d: mov edx, dword ptr [rdi+0x194]  reg(54, 1f4cae0) 
0x7f02e76befa3: sub edx, dword ptr [rdi+0x198]  reg(54, 19) 
0x7f02e76befa9: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76befb2: mov qword ptr [rsp+0x88], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958398, 19) 
0x7f02e76befba: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76befbc: cmp edx, 0x9  reg(54, 19) 
0x7f02e76befbf: jnbe 0x7f02e76beff0
0x7f02e76beff0: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76beff3: lea rsi, ptr [rsp+0xc]  reg(4, 19) 
0x7f02e76beff8: lea rdi, ptr [rdi+0x188]  reg(3, 1f4cbc0) 
0x7f02e76befff: mov dword ptr [rsp+0xc], 0x0  mem(7f02e295831c, 203a656300000000) 
0x7f02e76bf007: call 0x7f02e76a8250
opendnp3::ShiftableBuffer::Sync(unsigned int&)@plt: 1f4cd48 7f02e295831c 19 0	_ZN8opendnp315ShiftableBuffer4SyncERj@plt
0x7f02e76a8250: jmp qword ptr [rip+0x297e52]
0x7f02e76a8256: push 0x412 
0x7f02e76a825b: jmp 0x7f02e76a4120
opendnp3::ShiftableBuffer::Sync(unsigned int&): 1f4cd48 7f02e295831c 19 0	_ZN8opendnp315ShiftableBuffer4SyncERj
0x7f02e76c1150: push r12  reg(15, 1f4cd48) 
0x7f02e76c1152: push rbp
0x7f02e76c1153: mov rbp, rsi
0x7f02e76c1156: push rbx  reg(7, 1f4cbc0) 
0x7f02e76c1157: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cd48) 
0x7f02e76c115a: sub rsp, 0x20
0x7f02e76c115e: mov esi, dword ptr [rdi+0x10]  reg(47, 7f02e295831c) 
0x7f02e76c1161: mov edx, dword ptr [rdi+0xc]  reg(54, 19) 
0x7f02e76c1164: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76c116d: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29582e8, 72756f532031203a) 
0x7f02e76c1172: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76c1174: mov r12, rsp  reg(15, 1f4cd48) 
0x7f02e76c1177: sub edx, esi  reg(54, 19)  reg(47, 0) 
0x7f02e76c1179: cmp edx, 0x1  reg(54, 19) 
0x7f02e76c117c: jnbe 0x7f02e76c119e
0x7f02e76c119e: add rsi, qword ptr [rbx]  reg(4, 0) 
0x7f02e76c11a1: mov rdi, r12  reg(3, 1f4cd48)  reg(15, 7f02e29582d0) 
0x7f02e76c11a4: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e29582d0 1f4cc20 19 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76c11a9: mov rax, qword ptr [rsp+0x8]  reg(10, 0) 
0x7f02e76c11ae: cmp byte ptr [rax], 0x5  mem(1f4cc20, 1006444126405) 
0x7f02e76c11b1: jnz 0x7f02e76c1180
0x7f02e76c11b3: mov esi, dword ptr [rbx+0x10]  reg(47, 1f4cc20) 
0x7f02e76c11b6: mov edx, dword ptr [rbx+0xc]  reg(54, 19) 
0x7f02e76c11b9: mov rdi, r12  reg(3, 7f02e29582d0)  reg(15, 7f02e29582d0) 
0x7f02e76c11bc: sub edx, esi  reg(54, 19)  reg(47, 0) 
0x7f02e76c11be: add rsi, qword ptr [rbx]  reg(4, 0) 
0x7f02e76c11c1: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e29582d0 1f4cc20 19 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76c11c6: mov rax, qword ptr [rsp+0x8]  reg(10, 1f4cc20) 
0x7f02e76c11cb: cmp byte ptr [rax+0x1], 0x64  mem(1f4cc21, d600010064441264) 
0x7f02e76c11cf: jnz 0x7f02e76c1180
0x7f02e76c11d1: mov eax, 0x1  reg(56, 1f4cc20) 
0x7f02e76c11d6: mov rcx, qword ptr [rsp+0x18]  reg(9, 0) 
0x7f02e76c11db: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76c11e4: jnz 0x7f02e76c11f4
0x7f02e76c11e6: add rsp, 0x20
0x7f02e76c11ea: pop rbx  reg(7, 1f4cd48) 
0x7f02e76c11eb: pop rbp
0x7f02e76c11ec: pop r12  reg(15, 7f02e29582d0) 
0x7f02e76c11ee: ret 
0x7f02e76bf00c: mov ebp, eax
0x7f02e76bf00e: mov eax, dword ptr [rsp+0xc]  reg(56, 1) 
0x7f02e76bf012: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bf014: jnz 0x7f02e76bf020
0x7f02e76bf016: movzx eax, bpl  reg(56, 0) 
0x7f02e76bf01a: jmp 0x7f02e76befc1
0x7f02e76befc1: mov rcx, qword ptr [rsp+0x88]  reg(9, 0) 
0x7f02e76befc9: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76befd2: jnz 0x7f02e76bf07e
0x7f02e76befd8: add rsp, 0x98
0x7f02e76befdf: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76befe0: pop rbp
0x7f02e76befe1: pop r12  reg(15, 1f4cd48) 
0x7f02e76befe3: pop r13  reg(16, 1f4c3f0) 
0x7f02e76befe5: ret 
0x7f02e76bfaea: cmp ebp, eax
0x7f02e76bfaec: mov dword ptr [rbx+0x44], eax  reg(56, 1)  mem(1f4cc04, 0) 
0x7f02e76bfaef: jnz 0x7f02e76bfae0
0x7f02e76bfae0: mov ebp, eax
0x7f02e76bfae2: mov rdi, rbx  reg(3, 7f02e29582d0)  reg(7, 1f4cbc0) 
0x7f02e76bfae5: call 0x7f02e76a4130
opendnp3::LinkLayerParser::ParseOneStep()@plt: 1f4cbc0 1f4cc20 19 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv@plt
0x7f02e76a4130: jmp qword ptr [rip+0x299ee2]
opendnp3::LinkLayerParser::ParseOneStep(): 1f4cbc0 1f4cc20 19 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv
0x7f02e76bfaa0: mov eax, dword ptr [rdi+0x44]  reg(56, 1) 
0x7f02e76bfaa3: cmp eax, 0x1  reg(56, 1) 
0x7f02e76bfaa6: jz 0x7f02e76bfac8
0x7f02e76bfac8: jmp 0x7f02e76a5df0
opendnp3::LinkLayerParser::ParseHeader()@plt: 1f4cbc0 1f4cc20 19 0	_ZN8opendnp315LinkLayerParser11ParseHeaderEv@plt
0x7f02e76a5df0: jmp qword ptr [rip+0x299082]
0x7f02e76a5df6: push 0x1cc 
0x7f02e76a5dfb: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ParseHeader(): 1f4cbc0 1f4cc20 19 0	_ZN8opendnp315LinkLayerParser11ParseHeaderEv
0x7f02e76bfa50: mov edx, dword ptr [rdi+0x194]  reg(54, 19) 
0x7f02e76bfa56: sub edx, dword ptr [rdi+0x198]  reg(54, 19) 
0x7f02e76bfa5c: mov eax, 0x1  reg(56, 1) 
0x7f02e76bfa61: cmp edx, 0x9  reg(54, 19) 
0x7f02e76bfa64: jnbe 0x7f02e76bfa70
0x7f02e76bfa70: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bfa71: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bfa74: call 0x7f02e76a65c0
opendnp3::LinkLayerParser::ReadHeader()@plt: 1f4cbc0 1f4cc20 19 0	_ZN8opendnp315LinkLayerParser10ReadHeaderEv@plt
0x7f02e76a65c0: jmp qword ptr [rip+0x298c9a]
0x7f02e76a65c6: push 0x249 
0x7f02e76a65cb: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ReadHeader(): 1f4cbc0 1f4cc20 19 0	_ZN8opendnp315LinkLayerParser10ReadHeaderEv
0x7f02e76bf970: push rbp
0x7f02e76bf971: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf972: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf975: sub rsp, 0x28
0x7f02e76bf979: mov esi, dword ptr [rdi+0x198]  reg(47, 1f4cc20) 
0x7f02e76bf97f: mov edx, dword ptr [rdi+0x194]  reg(54, 19) 
0x7f02e76bf985: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f02e76bf98e: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958398, d533a0ca891b2d00) 
0x7f02e76bf993: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bf995: sub edx, esi  reg(54, 19)  reg(47, 0) 
0x7f02e76bf997: add rsi, qword ptr [rdi+0x188]  reg(4, 0) 
0x7f02e76bf99e: mov rdi, rsp  reg(3, 1f4cbc0) 
0x7f02e76bf9a1: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e2958380 1f4cc20 19 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76bf9a6: mov rsi, qword ptr [rsp+0x8]  reg(4, 1f4cc20) 
0x7f02e76bf9ab: lea rdi, ptr [rbx+0x3c]  reg(3, 7f02e2958380) 
0x7f02e76bf9af: call 0x7f02e76a5940
opendnp3::LinkHeader::Read(unsigned char const*)@plt: 1f4cbfc 1f4cc20 19 0	_ZN8opendnp310LinkHeader4ReadEPKh@plt
0x7f02e76a5940: jmp qword ptr [rip+0x2992da]
0x7f02e76a5946: push 0x181 
0x7f02e76a594b: jmp 0x7f02e76a4120
opendnp3::LinkHeader::Read(unsigned char const*): 1f4cbfc 1f4cc20 19 0	_ZN8opendnp310LinkHeader4ReadEPKh
0x7f02e76be600: movzx eax, byte ptr [rsi+0x2]  reg(56, 0) 
0x7f02e76be604: mov byte ptr [rdi], al  reg(27, 12)  mem(1f4cbfc, 5) 
0x7f02e76be606: movzx eax, byte ptr [rsi+0x5]  reg(56, 12) 
0x7f02e76be60a: movzx edx, byte ptr [rsi+0x4]  reg(54, 19) 
0x7f02e76be60e: shl eax, 0x8  reg(56, 0) 
0x7f02e76be611: or eax, edx  reg(56, 0)  reg(54, 64) 
0x7f02e76be613: mov word ptr [rdi+0x4], ax  reg(29, 64)  mem(1f4cc00, 100000000) 
0x7f02e76be617: movzx eax, byte ptr [rsi+0x7]  reg(56, 64) 
0x7f02e76be61b: movzx edx, byte ptr [rsi+0x6]  reg(54, 64) 
0x7f02e76be61f: shl eax, 0x8  reg(56, 0) 
0x7f02e76be622: or eax, edx  reg(56, 0)  reg(54, 1) 
0x7f02e76be624: mov word ptr [rdi+0x2], ax  reg(29, 1)  mem(1f4cbfe, 1000000640000) 
0x7f02e76be628: movzx eax, byte ptr [rsi+0x3]  reg(56, 1) 
0x7f02e76be62c: mov byte ptr [rdi+0x6], al  reg(27, 44)  mem(1f4cc02, 10000) 
0x7f02e76be62f: ret 
0x7f02e76bf9b4: mov esi, dword ptr [rbx+0x198]  reg(47, 1f4cc20) 
0x7f02e76bf9ba: mov edx, dword ptr [rbx+0x194]  reg(54, 1) 
0x7f02e76bf9c0: mov rdi, rsp  reg(3, 1f4cbfc) 
0x7f02e76bf9c3: sub edx, esi  reg(54, 19)  reg(47, 0) 
0x7f02e76bf9c5: add rsi, qword ptr [rbx+0x188]  reg(4, 0) 
0x7f02e76bf9cc: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e2958380 1f4cc20 19 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76bf9d1: mov rdi, qword ptr [rsp+0x8]  reg(3, 7f02e2958380) 
0x7f02e76bf9d6: mov esi, 0x8  reg(47, 1f4cc20) 
0x7f02e76bf9db: call 0x7f02e76a5450
opendnp3::CRC::IsCorrectCRC(unsigned char const*, unsigned int)@plt: 1f4cc20 8 19 0	_ZN8opendnp33CRC12IsCorrectCRCEPKhj@plt
0x7f02e76a5450: jmp qword ptr [rip+0x299552]
0x7f02e76a5456: push 0x132 
0x7f02e76a545b: jmp 0x7f02e76a4120
opendnp3::CRC::IsCorrectCRC(unsigned char const*, unsigned int): 1f4cc20 8 19 0	_ZN8opendnp33CRC12IsCorrectCRCEPKhj
0x7f02e76bc200: push rbp
0x7f02e76bc201: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bc202: mov ebx, esi  reg(53, 1f4cbc0)  reg(47, 8) 
0x7f02e76bc204: mov rbp, rdi
0x7f02e76bc207: sub rsp, 0x8
0x7f02e76bc20b: call 0x7f02e76a4590
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int)@plt: 1f4cc20 8 19 0	_ZN8opendnp33CRC7CalcCrcEPKhj@plt
0x7f02e76a4590: jmp qword ptr [rip+0x299cb2]
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int): 1f4cc20 8 19 0	_ZN8opendnp33CRC7CalcCrcEPKhj
0x7f02e76bc180: test esi, esi  reg(47, 8)  reg(47, 8) 
0x7f02e76bc182: mov eax, 0xffffffff  reg(56, 44) 
0x7f02e76bc187: jz 0x7f02e76bc1b9
0x7f02e76bc189: lea eax, ptr [rsi-0x1]  reg(56, ffffffff) 
0x7f02e76bc18c: mov rcx, qword ptr [rip+0x280ee5]  reg(9, 0) 
0x7f02e76bc193: lea rsi, ptr [rdi+rax*1+0x1]  reg(4, 8) 
0x7f02e76bc198: xor eax, eax  reg(56, 7)  reg(56, 7) 
0x7f02e76bc19a: nop word ptr [rax+rax*1], ax
0x7f02e76bc1a0: mov edx, eax  reg(54, 19)  reg(56, 0) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 0) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc20) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 0)  reg(28, 0) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 5)  reg(33, 5) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 0) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc21)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 5)  reg(56, ef26) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, ef26) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc21) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, ef26)  reg(28, ef26) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, ef42)  reg(33, ef42) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, ef) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc22)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 42)  reg(56, 3f0d) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 3f0d) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc22) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 3f0d)  reg(28, 3f0d) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 3f1f)  reg(33, 3f1f) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 3f) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc23)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 1f)  reg(56, ce47) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, ce47) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc23) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, ce47)  reg(28, ce47) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, ce03)  reg(33, ce03) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, ce) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc24)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 3)  reg(56, 5a2c) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 5a2c) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc24) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 5a2c)  reg(28, 5a2c) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 5a48)  reg(33, 5a48) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 5a) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc25)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 48)  reg(56, ac8d) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, ac8d) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc25) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, ac8d)  reg(28, ac8d) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, ac8d)  reg(33, ac8d) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, ac) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc26)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 8d)  reg(56, b6bf) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, b6bf) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc26) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, b6bf)  reg(28, b6bf) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, b6be)  reg(33, b6be) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, b6) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc27)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, be)  reg(56, 7783) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 7783) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc27) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 7783)  reg(28, 7783) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 7783)  reg(33, 7783) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 77) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc28)  reg(4, 1f4cc28) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1b7: not eax
0x7f02e76bc1b9: ret 
0x7f02e76bc210: mov edi, ebx  reg(45, 1f4cc28)  reg(53, 8) 
0x7f02e76bc212: add rdi, rbp  reg(3, 8) 
0x7f02e76bc215: movzx edx, byte ptr [rdi+0x1]  reg(54, 83) 
0x7f02e76bc219: movzx ecx, byte ptr [rdi]  reg(55, 7f02e79401e0) 
0x7f02e76bc21c: shl edx, 0x8  reg(54, 3) 
0x7f02e76bc21f: or edx, ecx  reg(54, 300)  reg(55, d6) 
0x7f02e76bc221: cmp dx, ax  reg(35, 3d6)  reg(29, ffff03d6) 
0x7f02e76bc224: setz al  reg(27, ffff03d6) 
0x7f02e76bc227: add rsp, 0x8
0x7f02e76bc22b: pop rbx  reg(7, 8) 
0x7f02e76bc22c: pop rbp
0x7f02e76bc22d: ret 
0x7f02e76bf9e0: test al, al  reg(27, ffff0301)  reg(27, ffff0301) 
0x7f02e76bf9e2: jz 0x7f02e76bfa08
0x7f02e76bf9e4: mov rdi, rbx  reg(3, 1f4cc28)  reg(7, 1f4cbc0) 
0x7f02e76bf9e7: call 0x7f02e76a6d10
opendnp3::LinkLayerParser::ValidateHeaderParameters()@plt: 1f4cbc0 1f4cc28 3d6 d6	_ZN8opendnp315LinkLayerParser24ValidateHeaderParametersEv@plt
0x7f02e76a6d10: jmp qword ptr [rip+0x2988f2]
0x7f02e76a6d16: push 0x2be 
0x7f02e76a6d1b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ValidateHeaderParameters(): 1f4cbc0 1f4cc28 3d6 d6	_ZN8opendnp315LinkLayerParser24ValidateHeaderParametersEv
0x7f02e76bf740: push r14  reg(17, 7f02e29599c0) 
0x7f02e76bf742: push r13  reg(16, 1f4c3f0) 
0x7f02e76bf744: push r12  reg(15, 1f4cd48) 
0x7f02e76bf746: push rbp
0x7f02e76bf747: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf748: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf74b: sub rsp, 0x90
0x7f02e76bf752: mov rax, qword ptr fs:[0x28]  reg(10, ffff0301) 
0x7f02e76bf75b: mov qword ptr [rsp+0x88], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958348, 0) 
0x7f02e76bf763: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bf765: cmp byte ptr [rdi+0x3c], 0x4  mem(1f4cbfc, 44006400010012) 
0x7f02e76bf769: jnbe 0x7f02e76bf7b8
0x7f02e76bf7b8: call 0x7f02e76a7af0
opendnp3::LinkLayerParser::ValidateFunctionCode()@plt: 1f4cbc0 1f4cc28 3d6 d6	_ZN8opendnp315LinkLayerParser20ValidateFunctionCodeEv@plt
0x7f02e76a7af0: jmp qword ptr [rip+0x298202]
0x7f02e76a7af6: push 0x39c 
0x7f02e76a7afb: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ValidateFunctionCode(): 1f4cbc0 1f4cc28 3d6 d6	_ZN8opendnp315LinkLayerParser20ValidateFunctionCodeEv
0x7f02e76bf460: push r12  reg(15, 1f4cd48) 
0x7f02e76bf462: push rbp
0x7f02e76bf463: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf464: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf467: sub rsp, 0x90
0x7f02e76bf46e: movzx edi, byte ptr [rdi+0x42]  reg(45, 1f4cbc0) 
0x7f02e76bf472: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76bf47b: mov qword ptr [rsp+0x88], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958298, 0) 
0x7f02e76bf483: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bf485: test dil, 0x40  reg(46, 44) 
0x7f02e76bf489: jz 0x7f02e76bf508
0x7f02e76bf48b: and edi, 0x4f  reg(45, 44) 
0x7f02e76bf48e: call 0x7f02e76a5740
opendnp3::LinkFunctionFromType(unsigned char)@plt: 44 1f4cc28 3d6 d6	_ZN8opendnp320LinkFunctionFromTypeEh@plt
0x7f02e76a5740: jmp qword ptr [rip+0x2993da]
0x7f02e76a5746: push 0x161 
0x7f02e76a574b: jmp 0x7f02e76a4120
opendnp3::LinkFunctionFromType(unsigned char): 44 1f4cc28 3d6 d6	_ZN8opendnp320LinkFunctionFromTypeEh
0x7f02e76bbb70: cmp dil, 0x49  reg(46, 44) 
0x7f02e76bbb74: jnbe 0x7f02e76bbc10
0x7f02e76bbb7a: lea rax, ptr [rip+0x52c6b]  reg(10, 0) 
0x7f02e76bbb81: movzx edx, dil  reg(54, 3d6)  reg(46, 44) 
0x7f02e76bbb85: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 44) 
0x7f02e76bbb89: add rax, rdx  reg(10, 7f02e770e7ec)  reg(8, fffffffffffad3d4) 
0x7f02e76bbb8c: jmp rax
0x7f02e76bbbc0: mov eax, 0x44  reg(56, 7f02e76bbbc0) 
0x7f02e76bbbc5: ret 
0x7f02e76bf493: lea ecx, ptr [rax-0x40]  reg(55, d6) 
0x7f02e76bf496: cmp cl, 0x9  reg(30, 4) 
0x7f02e76bf499: jnbe 0x7f02e76bf5c0
0x7f02e76bf49f: mov eax, 0x1  reg(56, 44) 
0x7f02e76bf4a4: shl rax, cl  reg(10, 1)  reg(30, 4) 
0x7f02e76bf4a7: test eax, 0x211  reg(56, 10) 
0x7f02e76bf4ac: jz 0x7f02e76bf640
0x7f02e76bf4b2: xor edx, edx  reg(54, fffffffffffad3d4)  reg(54, fffffffffffad3d4) 
0x7f02e76bf4b4: movzx eax, byte ptr [rbx+0x42]  reg(56, 10) 
0x7f02e76bf4b8: shr al, 0x4  reg(27, 44) 
0x7f02e76bf4bb: and eax, 0x1  reg(56, 4) 
0x7f02e76bf4be: cmp dl, al  reg(33, 0)  reg(27, 0) 
0x7f02e76bf4c0: jz 0x7f02e76bf530
0x7f02e76bf530: mov eax, 0x1  reg(56, 0) 
0x7f02e76bf535: jmp 0x7f02e76bf4e2
0x7f02e76bf4e2: mov rsi, qword ptr [rsp+0x88]  reg(4, 1f4cc28) 
0x7f02e76bf4ea: xor rsi, qword ptr fs:[0x28]  reg(4, d533a0ca891b2d00) 
0x7f02e76bf4f3: jnz 0x7f02e76bf736
0x7f02e76bf4f9: add rsp, 0x90
0x7f02e76bf500: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bf501: pop rbp
0x7f02e76bf502: pop r12  reg(15, 1f4cd48) 
0x7f02e76bf504: ret 
0x7f02e76bf7bd: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76bf7bf: mov ebp, eax
0x7f02e76bf7c1: jz 0x7f02e76bf786
0x7f02e76bf7c3: movzx eax, byte ptr [rbx+0x3c]  reg(56, 1) 
0x7f02e76bf7c7: lea r12d, ptr [rax-0x5]  reg(73, 1f4cd48) 
0x7f02e76bf7cb: movzx r13d, r12b  reg(76, 1f4c3f0)  reg(71, d) 
0x7f02e76bf7cf: mov edi, r13d  reg(45, 44)  reg(76, d) 
0x7f02e76bf7d2: call 0x7f02e76a7120
opendnp3::LinkFrame::CalcFrameSize(unsigned char)@plt: d 0 0 4	_ZN8opendnp39LinkFrame13CalcFrameSizeEh@plt
0x7f02e76a7120: jmp qword ptr [rip+0x2986ea]
0x7f02e76a7126: push 0x2ff 
0x7f02e76a712b: jmp 0x7f02e76a4120
opendnp3::LinkFrame::CalcFrameSize(unsigned char): d 0 0 4	_ZN8opendnp39LinkFrame13CalcFrameSizeEh
0x7f02e76bdf40: sub rsp, 0x8
0x7f02e76bdf44: movzx edi, dil  reg(45, d)  reg(46, d) 
0x7f02e76bdf48: call 0x7f02e76a56c0
opendnp3::LinkFrame::CalcUserDataSize(unsigned char)@plt: d 0 0 4	_ZN8opendnp39LinkFrame16CalcUserDataSizeEh@plt
0x7f02e76a56c0: jmp qword ptr [rip+0x29941a]
opendnp3::LinkFrame::CalcUserDataSize(unsigned char): d 0 0 4	_ZN8opendnp39LinkFrame16CalcUserDataSizeEh
0x7f02e76bdf10: xor eax, eax  reg(56, 12)  reg(56, 12) 
0x7f02e76bdf12: test dil, dil  reg(46, d)  reg(46, d) 
0x7f02e76bdf15: jz 0x7f02e76bdf31
0x7f02e76bdf17: mov eax, edi  reg(56, 0)  reg(45, d) 
0x7f02e76bdf19: shr al, 0x4  reg(27, d) 
0x7f02e76bdf1c: movzx eax, al  reg(56, 0)  reg(27, 0) 
0x7f02e76bdf1f: lea eax, ptr [rax+rax*8]  reg(56, 0) 
0x7f02e76bdf22: add eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bdf24: and edi, 0xf  reg(45, d) 
0x7f02e76bdf27: jz 0x7f02e76bdf31
0x7f02e76bdf29: movzx edi, dil  reg(45, d)  reg(46, d) 
0x7f02e76bdf2d: lea eax, ptr [rax+rdi*1+0x2]  reg(56, 0) 
0x7f02e76bdf31: ret 
0x7f02e76bdf4d: add rsp, 0x8
0x7f02e76bdf51: add eax, 0xa  reg(56, f) 
0x7f02e76bdf54: ret 
0x7f02e76bf7d7: movzx edi, byte ptr [rbx+0x42]  reg(45, d) 
0x7f02e76bf7db: mov dword ptr [rbx+0x48], eax  reg(56, 19)  mem(1f4cc08, 0) 
0x7f02e76bf7de: and edi, 0x4f  reg(45, 44) 
0x7f02e76bf7e1: call 0x7f02e76a5740
opendnp3::LinkFunctionFromType(unsigned char)@plt: 44 0 0 4	_ZN8opendnp320LinkFunctionFromTypeEh@plt
0x7f02e76a5740: jmp qword ptr [rip+0x2993da]
opendnp3::LinkFunctionFromType(unsigned char): 44 0 0 4	_ZN8opendnp320LinkFunctionFromTypeEh
0x7f02e76bbb70: cmp dil, 0x49  reg(46, 44) 
0x7f02e76bbb74: jnbe 0x7f02e76bbc10
0x7f02e76bbb7a: lea rax, ptr [rip+0x52c6b]  reg(10, 19) 
0x7f02e76bbb81: movzx edx, dil  reg(54, 0)  reg(46, 44) 
0x7f02e76bbb85: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 44) 
0x7f02e76bbb89: add rax, rdx  reg(10, 7f02e770e7ec)  reg(8, fffffffffffad3d4) 
0x7f02e76bbb8c: jmp rax
0x7f02e76bbbc0: mov eax, 0x44  reg(56, 7f02e76bbbc0) 
0x7f02e76bbbc5: ret 
0x7f02e76bf7e6: mov r14d, eax  reg(79, 7f02e29599c0)  reg(56, 44) 
0x7f02e76bf7e9: lea eax, ptr [r14-0x43]  reg(56, 44) 
0x7f02e76bf7ed: cmp al, 0x1  reg(27, 1) 
0x7f02e76bf7ef: setbe cl  reg(30, 4) 
0x7f02e76bf7f2: test r12b, r12b  reg(71, d)  reg(71, d) 
0x7f02e76bf7f5: setz dl  reg(33, fffffffffffad3d4) 
0x7f02e76bf7f8: test cl, dl  reg(30, 1)  reg(33, fffffffffffad300) 
0x7f02e76bf7fa: jnz 0x7f02e76bf8f0
0x7f02e76bf800: test r12b, r12b  reg(71, d)  reg(71, d) 
0x7f02e76bf803: jz 0x7f02e76bf8e0
0x7f02e76bf809: cmp al, 0x1  reg(27, 1) 
0x7f02e76bf80b: jbe 0x7f02e76bf8e0
0x7f02e76bf8e0: mov edi, r13d  reg(45, 44)  reg(76, d) 
0x7f02e76bf8e3: call 0x7f02e76a7120
opendnp3::LinkFrame::CalcFrameSize(unsigned char)@plt: d 0 fffffffffffad300 1	_ZN8opendnp39LinkFrame13CalcFrameSizeEh@plt
0x7f02e76a7120: jmp qword ptr [rip+0x2986ea]
opendnp3::LinkFrame::CalcFrameSize(unsigned char): d 0 fffffffffffad300 1	_ZN8opendnp39LinkFrame13CalcFrameSizeEh
0x7f02e76bdf40: sub rsp, 0x8
0x7f02e76bdf44: movzx edi, dil  reg(45, d)  reg(46, d) 
0x7f02e76bdf48: call 0x7f02e76a56c0
opendnp3::LinkFrame::CalcUserDataSize(unsigned char)@plt: d 0 fffffffffffad300 1	_ZN8opendnp39LinkFrame16CalcUserDataSizeEh@plt
0x7f02e76a56c0: jmp qword ptr [rip+0x29941a]
opendnp3::LinkFrame::CalcUserDataSize(unsigned char): d 0 fffffffffffad300 1	_ZN8opendnp39LinkFrame16CalcUserDataSizeEh
0x7f02e76bdf10: xor eax, eax  reg(56, 1)  reg(56, 1) 
0x7f02e76bdf12: test dil, dil  reg(46, d)  reg(46, d) 
0x7f02e76bdf15: jz 0x7f02e76bdf31
0x7f02e76bdf17: mov eax, edi  reg(56, 0)  reg(45, d) 
0x7f02e76bdf19: shr al, 0x4  reg(27, d) 
0x7f02e76bdf1c: movzx eax, al  reg(56, 0)  reg(27, 0) 
0x7f02e76bdf1f: lea eax, ptr [rax+rax*8]  reg(56, 0) 
0x7f02e76bdf22: add eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bdf24: and edi, 0xf  reg(45, d) 
0x7f02e76bdf27: jz 0x7f02e76bdf31
0x7f02e76bdf29: movzx edi, dil  reg(45, d)  reg(46, d) 
0x7f02e76bdf2d: lea eax, ptr [rax+rdi*1+0x2]  reg(56, 0) 
0x7f02e76bdf31: ret 
0x7f02e76bdf4d: add rsp, 0x8
0x7f02e76bdf51: add eax, 0xa  reg(56, f) 
0x7f02e76bdf54: ret 
0x7f02e76bf8e8: mov dword ptr [rbx+0x48], eax  reg(56, 19)  mem(1f4cc08, 19) 
0x7f02e76bf8eb: jmp 0x7f02e76bf788
0x7f02e76bf788: mov rdx, qword ptr [rsp+0x88]  reg(8, fffffffffffad300) 
0x7f02e76bf790: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76bf799: mov eax, ebp  reg(56, 19) 
0x7f02e76bf79b: jnz 0x7f02e76bf961
0x7f02e76bf7a1: add rsp, 0x90
0x7f02e76bf7a8: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bf7a9: pop rbp
0x7f02e76bf7aa: pop r12  reg(15, d) 
0x7f02e76bf7ac: pop r13  reg(16, d) 
0x7f02e76bf7ae: pop r14  reg(17, 44) 
0x7f02e76bf7b0: ret 
0x7f02e76bf9ec: mov rcx, qword ptr [rsp+0x18]  reg(9, 1) 
0x7f02e76bf9f1: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bf9fa: jnz 0x7f02e76bfa46
0x7f02e76bf9fc: add rsp, 0x28
0x7f02e76bfa00: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bfa01: pop rbp
0x7f02e76bfa02: ret 
0x7f02e76bfa79: mov edx, eax  reg(54, 0)  reg(56, 1) 
0x7f02e76bfa7b: mov eax, 0x2  reg(56, 1) 
0x7f02e76bfa80: test dl, dl  reg(33, 1)  reg(33, 1) 
0x7f02e76bfa82: jz 0x7f02e76bfa90
0x7f02e76bfa84: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bfa85: ret 
0x7f02e76bfaea: cmp ebp, eax
0x7f02e76bfaec: mov dword ptr [rbx+0x44], eax  reg(56, 2)  mem(1f4cc04, 1900000001) 
0x7f02e76bfaef: jnz 0x7f02e76bfae0
0x7f02e76bfae0: mov ebp, eax
0x7f02e76bfae2: mov rdi, rbx  reg(3, d)  reg(7, 1f4cbc0) 
0x7f02e76bfae5: call 0x7f02e76a4130
opendnp3::LinkLayerParser::ParseOneStep()@plt: 1f4cbc0 0 1 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv@plt
0x7f02e76a4130: jmp qword ptr [rip+0x299ee2]
opendnp3::LinkLayerParser::ParseOneStep(): 1f4cbc0 0 1 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv
0x7f02e76bfaa0: mov eax, dword ptr [rdi+0x44]  reg(56, 2) 
0x7f02e76bfaa3: cmp eax, 0x1  reg(56, 2) 
0x7f02e76bfaa6: jz 0x7f02e76bfac8
0x7f02e76bfaa8: cmp eax, 0x2  reg(56, 2) 
0x7f02e76bfaab: jz 0x7f02e76bfac0
0x7f02e76bfac0: jmp 0x7f02e76a5c40
opendnp3::LinkLayerParser::ParseBody()@plt: 1f4cbc0 0 1 0	_ZN8opendnp315LinkLayerParser9ParseBodyEv@plt
0x7f02e76a5c40: jmp qword ptr [rip+0x29915a]
0x7f02e76a5c46: push 0x1b1 
0x7f02e76a5c4b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ParseBody(): 1f4cbc0 0 1 0	_ZN8opendnp315LinkLayerParser9ParseBodyEv
0x7f02e76bf410: mov edx, dword ptr [rdi+0x194]  reg(54, 1) 
0x7f02e76bf416: sub edx, dword ptr [rdi+0x198]  reg(54, 19) 
0x7f02e76bf41c: mov eax, 0x2  reg(56, 2) 
0x7f02e76bf421: cmp dword ptr [rdi+0x48], edx  reg(54, 19)  mem(1f4cc08, 19) 
0x7f02e76bf424: jbe 0x7f02e76bf430
0x7f02e76bf430: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf431: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf434: call 0x7f02e76a57f0
opendnp3::LinkLayerParser::ValidateBody()@plt: 1f4cbc0 0 19 0	_ZN8opendnp315LinkLayerParser12ValidateBodyEv@plt
0x7f02e76a57f0: jmp qword ptr [rip+0x299382]
0x7f02e76a57f6: push 0x16c 
0x7f02e76a57fb: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::ValidateBody(): 1f4cbc0 0 19 0	_ZN8opendnp315LinkLayerParser12ValidateBodyEv
0x7f02e76bf1e0: push r15  reg(18, 7f02e2958840) 
0x7f02e76bf1e2: push r14  reg(17, 7f02e29599c0) 
0x7f02e76bf1e4: push r13  reg(16, 1f4c3f0) 
0x7f02e76bf1e6: push r12  reg(15, 1f4cd48) 
0x7f02e76bf1e8: push rbp
0x7f02e76bf1e9: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf1ea: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf1ed: sub rsp, 0xc8
0x7f02e76bf1f4: mov esi, dword ptr [rdi+0x198]  reg(47, 0) 
0x7f02e76bf1fa: mov edx, dword ptr [rdi+0x194]  reg(54, 19) 
0x7f02e76bf200: lea rbp, ptr [rsp+0x30]
0x7f02e76bf205: movzx r12d, byte ptr [rdi+0x3c]  reg(73, 1f4cd48) 
0x7f02e76bf20a: mov rax, qword ptr fs:[0x28]  reg(10, 2) 
0x7f02e76bf213: mov qword ptr [rsp+0xb8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958378, 0) 
0x7f02e76bf21b: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bf21d: sub edx, esi  reg(54, 19)  reg(47, 0) 
0x7f02e76bf21f: add rsi, qword ptr [rdi+0x188]  reg(4, 0) 
0x7f02e76bf226: mov rdi, rbp  reg(3, 1f4cbc0) 
0x7f02e76bf229: sub r12d, 0x5  reg(73, 12) 
0x7f02e76bf22d: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e29582f0 1f4cc20 19 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76bf232: mov rax, qword ptr [rsp+0x38]  reg(10, 0) 
0x7f02e76bf237: mov esi, r12d  reg(47, 1f4cc20)  reg(73, d) 
0x7f02e76bf23a: lea rdi, ptr [rax+0xa]  reg(3, 7f02e29582f0) 
0x7f02e76bf23e: call 0x7f02e76a53d0
opendnp3::LinkFrame::ValidateBodyCRC(unsigned char const*, unsigned int)@plt: 1f4cc2a d 19 0	_ZN8opendnp39LinkFrame15ValidateBodyCRCEPKhj@plt
0x7f02e76a53d0: jmp qword ptr [rip+0x299592]
0x7f02e76a53d6: push 0x12a 
0x7f02e76a53db: jmp 0x7f02e76a4120
opendnp3::LinkFrame::ValidateBodyCRC(unsigned char const*, unsigned int): 1f4cc2a d 19 0	_ZN8opendnp39LinkFrame15ValidateBodyCRCEPKhj
0x7f02e76bdea0: test esi, esi  reg(47, d)  reg(47, d) 
0x7f02e76bdea2: jz 0x7f02e76bdf00
0x7f02e76bdea4: push r13  reg(16, 1f4c3f0) 
0x7f02e76bdea6: push r12  reg(15, d) 
0x7f02e76bdea8: mov r13d, 0x10  reg(76, 1f4c3f0) 
0x7f02e76bdeae: push rbp
0x7f02e76bdeaf: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bdeb0: mov r12, rdi  reg(15, d)  reg(3, 1f4cc2a) 
0x7f02e76bdeb3: mov ebx, esi  reg(53, 1f4cbc0)  reg(47, d) 
0x7f02e76bdeb5: sub rsp, 0x8
0x7f02e76bdeb9: jmp 0x7f02e76bdeca
0x7f02e76bdeca: cmp ebx, 0x10  reg(53, d) 
0x7f02e76bdecd: mov ebp, r13d
0x7f02e76bded0: mov rdi, r12  reg(3, 1f4cc2a)  reg(15, 1f4cc2a) 
0x7f02e76bded3: cmovbe ebp, ebx
0x7f02e76bded6: mov esi, ebp  reg(47, d) 
0x7f02e76bded8: call 0x7f02e76a5450
opendnp3::CRC::IsCorrectCRC(unsigned char const*, unsigned int)@plt: 1f4cc2a d 19 0	_ZN8opendnp33CRC12IsCorrectCRCEPKhj@plt
0x7f02e76a5450: jmp qword ptr [rip+0x299552]
opendnp3::CRC::IsCorrectCRC(unsigned char const*, unsigned int): 1f4cc2a d 19 0	_ZN8opendnp33CRC12IsCorrectCRCEPKhj
0x7f02e76bc200: push rbp
0x7f02e76bc201: push rbx  reg(7, d) 
0x7f02e76bc202: mov ebx, esi  reg(53, d)  reg(47, d) 
0x7f02e76bc204: mov rbp, rdi
0x7f02e76bc207: sub rsp, 0x8
0x7f02e76bc20b: call 0x7f02e76a4590
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int)@plt: 1f4cc2a d 19 0	_ZN8opendnp33CRC7CalcCrcEPKhj@plt
0x7f02e76a4590: jmp qword ptr [rip+0x299cb2]
opendnp3::CRC::CalcCrc(unsigned char const*, unsigned int): 1f4cc2a d 19 0	_ZN8opendnp33CRC7CalcCrcEPKhj
0x7f02e76bc180: test esi, esi  reg(47, d)  reg(47, d) 
0x7f02e76bc182: mov eax, 0xffffffff  reg(56, 1f4cc20) 
0x7f02e76bc187: jz 0x7f02e76bc1b9
0x7f02e76bc189: lea eax, ptr [rsi-0x1]  reg(56, ffffffff) 
0x7f02e76bc18c: mov rcx, qword ptr [rip+0x280ee5]  reg(9, 0) 
0x7f02e76bc193: lea rsi, ptr [rdi+rax*1+0x1]  reg(4, d) 
0x7f02e76bc198: xor eax, eax  reg(56, c)  reg(56, c) 
0x7f02e76bc19a: nop word ptr [rax+rax*1], ax
0x7f02e76bc1a0: mov edx, eax  reg(54, 19)  reg(56, 0) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 0) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc2a) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 0)  reg(28, 0) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, c5)  reg(33, c5) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 0) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc2b)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, c5)  reg(56, 1ac4) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 1ac4) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc2b) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 1ac4)  reg(28, 1ac4) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 1a00)  reg(33, 1a00) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 1a) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc2c)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 0)  reg(56, 1a) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 1a) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc2c) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 1a)  reg(28, 1a) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 9b)  reg(33, 9b) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 0) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc2d)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 9b)  reg(56, b1bc) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, b1bc) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc2d) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, b1bc)  reg(28, b1bc) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, b1bc)  reg(33, b1bc) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, b1) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc2e)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, bc)  reg(56, 1b38) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 1b38) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc2e) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 1b38)  reg(28, 1b38) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 1b38)  reg(33, 1b38) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 1b) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc2f)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 38)  reg(56, 6456) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 6456) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc2f) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 6456)  reg(28, 6456) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 647f)  reg(33, 647f) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 64) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc30)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 7f)  reg(56, b4ed) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, b4ed) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc30) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, b4ed)  reg(28, b4ed) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, b4ef)  reg(33, b4ef) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, b4) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc31)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, ef)  reg(56, a0ea) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, a0ea) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc31) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, a0ea)  reg(28, a0ea) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, a0fd)  reg(33, a0fd) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, a0) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc32)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, fd)  reg(56, 7e29) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 7e29) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc32) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 7e29)  reg(28, 7e29) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 7e28)  reg(33, 7e28) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 7e) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc33)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 28)  reg(56, d658) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, d658) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc33) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, d658)  reg(28, d658) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, d659)  reg(33, d659) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, d6) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc34)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 59)  reg(56, 2834) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 2834) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc34) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 2834)  reg(28, 2834) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 2890)  reg(33, 2890) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 28) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc35)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, 90)  reg(56, 14ff) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 14ff) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc35) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 14ff)  reg(28, 14ff) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 14b3)  reg(33, 14b3) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 14) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc36)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1a0: mov edx, eax  reg(54, b3)  reg(56, 678e) 
0x7f02e76bc1a2: xor dl, byte ptr [rdi]  reg(33, 678e) 
0x7f02e76bc1a4: add rdi, 0x1  reg(3, 1f4cc36) 
0x7f02e76bc1a8: movzx eax, ah  reg(56, 678e)  reg(28, 678e) 
0x7f02e76bc1ab: movzx edx, dl  reg(54, 678e)  reg(33, 678e) 
0x7f02e76bc1ae: xor ax, word ptr [rcx+rdx*2]  reg(29, 67) 
0x7f02e76bc1b2: cmp rdi, rsi  reg(3, 1f4cc37)  reg(4, 1f4cc37) 
0x7f02e76bc1b5: jnz 0x7f02e76bc1a0
0x7f02e76bc1b7: not eax
0x7f02e76bc1b9: ret 
0x7f02e76bc210: mov edi, ebx  reg(45, 1f4cc37)  reg(53, d) 
0x7f02e76bc212: add rdi, rbp  reg(3, d) 
0x7f02e76bc215: movzx edx, byte ptr [rdi+0x1]  reg(54, 8e) 
0x7f02e76bc219: movzx ecx, byte ptr [rdi]  reg(55, 7f02e79401e0) 
0x7f02e76bc21c: shl edx, 0x8  reg(54, 13) 
0x7f02e76bc21f: or edx, ecx  reg(54, 1300)  reg(55, 69) 
0x7f02e76bc221: cmp dx, ax  reg(35, 1369)  reg(29, ffff1369) 
0x7f02e76bc224: setz al  reg(27, ffff1369) 
0x7f02e76bc227: add rsp, 0x8
0x7f02e76bc22b: pop rbx  reg(7, d) 
0x7f02e76bc22c: pop rbp
0x7f02e76bc22d: ret 
0x7f02e76bdedd: test al, al  reg(27, ffff1301)  reg(27, ffff1301) 
0x7f02e76bdedf: jnz 0x7f02e76bdec0
0x7f02e76bdec0: lea eax, ptr [rbp+0x2]  reg(56, ffff1301) 
0x7f02e76bdec3: add r12, rax  reg(15, 1f4cc2a)  reg(10, f) 
0x7f02e76bdec6: sub ebx, ebp  reg(53, d) 
0x7f02e76bdec8: jz 0x7f02e76bdef0
0x7f02e76bdef0: add rsp, 0x8
0x7f02e76bdef4: mov eax, 0x1  reg(56, f) 
0x7f02e76bdef9: pop rbx  reg(7, 0) 
0x7f02e76bdefa: pop rbp
0x7f02e76bdefb: pop r12  reg(15, 1f4cc39) 
0x7f02e76bdefd: pop r13  reg(16, 10) 
0x7f02e76bdeff: ret 
0x7f02e76bf243: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76bf245: mov r12d, eax  reg(73, d)  reg(56, 1) 
0x7f02e76bf248: jz 0x7f02e76bf2b0
0x7f02e76bf24a: mov rsi, rbp  reg(4, 1f4cc37) 
0x7f02e76bf24d: mov rdi, rbx  reg(3, 1f4cc37)  reg(7, 1f4cbc0) 
0x7f02e76bf250: mov dword ptr [rsp+0x30], 0x20  mem(7f02e29582f0, 19) 
0x7f02e76bf258: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4cbc0 7f02e29582f0 1369 69	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76bf25d: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76bf25f: jnz 0x7f02e76bf2f0
0x7f02e76bf2f0: movzx edi, byte ptr [rbx+0x42]  reg(45, 1f4cbc0) 
0x7f02e76bf2f4: movzx edx, byte ptr [rbx+0x3c]  reg(54, 1369) 
0x7f02e76bf2f8: lea r13, ptr [rsp+0x40]  reg(16, 1f4c3f0) 
0x7f02e76bf2fd: movzx r15d, word ptr [rbx+0x3e]  reg(82, 7f02e2958840) 
0x7f02e76bf302: movzx r14d, word ptr [rbx+0x40]  reg(79, 7f02e29599c0) 
0x7f02e76bf307: and edi, 0x4f  reg(45, 44) 
0x7f02e76bf30a: mov dword ptr [rsp+0xc], edx  reg(54, 12)  mem(7f02e29582cc, 445f5245) 
0x7f02e76bf30e: call 0x7f02e76a5740
opendnp3::LinkFunctionFromType(unsigned char)@plt: 44 7f02e29582f0 12 69	_ZN8opendnp320LinkFunctionFromTypeEh@plt
0x7f02e76a5740: jmp qword ptr [rip+0x2993da]
opendnp3::LinkFunctionFromType(unsigned char): 44 7f02e29582f0 12 69	_ZN8opendnp320LinkFunctionFromTypeEh
0x7f02e76bbb70: cmp dil, 0x49  reg(46, 44) 
0x7f02e76bbb74: jnbe 0x7f02e76bbc10
0x7f02e76bbb7a: lea rax, ptr [rip+0x52c6b]  reg(10, 1fe01) 
0x7f02e76bbb81: movzx edx, dil  reg(54, 12)  reg(46, 44) 
0x7f02e76bbb85: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 44) 
0x7f02e76bbb89: add rax, rdx  reg(10, 7f02e770e7ec)  reg(8, fffffffffffad3d4) 
0x7f02e76bbb8c: jmp rax
0x7f02e76bbbc0: mov eax, 0x44  reg(56, 7f02e76bbbc0) 
0x7f02e76bbbc5: ret 
0x7f02e76bf313: mov edi, eax  reg(45, 44)  reg(56, 44) 
0x7f02e76bf315: call 0x7f02e76a8130
opendnp3::LinkFunctionToString(opendnp3::LinkFunction)@plt: 44 7f02e29582f0 fffffffffffad3d4 69	_ZN8opendnp320LinkFunctionToStringENS_12LinkFunctionE@plt
0x7f02e76a8130: jmp qword ptr [rip+0x297ee2]
opendnp3::LinkFunctionToString(opendnp3::LinkFunction): 44 7f02e29582f0 fffffffffffad3d4 69	_ZN8opendnp320LinkFunctionToStringENS_12LinkFunctionE
0x7f02e76bbc20: cmp dil, 0x49  reg(46, 44) 
0x7f02e76bbc24: jnbe 0x7f02e76bbcd0
0x7f02e76bbc2a: lea rax, ptr [rip+0x52ce3]  reg(10, 44) 
0x7f02e76bbc31: movzx edx, dil  reg(54, fffffffffffad3d4)  reg(46, 44) 
0x7f02e76bbc35: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 44) 
0x7f02e76bbc39: add rax, rdx  reg(10, 7f02e770e914)  reg(8, fffffffffffad35c) 
0x7f02e76bbc3c: jmp rax
0x7f02e76bbc70: lea rax, ptr [rip+0x52e08]  reg(10, 7f02e76bbc70) 
0x7f02e76bbc77: ret 
0x7f02e76bf31a: sub rsp, 0x8
0x7f02e76bf31e: lea r8, ptr [rip+0x4fffb]  reg(11, 0) 
0x7f02e76bf325: mov r9, rax  reg(12, 0)  reg(10, 7f02e770ea7f) 
0x7f02e76bf328: mov edx, dword ptr [rsp+0x14]  reg(54, fffffffffffad35c) 
0x7f02e76bf32c: mov rdi, r13  reg(3, 44)  reg(16, 7f02e2958300) 
0x7f02e76bf32f: mov ecx, 0x78  reg(55, 69) 
0x7f02e76bf334: mov esi, 0x78  reg(47, 7f02e29582f0) 
0x7f02e76bf339: xor eax, eax  reg(56, 7f02e770ea7f)  reg(56, 7f02e770ea7f) 
0x7f02e76bf33b: push rdx  reg(8, 12) 
0x7f02e76bf33c: push r15  reg(18, 1) 
0x7f02e76bf33e: mov edx, 0x1  reg(54, 12) 
0x7f02e76bf343: push r14  reg(17, 64) 
0x7f02e76bf345: call 0x7f02e76a5330
__snprintf_chk@plt: 7f02e2958300 78 1 78	__snprintf_chk@plt
0x7f02e76a5330: jmp qword ptr [rip+0x2995e2]
0x7f02e76bf34a: lea rdx, ptr [rip+0x50167]  reg(8, 7f02e2958342) 
0x7f02e76bf351: mov dword ptr [rsp+0x50], 0x20  mem(7f02e29582f0, 20) 
0x7f02e76bf359: mov rcx, r13  reg(9, 7fffffbd)  reg(16, 7f02e2958300) 
0x7f02e76bf35c: add rsp, 0x20
0x7f02e76bf360: mov rsi, rbp  reg(4, 0) 
0x7f02e76bf363: mov rdi, rbx  reg(3, 7f02e2958050)  reg(7, 1f4cbc0) 
0x7f02e76bf366: call 0x7f02e76a5270
openpal::Logger::Log(openpal::LogFilters const&, char const*, char const*)@plt: 1f4cbc0 7f02e29582f0 7f02e770f4b8 7f02e2958300	_ZN7openpal6Logger3LogERKNS_10LogFiltersEPKcS5_@plt
0x7f02e76a5270: jmp qword ptr [rip+0x299642]
opendnp3::LogFlagToString(int): 20 0 6 7f02e2957fa0	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 20) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 20) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c121a: jnle 0x7f02e76c1250
0x7f02e76c1250: cmp edi, 0x20  reg(45, 20) 
0x7f02e76c1253: jz 0x7f02e76c12a8
0x7f02e76c12a8: lea rax, ptr [rip+0x4f4e0]  reg(10, 7f02e771077f) 
0x7f02e76c12af: ret 
memcpy: 7f02dc001751 7f02e7bdc261 2 7f02dc001750	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc001750	dlsym@plt
memcpy: 7f02dc001753 7f02e2957f2b d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc001760 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc001762 7f02e771078f 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc001769 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc00176a 1f4c380 6 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 0	dlsym@plt
memcpy: 7f02dc001770 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc001773 7f02e2958300 42 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 42 0	dlsym@plt
memcpy: 7f02dc0016e0 7f02dc001750 65 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 65 7f02dc000020	dlsym@plt
0x7f02e76bf36b: jmp 0x7f02e76bf265
0x7f02e76bf265: mov rsi, rbp  reg(4, 0) 
0x7f02e76bf268: mov rdi, rbx  reg(3, 7f02e2958200)  reg(7, 1f4cbc0) 
0x7f02e76bf26b: mov dword ptr [rsp+0x30], 0x40  mem(7f02e29582f0, 20) 
0x7f02e76bf273: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4cbc0 7f02e29582f0 7f02e7401c60 7f02e2957ef0	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76bf278: test al, al  reg(27, 1fe00)  reg(27, 1fe00) 
0x7f02e76bf27a: mov r13d, eax  reg(76, 7f02e2958300)  reg(56, 1fe00) 
0x7f02e76bf27d: jnz 0x7f02e76bf370
0x7f02e76bf283: mov rcx, qword ptr [rsp+0xb8]  reg(9, 7f02e2957ef0) 
0x7f02e76bf28b: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bf294: mov eax, r12d  reg(56, 1fe00)  reg(73, 1) 
0x7f02e76bf297: jnz 0x7f02e76bf3e4
0x7f02e76bf29d: add rsp, 0xc8
0x7f02e76bf2a4: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bf2a5: pop rbp
0x7f02e76bf2a6: pop r12  reg(15, 1) 
0x7f02e76bf2a8: pop r13  reg(16, 1fe00) 
0x7f02e76bf2aa: pop r14  reg(17, 64) 
0x7f02e76bf2ac: pop r15  reg(18, 1) 
0x7f02e76bf2ae: ret 
0x7f02e76bf439: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76bf43b: mov rdi, rbx  reg(3, 1f4cbc0)  reg(7, 1f4cbc0) 
0x7f02e76bf43e: jz 0x7f02e76bf450
0x7f02e76bf440: call 0x7f02e76a6c50
opendnp3::LinkLayerParser::TransferUserData()@plt: 1f4cbc0 7f02e29582f0 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser16TransferUserDataEv@plt
0x7f02e76a6c50: jmp qword ptr [rip+0x298952]
0x7f02e76a6c56: push 0x2b2 
0x7f02e76a6c5b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::TransferUserData(): 1f4cbc0 7f02e29582f0 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser16TransferUserDataEv
0x7f02e76bf140: push r13  reg(16, 1f4c3f0) 
0x7f02e76bf142: push r12  reg(15, 1f4cd48) 
0x7f02e76bf144: lea r12, ptr [rdi+0x60]  reg(15, 1f4cd48) 
0x7f02e76bf148: push rbp
0x7f02e76bf149: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf14a: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf14d: sub rsp, 0x28
0x7f02e76bf151: mov esi, dword ptr [rdi+0x198]  reg(47, 7f02e29582f0) 
0x7f02e76bf157: mov edx, dword ptr [rdi+0x194]  reg(54, 7f02e7401c60) 
0x7f02e76bf15d: movzx ebp, byte ptr [rdi+0x3c]
0x7f02e76bf161: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f02e76bf16a: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958388, 0) 
0x7f02e76bf16f: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bf171: sub edx, esi  reg(54, 19)  reg(47, 0) 
0x7f02e76bf173: add rsi, qword ptr [rdi+0x188]  reg(4, 0) 
0x7f02e76bf17a: mov rdi, rsp  reg(3, 1f4cbc0) 
0x7f02e76bf17d: sub ebp, 0x5
0x7f02e76bf180: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e2958370 1f4cc20 19 0	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76bf185: mov rax, qword ptr [rsp+0x8]  reg(10, 0) 
0x7f02e76bf18a: mov edx, ebp  reg(54, 19) 
0x7f02e76bf18c: mov rsi, r12  reg(4, 1f4cc20)  reg(15, 1f4cc20) 
0x7f02e76bf18f: lea rdi, ptr [rax+0xa]  reg(3, 7f02e2958370) 
0x7f02e76bf193: call 0x7f02e76a4d40
opendnp3::LinkFrame::ReadUserData(unsigned char const*, unsigned char*, unsigned int)@plt: 1f4cc2a 1f4cc20 d 0	_ZN8opendnp39LinkFrame12ReadUserDataEPKhPhj@plt
0x7f02e76a4d40: jmp qword ptr [rip+0x2998da]
0x7f02e76a4d46: push 0xc1 
0x7f02e76a4d4b: jmp 0x7f02e76a4120
opendnp3::LinkFrame::ReadUserData(unsigned char const*, unsigned char*, unsigned int): 1f4cc2a 1f4cc20 d 0	_ZN8opendnp39LinkFrame12ReadUserDataEPKhPhj
0x7f02e76bde40: test edx, edx  reg(54, d)  reg(54, d) 
0x7f02e76bde42: jz 0x7f02e76bde92
0x7f02e76bde44: push r14  reg(17, 7f02e29599c0) 
0x7f02e76bde46: mov rcx, rsi  reg(9, 0)  reg(4, 1f4cc20) 
0x7f02e76bde49: push r13  reg(16, 1f4c3f0) 
0x7f02e76bde4b: mov r14d, 0x10  reg(79, 7f02e29599c0) 
0x7f02e76bde51: push r12  reg(15, 1f4cc20) 
0x7f02e76bde53: mov r12, rdi  reg(15, 1f4cc20)  reg(3, 1f4cc2a) 
0x7f02e76bde56: push rbp
0x7f02e76bde57: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bde58: mov ebx, edx  reg(53, 1f4cbc0)  reg(54, d) 
0x7f02e76bde5a: nop word ptr [rax+rax*1], ax
0x7f02e76bde60: cmp ebx, 0x10  reg(53, d) 
0x7f02e76bde63: mov ebp, r14d
0x7f02e76bde66: mov rsi, r12  reg(4, 1f4cc20)  reg(15, 1f4cc2a) 
0x7f02e76bde69: cmovbe ebp, ebx
0x7f02e76bde6c: mov rdi, rcx  reg(3, 1f4cc2a)  reg(9, 1f4cc20) 
0x7f02e76bde6f: mov r13d, ebp  reg(76, 1f4c3f0) 
0x7f02e76bde72: mov rdx, r13  reg(8, d)  reg(16, d) 
0x7f02e76bde75: call 0x7f02e76a77d0
memmove@plt: 1f4cc20 1f4cc2a d 1f4cc20	memmove@plt
0x7f02e76a77d0: jmp qword ptr [rip+0x298392]
0x7f02e76a77d6: push 0x36a 
0x7f02e76a77db: jmp 0x7f02e76a4120
memmove: 1f4cc20 1f4cc2a d 1f4cc20	memmove
dlsym@plt: ffffffffffffffff 7f02e7ebed0f d 1f4cc20	dlsym@plt
fprintf@plt: 7f02e6e68540 7f02e7ebed18 1f4cc20 1f4cc2a	fprintf@plt
0x7f02e76bde7a: mov rcx, rax  reg(9, 4ca40101170229)  reg(10, 1f4cc20) 
0x7f02e76bde7d: lea eax, ptr [rbp+0x2]  reg(56, 1f4cc20) 
0x7f02e76bde80: add rcx, r13  reg(9, 1f4cc20)  reg(16, d) 
0x7f02e76bde83: add r12, rax  reg(15, 1f4cc2a)  reg(10, f) 
0x7f02e76bde86: sub ebx, ebp  reg(53, d) 
0x7f02e76bde88: jnz 0x7f02e76bde60
0x7f02e76bde8a: pop rbx  reg(7, 0) 
0x7f02e76bde8b: pop rbp
0x7f02e76bde8c: pop r12  reg(15, 1f4cc39) 
0x7f02e76bde8e: pop r13  reg(16, d) 
0x7f02e76bde90: pop r14  reg(17, 10) 
0x7f02e76bde92: ret 
0x7f02e76bf198: mov edx, ebp  reg(54, d) 
0x7f02e76bf19a: mov rsi, r12  reg(4, 170229000081c4c5)  reg(15, 1f4cc20) 
0x7f02e76bf19d: mov rdi, rsp  reg(3, 1f4cc20) 
0x7f02e76bf1a0: call 0x7f02e76a7f10
openpal::RSlice::RSlice(unsigned char const*, unsigned int)@plt: 7f02e2958370 1f4cc20 d 1f4cc2d	_ZN7openpal6RSliceC1EPKhj@plt
0x7f02e76a7f10: jmp qword ptr [rip+0x297ff2]
0x7f02e76bf1a5: mov rax, qword ptr [rsp]  reg(10, f) 
0x7f02e76bf1a9: mov rdx, qword ptr [rsp+0x8]  reg(8, d) 
0x7f02e76bf1ae: mov qword ptr [rbx+0x50], rax  reg(10, 7f020000000d)  mem(1f4cc10, 0) 
0x7f02e76bf1b2: mov qword ptr [rbx+0x58], rdx  reg(8, 1f4cc20)  mem(1f4cc18, 0) 
0x7f02e76bf1b6: mov rax, qword ptr [rsp+0x18]  reg(10, 7f020000000d) 
0x7f02e76bf1bb: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76bf1c4: jnz 0x7f02e76bf1d1
0x7f02e76bf1c6: add rsp, 0x28
0x7f02e76bf1ca: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bf1cb: pop rbp
0x7f02e76bf1cc: pop r12  reg(15, 1f4cc20) 
0x7f02e76bf1ce: pop r13  reg(16, 1f4c3f0) 
0x7f02e76bf1d0: ret 
0x7f02e76bf445: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bf446: mov eax, 0x3  reg(56, 0) 
0x7f02e76bf44b: ret 
0x7f02e76bfaea: cmp ebp, eax
0x7f02e76bfaec: mov dword ptr [rbx+0x44], eax  reg(56, 3)  mem(1f4cc04, 1900000002) 
0x7f02e76bfaef: jnz 0x7f02e76bfae0
0x7f02e76bfae0: mov ebp, eax
0x7f02e76bfae2: mov rdi, rbx  reg(3, 7f02e2958370)  reg(7, 1f4cbc0) 
0x7f02e76bfae5: call 0x7f02e76a4130
opendnp3::LinkLayerParser::ParseOneStep()@plt: 1f4cbc0 1f4cc20 1f4cc20 1f4cc2d	_ZN8opendnp315LinkLayerParser12ParseOneStepEv@plt
0x7f02e76a4130: jmp qword ptr [rip+0x299ee2]
opendnp3::LinkLayerParser::ParseOneStep(): 1f4cbc0 1f4cc20 1f4cc20 1f4cc2d	_ZN8opendnp315LinkLayerParser12ParseOneStepEv
0x7f02e76bfaa0: mov eax, dword ptr [rdi+0x44]  reg(56, 3) 
0x7f02e76bfaa3: cmp eax, 0x1  reg(56, 3) 
0x7f02e76bfaa6: jz 0x7f02e76bfac8
0x7f02e76bfaa8: cmp eax, 0x2  reg(56, 3) 
0x7f02e76bfaab: jz 0x7f02e76bfac0
0x7f02e76bfaad: test eax, eax  reg(56, 3)  reg(56, 3) 
0x7f02e76bfaaf: jz 0x7f02e76bfab8
0x7f02e76bfab1: ret 
0x7f02e76bfaea: cmp ebp, eax
0x7f02e76bfaec: mov dword ptr [rbx+0x44], eax  reg(56, 3)  mem(1f4cc04, 1900000003) 
0x7f02e76bfaef: jnz 0x7f02e76bfae0
0x7f02e76bfaf1: add rsp, 0x8
0x7f02e76bfaf5: mov eax, ebp  reg(56, 3) 
0x7f02e76bfaf7: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bfaf8: pop rbp
0x7f02e76bfaf9: ret 
0x7f02e76bfb3e: cmp eax, 0x3  reg(56, 3) 
0x7f02e76bfb41: jz 0x7f02e76bfb20
0x7f02e76bfb20: add dword ptr [rbx+0x28], 0x1  mem(1f4cbe8, 0) 
0x7f02e76bfb24: mov rsi, rbp  reg(4, 1f4cc20) 
0x7f02e76bfb27: mov rdi, rbx  reg(3, 1f4cbc0)  reg(7, 1f4cbc0) 
0x7f02e76bfb2a: call 0x7f02e76a4240
opendnp3::LinkLayerParser::PushFrame(opendnp3::IFrameSink&)@plt: 1f4cbc0 1f4cae0 1f4cc20 1f4cc2d	_ZN8opendnp315LinkLayerParser9PushFrameERNS_10IFrameSinkE@plt
0x7f02e76a4240: jmp qword ptr [rip+0x299e5a]
0x7f02e76a4246: push 0x11 
0x7f02e76a424b: jmp 0x7f02e76a4120
opendnp3::LinkLayerParser::PushFrame(opendnp3::IFrameSink&): 1f4cbc0 1f4cae0 1f4cc20 1f4cc2d	_ZN8opendnp315LinkLayerParser9PushFrameERNS_10IFrameSinkE
0x7f02e76bf090: push r14  reg(17, 7f02e29599c0) 
0x7f02e76bf092: push r13  reg(16, 1f4c3f0) 
0x7f02e76bf094: mov r13, rsi  reg(16, 1f4c3f0)  reg(4, 1f4cae0) 
0x7f02e76bf097: push r12  reg(15, 1f4cd48) 
0x7f02e76bf099: push rbp
0x7f02e76bf09a: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bf09b: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bf09e: sub rsp, 0x10
0x7f02e76bf0a2: movzx ebp, byte ptr [rdi+0x42]
0x7f02e76bf0a6: movzx r14d, word ptr [rdi+0x3e]  reg(79, 7f02e29599c0) 
0x7f02e76bf0ab: movzx r12d, word ptr [rdi+0x40]  reg(73, 1f4cd48) 
0x7f02e76bf0b0: mov rax, qword ptr fs:[0x28]  reg(10, 3) 
0x7f02e76bf0b9: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29583b8, 7f02e76bf445) 
0x7f02e76bf0be: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bf0c0: mov edi, ebp  reg(45, 1f4cbc0) 
0x7f02e76bf0c2: and edi, 0x4f  reg(45, 44) 
0x7f02e76bf0c5: call 0x7f02e76a5740
opendnp3::LinkFunctionFromType(unsigned char)@plt: 44 1f4cae0 1f4cc20 1f4cc2d	_ZN8opendnp320LinkFunctionFromTypeEh@plt
0x7f02e76a5740: jmp qword ptr [rip+0x2993da]
opendnp3::LinkFunctionFromType(unsigned char): 44 1f4cae0 1f4cc20 1f4cc2d	_ZN8opendnp320LinkFunctionFromTypeEh
0x7f02e76bbb70: cmp dil, 0x49  reg(46, 44) 
0x7f02e76bbb74: jnbe 0x7f02e76bbc10
0x7f02e76bbb7a: lea rax, ptr [rip+0x52c6b]  reg(10, 0) 
0x7f02e76bbb81: movzx edx, dil  reg(54, 1f4cc20)  reg(46, 44) 
0x7f02e76bbb85: movsxd rdx, dword ptr [rax+rdx*4]  reg(8, 44) 
0x7f02e76bbb89: add rax, rdx  reg(10, 7f02e770e7ec)  reg(8, fffffffffffad3d4) 
0x7f02e76bbb8c: jmp rax
0x7f02e76bbbc0: mov eax, 0x44  reg(56, 7f02e76bbbc0) 
0x7f02e76bbbc5: ret 
0x7f02e76bf0ca: mov r8d, ebp  reg(61, 7f02e2959700) 
0x7f02e76bf0cd: mov ecx, ebp  reg(55, 1f4cc2d) 
0x7f02e76bf0cf: movsx edx, bpl  reg(54, fffffffffffad3d4) 
0x7f02e76bf0d3: mov rbp, rsp
0x7f02e76bf0d6: sub rsp, 0x8
0x7f02e76bf0da: shr r8b, 0x4  reg(59, 44) 
0x7f02e76bf0de: push r14  reg(17, 1) 
0x7f02e76bf0e0: shr cl, 0x5  reg(30, 44) 
0x7f02e76bf0e3: and r8d, 0x1  reg(61, 4) 
0x7f02e76bf0e7: and ecx, 0x1  reg(55, 2) 
0x7f02e76bf0ea: shr edx, 0x1f  reg(54, 44) 
0x7f02e76bf0ed: mov r9d, r12d  reg(64, 36)  reg(73, 64) 
0x7f02e76bf0f0: mov esi, eax  reg(47, 1f4cae0)  reg(56, 44) 
0x7f02e76bf0f2: mov rdi, rbp  reg(3, 44) 
0x7f02e76bf0f5: call 0x7f02e76a71a0
opendnp3::LinkHeaderFields::LinkHeaderFields(opendnp3::LinkFunction, bool, bool, bool, unsigned short, unsigned short)@plt: 7f02e29583b0 44 0 0	_ZN8opendnp316LinkHeaderFieldsC1ENS_12LinkFunctionEbbbtt@plt
0x7f02e76a71a0: jmp qword ptr [rip+0x2986aa]
0x7f02e76a71a6: push 0x307 
0x7f02e76a71ab: jmp 0x7f02e76a4120
opendnp3::LinkHeaderFields::LinkHeaderFields(opendnp3::LinkFunction, bool, bool, bool, unsigned short, unsigned short): 7f02e29583b0 44 0 0	_ZN8opendnp316LinkHeaderFieldsC1ENS_12LinkFunctionEbbbtt
0x7f02e76be690: mov eax, dword ptr [rsp+0x8]  reg(56, 44) 
0x7f02e76be694: mov byte ptr [rdi], sil  reg(48, 44)  mem(7f02e29583b0, 36) 
0x7f02e76be697: mov byte ptr [rdi+0x1], dl  reg(33, 0)  mem(7f02e29583b1, 0) 
0x7f02e76be69a: mov byte ptr [rdi+0x2], cl  reg(30, 0)  mem(7f02e29583b2, 2d00000000000000) 
0x7f02e76be69d: mov byte ptr [rdi+0x3], r8b  reg(59, 0)  mem(7f02e29583b3, 1b2d000000000000) 
0x7f02e76be6a1: mov word ptr [rdi+0x4], r9w  reg(63, 64)  mem(7f02e29583b4, 891b2d0000000000) 
0x7f02e76be6a6: mov word ptr [rdi+0x6], ax  reg(29, 1)  mem(7f02e29583b6, a0ca891b2d000000) 
0x7f02e76be6aa: ret 
0x7f02e76bf0fa: pop rax  reg(10, 1) 
0x7f02e76bf0fb: mov rax, qword ptr [r13]  reg(10, 1) 
0x7f02e76bf0ff: mov rsi, rbp  reg(4, 44) 
0x7f02e76bf102: mov rdi, r13  reg(3, 7f02e29583b0)  reg(16, 1f4cae0) 
0x7f02e76bf105: pop rdx  reg(8, 0) 
0x7f02e76bf106: lea rdx, ptr [rbx+0x50]  reg(8, 7f02e76bf0ca) 
0x7f02e76bf10a: call qword ptr [rax+0x10]
opendnp3::LinkLayer::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&): 1f4e6c0 7f02e29583b0 1f4cc10 7f02e7bac150	_ZN8opendnp39LinkLayer7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE
0x7f02e76be720: push rbx  reg(7, 7f02dc0008c0) 
0x7f02e76be721: lea rbx, ptr [rdi+0x10]  reg(7, 7f02dc0008c0) 
0x7f02e76be725: sub rsp, 0x10
0x7f02e76be729: mov rdi, rbx  reg(3, 1f4e6c0)  reg(7, 1f4e6d0) 
0x7f02e76be72c: call 0x7f02e76a5830
opendnp3::LinkContext::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&)@plt: 1f4e6d0 7f02e29583b0 1f4cc10 7f02e7bac150	_ZN8opendnp311LinkContext7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE@plt
0x7f02e76a5830: jmp qword ptr [rip+0x299362]
0x7f02e76a5836: push 0x170 
0x7f02e76a583b: jmp 0x7f02e76a4120
opendnp3::LinkContext::OnFrame(opendnp3::LinkHeaderFields const&, openpal::RSlice const&): 1f4e6d0 7f02e29583b0 1f4cc10 7f02e7bac150	_ZN8opendnp311LinkContext7OnFrameERKNS_16LinkHeaderFieldsERKN7openpal6RSliceE
0x7f02e76bd090: push r12  reg(15, 0) 
0x7f02e76bd092: push rbp
0x7f02e76bd093: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bd094: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4e6d0) 
0x7f02e76bd097: sub rsp, 0x30
0x7f02e76bd09b: movzx r12d, byte ptr [rdi+0x202]  reg(73, 0) 
0x7f02e76bd0a3: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7bcdfc0) 
0x7f02e76bd0ac: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29581c8, 0) 
0x7f02e76bd0b1: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bd0b3: test r12b, r12b  reg(71, 1)  reg(71, 1) 
0x7f02e76bd0b6: jz 0x7f02e76bd170
0x7f02e76bd0bc: movzx eax, byte ptr [rdi+0x198]  reg(56, 0) 
0x7f02e76bd0c3: mov rbp, rsi
0x7f02e76bd0c6: cmp byte ptr [rsi+0x1], al  reg(27, 0)  mem(7f02e29583b1, 10064000000) 
0x7f02e76bd0c9: jz 0x7f02e76bd1a0
0x7f02e76bd1a0: add dword ptr [rdi+0x214], 0x1  mem(1f4e8e4, 0) 
0x7f02e76bd1a7: lea r12, ptr [rsp+0x10]  reg(15, 1) 
0x7f02e76bd1ac: add rbx, 0x178  reg(7, 1f4e6d0) 
0x7f02e76bd1b3: mov rdi, rbx  reg(3, 1f4e6d0)  reg(7, 1f4e848) 
0x7f02e76bd1b6: mov dword ptr [rsp+0x10], 0x4  mem(7f02e29581b0, 64) 
0x7f02e76bd1be: mov rsi, r12  reg(4, 7f02e29583b0)  reg(15, 7f02e29581b0) 
0x7f02e76bd1c1: call 0x7f02e76a7fe0
openpal::Logger::IsEnabled(openpal::LogFilters const&) const@plt: 1f4e848 7f02e29581b0 1f4cc10 7f02e7bac150	_ZNK7openpal6Logger9IsEnabledERKNS_10LogFiltersE@plt
0x7f02e76a7fe0: jmp qword ptr [rip+0x297f8a]
0x7f02e76bd1c6: test al, al  reg(27, 1fe01)  reg(27, 1fe01) 
0x7f02e76bd1c8: jz 0x7f02e76bd193
0x7f02e76bd1ca: cmp byte ptr [rbp+0x1], 0x0  mem(7f02e29583b1, 10064000000) 
0x7f02e76bd1ce: lea rax, ptr [rip+0x51d0b]  reg(10, 1fe01) 
0x7f02e76bd1d5: lea rcx, ptr [rip+0x51d2c]  reg(9, 7f02e7bac150) 
0x7f02e76bd1dc: lea rdx, ptr [rip+0x51dad]  reg(8, 1f4cc10) 
0x7f02e76bd1e3: mov rsi, r12  reg(4, 7f02e29581b0)  reg(15, 7f02e29581b0) 
0x7f02e76bd1e6: mov rdi, rbx  reg(3, 1f4e848)  reg(7, 1f4e848) 
0x7f02e76bd1e9: mov dword ptr [rsp+0x10], 0x4  mem(7f02e29581b0, 4) 
0x7f02e76bd1f5: call 0x7f02e76a5270
openpal::Logger::Log(openpal::LogFilters const&, char const*, char const*)@plt: 1f4e848 7f02e29581b0 7f02e770ef90 7f02e770ef08	_ZN7openpal6Logger3LogERKNS_10LogFiltersEPKcS5_@plt
0x7f02e76a5270: jmp qword ptr [rip+0x299642]
opendnp3::LogFlagToString(int): 4 0 6 7f02e2957e80	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 4) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 4) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c121a: jnle 0x7f02e76c1250
0x7f02e76c121c: cmp edi, 0x2  reg(45, 4) 
0x7f02e76c121f: lea rax, ptr [rip+0x4f549]  reg(10, 7f02e771077f) 
0x7f02e76c1226: jz 0x7f02e76c124b
0x7f02e76c1228: cmp edi, 0x4  reg(45, 4) 
0x7f02e76c122b: lea rax, ptr [rip+0x4f545]  reg(10, 7f02e771076f) 
0x7f02e76c1232: jz 0x7f02e76c124b
0x7f02e76c124b: ret 
memcpy: 7f02dc001501 7f02e7bdc261 2 7f02dc001500	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc001500	dlsym@plt
memcpy: 7f02dc001503 7f02e2957e0b d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc001510 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc001512 7f02e7710777 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc001519 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc00151a 1f4d660 a 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 a 0	dlsym@plt
memcpy: 7f02dc001524 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc001527 7f02e770ef08 28 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 28 0	dlsym@plt
memcpy: 7f02dc001710 7f02dc001500 4f 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 4f 7f02dc000020	dlsym@plt
0x7f02e76bd1fa: jmp 0x7f02e76bd193
0x7f02e76bd193: xor r12d, r12d  reg(73, 7f02e29581b0)  reg(73, 7f02e29581b0) 
0x7f02e76bd196: jmp 0x7f02e76bd147
0x7f02e76bd147: mov rcx, qword ptr [rsp+0x28]  reg(9, 0) 
0x7f02e76bd14c: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bd155: mov eax, r12d  reg(56, 0)  reg(73, 0) 
0x7f02e76bd158: jnz 0x7f02e76bd3c5
0x7f02e76bd15e: add rsp, 0x30
0x7f02e76bd162: pop rbx  reg(7, 1f4e848) 
0x7f02e76bd163: pop rbp
0x7f02e76bd164: pop r12  reg(15, 0) 
0x7f02e76bd166: ret 
0x7f02e76be731: test al, al  reg(27, 0)  reg(27, 0) 
0x7f02e76be733: jz 0x7f02e76be746
0x7f02e76be746: add rsp, 0x10
0x7f02e76be74a: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76be74b: ret 
opendnp3::LogFlagToString(int): 4 0 6 7f02e2957fd0	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 4) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 4) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c121a: jnle 0x7f02e76c1250
0x7f02e76c121c: cmp edi, 0x2  reg(45, 4) 
0x7f02e76c121f: lea rax, ptr [rip+0x4f549]  reg(10, 7f02e771077f) 
0x7f02e76c1226: jz 0x7f02e76c124b
0x7f02e76c1228: cmp edi, 0x4  reg(45, 4) 
0x7f02e76c122b: lea rax, ptr [rip+0x4f545]  reg(10, 7f02e771076f) 
0x7f02e76c1232: jz 0x7f02e76c124b
0x7f02e76c124b: ret 
memcpy: 7f02dc001501 7f02e7bdc261 2 7f02dc001500	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc001500	dlsym@plt
memcpy: 7f02dc001503 7f02e2957f5b d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc001510 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc001512 7f02e7710777 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc001519 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc00151a 1f4c380 6 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 0	dlsym@plt
memcpy: 7f02dc001520 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc001523 7f02e2958300 2b 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2b 0	dlsym@plt
memcpy: 7f02dc001710 7f02dc001500 4e 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 4e 7f02dc000020	dlsym@plt
0x7f02e76bf10d: mov esi, dword ptr [rbx+0x48]  reg(47, 0) 
0x7f02e76bf110: lea rdi, ptr [rbx+0x188]  reg(3, 7f02e2958230) 
0x7f02e76bf117: call 0x7f02e76a5400
opendnp3::ShiftableBuffer::AdvanceRead(unsigned int)@plt: 1f4cd48 19 7f02e7401c60 0	_ZN8opendnp315ShiftableBuffer11AdvanceReadEj@plt
0x7f02e76a5400: jmp qword ptr [rip+0x29957a]
0x7f02e76a5406: push 0x12d 
0x7f02e76a540b: jmp 0x7f02e76a4120
opendnp3::ShiftableBuffer::AdvanceRead(unsigned int): 1f4cd48 19 7f02e7401c60 0	_ZN8opendnp315ShiftableBuffer11AdvanceReadEj
0x7f02e76c1130: add dword ptr [rdi+0x10], esi  reg(47, 19)  mem(1f4cd58, 0) 
0x7f02e76c1133: ret 
0x7f02e76bf11c: mov rax, qword ptr [rsp+0x8]  reg(10, 0) 
0x7f02e76bf121: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76bf12a: jnz 0x7f02e76bf139
0x7f02e76bf12c: add rsp, 0x10
0x7f02e76bf130: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bf131: pop rbp
0x7f02e76bf132: pop r12  reg(15, 64) 
0x7f02e76bf134: pop r13  reg(16, 1f4cae0) 
0x7f02e76bf136: pop r14  reg(17, 1) 
0x7f02e76bf138: ret 
0x7f02e76bfb2f: mov dword ptr [rbx+0x44], 0x0  mem(1f4cc04, 1900000003) 
0x7f02e76bfb36: mov rdi, rbx  reg(3, 1f4cd48)  reg(7, 1f4cbc0) 
0x7f02e76bfb39: call 0x7f02e76a4640
opendnp3::LinkLayerParser::ParseUntilComplete()@plt: 1f4cbc0 19 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser18ParseUntilCompleteEv@plt
0x7f02e76a4640: jmp qword ptr [rip+0x299c5a]
opendnp3::LinkLayerParser::ParseUntilComplete(): 1f4cbc0 19 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser18ParseUntilCompleteEv
0x7f02e76bfad0: push rbp
0x7f02e76bfad1: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bfad2: mov rbx, rdi  reg(7, 1f4cbc0)  reg(3, 1f4cbc0) 
0x7f02e76bfad5: sub rsp, 0x8
0x7f02e76bfad9: mov ebp, dword ptr [rdi+0x44]
0x7f02e76bfadc: jmp 0x7f02e76bfae2
0x7f02e76bfae2: mov rdi, rbx  reg(3, 1f4cbc0)  reg(7, 1f4cbc0) 
0x7f02e76bfae5: call 0x7f02e76a4130
opendnp3::LinkLayerParser::ParseOneStep()@plt: 1f4cbc0 19 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv@plt
0x7f02e76a4130: jmp qword ptr [rip+0x299ee2]
opendnp3::LinkLayerParser::ParseOneStep(): 1f4cbc0 19 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser12ParseOneStepEv
0x7f02e76bfaa0: mov eax, dword ptr [rdi+0x44]  reg(56, 0) 
0x7f02e76bfaa3: cmp eax, 0x1  reg(56, 0) 
0x7f02e76bfaa6: jz 0x7f02e76bfac8
0x7f02e76bfaa8: cmp eax, 0x2  reg(56, 0) 
0x7f02e76bfaab: jz 0x7f02e76bfac0
0x7f02e76bfaad: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bfaaf: jz 0x7f02e76bfab8
0x7f02e76bfab8: jmp 0x7f02e76a5790
opendnp3::LinkLayerParser::ParseSync()@plt: 1f4cbc0 19 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser9ParseSyncEv@plt
0x7f02e76a5790: jmp qword ptr [rip+0x2993b2]
opendnp3::LinkLayerParser::ParseSync(): 1f4cbc0 19 7f02e7401c60 0	_ZN8opendnp315LinkLayerParser9ParseSyncEv
0x7f02e76bef90: push r13  reg(16, 1f4c3f0) 
0x7f02e76bef92: push r12  reg(15, 1f4cd48) 
0x7f02e76bef94: push rbp
0x7f02e76bef95: push rbx  reg(7, 1f4cbc0) 
0x7f02e76bef96: sub rsp, 0x98
0x7f02e76bef9d: mov edx, dword ptr [rdi+0x194]  reg(54, 7f02e7401c60) 
0x7f02e76befa3: sub edx, dword ptr [rdi+0x198]  reg(54, 19) 
0x7f02e76befa9: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76befb2: mov qword ptr [rsp+0x88], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958398, 7f02e7df3000) 
0x7f02e76befba: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76befbc: cmp edx, 0x9  reg(54, 0) 
0x7f02e76befbf: jnbe 0x7f02e76beff0
0x7f02e76befc1: mov rcx, qword ptr [rsp+0x88]  reg(9, 0) 
0x7f02e76befc9: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76befd2: jnz 0x7f02e76bf07e
0x7f02e76befd8: add rsp, 0x98
0x7f02e76befdf: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76befe0: pop rbp
0x7f02e76befe1: pop r12  reg(15, 1f4cd48) 
0x7f02e76befe3: pop r13  reg(16, 1f4c3f0) 
0x7f02e76befe5: ret 
0x7f02e76bfaea: cmp ebp, eax
0x7f02e76bfaec: mov dword ptr [rbx+0x44], eax  reg(56, 0)  mem(1f4cc04, 1900000000) 
0x7f02e76bfaef: jnz 0x7f02e76bfae0
0x7f02e76bfaf1: add rsp, 0x8
0x7f02e76bfaf5: mov eax, ebp  reg(56, 0) 
0x7f02e76bfaf7: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bfaf8: pop rbp
0x7f02e76bfaf9: ret 
0x7f02e76bfb3e: cmp eax, 0x3  reg(56, 0) 
0x7f02e76bfb41: jz 0x7f02e76bfb20
0x7f02e76bfb43: pop rbx  reg(7, 1f4cbc0) 
0x7f02e76bfb44: mov rdi, r12  reg(3, 1f4cbc0)  reg(15, 1f4cd48) 
0x7f02e76bfb47: pop rbp
0x7f02e76bfb48: pop r12  reg(15, 1f4cd48) 
0x7f02e76bfb4a: jmp 0x7f02e76a5100
opendnp3::ShiftableBuffer::Shift()@plt: 1f4cd48 19 0 0	_ZN8opendnp315ShiftableBuffer5ShiftEv@plt
0x7f02e76a5100: jmp qword ptr [rip+0x2996fa]
0x7f02e76a5106: push 0xfd 
0x7f02e76a510b: jmp 0x7f02e76a4120
opendnp3::ShiftableBuffer::Shift(): 1f4cd48 19 0 0	_ZN8opendnp315ShiftableBuffer5ShiftEv
0x7f02e76c10f0: push rbp
0x7f02e76c10f1: push rbx  reg(7, 1f4cae0) 
0x7f02e76c10f2: mov rbx, rdi  reg(7, 1f4cae0)  reg(3, 1f4cd48) 
0x7f02e76c10f5: sub rsp, 0x8
0x7f02e76c10f9: mov esi, dword ptr [rdi+0x10]  reg(47, 19) 
0x7f02e76c10fc: mov ebp, dword ptr [rdi+0xc]
0x7f02e76c10ff: mov rdi, qword ptr [rdi]  reg(3, 1f4cd48) 
0x7f02e76c1102: sub ebp, esi
0x7f02e76c1104: add rsi, rdi  reg(4, 19)  reg(3, 1f4cc20) 
0x7f02e76c1107: mov edx, ebp  reg(54, 0) 
0x7f02e76c1109: call 0x7f02e76a77d0
memmove@plt: 1f4cc20 1f4cc39 0 0	memmove@plt
0x7f02e76a77d0: jmp qword ptr [rip+0x298392]
memmove: 1f4cc20 1f4cc39 0 0	memmove
dlsym@plt: ffffffffffffffff 7f02e7ebed0f 0 0	dlsym@plt
fprintf@plt: 7f02e6e68540 7f02e7ebed18 1f4cc20 1f4cc39	fprintf@plt
0x7f02e76c110e: mov dword ptr [rbx+0xc], ebp  mem(1f4cd54, 1900000019) 
0x7f02e76c1111: mov dword ptr [rbx+0x10], 0x0  mem(1f4cd58, 19) 
0x7f02e76c1118: add rsp, 0x8
0x7f02e76c111c: pop rbx  reg(7, 1f4cd48) 
0x7f02e76c111d: pop rbp
0x7f02e76c111e: ret 
opendnp3::LinkLayerParser::WriteBuff() const: 1f4cbc0 1f4cc39 0 1f4cc20	_ZNK8opendnp315LinkLayerParser9WriteBuffEv
0x7f02e76bef30: sub rsp, 0x28
0x7f02e76bef34: mov esi, dword ptr [rdi+0x194]  reg(47, 1f4cc39) 
0x7f02e76bef3a: mov edx, dword ptr [rdi+0x190]  reg(54, 0) 
0x7f02e76bef40: mov rax, qword ptr fs:[0x28]  reg(10, 1f4cc20) 
0x7f02e76bef49: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29583e8, 7f02e76c110e) 
0x7f02e76bef4e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bef50: sub edx, esi  reg(54, 124)  reg(47, 0) 
0x7f02e76bef52: add rsi, qword ptr [rdi+0x188]  reg(4, 0) 
0x7f02e76bef59: mov rdi, rsp  reg(3, 1f4cbc0) 
0x7f02e76bef5c: call 0x7f02e76a5480
openpal::WSlice::WSlice(unsigned char*, unsigned int)@plt: 7f02e29583d0 1f4cc20 124 1f4cc20	_ZN7openpal6WSliceC1EPhj@plt
0x7f02e76a5480: jmp qword ptr [rip+0x29953a]
0x7f02e76bef61: mov rcx, qword ptr [rsp+0x18]  reg(9, 1f4cc20) 
0x7f02e76bef66: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bef6f: mov rax, qword ptr [rsp]  reg(10, 0) 
0x7f02e76bef73: mov rdx, qword ptr [rsp+0x8]  reg(8, 124) 
0x7f02e76bef78: jnz 0x7f02e76bef7f
0x7f02e76bef7a: add rsp, 0x28
0x7f02e76bef7e: ret 
recvmsg: 7 7f02e29582c0 0 0	recvmsg
dlsym@plt: ffffffffffffffff 7f02e7ebeeee 0 0	dlsym@plt
fprintf@plt: 7f02e6e68540 7f02e7ebeef8 7 1f4cc20	fprintf@plt
opendnp3::LinkLayer::OnTxReady(): 1f4e6c0 7f02e2958498 1f4cff0 1f4d010	_ZN8opendnp39LinkLayer9OnTxReadyEv
0x7f02e76be6f0: push rbx  reg(7, 1f4cae0) 
0x7f02e76be6f1: lea rbx, ptr [rdi+0x10]  reg(7, 1f4cae0) 
0x7f02e76be6f5: mov rdi, rbx  reg(3, 1f4e6c0)  reg(7, 1f4e6d0) 
0x7f02e76be6f8: call 0x7f02e76a5bd0
opendnp3::LinkContext::OnTxReady()@plt: 1f4e6d0 7f02e2958498 1f4cff0 1f4d010	_ZN8opendnp311LinkContext9OnTxReadyEv@plt
0x7f02e76a5bd0: jmp qword ptr [rip+0x299192]
0x7f02e76a5bd6: push 0x1aa 
0x7f02e76a5bdb: jmp 0x7f02e76a4120
opendnp3::LinkContext::OnTxReady(): 1f4e6d0 7f02e2958498 1f4cff0 1f4d010	_ZN8opendnp311LinkContext9OnTxReadyEv
0x7f02e76bd470: push rbp
0x7f02e76bd471: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bd472: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4e6d0) 
0x7f02e76bd475: sub rsp, 0x18
0x7f02e76bd479: movzx ebp, byte ptr [rdi+0x1c8]
0x7f02e76bd480: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7deedb8) 
0x7f02e76bd489: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958338, 7f02e665ae64) 
0x7f02e76bd48e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bd490: test bpl, bpl 
0x7f02e76bd493: jnz 0x7f02e76bd4d0
0x7f02e76bd4d0: lea rsi, ptr [rdi+0x160]  reg(4, 7f02e2958498) 
0x7f02e76bd4d7: xor edx, edx  reg(54, 1f4cff0)  reg(54, 1f4cff0) 
0x7f02e76bd4d9: mov byte ptr [rdi+0x1c8], 0x0  mem(1f4e898, 1) 
0x7f02e76bd4e0: call 0x7f02e76a61e0
opendnp3::LinkContext::TryPendingTx(openpal::Settable<openpal::RSlice>&, bool)@plt: 1f4e6d0 1f4e830 0 1f4d010	_ZN8opendnp311LinkContext12TryPendingTxERN7openpal8SettableINS1_6RSliceEEEb@plt
0x7f02e76a61e0: jmp qword ptr [rip+0x298e8a]
0x7f02e76a61e6: push 0x20b 
0x7f02e76a61eb: jmp 0x7f02e76a4120
opendnp3::LinkContext::TryPendingTx(openpal::Settable<openpal::RSlice>&, bool): 1f4e6d0 1f4e830 0 1f4d010	_ZN8opendnp311LinkContext12TryPendingTxERN7openpal8SettableINS1_6RSliceEEEb
0x7f02e76bd3d0: push r13  reg(16, 1f4d698) 
0x7f02e76bd3d2: push r12  reg(15, 1f4d680) 
0x7f02e76bd3d4: push rbp
0x7f02e76bd3d5: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bd3d6: xor ebp, ebp
0x7f02e76bd3d8: sub rsp, 0x28
0x7f02e76bd3dc: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76bd3e5: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29582f8, 7f02e6658f48) 
0x7f02e76bd3ea: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bd3ec: cmp byte ptr [rdi+0x1c8], 0x0  mem(1f4e898, 0) 
0x7f02e76bd3f3: jnz 0x7f02e76bd400
0x7f02e76bd3f5: movzx ebp, byte ptr [rsi]
0x7f02e76bd3f8: mov r12, rsi  reg(15, 1f4d680)  reg(4, 1f4e830) 
0x7f02e76bd3fb: test bpl, bpl 
0x7f02e76bd3fe: jnz 0x7f02e76bd420
0x7f02e76bd400: mov rcx, qword ptr [rsp+0x18]  reg(9, 1f4d010) 
0x7f02e76bd405: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bd40e: mov eax, ebp  reg(56, 0) 
0x7f02e76bd410: jnz 0x7f02e76bd467
0x7f02e76bd412: add rsp, 0x28
0x7f02e76bd416: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bd417: pop rbp
0x7f02e76bd418: pop r12  reg(15, 1f4e830) 
0x7f02e76bd41a: pop r13  reg(16, 1f4d698) 
0x7f02e76bd41c: ret 
0x7f02e76bd4e5: lea rsi, ptr [rbx+0x148]  reg(4, 1f4e830) 
0x7f02e76bd4ec: mov edx, 0x1  reg(54, 0) 
0x7f02e76bd4f1: mov rdi, rbx  reg(3, 1f4e6d0)  reg(7, 1f4e6d0) 
0x7f02e76bd4f4: call 0x7f02e76a61e0
opendnp3::LinkContext::TryPendingTx(openpal::Settable<openpal::RSlice>&, bool)@plt: 1f4e6d0 1f4e818 1 0	_ZN8opendnp311LinkContext12TryPendingTxERN7openpal8SettableINS1_6RSliceEEEb@plt
0x7f02e76a61e0: jmp qword ptr [rip+0x298e8a]
opendnp3::LinkContext::TryPendingTx(openpal::Settable<openpal::RSlice>&, bool): 1f4e6d0 1f4e818 1 0	_ZN8opendnp311LinkContext12TryPendingTxERN7openpal8SettableINS1_6RSliceEEEb
0x7f02e76bd3d0: push r13  reg(16, 1f4d698) 
0x7f02e76bd3d2: push r12  reg(15, 1f4d680) 
0x7f02e76bd3d4: push rbp
0x7f02e76bd3d5: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bd3d6: xor ebp, ebp
0x7f02e76bd3d8: sub rsp, 0x28
0x7f02e76bd3dc: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76bd3e5: mov qword ptr [rsp+0x18], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29582f8, d533a0ca891b2d00) 
0x7f02e76bd3ea: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bd3ec: cmp byte ptr [rdi+0x1c8], 0x0  mem(1f4e898, 0) 
0x7f02e76bd3f3: jnz 0x7f02e76bd400
0x7f02e76bd3f5: movzx ebp, byte ptr [rsi]
0x7f02e76bd3f8: mov r12, rsi  reg(15, 1f4d680)  reg(4, 1f4e818) 
0x7f02e76bd3fb: test bpl, bpl 
0x7f02e76bd3fe: jnz 0x7f02e76bd420
0x7f02e76bd400: mov rcx, qword ptr [rsp+0x18]  reg(9, 0) 
0x7f02e76bd405: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bd40e: mov eax, ebp  reg(56, 0) 
0x7f02e76bd410: jnz 0x7f02e76bd467
0x7f02e76bd412: add rsp, 0x28
0x7f02e76bd416: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bd417: pop rbp
0x7f02e76bd418: pop r12  reg(15, 1f4e818) 
0x7f02e76bd41a: pop r13  reg(16, 1f4d698) 
0x7f02e76bd41c: ret 
0x7f02e76bd4f9: cmp bpl, 0x1 
0x7f02e76bd4fd: jz 0x7f02e76bd550
0x7f02e76bd550: mov rdi, qword ptr [rbx+0x228]  reg(3, 1f4e6d0) 
0x7f02e76bd557: mov rsi, rbx  reg(4, 1f4e818)  reg(7, 1f4e6d0) 
0x7f02e76bd55a: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76bd55d: call qword ptr [rax+0x20]
opendnp3::PLLS_SendUnconfirmedTransmitWait::OnTxReady(opendnp3::LinkContext&): 7f02e79404a8 1f4e6d0 1 0	_ZN8opendnp332PLLS_SendUnconfirmedTransmitWait9OnTxReadyERNS_11LinkContextE
0x7f02e76c0460: push rbp
0x7f02e76c0461: push rbx  reg(7, 1f4e6d0) 
0x7f02e76c0462: mov rbp, rdi
0x7f02e76c0465: mov rbx, rsi  reg(7, 1f4e6d0)  reg(4, 1f4e6d0) 
0x7f02e76c0468: sub rsp, 0x38
0x7f02e76c046c: mov rdi, qword ptr [rsi+0x1c0]  reg(3, 7f02e79404a8) 
0x7f02e76c0473: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7937e00) 
0x7f02e76c047c: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958308, 1f4e6d0) 
0x7f02e76c0481: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76c0483: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e76c0486: call qword ptr [rax+0x28]
opendnp3::TransportTx::Advance(): 1f4dd28 1f4e6d0 1 0	_ZN8opendnp311TransportTx7AdvanceEv
0x7f02e77056a0: push rbx  reg(7, 1f4e6d0) 
0x7f02e77056a1: mov esi, dword ptr [rdi+0x10]  reg(47, 1f4e6d0) 
0x7f02e77056a4: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4dd28) 
0x7f02e77056a7: mov eax, 0xf9  reg(56, 7f02e793cb10) 
0x7f02e77056ac: mov byte ptr [rdi+0x20], 0x0  mem(1f4dd48, 1) 
0x7f02e77056b0: lea rdi, ptr [rdi+0x10]  reg(3, 1f4dd28) 
0x7f02e77056b4: cmp esi, 0xf9  reg(47, 4) 
0x7f02e77056bd: call 0x7f02e76a7730
openpal::RSlice::Advance(unsigned int)@plt: 1f4dd38 4 1 0	_ZN7openpal6RSlice7AdvanceEj@plt
0x7f02e76a7730: jmp qword ptr [rip+0x2983e2]
0x7f02e76a7736: push 0x360 
0x7f02e76a773b: jmp 0x7f02e76a4120
0x7f02e77056c2: movzx eax, byte ptr [rbx+0x164]  reg(56, 0) 
0x7f02e77056c9: add dword ptr [rbx+0x168], 0x1  mem(1f4de90, 0) 
0x7f02e77056d0: add eax, 0x1  reg(56, 0) 
0x7f02e77056d3: and eax, 0x3f  reg(56, 1) 
0x7f02e77056d6: mov byte ptr [rbx+0x164], al  reg(27, 1)  mem(1f4de8c, 100000000) 
0x7f02e77056dc: mov eax, dword ptr [rbx+0x10]  reg(56, 1) 
0x7f02e77056df: pop rbx  reg(7, 1f4dd28) 
0x7f02e77056e0: test eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e77056e2: setnz al  reg(27, 0) 
0x7f02e77056e5: ret 
0x7f02e76c0489: test al, al  reg(27, 0)  reg(27, 0) 
0x7f02e76c048b: jnz 0x7f02e76c04b8
0x7f02e76c048d: mov rdi, rbx  reg(3, 1f4dd38)  reg(7, 1f4e6d0) 
0x7f02e76c0490: call 0x7f02e76a49c0
opendnp3::LinkContext::CompleteSendOperation()@plt: 1f4e6d0 4 4 0	_ZN8opendnp311LinkContext21CompleteSendOperationEv@plt
0x7f02e76a49c0: jmp qword ptr [rip+0x299a9a]
0x7f02e76a49c6: push 0x89 
0x7f02e76a49cb: jmp 0x7f02e76a4120
opendnp3::LinkContext::CompleteSendOperation(): 1f4e6d0 4 4 0	_ZN8opendnp311LinkContext21CompleteSendOperationEv
0x7f02e76bda70: push r14  reg(17, 0) 
0x7f02e76bda72: push r13  reg(16, 1f4d698) 
0x7f02e76bda74: push r12  reg(15, 1f4d680) 
0x7f02e76bda76: push rbp
0x7f02e76bda77: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bda78: sub rsp, 0x30
0x7f02e76bda7c: mov rbx, qword ptr [rdi+0x250]  reg(7, 1f4e6d0) 
0x7f02e76bda83: mov qword ptr [rdi+0x1c0], 0x0  mem(1f4e890, 1f4dd28) 
0x7f02e76bda8e: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76bda97: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29582a8, 0) 
0x7f02e76bda9c: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bda9e: mov rbp, qword ptr [rdi+0x248]
0x7f02e76bdaa5: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bdaa8: jz 0x7f02e76bdbe8
0x7f02e76bdaae: cmp qword ptr [rip+0x27faba], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bdab6: jz 0x7f02e76bdb70
0x7f02e76bdabc: lea rax, ptr [rbx+0x8]  reg(10, 0) 
0x7f02e76bdac0: lock add dword ptr [rax], 0x1  mem(1f4dc78, 100000003) 
0x7f02e76bdac4: mov r12, qword ptr [rdi+0x1d0]  reg(15, 1f4d680) 
0x7f02e76bdacb: mov rdx, qword ptr [r12]  reg(8, 4) 
0x7f02e76bdacf: mov r13, qword ptr [rdx+0x28]  reg(16, 1f4d698) 
0x7f02e76bdad3: lock add dword ptr [rax], 0x1  mem(1f4dc78, 100000004) 
0x7f02e76bdad7: mov r14, rbx  reg(17, 0)  reg(7, 1f4dc70) 
0x7f02e76bdada: mov edi, 0x10  reg(45, 1f4e6d0) 
0x7f02e76bdadf: mov qword ptr [rsp+0x10], 0x0  mem(7f02e2958290, 4) 
0x7f02e76bdae8: call 0x7f02e76a6020
operator new(unsigned long)@plt: 10 4 7f02e687f010 0	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e76bdaed: mov qword ptr [rax], rbp  mem(7f02dc001350, 7f02dc000088) 
0x7f02e76bdaf0: mov qword ptr [rax+0x8], rbx  reg(7, 1f4dc70)  mem(7f02dc001358, 7f02dc000f40) 
0x7f02e76bdaf4: mov rbp, rsp
0x7f02e76bdaf7: mov qword ptr [rsp], rax  reg(10, 7f02dc001350)  mem(7f02e2958280, 0) 
0x7f02e76bdafb: lea rax, ptr [rip-0x18d2]  reg(10, 7f02dc001350) 
0x7f02e76bdb02: mov rsi, rsp  reg(4, 7f02dc000020) 
0x7f02e76bdb05: mov rdi, r12  reg(3, 0)  reg(15, 1f4c3b0) 
0x7f02e76bdb08: mov qword ptr [rsp+0x18], rax  reg(10, 7f02e76bc230)  mem(7f02e2958298, 4) 
0x7f02e76bdb0d: lea rax, ptr [rip-0x1854]  reg(10, 7f02e76bc230) 
0x7f02e76bdb14: mov qword ptr [rsp+0x10], rax  reg(10, 7f02e76bc2c0)  mem(7f02e2958290, 0) 
0x7f02e76bdb19: call r13
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29581d0 7f02e2958280 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 7f02e2958280) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 7f02e2958280)  reg(3, 7f02e29581d0) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc328: mov rbp, qword ptr [rsi]
0x7f02e76bc32b: mov edi, 0x10  reg(45, 7f02e29581d0) 
0x7f02e76bc330: call 0x7f02e76a6020
operator new(unsigned long)@plt: 10 7f02e2958280 2 7f02dc000020	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e76bc335: mov rdx, qword ptr [rbp]  reg(8, 7f02dc000f50) 
0x7f02e76bc339: mov qword ptr [rax], rdx  reg(8, 1f4dc80)  mem(7f02dc000f50, 7f02dc000088) 
0x7f02e76bc33c: mov rdx, qword ptr [rbp+0x8]  reg(8, 1f4dc80) 
0x7f02e76bc340: test rdx, rdx  reg(8, 1f4dc70)  reg(8, 1f4dc70) 
0x7f02e76bc343: mov qword ptr [rax+0x8], rdx  reg(8, 1f4dc70)  mem(7f02dc000f58, 7f02dc000088) 
0x7f02e76bc347: jz 0x7f02e76bc358
0x7f02e76bc349: cmp qword ptr [rip+0x28121f], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc351: jz 0x7f02e76bc388
0x7f02e76bc353: lock add dword ptr [rdx+0x8], 0x1  mem(1f4dc78, 100000005) 
0x7f02e76bc358: mov qword ptr [rbx], rax  reg(10, 7f02dc000f50)  mem(7f02e29581d0, 0) 
0x7f02e76bc35b: add rsp, 0x8
0x7f02e76bc35f: xor eax, eax  reg(56, 7f02dc000f50)  reg(56, 7f02dc000f50) 
0x7f02e76bc361: pop rbx  reg(7, 7f02e29581d0) 
0x7f02e76bc362: pop rbp
0x7f02e76bc363: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958200 7f02e29581d0 2 7f02e76bc2c0	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 7f02e29581b0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 7f02e29581b0)  reg(3, 7f02e2958200) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc328: mov rbp, qword ptr [rsi]
0x7f02e76bc32b: mov edi, 0x10  reg(45, 7f02e2958200) 
0x7f02e76bc330: call 0x7f02e76a6020
operator new(unsigned long)@plt: 10 7f02e29581d0 2 7f02e76bc2c0	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e76bc335: mov rdx, qword ptr [rbp]  reg(8, 7f02dc001500) 
0x7f02e76bc339: mov qword ptr [rax], rdx  reg(8, 1f4dc80)  mem(7f02dc001500, 7f02dc000078) 
0x7f02e76bc33c: mov rdx, qword ptr [rbp+0x8]  reg(8, 1f4dc80) 
0x7f02e76bc340: test rdx, rdx  reg(8, 1f4dc70)  reg(8, 1f4dc70) 
0x7f02e76bc343: mov qword ptr [rax+0x8], rdx  reg(8, 1f4dc70)  mem(7f02dc001508, 7f02dc000078) 
0x7f02e76bc347: jz 0x7f02e76bc358
0x7f02e76bc349: cmp qword ptr [rip+0x28121f], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc351: jz 0x7f02e76bc388
0x7f02e76bc353: lock add dword ptr [rdx+0x8], 0x1  mem(1f4dc78, 100000006) 
0x7f02e76bc358: mov qword ptr [rbx], rax  reg(10, 7f02dc001500)  mem(7f02e2958200, 6f72206e776f6e6b) 
0x7f02e76bc35b: add rsp, 0x8
0x7f02e76bc35f: xor eax, eax  reg(56, 7f02dc001500)  reg(56, 7f02dc001500) 
0x7f02e76bc361: pop rbx  reg(7, 7f02e2958200) 
0x7f02e76bc362: pop rbp
0x7f02e76bc363: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc0013d8 7f02e2958200 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 7f02e29581b0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 7f02e29581b0)  reg(3, 7f02dc0013d8) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc328: mov rbp, qword ptr [rsi]
0x7f02e76bc32b: mov edi, 0x10  reg(45, 7f02dc0013d8) 
0x7f02e76bc330: call 0x7f02e76a6020
operator new(unsigned long)@plt: 10 7f02e2958200 2 7f02dc000020	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e76bc335: mov rdx, qword ptr [rbp]  reg(8, 7f02dc001520) 
0x7f02e76bc339: mov qword ptr [rax], rdx  reg(8, 1f4dc80)  mem(7f02dc001520, 7f02dc000078) 
0x7f02e76bc33c: mov rdx, qword ptr [rbp+0x8]  reg(8, 1f4dc80) 
0x7f02e76bc340: test rdx, rdx  reg(8, 1f4dc70)  reg(8, 1f4dc70) 
0x7f02e76bc343: mov qword ptr [rax+0x8], rdx  reg(8, 1f4dc70)  mem(7f02dc001528, 7f02dc000078) 
0x7f02e76bc347: jz 0x7f02e76bc358
0x7f02e76bc349: cmp qword ptr [rip+0x28121f], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc351: jz 0x7f02e76bc388
0x7f02e76bc353: lock add dword ptr [rdx+0x8], 0x1  mem(1f4dc78, 100000007) 
0x7f02e76bc358: mov qword ptr [rbx], rax  reg(10, 7f02dc001520)  mem(7f02dc0013d8, 7f02dc0010d0) 
0x7f02e76bc35b: add rsp, 0x8
0x7f02e76bc35f: xor eax, eax  reg(56, 7f02dc001520)  reg(56, 7f02dc001520) 
0x7f02e76bc361: pop rbx  reg(7, 7f02dc0013d8) 
0x7f02e76bc362: pop rbp
0x7f02e76bc363: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958200 7f02e2958200 3 0	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 0)  reg(3, 7f02e2958200) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc2dd: cmp edx, 0x3  reg(54, 3) 
0x7f02e76bc2e0: jnz 0x7f02e76bc319
0x7f02e76bc2e2: mov rbp, qword ptr [rdi]
0x7f02e76bc2e5: test rbp, rbp
0x7f02e76bc2e8: jz 0x7f02e76bc319
0x7f02e76bc2ea: mov rbx, qword ptr [rbp+0x8]  reg(7, 7f02e2958200) 
0x7f02e76bc2ee: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bc2f1: jz 0x7f02e76bc30c
0x7f02e76bc2f3: cmp qword ptr [rip+0x281275], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc2fb: jz 0x7f02e76bc390
0x7f02e76bc301: lock sub dword ptr [rbx+0x8], 0x1  mem(1f4dc78, 100000008) 
0x7f02e76bc306: jz 0x7f02e76bc3d0
0x7f02e76bc30c: mov esi, 0x10  reg(47, 7f02e2958200) 
0x7f02e76bc311: mov rdi, rbp  reg(3, 7f02e2958200) 
0x7f02e76bc314: call 0x7f02e76a60f0
operator delete(void*, unsigned long)@plt: 7f02dc001500 10 3 0	_ZdlPvm@plt
0x7f02e76a60f0: jmp qword ptr [rip+0x298f02]
0x7f02e76a60f6: push 0x1fc 
0x7f02e76a60fb: jmp 0x7f02e76a4120
0x7f02e76bc319: add rsp, 0x8
0x7f02e76bc31d: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76bc31f: pop rbx  reg(7, 1f4dc70) 
0x7f02e76bc320: pop rbp
0x7f02e76bc321: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29581d0 7f02e29581d0 3 0	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 1f4c3a0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 1f4c3a0)  reg(3, 7f02e29581d0) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc2dd: cmp edx, 0x3  reg(54, 3) 
0x7f02e76bc2e0: jnz 0x7f02e76bc319
0x7f02e76bc2e2: mov rbp, qword ptr [rdi]
0x7f02e76bc2e5: test rbp, rbp
0x7f02e76bc2e8: jz 0x7f02e76bc319
0x7f02e76bc2ea: mov rbx, qword ptr [rbp+0x8]  reg(7, 7f02e29581d0) 
0x7f02e76bc2ee: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bc2f1: jz 0x7f02e76bc30c
0x7f02e76bc2f3: cmp qword ptr [rip+0x281275], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc2fb: jz 0x7f02e76bc390
0x7f02e76bc301: lock sub dword ptr [rbx+0x8], 0x1  mem(1f4dc78, 100000007) 
0x7f02e76bc306: jz 0x7f02e76bc3d0
0x7f02e76bc30c: mov esi, 0x10  reg(47, 7f02e29581d0) 
0x7f02e76bc311: mov rdi, rbp  reg(3, 7f02e29581d0) 
0x7f02e76bc314: call 0x7f02e76a60f0
operator delete(void*, unsigned long)@plt: 7f02dc000f50 10 3 0	_ZdlPvm@plt
0x7f02e76a60f0: jmp qword ptr [rip+0x298f02]
0x7f02e76bc319: add rsp, 0x8
0x7f02e76bc31d: xor eax, eax  reg(56, 7f02dc0014f0)  reg(56, 7f02dc0014f0) 
0x7f02e76bc31f: pop rbx  reg(7, 1f4dc70) 
0x7f02e76bc320: pop rbp
0x7f02e76bc321: ret 
0x7f02e76bdb1c: mov rax, qword ptr [rsp+0x10]  reg(10, 0) 
0x7f02e76bdb21: test rax, rax  reg(10, 7f02e76bc2c0)  reg(10, 7f02e76bc2c0) 
0x7f02e76bdb24: jz 0x7f02e76bdb33
0x7f02e76bdb26: mov edx, 0x3  reg(54, 7f02dc0014f0) 
0x7f02e76bdb2b: mov rsi, rsp  reg(4, 7f02dc000028) 
0x7f02e76bdb2e: mov rdi, rsp  reg(3, ffffffff) 
0x7f02e76bdb31: call rax
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958280 7f02e2958280 3 0	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 1f4dc70) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 1f4dc70)  reg(3, 7f02e2958280) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc2dd: cmp edx, 0x3  reg(54, 3) 
0x7f02e76bc2e0: jnz 0x7f02e76bc319
0x7f02e76bc2e2: mov rbp, qword ptr [rdi]
0x7f02e76bc2e5: test rbp, rbp
0x7f02e76bc2e8: jz 0x7f02e76bc319
0x7f02e76bc2ea: mov rbx, qword ptr [rbp+0x8]  reg(7, 7f02e2958280) 
0x7f02e76bc2ee: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bc2f1: jz 0x7f02e76bc30c
0x7f02e76bc2f3: cmp qword ptr [rip+0x281275], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc2fb: jz 0x7f02e76bc390
0x7f02e76bc301: lock sub dword ptr [rbx+0x8], 0x1  mem(1f4dc78, 100000006) 
0x7f02e76bc306: jz 0x7f02e76bc3d0
0x7f02e76bc30c: mov esi, 0x10  reg(47, 7f02e2958280) 
0x7f02e76bc311: mov rdi, rbp  reg(3, 7f02e2958280) 
0x7f02e76bc314: call 0x7f02e76a60f0
operator delete(void*, unsigned long)@plt: 7f02dc001350 10 3 0	_ZdlPvm@plt
0x7f02e76a60f0: jmp qword ptr [rip+0x298f02]
0x7f02e76bc319: add rsp, 0x8
0x7f02e76bc31d: xor eax, eax  reg(56, 7f02dc000f40)  reg(56, 7f02dc000f40) 
0x7f02e76bc31f: pop rbx  reg(7, 1f4dc70) 
0x7f02e76bc320: pop rbp
0x7f02e76bc321: ret 
0x7f02e76bdb33: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bdb36: jz 0x7f02e76bdb49
0x7f02e76bdb38: cmp qword ptr [rip+0x27fa30], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bdb40: jz 0x7f02e76bdb90
0x7f02e76bdb42: lock sub dword ptr [rbx+0x8], 0x1  mem(1f4dc78, 100000005) 
0x7f02e76bdb47: jz 0x7f02e76bdbb8
0x7f02e76bdb49: mov rax, qword ptr [rsp+0x28]  reg(10, 0) 
0x7f02e76bdb4e: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76bdb57: jnz 0x7f02e76bdbff
0x7f02e76bdb5d: add rsp, 0x30
0x7f02e76bdb61: pop rbx  reg(7, 1f4dc70) 
0x7f02e76bdb62: pop rbp
0x7f02e76bdb63: pop r12  reg(15, 1f4c3b0) 
0x7f02e76bdb65: pop r13  reg(16, 7f02e6646e30) 
0x7f02e76bdb67: pop r14  reg(17, 1f4dc70) 
0x7f02e76bdb69: ret 
0x7f02e76c0495: mov rax, qword ptr [rip+0x27d184]  reg(10, 0) 
0x7f02e76c049c: mov rcx, qword ptr [rsp+0x28]  reg(9, 0) 
0x7f02e76c04a1: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76c04aa: jnz 0x7f02e76c0508
0x7f02e76c04ac: add rsp, 0x38
0x7f02e76c04b0: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76c04b1: pop rbp
0x7f02e76c04b2: ret 
0x7f02e76bd560: mov qword ptr [rbx+0x228], rax  reg(10, 7f02e79404b0)  mem(1f4e8f8, 7f02e79404a8) 
0x7f02e76bd567: mov eax, 0x1  reg(56, 7f02e79404b0) 
0x7f02e76bd56c: jmp 0x7f02e76bd4b2
0x7f02e76bd4b2: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f02e76bd4b7: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e76bd4c0: jnz 0x7f02e76bd571
0x7f02e76bd4c6: add rsp, 0x18
0x7f02e76bd4ca: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bd4cb: pop rbp
0x7f02e76bd4cc: ret 
0x7f02e76be6fd: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76be6ff: jz 0x7f02e76be709
0x7f02e76be701: mov rdi, rbx  reg(3, ffffffff)  reg(7, 1f4e6d0) 
0x7f02e76be704: call 0x7f02e76a6210
opendnp3::LinkContext::TryStartTransmission()@plt: 1f4e6d0 7f02dc000028 7f02dc000f40 0	_ZN8opendnp311LinkContext20TryStartTransmissionEv@plt
0x7f02e76a6210: jmp qword ptr [rip+0x298e72]
opendnp3::LinkContext::TryStartTransmission(): 1f4e6d0 7f02dc000028 7f02dc000f40 0	_ZN8opendnp311LinkContext20TryStartTransmissionEv
0x7f02e76bcc50: push rbx  reg(7, 1f4e6d0) 
0x7f02e76bcc51: cmp byte ptr [rdi+0x204], 0x0  mem(1f4e8d4, 98830f3600000000) 
0x7f02e76bcc58: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4e6d0) 
0x7f02e76bcc5b: jnz 0x7f02e76bcc98
0x7f02e76bcc5d: mov rdx, qword ptr [rbx+0x1c0]  reg(8, 7f02dc000f40) 
0x7f02e76bcc64: test rdx, rdx  reg(8, 0)  reg(8, 0) 
0x7f02e76bcc67: jz 0x7f02e76bcc89
0x7f02e76bcc89: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bcc8a: ret 
0x7f02e76be709: mov eax, 0x1  reg(56, 1) 
0x7f02e76be70e: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76be70f: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958640 7f02dc0013d8 2 0	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 7f02dc0013c0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 7f02dc0013c0)  reg(3, 7f02e2958640) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc328: mov rbp, qword ptr [rsi]
0x7f02e76bc32b: mov edi, 0x10  reg(45, 7f02e2958640) 
0x7f02e76bc330: call 0x7f02e76a6020
operator new(unsigned long)@plt: 10 7f02dc0013d8 2 0	_Znwm@plt
0x7f02e76a6020: jmp qword ptr [rip+0x298f6a]
0x7f02e76bc335: mov rdx, qword ptr [rbp]  reg(8, 7f02dc001350) 
0x7f02e76bc339: mov qword ptr [rax], rdx  reg(8, 1f4dc80)  mem(7f02dc001350, 7f02dc000f40) 
0x7f02e76bc33c: mov rdx, qword ptr [rbp+0x8]  reg(8, 1f4dc80) 
0x7f02e76bc340: test rdx, rdx  reg(8, 1f4dc70)  reg(8, 1f4dc70) 
0x7f02e76bc343: mov qword ptr [rax+0x8], rdx  reg(8, 1f4dc70)  mem(7f02dc001358, 1f4dc70) 
0x7f02e76bc347: jz 0x7f02e76bc358
0x7f02e76bc349: cmp qword ptr [rip+0x28121f], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc351: jz 0x7f02e76bc388
0x7f02e76bc353: lock add dword ptr [rdx+0x8], 0x1  mem(1f4dc78, 100000004) 
0x7f02e76bc358: mov qword ptr [rbx], rax  reg(10, 7f02dc001350)  mem(7f02e2958640, 7f02e7df08e0) 
0x7f02e76bc35b: add rsp, 0x8
0x7f02e76bc35f: xor eax, eax  reg(56, 7f02dc001350)  reg(56, 7f02dc001350) 
0x7f02e76bc361: pop rbx  reg(7, 7f02e2958640) 
0x7f02e76bc362: pop rbp
0x7f02e76bc363: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc0013d8 7f02dc0013d8 3 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 0)  reg(3, 7f02dc0013d8) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc2dd: cmp edx, 0x3  reg(54, 3) 
0x7f02e76bc2e0: jnz 0x7f02e76bc319
0x7f02e76bc2e2: mov rbp, qword ptr [rdi]
0x7f02e76bc2e5: test rbp, rbp
0x7f02e76bc2e8: jz 0x7f02e76bc319
0x7f02e76bc2ea: mov rbx, qword ptr [rbp+0x8]  reg(7, 7f02dc0013d8) 
0x7f02e76bc2ee: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bc2f1: jz 0x7f02e76bc30c
0x7f02e76bc2f3: cmp qword ptr [rip+0x281275], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc2fb: jz 0x7f02e76bc390
0x7f02e76bc301: lock sub dword ptr [rbx+0x8], 0x1  mem(1f4dc78, 100000005) 
0x7f02e76bc306: jz 0x7f02e76bc3d0
0x7f02e76bc30c: mov esi, 0x10  reg(47, 7f02dc0013d8) 
0x7f02e76bc311: mov rdi, rbp  reg(3, 7f02dc0013d8) 
0x7f02e76bc314: call 0x7f02e76a60f0
operator delete(void*, unsigned long)@plt: 7f02dc001520 10 3 7f02dc000020	_ZdlPvm@plt
0x7f02e76a60f0: jmp qword ptr [rip+0x298f02]
0x7f02e76bc319: add rsp, 0x8
0x7f02e76bc31d: xor eax, eax  reg(56, 7f02dc000f40)  reg(56, 7f02dc000f40) 
0x7f02e76bc31f: pop rbx  reg(7, 1f4dc70) 
0x7f02e76bc320: pop rbp
0x7f02e76bc321: ret 
std::_Function_handler<void (), opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_invoke(std::_Any_data const&): 7f02e2958640 1f4c160 98 7f02dc000000	_ZNSt17_Function_handlerIFvvEZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E9_M_invokeERKSt9_Any_data
0x7f02e76bc230: mov rax, qword ptr [rdi]  reg(10, 7f02e29587e0) 
0x7f02e76bc233: mov rdi, qword ptr [rax]  reg(3, 7f02e2958640) 
0x7f02e76bc236: mov rax, qword ptr [rdi]  reg(10, 7f02dc001350) 
0x7f02e76bc239: jmp qword ptr [rax+0x28]
opendnp3::TransportLayer::OnTxReady(): 1f4dc80 1f4c160 98 7f02dc000000	_ZN8opendnp314TransportLayer9OnTxReadyEv
0x7f02e77038a0: push r12  reg(15, 7f02e2958640) 
0x7f02e77038a2: push rbp
0x7f02e77038a3: push rbx  reg(7, 7f02dc0013c0) 
0x7f02e77038a4: sub rsp, 0x10
0x7f02e77038a8: movzx ebp, byte ptr [rdi+0x40]
0x7f02e77038ac: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e793c9a8) 
0x7f02e77038b5: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29585f8, 7f02e76bc319) 
0x7f02e77038ba: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e77038bc: test bpl, bpl 
0x7f02e77038bf: jz 0x7f02e7703900
0x7f02e77038c1: movzx ebp, byte ptr [rdi+0x41]
0x7f02e77038c5: test bpl, bpl 
0x7f02e77038c8: jz 0x7f02e7703920
0x7f02e77038ca: mov byte ptr [rdi+0x41], 0x0  mem(1f4dcc1, 3000000000000001) 
0x7f02e77038ce: mov rdi, qword ptr [rdi+0x30]  reg(3, 1f4dc80) 
0x7f02e77038d2: test rdi, rdi  reg(3, 1f4d728)  reg(3, 1f4d728) 
0x7f02e77038d5: jz 0x7f02e77038dd
0x7f02e77038d7: mov rax, qword ptr [rdi]  reg(10, 0) 
0x7f02e77038da: call qword ptr [rax+0x28]
opendnp3::OContext::OnTxReady(): 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext9OnTxReadyEv
0x7f02e76f8400: movzx eax, byte ptr [rdi+0x430]  reg(56, 7f02e793c240) 
0x7f02e76f8407: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f8409: jz 0x7f02e76f8416
0x7f02e76f840b: movzx eax, byte ptr [rdi+0x431]  reg(56, 1) 
0x7f02e76f8412: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f8414: jnz 0x7f02e76f8420
0x7f02e76f8420: sub rsp, 0x18
0x7f02e76f8424: mov byte ptr [rdi+0x431], 0x0  mem(1f4db59, b000000000008001) 
0x7f02e76f842b: mov byte ptr [rsp+0xf], al  reg(27, 1)  mem(7f02e29585df, 7f02dc00152000) 
0x7f02e76f842f: call 0x7f02e76a7460
opendnp3::OContext::CheckForTaskStart()@plt: 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext17CheckForTaskStartEv@plt
0x7f02e76a7460: jmp qword ptr [rip+0x29854a]
opendnp3::OContext::CheckForTaskStart(): 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext17CheckForTaskStartEv
0x7f02e76f8300: push rbx  reg(7, 7f02dc0013c0) 
0x7f02e76f8301: mov rbx, rdi  reg(7, 7f02dc0013c0)  reg(3, 1f4d728) 
0x7f02e76f8304: call 0x7f02e76a6fd0
opendnp3::OContext::CheckForDeferredRequest()@plt: 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext23CheckForDeferredRequestEv@plt
0x7f02e76a6fd0: jmp qword ptr [rip+0x298792]
opendnp3::OContext::CheckForDeferredRequest(): 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext23CheckForDeferredRequestEv
0x7f02e76f7d10: push rbx  reg(7, 1f4d728) 
0x7f02e76f7d11: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4d728) 
0x7f02e76f7d14: sub rsp, 0x30
0x7f02e76f7d18: mov rax, qword ptr fs:[0x28]  reg(10, 1) 
0x7f02e76f7d21: mov qword ptr [rsp+0x28], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29585a8, 7f02e6b2753c) 
0x7f02e76f7d26: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7d28: call 0x7f02e76a58b0
opendnp3::OContext::CanTransmit() const@plt: 1f4d728 1f4c160 98 7f02dc000000	_ZNK8opendnp38OContext11CanTransmitEv@plt
0x7f02e76a58b0: jmp qword ptr [rip+0x299322]
opendnp3::OContext::CanTransmit() const: 1f4d728 1f4c160 98 7f02dc000000	_ZNK8opendnp38OContext11CanTransmitEv
0x7f02e76f7cf0: movzx eax, byte ptr [rdi+0x430]  reg(56, 0) 
0x7f02e76f7cf7: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f7cf9: jz 0x7f02e76f7d05
0x7f02e76f7cfb: movzx eax, byte ptr [rdi+0x431]  reg(56, 1) 
0x7f02e76f7d02: xor eax, 0x1  reg(56, 0) 
0x7f02e76f7d05: ret 
0x7f02e76f7d2d: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f7d2f: jnz 0x7f02e76f7d50
0x7f02e76f7d50: lea rdi, ptr [rbx+0x458]  reg(3, 1f4d728) 
0x7f02e76f7d57: call 0x7f02e76a4a70
opendnp3::DeferredRequest::IsSet() const@plt: 1f4db80 1f4c160 98 7f02dc000000	_ZNK8opendnp315DeferredRequest5IsSetEv@plt
0x7f02e76a4a70: jmp qword ptr [rip+0x299a42]
opendnp3::DeferredRequest::IsSet() const: 1f4db80 1f4c160 98 7f02dc000000	_ZNK8opendnp315DeferredRequest5IsSetEv
0x7f02e76ef060: movzx eax, byte ptr [rdi]  reg(56, 1) 
0x7f02e76ef063: ret 
0x7f02e76f7d5c: test al, al  reg(27, 0)  reg(27, 0) 
0x7f02e76f7d5e: jz 0x7f02e76f7d31
0x7f02e76f7d31: mov rax, qword ptr [rsp+0x28]  reg(10, 0) 
0x7f02e76f7d36: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76f7d3f: jnz 0x7f02e76f7db9
0x7f02e76f7d41: add rsp, 0x30
0x7f02e76f7d45: pop rbx  reg(7, 1f4d728) 
0x7f02e76f7d46: ret 
0x7f02e76f8309: mov rdi, rbx  reg(3, 1f4db80)  reg(7, 1f4d728) 
0x7f02e76f830c: pop rbx  reg(7, 1f4d728) 
0x7f02e76f830d: jmp 0x7f02e76a7b70
opendnp3::OContext::CheckForUnsolicited()@plt: 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext19CheckForUnsolicitedEv@plt
0x7f02e76a7b70: jmp qword ptr [rip+0x2981c2]
opendnp3::OContext::CheckForUnsolicited(): 1f4d728 1f4c160 98 7f02dc000000	_ZN8opendnp38OContext19CheckForUnsolicitedEv
0x7f02e76f80c0: push r14  reg(17, 7f02e29599c0) 
0x7f02e76f80c2: push r13  reg(16, 1f4be80) 
0x7f02e76f80c4: push r12  reg(15, 7f02e2958640) 
0x7f02e76f80c6: push rbp
0x7f02e76f80c7: push rbx  reg(7, 7f02dc0013c0) 
0x7f02e76f80c8: mov rbx, rdi  reg(7, 7f02dc0013c0)  reg(3, 1f4d728) 
0x7f02e76f80cb: sub rsp, 0x70
0x7f02e76f80cf: mov rax, qword ptr fs:[0x28]  reg(10, 0) 
0x7f02e76f80d8: mov qword ptr [rsp+0x68], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958598, 7f02e29599c0) 
0x7f02e76f80dd: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f80df: call 0x7f02e76a58b0
opendnp3::OContext::CanTransmit() const@plt: 1f4d728 1f4c160 98 7f02dc000000	_ZNK8opendnp38OContext11CanTransmitEv@plt
0x7f02e76a58b0: jmp qword ptr [rip+0x299322]
opendnp3::OContext::CanTransmit() const: 1f4d728 1f4c160 98 7f02dc000000	_ZNK8opendnp38OContext11CanTransmitEv
0x7f02e76f7cf0: movzx eax, byte ptr [rdi+0x430]  reg(56, 0) 
0x7f02e76f7cf7: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f7cf9: jz 0x7f02e76f7d05
0x7f02e76f7cfb: movzx eax, byte ptr [rdi+0x431]  reg(56, 1) 
0x7f02e76f7d02: xor eax, 0x1  reg(56, 0) 
0x7f02e76f7d05: ret 
0x7f02e76f80e4: test al, al  reg(27, 1)  reg(27, 1) 
0x7f02e76f80e6: jnz 0x7f02e76f8110
0x7f02e76f8110: mov rdi, qword ptr [rbx+0x538]  reg(3, 1f4d728) 
0x7f02e76f8117: mov rax, qword ptr [rdi]  reg(10, 1) 
0x7f02e76f811a: call qword ptr [rax]
opendnp3::OutstationState::IsIdle(): 7f02e7940600 1f4c160 98 7f02dc000000	_ZN8opendnp315OutstationState6IsIdleEv
0x7f02e76fbae0: xor eax, eax  reg(56, 7f02e793c390)  reg(56, 7f02e793c390) 
0x7f02e76fbae2: ret 
0x7f02e76f811c: test al, al  reg(27, 0)  reg(27, 0) 
0x7f02e76f811e: jz 0x7f02e76f80e8
0x7f02e76f80e8: mov rax, qword ptr [rsp+0x68]  reg(10, 0) 
0x7f02e76f80ed: xor rax, qword ptr fs:[0x28]  reg(10, d533a0ca891b2d00) 
0x7f02e76f80f6: jnz 0x7f02e76f82f6
0x7f02e76f80fc: add rsp, 0x70
0x7f02e76f8100: pop rbx  reg(7, 1f4d728) 
0x7f02e76f8101: pop rbp
0x7f02e76f8102: pop r12  reg(15, 7f02e2958640) 
0x7f02e76f8104: pop r13  reg(16, 1f4be80) 
0x7f02e76f8106: pop r14  reg(17, 7f02e29599c0) 
0x7f02e76f8108: ret 
0x7f02e76f8434: movzx eax, byte ptr [rsp+0xf]  reg(56, 0) 
0x7f02e76f8439: add rsp, 0x18
0x7f02e76f843d: ret 
0x7f02e77038dd: mov rdx, qword ptr [rsp+0x8]  reg(8, 98) 
0x7f02e77038e2: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e77038eb: mov eax, ebp  reg(56, 1) 
0x7f02e77038ed: jnz 0x7f02e7703985
0x7f02e77038f3: add rsp, 0x10
0x7f02e77038f7: pop rbx  reg(7, 7f02dc0013c0) 
0x7f02e77038f8: pop rbp
0x7f02e77038f9: pop r12  reg(15, 7f02e2958640) 
0x7f02e77038fb: ret 
std::_Function_base::_Base_manager<opendnp3::LinkContext::CompleteSendOperation()::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958640 7f02e2958640 3 7f02dc000000	_ZNSt14_Function_base13_Base_managerIZN8opendnp311LinkContext21CompleteSendOperationEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation
0x7f02e76bc2c0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc2c3: jz 0x7f02e76bc378
0x7f02e76bc2c9: jb 0x7f02e76bc368
0x7f02e76bc2cf: push rbp
0x7f02e76bc2d0: push rbx  reg(7, 1f4c3a0) 
0x7f02e76bc2d1: mov rbx, rdi  reg(7, 1f4c3a0)  reg(3, 7f02e2958640) 
0x7f02e76bc2d4: sub rsp, 0x8
0x7f02e76bc2d8: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc2db: jz 0x7f02e76bc328
0x7f02e76bc2dd: cmp edx, 0x3  reg(54, 3) 
0x7f02e76bc2e0: jnz 0x7f02e76bc319
0x7f02e76bc2e2: mov rbp, qword ptr [rdi]
0x7f02e76bc2e5: test rbp, rbp
0x7f02e76bc2e8: jz 0x7f02e76bc319
0x7f02e76bc2ea: mov rbx, qword ptr [rbp+0x8]  reg(7, 7f02e2958640) 
0x7f02e76bc2ee: test rbx, rbx  reg(7, 1f4dc70)  reg(7, 1f4dc70) 
0x7f02e76bc2f1: jz 0x7f02e76bc30c
0x7f02e76bc2f3: cmp qword ptr [rip+0x281275], 0x0  mem(7f02e793d570, 7f02e794f230) 
0x7f02e76bc2fb: jz 0x7f02e76bc390
0x7f02e76bc301: lock sub dword ptr [rbx+0x8], 0x1  mem(1f4dc78, 100000004) 
0x7f02e76bc306: jz 0x7f02e76bc3d0
0x7f02e76bc30c: mov esi, 0x10  reg(47, 7f02e2958640) 
0x7f02e76bc311: mov rdi, rbp  reg(3, 7f02e2958640) 
0x7f02e76bc314: call 0x7f02e76a60f0
operator delete(void*, unsigned long)@plt: 7f02dc001350 10 3 7f02dc000000	_ZdlPvm@plt
0x7f02e76a60f0: jmp qword ptr [rip+0x298f02]
0x7f02e76bc319: add rsp, 0x8
0x7f02e76bc31d: xor eax, eax  reg(56, 7f02dc001510)  reg(56, 7f02dc001510) 
0x7f02e76bc31f: pop rbx  reg(7, 1f4dc70) 
0x7f02e76bc320: pop rbp
0x7f02e76bc321: ret 
memcpy: 7f02e29584e0 7f02e7bdc635 b 635	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 b 635	dlsym@plt
opendnp3::LogFlagToString(int): 4 0 6 7f02e29581a0	_ZN8opendnp315LogFlagToStringEi
0x7f02e76c1200: cmp edi, 0x100  reg(45, 4) 
0x7f02e76c1206: jz 0x7f02e76c1306
0x7f02e76c120c: jnle 0x7f02e76c1270
0x7f02e76c120e: cmp edi, 0x8  reg(45, 4) 
0x7f02e76c1211: lea rax, ptr [rip+0x4f567]  reg(10, 0) 
0x7f02e76c1218: jz 0x7f02e76c124b
0x7f02e76c121a: jnle 0x7f02e76c1250
0x7f02e76c121c: cmp edi, 0x2  reg(45, 4) 
0x7f02e76c121f: lea rax, ptr [rip+0x4f549]  reg(10, 7f02e771077f) 
0x7f02e76c1226: jz 0x7f02e76c124b
0x7f02e76c1228: cmp edi, 0x4  reg(45, 4) 
0x7f02e76c122b: lea rax, ptr [rip+0x4f545]  reg(10, 7f02e771076f) 
0x7f02e76c1232: jz 0x7f02e76c124b
0x7f02e76c124b: ret 
memcpy: 7f02dc001771 7f02e7bdc261 2 7f02dc001770	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 7f02dc001770	dlsym@plt
memcpy: 7f02dc001773 7f02e295812b d 31	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 d 31	dlsym@plt
memcpy: 7f02dc001780 7f02e7bdc264 2 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2 0	dlsym@plt
memcpy: 7f02dc001782 7f02e7710777 7 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 7 0	dlsym@plt
memcpy: 7f02dc001789 7f02e7bdc265 1 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 1 0	dlsym@plt
memcpy: 7f02dc00178a 1f4c380 6 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 6 0	dlsym@plt
memcpy: 7f02dc001790 7f02e7bdc267 3 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 3 0	dlsym@plt
memcpy: 7f02dc001793 7f02e29584e0 b 0	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 b 0	dlsym@plt
memcpy: 7f02dc000f90 7f02dc001770 2e 7f02dc000020	memcpy
dlsym@plt: ffffffffffffffff 7f02e7ebed08 2e 7f02dc000020	dlsym@plt
asiodnp3::PrintingChannelListener::OnStateChange(opendnp3::ChannelState): 1f4c350 0 1f4ca78 0	_ZN8asiodnp323PrintingChannelListener13OnStateChangeEN8opendnp312ChannelStateE
0x4084a0: push rbp
0x4084a1: push rbx  reg(7, 7f02dc0010c0) 
0x4084a2: mov edi, esi  reg(45, 1f4c350)  reg(47, 0) 
0x4084a4: sub rsp, 0x8
0x4084a8: call 0x406dd0
opendnp3::ChannelStateToString(opendnp3::ChannelState)@plt: 0 0 1f4ca78 0	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE@plt
0x406dd0: jmp qword ptr [rip+0x204302]
opendnp3::ChannelStateToString(opendnp3::ChannelState): 0 0 1f4ca78 0	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE
0x7f02e76b9ba0: cmp dil, 0x1  reg(46, 0) 
0x7f02e76b9ba4: lea rax, ptr [rip+0x528ce]  reg(10, 60abc8) 
0x7f02e76b9bab: jz 0x7f02e76b9bcc
0x7f02e76b9bad: lea rax, ptr [rip+0x528be]  reg(10, 7f02e770c479) 
0x7f02e76b9bb4: jb 0x7f02e76b9bcc
0x7f02e76b9bcc: ret 
0x4084ad: mov rbx, qword ptr [rip+0x202b24]  reg(7, 7f02dc0010c0) 
0x4084b4: lea rsi, ptr [rip+0xb15]  reg(4, 0) 
0x4084bb: mov rbp, rax
0x4084be: mov edx, 0x16  reg(54, 1f4ca78) 
0x4084c3: mov rdi, rbx  reg(3, 0)  reg(7, 7f02e7406f40) 
0x4084c6: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 408fd0 16 0	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084cb: test rbp, rbp
0x4084ce: jz 0x408550
0x4084d4: mov rdi, rbp  reg(3, 7f02dc000b56) 
0x4084d7: call 0x406cc0
strlen@plt: 7f02e770c472 0 7f02e7401988 206574617473206c	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x4084dc: mov rsi, rbp  reg(4, 0) 
0x4084df: mov rdx, rax  reg(8, 4040)  reg(10, 6) 
0x4084e2: mov rdi, rbx  reg(3, 7f02e770c472)  reg(7, 7f02e7406f40) 
0x4084e5: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 7f02e770c472 6 472	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084ea: mov rax, qword ptr [rbx]  reg(10, 7f02e7406f40) 
0x4084ed: mov rax, qword ptr [rax-0x18]  reg(10, 7f02e7401988) 
0x4084f1: mov rbp, qword ptr [rax+rbx*1+0xf0]
0x4084f9: test rbp, rbp
0x4084fc: jz 0x408567
0x4084fe: cmp byte ptr [rbp+0x38], 0x0  mem(7f02e74081f8, 605040302010001) 
0x408502: jz 0x408520
0x408504: movsx esi, byte ptr [rbp+0x43]  reg(47, 0) 
0x408508: mov rdi, rbx  reg(3, 7f02dc000b5c)  reg(7, 7f02e7406f40) 
0x40850b: call 0x406c60
std::ostream::put(char)@plt: 7f02e7406f40 a 7f02e7401988 4445534f	_ZNSo3putEc@plt
0x406c60: jmp qword ptr [rip+0x2043ba]
0x408510: add rsp, 0x8
0x408514: mov rdi, rax  reg(3, 0)  reg(10, 7f02e7406f40) 
0x408517: pop rbx  reg(7, 7f02e7406f40) 
0x408518: pop rbp
0x408519: jmp 0x406d00
std::ostream::flush()@plt: 7f02e7406f40 7f02e6e69780 7f02e7401988 0	_ZNSo5flushEv@plt
0x406d00: jmp qword ptr [rip+0x20436a]
opendnp3::LinkLayer::OnLowerLayerDown(): 1f4e6c0 7f02e6e69780 0 0	_ZN8opendnp39LinkLayer16OnLowerLayerDownEv
0x7f02e76be6d0: add rdi, 0x10  reg(3, 1f4e6c0) 
0x7f02e76be6d4: jmp 0x7f02e76a7030
opendnp3::LinkContext::OnLowerLayerDown()@plt: 1f4e6d0 7f02e6e69780 0 0	_ZN8opendnp311LinkContext16OnLowerLayerDownEv@plt
0x7f02e76a7030: jmp qword ptr [rip+0x298762]
0x7f02e76a7036: push 0x2f0 
0x7f02e76a703b: jmp 0x7f02e76a4120
opendnp3::LinkContext::OnLowerLayerDown(): 1f4e6d0 7f02e6e69780 0 0	_ZN8opendnp311LinkContext16OnLowerLayerDownEv
0x7f02e76bc3f0: push rbp
0x7f02e76bc3f1: push rbx  reg(7, 7f02dc0008d8) 
0x7f02e76bc3f2: mov rbx, rdi  reg(7, 7f02dc0008d8)  reg(3, 1f4e6d0) 
0x7f02e76bc3f5: sub rsp, 0x18
0x7f02e76bc3f9: movzx ebp, byte ptr [rdi+0x202]
0x7f02e76bc400: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e7deedb8) 
0x7f02e76bc409: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29583f8, 7f02e6b1081f) 
0x7f02e76bc40e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76bc410: test bpl, bpl 
0x7f02e76bc413: jnz 0x7f02e76bc458
0x7f02e76bc458: mov byte ptr [rdi+0x202], 0x0  mem(1f4e8d2, f36000000000001) 
0x7f02e76bc45f: mov byte ptr [rdi+0x204], 0x0  mem(1f4e8d4, 98830f3600000000) 
0x7f02e76bc466: lea rdi, ptr [rdi+0x1e0]  reg(3, 1f4e6d0) 
0x7f02e76bc46d: mov byte ptr [rdi+0x23], 0x0  mem(1f4e8d3, 830f360000000000) 
0x7f02e76bc471: mov qword ptr [rdi-0x20], 0x0  mem(1f4e890, 0) 
0x7f02e76bc479: mov byte ptr [rdi-0x18], 0x0  mem(1f4e898, 0) 
0x7f02e76bc47d: mov byte ptr [rdi-0x98], 0x0  mem(1f4e818, 0) 
0x7f02e76bc484: mov byte ptr [rdi-0x80], 0x0  mem(1f4e830, 0) 
0x7f02e76bc488: call 0x7f02e76a50d0
openpal::TimerRef::Cancel()@plt: 1f4e8b0 7f02e6e69780 0 0	_ZN7openpal8TimerRef6CancelEv@plt
0x7f02e76a50d0: jmp qword ptr [rip+0x299712]
0x7f02e76a50d6: push 0xfa 
0x7f02e76a50db: jmp 0x7f02e76a4120
0x7f02e76bc48d: lea rdi, ptr [rbx+0x1f0]  reg(3, 0) 
0x7f02e76bc494: call 0x7f02e76a50d0
openpal::TimerRef::Cancel()@plt: 1f4e8c0 7f02e6e69780 1f4e8b0 0	_ZN7openpal8TimerRef6CancelEv@plt
0x7f02e76a50d0: jmp qword ptr [rip+0x299712]
0x7f02e76bc499: mov rax, qword ptr [rip+0x281180]  reg(10, 1) 
0x7f02e76bc4a0: mov rdi, qword ptr [rbx+0x238]  reg(3, 1f4beb0) 
0x7f02e76bc4a7: mov qword ptr [rbx+0x228], rax  reg(10, 7f02e79404b0)  mem(1f4e8f8, 7f02e79404b0) 
0x7f02e76bc4ae: mov rax, qword ptr [rip+0x28185b]  reg(10, 7f02e79404b0) 
0x7f02e76bc4b5: mov qword ptr [rbx+0x230], rax  reg(10, 7f02e79404d0)  mem(1f4e900, 7f02e79404d0) 
0x7f02e76bc4bc: mov rax, qword ptr [rdi]  reg(10, 7f02e79404d0) 
0x7f02e76bc4bf: mov rax, qword ptr [rax]  reg(10, 60aa00) 
0x7f02e76bc4c2: cmp rax, qword ptr [rip+0x2815ef]  reg(10, 407c90) 
0x7f02e76bc4c9: jnz 0x7f02e76bc510
0x7f02e76bc4cb: mov rdi, qword ptr [rbx+0x248]  reg(3, 1f4d5f0) 
0x7f02e76bc4d2: mov rax, qword ptr [rdi]  reg(10, 407c90) 
0x7f02e76bc4d5: call qword ptr [rax+0x18]
opendnp3::TransportLayer::OnLowerLayerDown(): 1f4dc80 0 1f4beb0 0	_ZN8opendnp314TransportLayer16OnLowerLayerDownEv
0x7f02e7703b00: push r13  reg(16, 7f02dc0008d8) 
0x7f02e7703b02: push r12  reg(15, 1f4cae0) 
0x7f02e7703b04: push rbp
0x7f02e7703b05: push rbx  reg(7, 1f4e6d0) 
0x7f02e7703b06: mov rbx, rdi  reg(7, 1f4e6d0)  reg(3, 1f4dc80) 
0x7f02e7703b09: sub rsp, 0x18
0x7f02e7703b0d: movzx r12d, byte ptr [rdi+0x40]  reg(73, 1f4cae0) 
0x7f02e7703b12: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e793c9a8) 
0x7f02e7703b1b: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e29583b8, 7f02e7405c50) 
0x7f02e7703b20: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e7703b22: test r12b, r12b  reg(71, 1)  reg(71, 1) 
0x7f02e7703b25: jnz 0x7f02e7703b70
0x7f02e7703b70: mov byte ptr [rdi+0x40], 0x0  mem(1f4dcc0, 1) 
0x7f02e7703b74: mov byte ptr [rdi+0x41], 0x0  mem(1f4dcc1, 3000000000000000) 
0x7f02e7703b78: lea rdi, ptr [rdi+0x48]  reg(3, 1f4dc80) 
0x7f02e7703b7c: call 0x7f02e76a7650
opendnp3::TransportRx::Reset()@plt: 1f4dcc8 0 1f4beb0 0	_ZN8opendnp311TransportRx5ResetEv@plt
0x7f02e76a7650: jmp qword ptr [rip+0x298452]
0x7f02e76a7656: push 0x352 
0x7f02e76a765b: jmp 0x7f02e76a4120
opendnp3::TransportRx::Reset(): 1f4dcc8 0 1f4beb0 0	_ZN8opendnp311TransportRx5ResetEv
0x7f02e7704820: jmp 0x7f02e76a43b0
opendnp3::TransportRx::ClearRxBuffer()@plt: 1f4dcc8 0 1f4beb0 0	_ZN8opendnp311TransportRx13ClearRxBufferEv@plt
0x7f02e76a43b0: jmp qword ptr [rip+0x299da2]
0x7f02e76a43b6: push 0x28 
0x7f02e76a43bb: jmp 0x7f02e76a4120
opendnp3::TransportRx::ClearRxBuffer(): 1f4dcc8 0 1f4beb0 0	_ZN8opendnp311TransportRx13ClearRxBufferEv
0x7f02e7704810: mov dword ptr [rdi+0x50], 0x0  mem(1f4dd18, 0) 
0x7f02e7704817: ret 
0x7f02e7703b81: mov rbx, qword ptr [rbx+0x30]  reg(7, 1f4dc80) 
0x7f02e7703b85: test rbx, rbx  reg(7, 1f4d728)  reg(7, 1f4d728) 
0x7f02e7703b88: jz 0x7f02e7703bd5
0x7f02e7703b8a: mov rax, qword ptr [rbx]  reg(10, 0) 
0x7f02e7703b8d: lea rdx, ptr [rip-0x94]  reg(8, 1f4beb0) 
0x7f02e7703b94: mov rax, qword ptr [rax+0x18]  reg(10, 7f02e793c240) 
0x7f02e7703b98: cmp rax, rdx  reg(10, 7f02e76f77f0)  reg(8, 7f02e7703b00) 
0x7f02e7703b9b: jnz 0x7f02e7703bd0
0x7f02e7703bd0: mov rdi, rbx  reg(3, 1f4dcc8)  reg(7, 1f4d728) 
0x7f02e7703bd3: call rax
opendnp3::OContext::OnLowerLayerDown(): 1f4d728 0 7f02e7703b00 0	_ZN8opendnp38OContext16OnLowerLayerDownEv
0x7f02e76f77f0: push rbp
0x7f02e76f77f1: push rbx  reg(7, 1f4d728) 
0x7f02e76f77f2: mov rbx, rdi  reg(7, 1f4d728)  reg(3, 1f4d728) 
0x7f02e76f77f5: sub rsp, 0x18
0x7f02e76f77f9: movzx ebp, byte ptr [rdi+0x430]
0x7f02e76f7800: mov rax, qword ptr fs:[0x28]  reg(10, 7f02e76f77f0) 
0x7f02e76f7809: mov qword ptr [rsp+0x8], rax  reg(10, d533a0ca891b2d00)  mem(7f02e2958388, 1f4cae0) 
0x7f02e76f780e: xor eax, eax  reg(56, d533a0ca891b2d00)  reg(56, d533a0ca891b2d00) 
0x7f02e76f7810: test bpl, bpl 
0x7f02e76f7813: jnz 0x7f02e76f7850
0x7f02e76f7850: mov rax, qword ptr [rip+0x246221]  reg(10, 0) 
0x7f02e76f7857: mov byte ptr [rdi+0x430], 0x0  mem(1f4db58, 800001) 
0x7f02e76f785e: lea rdi, ptr [rdi+0x448]  reg(3, 1f4d728) 
0x7f02e76f7865: mov byte ptr [rdi-0x17], 0x0  mem(1f4db59, b000000000008000) 
0x7f02e76f7869: mov byte ptr [rdi+0xb8], 0x0  mem(1f4dc28, 100) 
0x7f02e76f7870: mov qword ptr [rdi+0xf0], rax  reg(10, 7f02e7940610)  mem(1f4dc60, 7f02e7940600) 
0x7f02e76f7877: call 0x7f02e76a4e20
opendnp3::RequestHistory::Reset()@plt: 1f4db70 0 7f02e7703b00 0	_ZN8opendnp314RequestHistory5ResetEv@plt
0x7f02e76a4e20: jmp qword ptr [rip+0x29986a]
0x7f02e76a4e26: push 0xcf 
0x7f02e76a4e2b: jmp 0x7f02e76a4120
opendnp3::RequestHistory::Reset(): 1f4db70 0 7f02e7703b00 0	_ZN8opendnp314RequestHistory5ResetEv
0x7f02e76fbc90: mov byte ptr [rdi], 0x0  mem(1f4db70, ff000000010100) 
0x7f02e76fbc93: ret 
0x7f02e76f787c: lea rdi, ptr [rbx+0x458]  reg(3, 1f4db70) 
0x7f02e76f7883: call 0x7f02e76a4920
opendnp3::DeferredRequest::Reset()@plt: 1f4db80 0 7f02e7703b00 0	_ZN8opendnp315DeferredRequest5ResetEv@plt
0x7f02e76a4920: jmp qword ptr [rip+0x299aea]
0x7f02e76a4926: push 0x7f 
0x7f02e76a492b: jmp 0x7f02e76a4120
opendnp3::DeferredRequest::Reset(): 1f4db80 0 7f02e7703b00 0	_ZN8opendnp315DeferredRequest5ResetEv
0x7f02e76ef050: mov byte ptr [rdi], 0x0  mem(1f4db80, 101000000000000) 
0x7f02e76ef053: ret 
0x7f02e76f7888: lea rdi, ptr [rbx+0x70]  reg(3, 1f4db80) 
0x7f02e76f788c: call 0x7f02e76a6f60
opendnp3::EventBuffer::Unselect()@plt: 1f4d798 0 7f02e7703b00 0	_ZN8opendnp311EventBuffer8UnselectEv@plt
0x7f02e76a6f60: jmp qword ptr [rip+0x2987ca]
0x7f02e76a6f66: push 0x2e3 
0x7f02e76a6f6b: jmp 0x7f02e76a4120
opendnp3::EventBuffer::Unselect(): 1f4d798 0 7f02e7703b00 0	_ZN8opendnp311EventBuffer8UnselectEv
0x7f02e76f2560: add rdi, 0x20  reg(3, 1f4d798) 
0x7f02e76f2564: jmp 0x7f02e76a7710
opendnp3::EventStorage::Unselect()@plt: 1f4d7b8 0 7f02e7703b00 0	_ZN8opendnp312EventStorage8UnselectEv@plt
0x7f02e76a7710: jmp qword ptr [rip+0x2983f2]
0x7f02e76a7716: push 0x35e 
0x7f02e76a771b: jmp 0x7f02e76a4120
opendnp3::EventStorage::Unselect(): 1f4d7b8 0 7f02e7703b00 0	_ZN8opendnp312EventStorage8UnselectEv
0x7f02e76f5fe0: mov rax, qword ptr [rdi+0x8]  reg(10, 7f02e7940610) 
0x7f02e76f5fe4: test rax, rax  reg(10, 0)  reg(10, 0) 
0x7f02e76f5fe7: jz 0x7f02e76f6000
0x7f02e76f6000: pxor xmm0, xmm0
0x7f02e76f6004: movups xmmword ptr [rdi+0x44], xmm0
0x7f02e76f6008: ret 
0x7f02e76f7891: lea rdi, ptr [rbx+0x3e0]  reg(3, 1f4d7b8) 
0x7f02e76f7898: call 0x7f02e76a7860
opendnp3::ResponseContext::Reset()@plt: 1f4db08 0 7f02e7703b00 0	_ZN8opendnp315ResponseContext5ResetEv@plt
0x7f02e76a7860: jmp qword ptr [rip+0x29834a]
0x7f02e76a7866: push 0x373 
0x7f02e76a786b: jmp 0x7f02e76a4120
opendnp3::ResponseContext::Reset(): 1f4db08 0 7f02e7703b00 0	_ZN8opendnp315ResponseContext5ResetEv
0x7f02e76fbe10: xor eax, eax  reg(56, 0)  reg(56, 0) 
0x7f02e76fbe12: mov word ptr [rdi], ax  reg(29, 0)  mem(1f4db08, 0) 
0x7f02e76fbe15: ret 
0x7f02e76f789d: lea rdi, ptr [rbx+0x438]  reg(3, 1f4db08) 
0x7f02e76f78a4: call 0x7f02e76a50d0
openpal::TimerRef::Cancel()@plt: 1f4db60 0 7f02e7703b00 0	_ZN7openpal8TimerRef6CancelEv@plt
0x7f02e76a50d0: jmp qword ptr [rip+0x299712]
0x7f02e76f78a9: mov eax, ebp  reg(56, 1) 
0x7f02e76f78ab: jmp 0x7f02e76f7833
0x7f02e76f7833: mov rdx, qword ptr [rsp+0x8]  reg(8, 1f4beb0) 
0x7f02e76f7838: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76f7841: jnz 0x7f02e76f78d7
0x7f02e76f7847: add rsp, 0x18
0x7f02e76f784b: pop rbx  reg(7, 1f4d728) 
0x7f02e76f784c: pop rbp
0x7f02e76f784d: ret 
0x7f02e7703bd5: mov ebp, r12d
0x7f02e7703bd8: jmp 0x7f02e7703b47
0x7f02e7703b47: mov rcx, qword ptr [rsp+0x8]  reg(9, 0) 
0x7f02e7703b4c: xor rcx, qword ptr fs:[0x28]  reg(9, d533a0ca891b2d00) 
0x7f02e7703b55: mov eax, ebp  reg(56, 1) 
0x7f02e7703b57: jnz 0x7f02e7703c4f
0x7f02e7703b5d: add rsp, 0x18
0x7f02e7703b61: pop rbx  reg(7, 1f4d728) 
0x7f02e7703b62: pop rbp
0x7f02e7703b63: pop r12  reg(15, 1) 
0x7f02e7703b65: pop r13  reg(16, 7f02dc0008d8) 
0x7f02e7703b67: ret 
0x7f02e76bc4d8: mov eax, ebp  reg(56, 1) 
0x7f02e76bc4da: jmp 0x7f02e76bc436
0x7f02e76bc436: mov rdx, qword ptr [rsp+0x8]  reg(8, 0) 
0x7f02e76bc43b: xor rdx, qword ptr fs:[0x28]  reg(8, d533a0ca891b2d00) 
0x7f02e76bc444: jnz 0x7f02e76bc528
0x7f02e76bc44a: add rsp, 0x18
0x7f02e76bc44e: pop rbx  reg(7, 1f4e6d0) 
0x7f02e76bc44f: pop rbp
0x7f02e76bc450: ret 
opendnp3::LinkLayerParser::Reset(): 1f4cbc0 0 0 0	_ZN8opendnp315LinkLayerParser5ResetEv
0x7f02e76bef10: mov dword ptr [rdi+0x44], 0x0  mem(1f4cc04, 1900000000) 
0x7f02e76bef17: mov dword ptr [rdi+0x48], 0x0  mem(1f4cc08, 19) 
0x7f02e76bef1e: add rdi, 0x188  reg(3, 1f4cbc0) 
0x7f02e76bef25: jmp 0x7f02e76a5a20
opendnp3::ShiftableBuffer::Reset()@plt: 1f4cd48 0 0 0	_ZN8opendnp315ShiftableBuffer5ResetEv@plt
0x7f02e76a5a20: jmp qword ptr [rip+0x29926a]
opendnp3::ShiftableBuffer::Reset(): 1f4cd48 0 0 0	_ZN8opendnp315ShiftableBuffer5ResetEv
0x7f02e76c1120: mov dword ptr [rdi+0xc], 0x0  mem(1f4cd54, 0) 
0x7f02e76c1127: mov dword ptr [rdi+0x10], 0x0  mem(1f4cd58, 0) 
0x7f02e76c112e: ret 
asiodnp3::PrintingChannelListener::OnStateChange(opendnp3::ChannelState): 1f4c350 1 1f4cdd8 1f4ce10	_ZN8asiodnp323PrintingChannelListener13OnStateChangeEN8opendnp312ChannelStateE
0x4084a0: push rbp
0x4084a1: push rbx  reg(7, 1f4cae0) 
0x4084a2: mov edi, esi  reg(45, 1f4c350)  reg(47, 1) 
0x4084a4: sub rsp, 0x8
0x4084a8: call 0x406dd0
opendnp3::ChannelStateToString(opendnp3::ChannelState)@plt: 1 1 1f4cdd8 1f4ce10	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE@plt
0x406dd0: jmp qword ptr [rip+0x204302]
opendnp3::ChannelStateToString(opendnp3::ChannelState): 1 1 1f4cdd8 1f4ce10	_ZN8opendnp320ChannelStateToStringENS_12ChannelStateE
0x7f02e76b9ba0: cmp dil, 0x1  reg(46, 1) 
0x7f02e76b9ba4: lea rax, ptr [rip+0x528ce]  reg(10, 60abc8) 
0x7f02e76b9bab: jz 0x7f02e76b9bcc
0x7f02e76b9bcc: ret 
0x4084ad: mov rbx, qword ptr [rip+0x202b24]  reg(7, 1f4cae0) 
0x4084b4: lea rsi, ptr [rip+0xb15]  reg(4, 1) 
0x4084bb: mov rbp, rax
0x4084be: mov edx, 0x16  reg(54, 1f4cdd8) 
0x4084c3: mov rdi, rbx  reg(3, 1)  reg(7, 7f02e7406f40) 
0x4084c6: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 408fd0 16 1f4ce10	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084cb: test rbp, rbp
0x4084ce: jz 0x408550
0x4084d4: mov rdi, rbp  reg(3, 7f02dc000b56) 
0x4084d7: call 0x406cc0
strlen@plt: 7f02e770c479 0 7f02e7401988 206574617473206c	strlen@plt
0x406cc0: jmp qword ptr [rip+0x20438a]
0x4084dc: mov rsi, rbp  reg(4, 0) 
0x4084df: mov rdx, rax  reg(8, 1080)  reg(10, 7) 
0x4084e2: mov rdi, rbx  reg(3, 7f02e770c479)  reg(7, 7f02e7406f40) 
0x4084e5: call 0x406df0
std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt: 7f02e7406f40 7f02e770c479 7 479	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt
0x406df0: jmp qword ptr [rip+0x2042f2]
0x4084ea: mov rax, qword ptr [rbx]  reg(10, 7f02e7406f40) 
0x4084ed: mov rax, qword ptr [rax-0x18]  reg(10, 7f02e7401988) 
0x4084f1: mov rbp, qword ptr [rax+rbx*1+0xf0]
0x4084f9: test rbp, rbp
0x4084fc: jz 0x408567
0x4084fe: cmp byte ptr [rbp+0x38], 0x0  mem(7f02e74081f8, 605040302010001) 
0x408502: jz 0x408520
0x408504: movsx esi, byte ptr [rbp+0x43]  reg(47, 0) 
0x408508: mov rdi, rbx  reg(3, 7f02dc000b5d)  reg(7, 7f02e7406f40) 
0x40850b: call 0x406c60
std::ostream::put(char)@plt: 7f02e7406f40 a 7f02e7401988 474e494e	_ZNSo3putEc@plt
0x406c60: jmp qword ptr [rip+0x2043ba]
0x408510: add rsp, 0x8
0x408514: mov rdi, rax  reg(3, 0)  reg(10, 7f02e7406f40) 
0x408517: pop rbx  reg(7, 7f02e7406f40) 
0x408518: pop rbp
0x408519: jmp 0x406d00
std::ostream::flush()@plt: 7f02e7406f40 7f02e6e69780 7f02e7401988 0	_ZNSo5flushEv@plt
0x406d00: jmp qword ptr [rip+0x20436a]
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958540 7f02dc0011e8 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958540)  reg(3, 7f02e2958540) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958540, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958548, 7f0200000001) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc0011e8 7f02dc0011e8 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958590 7f02e2958540 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958590)  reg(3, 7f02e2958590) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958590, 7fffbc84834f) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958598, 7f02e29599c0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585e0 7f02e2958540 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e29585e0)  reg(3, 7f02e29585e0) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e29585e0, 7f02e2958650) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e29585e8, 1f4be80) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958630 7f02e2958590 2 7f02e76bc280	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958630)  reg(3, 7f02e2958630) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958630, 7f02e7df08e0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958638, 0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958680 7f02e29585e0 2 7f02e76bc280	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958680)  reg(3, 7f02e2958680) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958680, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958688, d533a0ca891b2d00) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001528 7f02e2958630 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02dc001528)  reg(3, 7f02dc001528) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02dc001528, 7f02dc000f40) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02dc001530, 74756f72206e776f) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001578 7f02e2958680 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02dc001578)  reg(3, 7f02dc001578) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02dc001578, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02dc001580, 0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958680 7f02e2958680 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958630 7f02e2958630 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585e0 7f02e29585e0 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958590 7f02e2958590 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958540 7f02e2958540 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958540 7f02dc001308 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958540)  reg(3, 7f02e2958540) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958540, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958548, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001308 7f02dc001308 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958590 7f02e2958540 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958590)  reg(3, 7f02e2958590) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958590, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958598, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585e0 7f02e2958540 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e29585e0)  reg(3, 7f02e29585e0) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e29585e0, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e29585e8, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958630 7f02e2958590 2 7f02e76f77b0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958630)  reg(3, 7f02e2958630) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958630, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958638, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958680 7f02e29585e0 2 7f02e76f77b0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958680)  reg(3, 7f02e2958680) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958680, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958688, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc0015f8 7f02e2958630 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02dc0015f8)  reg(3, 7f02dc0015f8) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02dc0015f8, 2030382032382030) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02dc001600, 110) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001648 7f02e2958680 2 7f02dc000020	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02dc001648)  reg(3, 7f02dc001648) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02dc001648, 3a534e552031203a) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02dc001650, 203a514553203120) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958680 7f02e2958680 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958630 7f02e2958630 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585e0 7f02e29585e0 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958590 7f02e2958590 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958540 7f02e2958540 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585d0 7f02dc001528 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e29585d0)  reg(3, 7f02e29585d0) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e29585d0, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e29585d8, 7f02dc0010c0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958620 7f02dc001578 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958620)  reg(3, 7f02e2958620) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958620, 0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958628, 7f02dc0010c0) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001578 7f02dc001578 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001528 7f02dc001528 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958490 7f02e2958620 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958490)  reg(3, 7f02e2958490) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958490, 7f02e6e68620) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958498, 7f02e6b1081f) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29584d0 7f02e2958490 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e29584d0)  reg(3, 7f02e29584d0) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e29584d0, 7f02e29584e0) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e29584d8, b) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958570 7f02e29584d0 2 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 2) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 2) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc28c: test rdi, rdi  reg(3, 7f02e2958570)  reg(3, 7f02e2958570) 
0x7f02e76bc28f: jz 0x7f02e76bc29f
0x7f02e76bc291: mov rax, qword ptr [rsi]  reg(10, 7f02e76bc280) 
0x7f02e76bc294: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76bc298: mov qword ptr [rdi], rax  reg(10, 1f4e8c0)  mem(7f02e2958570, 7d) 
0x7f02e76bc29b: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4e6d0)  mem(7f02e2958578, 7f02e7df08f8) 
0x7f02e76bc29f: xor eax, eax  reg(56, 1f4e8c0)  reg(56, 1f4e8c0) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958570 7f02e2958570 3 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29584d0 7f02e29584d0 3 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958490 7f02e2958490 3 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958620 7f02e2958620 3 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<bool openpal::TimerRef::Start<opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'()>(openpal::MonotonicTimestamp const&, opendnp3::LinkContext::StartKeepAliveTimer(openpal::MonotonicTimestamp const&)::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585d0 7f02e29585d0 3 7f02dc001140	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef5StartIZN8opendnp311LinkContext19StartKeepAliveTimerERKNS1_18MonotonicTimestampEEUlvE_EEbS8_RKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76bc280: cmp edx, 0x1  reg(54, 3) 
0x7f02e76bc283: jz 0x7f02e76bc2b8
0x7f02e76bc285: jb 0x7f02e76bc2a8
0x7f02e76bc287: cmp edx, 0x2  reg(54, 3) 
0x7f02e76bc28a: jnz 0x7f02e76bc29f
0x7f02e76bc29f: xor eax, eax  reg(56, 7f02e76bc280)  reg(56, 7f02e76bc280) 
0x7f02e76bc2a1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585d0 7f02dc0015f8 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e29585d0)  reg(3, 7f02e29585d0) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e29585d0, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e29585d8, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958620 7f02dc001648 2 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958620)  reg(3, 7f02e2958620) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958620, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958628, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc001648 7f02dc001648 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02dc0015f8 7f02dc0015f8 3 0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958490 7f02e2958620 2 7f02e29582a0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958490)  reg(3, 7f02e2958490) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958490, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958498, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29584d0 7f02e2958490 2 7f02e29582a0	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e29584d0)  reg(3, 7f02e29584d0) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e29584d0, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e29584d8, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958570 7f02e29584d0 2 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 2) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 2) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77bc: test rdi, rdi  reg(3, 7f02e2958570)  reg(3, 7f02e2958570) 
0x7f02e76f77bf: jz 0x7f02e76f77cf
0x7f02e76f77c1: mov rax, qword ptr [rsi]  reg(10, 7f02e76f77b0) 
0x7f02e76f77c4: mov rdx, qword ptr [rsi+0x8]  reg(8, 2) 
0x7f02e76f77c8: mov qword ptr [rdi], rax  reg(10, 1f4db60)  mem(7f02e2958570, 1f4e8c0) 
0x7f02e76f77cb: mov qword ptr [rdi+0x8], rdx  reg(8, 1f4d728)  mem(7f02e2958578, 1f4e6d0) 
0x7f02e76f77cf: xor eax, eax  reg(56, 1f4db60)  reg(56, 1f4db60) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958570 7f02e2958570 3 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29584d0 7f02e29584d0 3 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958490 7f02e2958490 3 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e2958620 7f02e2958620 3 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
std::_Function_base::_Base_manager<void openpal::TimerRef::Restart<opendnp3::OContext::RestartConfirmTimer()::'lambda'()>(openpal::TimeDuration const&, opendnp3::OContext::RestartConfirmTimer()::'lambda'() const&)::'lambda'()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): 7f02e29585d0 7f02e29585d0 3 7f02dc001260	_ZNSt14_Function_base13_Base_managerIZN7openpal8TimerRef7RestartIZN8opendnp38OContext19RestartConfirmTimerEvEUlvE_EEvRKNS1_12TimeDurationERKT_EUlvE_E10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation
0x7f02e76f77b0: cmp edx, 0x1  reg(54, 3) 
0x7f02e76f77b3: jz 0x7f02e76f77e8
0x7f02e76f77b5: jb 0x7f02e76f77d8
0x7f02e76f77b7: cmp edx, 0x2  reg(54, 3) 
0x7f02e76f77ba: jnz 0x7f02e76f77cf
0x7f02e76f77cf: xor eax, eax  reg(56, 7f02e76f77b0)  reg(56, 7f02e76f77b0) 
0x7f02e76f77d1: ret 
